2019-09-13 09:06:12	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined #go-nuts
2019-09-13 09:06:12	--	Topic for #go-nuts is "golang.org | known issues: golang.org/issue | https://freenode.logbot.info/go-nuts | don't ask to ask, just ask | don't solve problems you don't have | did you check your errors?"
2019-09-13 09:06:12	--	Topic set by skelterjohn (sid13218@gateway/web/irccloud.com/x-gfctwrngwpjcjgtp) on Tue, 18 Jun 2019 19:13:21
2019-09-13 09:06:12	--	Channel #go-nuts: 751 nicks (0 ops, 2 voices, 749 normals)
2019-09-13 09:06:12	--	PvNotice(ChanServ): Please follow the Go Community Code of Conduct when chatting here. See https://golang.org/conduct
2019-09-13 09:06:20	--	Channel created on Mon, 09 Nov 2009 19:22:37
2019-09-13 09:06:26	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined #go-nuts
2019-09-13 09:09:54	-->	chunkhang (~chunkhang@202.185.53.136) has joined #go-nuts
2019-09-13 09:10:40	-->	rif (~rif@95.76.93.100) has joined #go-nuts
2019-09-13 09:14:22	<--	chunkhang (~chunkhang@202.185.53.136) has quit (Ping timeout: 246 seconds)
2019-09-13 09:18:08	-->	AgTh (~b50c6@static-211-214-117-93.thenetworkfactory.nl) has joined #go-nuts
2019-09-13 09:18:13	-->	gaoyan (~gaoyan@122.115.228.174) has joined #go-nuts
2019-09-13 09:19:51	-->	drap3r (~drap3r@c-73-15-142-51.hsd1.ca.comcast.net) has joined #go-nuts
2019-09-13 09:23:06	<--	girafe (~girafe@lfbn-lyo-1-470-122.w2-7.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2019-09-13 09:24:10	<--	drap3r (~drap3r@c-73-15-142-51.hsd1.ca.comcast.net) has quit (Ping timeout: 246 seconds)
2019-09-13 09:24:16	-->	MindSpark (~Mind@port-212-202-242-74.static.qsc.de) has joined #go-nuts
2019-09-13 09:24:35	-->	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has joined #go-nuts
2019-09-13 09:28:43	-->	absolutejam1 (~absolutej@154.62.128.42) has joined #go-nuts
2019-09-13 09:29:15	-->	chunkhang (~chunkhang@202.186.97.62) has joined #go-nuts
2019-09-13 09:39:06	<--	kvda (~kvda@unaffiliated/kvda) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-09-13 09:39:35	<--	avoidr (~avoidr@pD9E05F05.dip0.t-ipconnect.de) has quit (Quit: leaving)
2019-09-13 09:42:32	-->	fixl (fixl@gateway/vpn/privateinternetaccess/fixl) has joined #go-nuts
2019-09-13 09:42:55	-->	karelb (cbcd3d12@203.205.61.18) has joined #go-nuts
2019-09-13 09:42:58	-->	floppydh (~floppydh@buro.mquadr.at) has joined #go-nuts
2019-09-13 09:43:50	-->	S4ren (~S4ren@2a00:23c6:318a:ed00:c480:ab26:eef8:5765) has joined #go-nuts
2019-09-13 09:44:43	karelb	Hey. Stupid question :)  is the go2 proposal for generics ("contracts") implemented somewhere, even as a toy version? :D  I would like to see how would it look in reality, and I saw some `go2` example codes in golang repo
2019-09-13 09:45:43	karelb	code like this
2019-09-13 09:45:43	karelb	https://go-review.googlesource.com/c/go/+/187317/5/src/go/types/examples/types.go2
2019-09-13 09:46:02	karelb	it looks that there is some examples, is it possible to use it? :D
2019-09-13 09:46:49	lavalike	karelb: I remember fitzpatrick mentioned rsc implemented a bunch of proposals (during a recent talk) but I don't think they're public
2019-09-13 09:47:02	karelb	Oh I am reading the comments here... it seems that it actually IS possible to build it and use it?
2019-09-13 09:47:02	karelb	https://go-review.googlesource.com/c/go/+/187317
2019-09-13 09:47:11	karelb	The git commit message
2019-09-13 09:47:25	lavalike	neat!
2019-09-13 09:50:32	karelb	updated in september... so it's also updated
2019-09-13 09:50:33	karelb	nice
2019-09-13 09:51:08	karelb	> git fetch "https://go.googlesource.com/go" ... && git cherry-pick FETCH_HEAD> (replace the ... with the respective information from Gerrit's CL page)
2019-09-13 09:51:27	karelb	any idea where to take the information? I don't understand gerrit
2019-09-13 09:54:46	<--	karelb (cbcd3d12@203.205.61.18) has quit (Remote host closed the connection)
2019-09-13 09:54:54	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 09:55:31	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 10:02:58	-->	jlebrech (~jlebrech@5.2.197.53) has joined #go-nuts
2019-09-13 10:09:56	jjhoo	checking "download" button would have helped
2019-09-13 10:11:12	<--	rif (~rif@95.76.93.100) has quit (Quit: WeeChat 2.6)
2019-09-13 10:11:23	 *	b0nn also dislikes gerrit
2019-09-13 10:11:37	b0nn	and didn't see the download 'button' until I did a search
2019-09-13 10:14:21	bpalmer	I think gerrit looks easier to use than github
2019-09-13 10:15:04	-->	JeffJohnson (~fho@unaffiliated/jeffjohnson) has joined #go-nuts
2019-09-13 10:15:15	-->	rif (~rif@95.76.93.100) has joined #go-nuts
2019-09-13 10:15:48	-->	lluad (~lluad@217.173.105.122) has joined #go-nuts
2019-09-13 10:17:00	b0nn	I've struggled with gerrit, it's used for another project I have dealt with
2019-09-13 10:17:16	b0nn	IIRC is squashes commits too, which is especially ugly
2019-09-13 10:27:16	-->	julio_ (~julio@243-213-190-109.dsl.ovh.fr) has joined #go-nuts
2019-09-13 10:30:49	jjhoo	I don't remember that squashing being automatic
2019-09-13 10:32:39	<--	rabbitear_g (~rabbitear@gateway/tor-sasl/rabbitearg/x-03735317) has quit (Ping timeout: 260 seconds)
2019-09-13 10:38:36	-->	rabbitear_g (~rabbitear@gateway/tor-sasl/rabbitearg/x-03735317) has joined #go-nuts
2019-09-13 10:40:54	-->	royal_screwup21 (5661e695@gateway/web/cgi-irc/kiwiirc.com/ip.86.97.230.149) has joined #go-nuts
2019-09-13 10:45:10	-->	wondiws (~Jasper@D57C89AA.static.ziggozakelijk.nl) has joined #go-nuts
2019-09-13 10:46:19	wondiws	what is the simplest way to just fmt.Printf the contents of a text file?
2019-09-13 10:48:29	-->	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has joined #go-nuts
2019-09-13 10:51:49	KirkMcDonald	Perhaps os.Open() the file and then io.Copy(os.Stdout, f)
2019-09-13 10:53:26	lavalike	excellent way
2019-09-13 10:53:54	-->	karakedi (~eAC53C340@unaffiliated/orphan) has joined #go-nuts
2019-09-13 10:56:58	wondiws	KirkMcDonald, thanks, looks elegant, and ofcourse it works
2019-09-13 11:04:36	<--	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has quit (Quit: marcuskwan)
2019-09-13 11:08:13	<--	AgTh (~b50c6@static-211-214-117-93.thenetworkfactory.nl) has quit (Quit: leaving)
2019-09-13 11:13:21	-->	slaxor (~slaxor@i53875E28.versanet.de) has joined #go-nuts
2019-09-13 11:15:17	-->	__alex (~alex@217.110.54.179) has joined #go-nuts
2019-09-13 11:17:58	<--	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has quit (Remote host closed the connection)
2019-09-13 11:19:04	<--	S4ren (~S4ren@2a00:23c6:318a:ed00:c480:ab26:eef8:5765) has quit (Ping timeout: 276 seconds)
2019-09-13 11:19:43	<--	rif (~rif@95.76.93.100) has quit (Ping timeout: 276 seconds)
2019-09-13 11:20:29	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined #go-nuts
2019-09-13 11:20:49	<--	imm_ (~imm_@unaffiliated/imm/x-7821412) has quit (Ping timeout: 240 seconds)
2019-09-13 11:22:47	<--	tomterl (~tomterl@p200300DE8F09E800021132FFFE1C4362.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-09-13 11:24:55	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 11:25:15	<--	jcajka (jcajka@nat/redhat/x-xpnacxmktimxacos) has quit (Ping timeout: 265 seconds)
2019-09-13 11:28:36	-->	tomterl (~tomterl@p200300DE8F255700021132FFFE1C4362.dip0.t-ipconnect.de) has joined #go-nuts
2019-09-13 11:34:44	-->	doped_dude (~doped_dud@72.163.220.3) has joined #go-nuts
2019-09-13 11:35:11	<--	doped_dude (~doped_dud@72.163.220.3) has left #go-nuts
2019-09-13 11:35:14	-->	doped_dude (~doped_dud@72.163.220.3) has joined #go-nuts
2019-09-13 11:35:33	<--	doped_dude (~doped_dud@72.163.220.3) has quit (Client Quit)
2019-09-13 11:35:57	-->	doped_dude (~doped_dud@72.163.220.3) has joined #go-nuts
2019-09-13 11:41:01	<--	chargen (~chargen@2a02:2e02:9ee0:7100:343b:b6cc:4bca:9d3d) has quit (Ping timeout: 246 seconds)
2019-09-13 11:41:35	-->	rif (~rif@95.76.93.100) has joined #go-nuts
2019-09-13 11:42:16	-->	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has joined #go-nuts
2019-09-13 11:42:40	-->	chargen (~chargen@2a02:2e02:9ee0:7100:343b:b6cc:4bca:9d3d) has joined #go-nuts
2019-09-13 11:45:42	<--	cisco87 (~cisco87@185.128.27.155) has quit (Ping timeout: 245 seconds)
2019-09-13 11:45:54	-->	cisco87- (~cisco87@185.128.27.155) has joined #go-nuts
2019-09-13 11:50:03	<--	gaoyan (~gaoyan@122.115.228.174) has quit (Quit: gaoyan)
2019-09-13 11:53:46	<--	slaxor (~slaxor@i53875E28.versanet.de) has quit (Ping timeout: 265 seconds)
2019-09-13 11:55:57	-->	imm_ (~imm_@unaffiliated/imm/x-7821412) has joined #go-nuts
2019-09-13 11:57:36	<--	positivka (~positivka@host-178-216-91-25.sta.tvknaszapraca.pl) has quit (Quit: WeeChat 2.2)
2019-09-13 11:59:09	-->	saml_ (~saml@unaffiliated/saml) has joined #go-nuts
2019-09-13 12:03:37	<--	_toString (~textual@2001:67c:27ac:1d::1:667c) has quit (Ping timeout: 245 seconds)
2019-09-13 12:05:34	-->	_toString (~textual@2001:67c:27ac:1d::1:667c) has joined #go-nuts
2019-09-13 12:08:21	wondiws	how do I get two characters per byte with hex output in printf?
2019-09-13 12:09:01	sztanpet	https://golang.org/pkg/encoding/hex/#EncodeToString
2019-09-13 12:09:31	<--	saml_ (~saml@unaffiliated/saml) has quit (Remote host closed the connection)
2019-09-13 12:09:37	sztanpet	and of course https://golang.org/pkg/fmt/#hdr-Printing
2019-09-13 12:12:22	<--	tomterl (~tomterl@p200300DE8F255700021132FFFE1C4362.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-09-13 12:15:18	wondiws	sztanpet, yes, %x, but it still gives me 1 byte when the value is < 16
2019-09-13 12:15:39	sztanpet	sure, thus my first link
2019-09-13 12:16:11	-->	velco (velco@nat/arm/x-jswvberkbzfqdkcr) has joined #go-nuts
2019-09-13 12:16:24	wondiws	sztanpet, that won't work, because it's an md5 hash, and it won't accept [16]byte as type :S
2019-09-13 12:16:45	wondiws	there's got to be a way to pad it with zero's, right?!
2019-09-13 12:17:37	sztanpet	also, how come you see %x printing 1 byte?
2019-09-13 12:18:24	<--	jlebrech (~jlebrech@5.2.197.53) has quit (Remote host closed the connection)
2019-09-13 12:18:29	siXy	I am not able to reproduce your issue.  Could you provide an example?
2019-09-13 12:18:30	wondiws	sztanpet, that's what I'm asking you :P
2019-09-13 12:18:54	sztanpet	wondiws i fear there are some basic language issues here, please show some code where its wrong
2019-09-13 12:19:05	siXy	wondiws: https://play.golang.org/p/0oCzYTwZYkT - note the 2 character output ;)
2019-09-13 12:19:07	-->	tomterl (~tomterl@p200300DE8F265800021132FFFE1C4362.dip0.t-ipconnect.de) has joined #go-nuts
2019-09-13 12:20:32	wondiws	for me it's not a slice anymore as I loop through the 16 bytes, and then print the individual bytes, I suppose that's the problem
2019-09-13 12:20:35	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 246 seconds)
2019-09-13 12:20:48	sztanpet	https://play.golang.org/p/gtiHRtyN3nG
2019-09-13 12:20:54	-->	laudecay (~tester@tjctf/organizer/laudiacay) has joined #go-nuts
2019-09-13 12:21:42	wondiws	thank you all, I think I got it now
2019-09-13 12:24:27	siXy	https://play.golang.org/p/VmXer1WaUPq -- I'd not actually ever noticed that %x did this with byte input. I wonder why - at first glance it seems wierdly inconsistent
2019-09-13 12:25:52	wondiws	siXy, my thoughts exactly
2019-09-13 12:25:52	<--	nanoz (~nanoz@unaffiliated/nanoz) has quit (Read error: Connection reset by peer)
2019-09-13 12:25:52	<--	laudecay (~tester@tjctf/organizer/laudiacay) has quit (Ping timeout: 246 seconds)
2019-09-13 12:25:52	sztanpet	https://play.golang.org/p/r2HV1j_B3fK
2019-09-13 12:26:13	sztanpet	it is weird, but i guess its too late now
2019-09-13 12:27:19	siXy	wondiws: https://play.golang.org/p/7imtW2fBx7F is what I'd do
2019-09-13 12:27:36	siXy	Oh actually no, sztanpet's is better.
2019-09-13 12:28:00	-->	HollyRain (~HollyRain@81.red-83-35-235.dynamicip.rima-tde.net) has joined #go-nuts
2019-09-13 12:28:17	<--	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has quit (Quit: marcuskwan)
2019-09-13 12:29:10	sztanpet	i guess it makes sense though, there is a way to make the output a specific width, so the default should be a single char, but i guess when printing a slice it gets harder
2019-09-13 12:30:17	<--	HollyRain (~HollyRain@81.red-83-35-235.dynamicip.rima-tde.net) has quit (Client Quit)
2019-09-13 12:30:23	stefanc_diff	Does the go stdlib x/crypto/ssh lib support running commands via jumphost ? (aka go_client ==(open_ssh_conn)==> jumphost ==(open_ssh_conn_and_run_cmd)==> internal_net_target_host)
2019-09-13 12:31:09	sztanpet	whats jumphost? a separate binary that has to be run?
2019-09-13 12:31:52	stefanc_diff	another remote computer == jumphost  ( man ssh => -J for jump host )
2019-09-13 12:31:52	siXy	sztanpet: as in a bastion server I suspect.
2019-09-13 12:31:59	stefanc_diff	yes a bastion
2019-09-13 12:32:48	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined #go-nuts
2019-09-13 12:32:53	sztanpet	i would be impressed and surprised if it was, since its just another connection endpoint
2019-09-13 12:32:57	siXy	stefanc_diff: Have you looked at this? https://stackoverflow.com/questions/35906991/go-x-crypto-ssh-how-to-establish-ssh-connection-to-private-instance-over-a-ba
2019-09-13 12:33:16	siXy	That's how I'd solve it, certainly.
2019-09-13 12:33:45	stefanc_diff	siXy: I've not managed to stumble upon this stackoverflow in my web searches, let me read it
2019-09-13 12:36:21	stefanc_diff	that seems like what I'm after , thanks again siXy , I've been searching quite a bit for this, my search terms must have been a bit off
2019-09-13 12:37:59	sztanpet	yea, this doesnt need to be supported explicitly if its that easy to do by yourself
2019-09-13 12:38:41	siXy	I can't recall anything in the ssh rfc that supports this directly, so my suspicion is that this is what openssh does under the hood too
2019-09-13 12:42:30	Habbie	siXy, the ssh manpage confirms that
2019-09-13 12:46:30	-->	gnufied (~gnufied@75-44-151-71.lightspeed.tukrga.sbcglobal.net) has joined #go-nuts
2019-09-13 12:49:11	-->	stmuk (~steve@15.43.187.81.in-addr.arpa) has joined #go-nuts
2019-09-13 12:49:13	<--	stmuk_ (~steve@15.43.187.81.in-addr.arpa) has quit (Ping timeout: 240 seconds)
2019-09-13 12:50:57	<--	marmotini_ (~marmotini@197.237.11.100) has quit (Quit: Leaving)
2019-09-13 12:51:31	-->	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has joined #go-nuts
2019-09-13 12:54:10	<--	plutoniix (~q@175.176.222.7) has quit (Quit: Leaving)
2019-09-13 12:54:42	stefanc_diff	for me, reading just the go ssh x/crypto/ssh docs it wasn't clear that what I'd need to do was to create a 2nd "virtual" conn on top of the bastion conn. I guess the go ssh pkg needs better docs.
2019-09-13 12:55:40	-->	progart (~kamee@188.115.226.25) has joined #go-nuts
2019-09-13 12:58:22	-->	user9 (984d0e22@leoseb.u-ga.fr) has joined #go-nuts
2019-09-13 13:00:49	<--	absolutejam1 (~absolutej@154.62.128.42) has quit (Ping timeout: 246 seconds)
2019-09-13 13:03:31	-->	AgTh (~b50c6@static-211-214-117-93.thenetworkfactory.nl) has joined #go-nuts
2019-09-13 13:05:47	sztanpet	not really, you thought jumphost functionality is a protocol thing seemingly, and it isnt, it just composes existing functionality
2019-09-13 13:08:25	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined #go-nuts
2019-09-13 13:13:04	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 13:14:27	<--	progart (~kamee@188.115.226.25) has quit (Quit: Leaving.)
2019-09-13 13:27:37	<--	chunkhang (~chunkhang@202.186.97.62) has quit (Quit: Goodbye world)
2019-09-13 13:32:52	-->	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has joined #go-nuts
2019-09-13 13:38:58	<--	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has quit (Ping timeout: 246 seconds)
2019-09-13 13:47:50	-->	absolutejam1 (~absolutej@154.62.128.42) has joined #go-nuts
2019-09-13 13:49:24	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 13:49:42	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 13:50:32	-->	abiscuola (~abiscuola@176.9.150.19) has joined #go-nuts
2019-09-13 13:52:40	<--	absolutejam1 (~absolutej@154.62.128.42) has quit (Ping timeout: 265 seconds)
2019-09-13 13:53:37	-->	cstls (~guy@2604:6000:9ec2:1000::a) has joined #go-nuts
2019-09-13 13:53:37	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 13:54:23	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 14:01:04	<--	cstls (~guy@2604:6000:9ec2:1000::a) has quit (Quit: WeeChat 2.3)
2019-09-13 14:08:35	<--	freshpassport (~freshpass@103.49.135.253) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-09-13 14:16:08	-->	antsmartian (~antsmarti@122.164.175.38) has joined #go-nuts
2019-09-13 14:17:41	-->	jcajka (~jcajka@ip-78-45-65-107.net.upcbroadband.cz) has joined #go-nuts
2019-09-13 14:21:22	-->	jlebrech (~jlebrech@5.2.197.53) has joined #go-nuts
2019-09-13 14:21:35	-->	sbanwart (~sbanwart@192.182.255.2) has joined #go-nuts
2019-09-13 14:26:01	Stealthy	https://play.golang.org/p/Dn1vB4f_Hbl
2019-09-13 14:26:05	Stealthy	any faster approach?
2019-09-13 14:26:33	Stealthy	ignore the sprint in s print lol
2019-09-13 14:27:58	<--	kajo (~kajo@2001:4c50:371d:dc00:ca2a:14ff:fe0f:7dd1) has quit (Ping timeout: 246 seconds)
2019-09-13 14:28:49	Stealthy	https://play.golang.org/p/jrt41LFn1LY
2019-09-13 14:29:05	-->	positivka (~positivka@host-178-216-91-25.sta.tvknaszapraca.pl) has joined #go-nuts
2019-09-13 14:29:06	A_D	what are you trying to do? generate a sequence?
2019-09-13 14:29:36	A_D	thats probably the cleanest way I could come up, I question the use of bigint
2019-09-13 14:29:38	lluad	Counting down from 2^256 1 at a time is never going to be fast, not least because the universe will collapse before it's done.
2019-09-13 14:29:44	A_D	^
2019-09-13 14:29:53	A_D	and that print will slow it down a LOT
2019-09-13 14:29:53	lluad	What're you trying to do?
2019-09-13 14:30:06	A_D	if you're just outputting numbers, use strconv
2019-09-13 14:30:12	-->	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has joined #go-nuts
2019-09-13 14:30:25	Stealthy	the print will begone its for my own information atm lol and yea it will be relatively slow but is there a way to come to the same result quicker than bigint/sub
2019-09-13 14:30:35	A_D	Why are you using bigint
2019-09-13 14:30:40	A_D	what are you trying to do
2019-09-13 14:30:45	Stealthy	because of the monstrous 0xffffffffffffffffffffffffffffffffffffffffffff start
2019-09-13 14:30:48	 *	A_D glares at the xy problem
2019-09-13 14:31:03	lluad	Much X Very Y.
2019-09-13 14:31:05	Stealthy	i need to decrease 1 in a loop as fast a possible
2019-09-13 14:31:10	A_D	yes
2019-09-13 14:31:14	lluad	... why?
2019-09-13 14:31:16	A_D	^
2019-09-13 14:31:21	A_D	tell us your problem
2019-09-13 14:31:28	A_D	don't show us your solution and ask us to make it faster
2019-09-13 14:31:35	Stealthy	man you guys are just nosy :P
2019-09-13 14:31:38	A_D	...no
2019-09-13 14:31:43	A_D	we're attempting to assist you
2019-09-13 14:31:47	Stealthy	well then:
2019-09-13 14:31:59	-->	Guest0193 (~martin@185.32.9.250) has joined #go-nuts
2019-09-13 14:32:04	Stealthy	i want to loop over every possible 'sha256 has' starting at highest to bottom
2019-09-13 14:32:04	A_D	http://xyproblem.info/ <--
2019-09-13 14:32:12	A_D	so generate a string
2019-09-13 14:32:15	-->	DesertRock (~Desert@65.129.137.18) has joined #go-nuts
2019-09-13 14:32:17	A_D	don't do it with a number
2019-09-13 14:32:20	A_D	or alternatively
2019-09-13 14:32:24	lluad	Stealthy,You can't do that, not in this universe.
2019-09-13 14:32:27	A_D	tell us what kind of hash you're trying to break
2019-09-13 14:32:44	jlebrech	does go store o files anywhere?
2019-09-13 14:32:48	Stealthy	it's a hash chain
2019-09-13 14:32:48	Guest0193	Hey, anyone have experience with the golang-socketio lib? Having some issues with ordering of events. We recieve events in a particular order on the same millisecond, but the module outputs them in random order. Thinking it is a race condition of sort causing this behaviour.
2019-09-13 14:32:54	A_D	jlebrech: only if you tell it to
2019-09-13 14:32:57	A_D	see go help build
2019-09-13 14:33:07	A_D	breaking hashes by brute force is a recipe for disaster
2019-09-13 14:33:08	-->	arahael2 (~arahael@194-193-220-173.tpgi.com.au) has joined #go-nuts
2019-09-13 14:33:11	A_D	in fact
2019-09-13 14:33:14	siXy	Stealthy: Nothing you write will come even slightly close to oclhashcat for performance.
2019-09-13 14:33:16	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Remote host closed the connection)
2019-09-13 14:33:23	siXy	Stealthy: Just use that, instead.
2019-09-13 14:33:26	Stealthy	jlebrech storing them would be even more retarded; i filled a 5tb harddisk and all my ram in moments before lol
2019-09-13 14:33:27	A_D	cryptocurrencies use just that to make things take a while
2019-09-13 14:33:41	A_D	Stealthy: their question was unrelated
2019-09-13 14:34:06	<--	fjellfras (~fjellfras@223.229.235.29) has quit (Quit: Leaving)
2019-09-13 14:34:06	jlebrech	yes unrelated question about building in go
2019-09-13 14:34:09	Stealthy	i've considered cuda but i dont want to go too low level simply because im not clever enough
2019-09-13 14:34:22	A_D	did my answer satisfy you or do you want me to elaborate, jlebrech
2019-09-13 14:34:27	A_D	its in the build args
2019-09-13 14:34:31	A_D	for the compiler
2019-09-13 14:34:40	A_D	you can have it output objects, asm, just about any step you want
2019-09-13 14:34:43	<--	arahael1 (~arahael@194-193-203-245.tpgi.com.au) has quit (Ping timeout: 265 seconds)
2019-09-13 14:34:46	Stealthy	so lets not get sidetracked :P is the string and operator approach provided by math/big the quickest or are there faster approaches
2019-09-13 14:34:54	A_D	Stealthy: Hashes are designed to be difficult to reverse.
2019-09-13 14:35:06	jlebrech	A_D nice
2019-09-13 14:35:07	A_D	You're asking a question, that if it had a simple answer, would break a lot of things
2019-09-13 14:35:17	Stealthy	im not asking for new solution
2019-09-13 14:35:28	A_D	especially large hashes like sha256
2019-09-13 14:35:29	Stealthy	but for a different approach to work with a large number and subtracting quicker
2019-09-13 14:35:37	Stealthy	thats why i didnt want to go into irrelevant details :p
2019-09-13 14:35:40	A_D	Start by not using bigint.
2019-09-13 14:35:54	A_D	Then parallelise.
2019-09-13 14:36:07	A_D	But again
2019-09-13 14:36:08	lluad	Stealthy there are faster approaches. None of them are usefully faster. Assume yuor CPU is slower than 10Ghz, so can't do more than 10^10 operations a second. Do the arithmetic to see how long it'll take to do 2^256 operations.
2019-09-13 14:36:08	siXy	A_D: You're overstating the case a bit. A good implementation on a recent GPU can do over 5000 million sha256 hashes per second, which is plenty to make bruteforcing a reasonable search space affordable.
2019-09-13 14:36:30	A_D	siXy: I'm assuming they want to brute all of it
2019-09-13 14:36:35	A_D	given their proposed code
2019-09-13 14:36:41	siXy	Stealthy: Again, you are not going to be able to do this. You can't crack hashes on CPUs usefully.
2019-09-13 14:36:52	Stealthy	if you want to go the cuda route then good luck there is no quick sha256 library you can abuse
2019-09-13 14:36:57	siXy	Stealthy: Download and use oclhashcat. Solved.
2019-09-13 14:37:05	Stealthy	i know that its practically impossible
2019-09-13 14:37:14	A_D	again
2019-09-13 14:37:24	A_D	parallel, don't use bigint
2019-09-13 14:37:29	A_D	those are your two speedups
2019-09-13 14:37:41	Stealthy	you're referring to the bigint i pass in the sub?
2019-09-13 14:37:45	Stealthy	or in general
2019-09-13 14:37:49	A_D	in general
2019-09-13 14:37:55	A_D	doing math on huge numbers is slow
2019-09-13 14:37:57	<--	epony (epony@unaffiliated/epony) has quit (Ping timeout: 245 seconds)
2019-09-13 14:38:27	A_D	you do not need to do math for this, not at that level
2019-09-13 14:38:48	Stealthy	i suppose i could use 4, 64 bit ints
2019-09-13 14:38:54	A_D	write a string generator, or hell, use a byte array and do math on each byte individually
2019-09-13 14:39:01	Stealthy	but that means i need to try and use my brain to write the loops
2019-09-13 14:39:02	<--	wondiws (~Jasper@D57C89AA.static.ziggozakelijk.nl) has quit (Quit: Leaving)
2019-09-13 14:39:05	A_D	both will be substantially faster.
2019-09-13 14:39:15	A_D	well the string may not be
2019-09-13 14:39:18	<--	DesertRock (~Desert@65.129.137.18) has quit (Quit: Quit)
2019-09-13 14:39:22	A_D	But again
2019-09-13 14:39:28	A_D	this is an impossible task
2019-09-13 14:39:36	A_D	its designed to be impossible
2019-09-13 14:40:47	Stealthy	thought about going the byte array route too
2019-09-13 14:40:55	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 246 seconds)
2019-09-13 14:41:09	Stealthy	just that im too stupid to figure out the logic/loops so going for easy solutions first lol
2019-09-13 14:41:26	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined #go-nuts
2019-09-13 14:41:29	A_D	hell writing code to brute hashes even with a known space for the hash can take forever on conventional CPUs, trust me, I've tried.
2019-09-13 14:41:46	Stealthy	the key is a hash intself
2019-09-13 14:41:57	A_D	okay again
2019-09-13 14:42:01	Stealthy	so could be 000000000... or fffffff.....
2019-09-13 14:42:02	-->	DesertRock (~Desert@65.129.137.18) has joined #go-nuts
2019-09-13 14:42:03	A_D	stop hiding what you're trying to do
2019-09-13 14:42:10	A_D	tell me the whole problem
2019-09-13 14:42:11	Stealthy	i'm not hiding it said it all lol
2019-09-13 14:42:21	A_D	What hash are you trying to break?
2019-09-13 14:42:59	siXy	Stealthy: What will you be able to do if you successfully achieve this? Is a collision enough? Do you need the original plain text? Why?
2019-09-13 14:43:10	Stealthy	a collision would be enough
2019-09-13 14:43:15	Stealthy	it's a hash chain
2019-09-13 14:43:23	Stealthy	where every next item is the product of a hash with itself
2019-09-13 14:43:50	A_D	so, you're taking an impossible task, and compounding it
2019-09-13 14:43:50	A_D	got it
2019-09-13 14:43:56	Stealthy	yup
2019-09-13 14:44:04	<--	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has quit (Ping timeout: 246 seconds)
2019-09-13 14:44:20	Stealthy	i know for a fact that the chain size is x million items too]
2019-09-13 14:44:20	siXy	Stealthy: What was the orignal plain text at the start of all these chains of hashes?
2019-09-13 14:44:21	A_D	your solution is: Don't bother, it'll never happen without a quantum computer, and even then, it'll take years"
2019-09-13 14:44:34	Stealthy	so for every starting 'key hash' i'd need to iterate x million times to produce a chain
2019-09-13 14:44:41	Stealthy	and compare for a known hash
2019-09-13 14:44:52	A_D	attack another part of the system
2019-09-13 14:46:04	Stealthy	siXy the original plain text is the master key and unknown
2019-09-13 14:46:10	A_D	okay wait
2019-09-13 14:46:16	A_D	are you trying to extract the plain text?
2019-09-13 14:46:30	Stealthy	hehe, lets see if i can make it even more clear
2019-09-13 14:46:35	A_D	because its a hash. they're inherently lossy.
2019-09-13 14:46:57	A_D	You havent actually clarified your actual target, you've clarified what you're attempting to do, but not the actual problem you want to solve.
2019-09-13 14:47:03	Stealthy	there is a master hash; then the subsequent hashes are the result of a hash to itself; there are 10 million of those;
2019-09-13 14:47:32	siXy	Stealthy: The master key to what? Is there a limited maximum length?
2019-09-13 14:47:44	A_D	siXy: sounds like a key lengthening password type idea
2019-09-13 14:47:44	Stealthy	suppose you are given two or more of those subsequent hashes, you can compare the validity of the subsequent hash by hashing the new one
2019-09-13 14:47:46	A_D	to me, anyway
2019-09-13 14:47:55	Stealthy	the concept is called a hash chain, like a block chain but not
2019-09-13 14:48:33	siXy	Stealthy: We know the concept.  This is trivial stuff - most linux machines use the same system for password hashes.
2019-09-13 14:48:52	Stealthy	i'm trying to clarify for those who dont
2019-09-13 14:48:58	siXy	What we don't know - because you won't tell us - is how big the search space is, which is the critical thing we need to know.
2019-09-13 14:49:00	-->	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has joined #go-nuts
2019-09-13 14:49:02	A_D	^
2019-09-13 14:49:08	Stealthy	i already said that too
2019-09-13 14:49:11	A_D	we need to know that to tell you if there's a better way.
2019-09-13 14:49:16	A_D	because you will NEVER get this done
2019-09-13 14:49:21	A_D	the sun will explode
2019-09-13 14:49:22	Stealthy	the original is a hash too
2019-09-13 14:49:23	A_D	before this happens
2019-09-13 14:49:35	Stealthy	which is random but regardless.. it's 512 bits too
2019-09-13 14:49:38	A_D	you will be a billion years dead before you could get this with a CPU
2019-09-13 14:49:44	Stealthy	and can be either 0x00... up to 0xff...
2019-09-13 14:50:08	Stealthy	ugh
2019-09-13 14:50:12	Stealthy	i know all that
2019-09-13 14:50:17	siXy	if the original is a 256byte hash, you'll never achieve what you want, even if you threw away your code and did it properly.
2019-09-13 14:50:19	A_D	then why are you bothering?
2019-09-13 14:50:20	Stealthy	i've ran plenty tests in different languages
2019-09-13 14:50:29	A_D	you're not getting it
2019-09-13 14:50:33	A_D	the CPU is NOT fast enough
2019-09-13 14:50:33	Stealthy	i'm bothering for the learning / comparing aspect of it
2019-09-13 14:50:41	Stealthy	god damn it. i know the cpu is not fast enough
2019-09-13 14:50:42	A_D	then use four int64s
2019-09-13 14:50:48	A_D	if you want to learn, use that
2019-09-13 14:51:01	A_D	and don't print things
2019-09-13 14:51:16	A_D	not if you want things to be quick
2019-09-13 14:51:21	siXy	Stealthy: If you want to learn how to write more efficient code start by reading https://blog.golang.org/profiling-go-programs
2019-09-13 14:51:26	Stealthy	is there are a proper way to time elapsed without being too much of an impact performance wise
2019-09-13 14:51:36	A_D	Yes. use time.time.
2019-09-13 14:51:39	A_D	printing is SLOW
2019-09-13 14:51:45	A_D	horridly slow
2019-09-13 14:51:53	Stealthy	ya
2019-09-13 14:52:07	Stealthy	only reason a print was in there was to see/show
2019-09-13 14:52:11	Stealthy	it'll be gone from the logic
2019-09-13 14:52:43	Stealthy	thanks siXy will use profiling for sure
2019-09-13 14:53:15	Stealthy	coffee almost finished then i'll come up with a 4x int64 approach
2019-09-13 14:53:36	A_D	for printing, look at the select in line 127 here: https://paste.ubuntu.com/p/Rbdkx5YqM5/
2019-09-13 14:53:51	siXy	(side note: my figures were apparently out of date and current GPUs will do about 7.5 billion hashes per second, per GPU.
2019-09-13 14:54:02	A_D	7.5? fuck thats quick
2019-09-13 14:54:06	A_D	still not fast enough
2019-09-13 14:54:08	A_D	but still
2019-09-13 14:54:17	Stealthy	cuda is a b to work with
2019-09-13 14:54:19	-->	xkapastel (uid17782@gateway/web/irccloud.com/x-ccbxlkdvmnjrwuyv) has joined #go-nuts
2019-09-13 14:54:27	Stealthy	plus it would make it more complex paralellising the logic
2019-09-13 14:54:28	<--	antsmartian (~antsmarti@122.164.175.38) has quit (Remote host closed the connection)
2019-09-13 14:54:36	Stealthy	and exhcanging mem back and forth
2019-09-13 14:54:41	Stealthy	its more than my brain can handle
2019-09-13 14:55:28	Stealthy	i've read the cuda forum there is almost no useful info on it too
2019-09-13 14:56:04	Stealthy	and if then its so mathematical that it just hurts to figure out all their come up with symbols
2019-09-13 14:56:23	-->	bandit (~bandit@unaffiliated/bandit) has joined #go-nuts
2019-09-13 14:56:37	-->	antsmartian (~antsmarti@122.164.175.38) has joined #go-nuts
2019-09-13 14:57:35	A_D	anyway, as I linked, your best bet with printing is to do it on a timer and read numbers as you go
2019-09-13 14:57:48	Stealthy	yea
2019-09-13 14:57:49	<--	foxcpp (~foxcpp@foxcpp.dev) has quit (Quit: Looks like my relay decided to commit suicide)
2019-09-13 14:57:52	A_D	if its parallel it'll be racy, but that doesn't really matter
2019-09-13 14:58:02	A_D	also, that code, also never finished
2019-09-13 14:58:07	A_D	it never broke the key I wanted
2019-09-13 14:58:11	lluad	2^256 / 10^10 is still an interesting number that Stealthy should calculate or estimate
2019-09-13 14:58:28	A_D	just remember that you will probably never get there
2019-09-13 14:58:38	Stealthy	i can deal with basic math lol
2019-09-13 14:58:43	<--	Gasher (~gasher@178235180152.unknown.vectranet.pl) has quit (Remote host closed the connection)
2019-09-13 14:59:12	siXy	lluad: Isn't it 256^256 not 2^256?
2019-09-13 14:59:40	Stealthy	i already ran tests on memory and storage lol
2019-09-13 14:59:50	Stealthy	filled 5tb in a couple minutes
2019-09-13 14:59:57	Stealthy	memory in a second
2019-09-13 14:59:59	A_D	permutations is number of valid single digits ^ size, IIRC siXy
2019-09-13 15:00:22	Stealthy	10**64 possibilities
2019-09-13 15:00:24	lluad	SHA256 is a 256 bit / 32 byte hash. Given Stealthy's code had 64 hex digits, I'm assuming that's it.
2019-09-13 15:00:26	-->	pepee (~pepee@unaffiliated/pepee) has joined #go-nuts
2019-09-13 15:00:41	Stealthy	or 10pow64
2019-09-13 15:01:07	Stealthy	since its base 10 and 64 characters
2019-09-13 15:01:28	Stealthy	base 16*  so 16**64
2019-09-13 15:01:34	<--	antsmartian (~antsmarti@122.164.175.38) has quit (Ping timeout: 246 seconds)
2019-09-13 15:01:35	A_D	was gonna say
2019-09-13 15:01:41	A_D	but thats your string representation
2019-09-13 15:01:51	siXy	Oh yeah I was being brain dead, you're right. So with 2^256 options you'll only need 241531407980918539998437625172479199039794881740898280000000 GPUs to have a 50% chance of finding it in a year.
2019-09-13 15:02:02	siXy	Should be easy enough.
2019-09-13 15:02:11	Stealthy	hehe
2019-09-13 15:02:14	A_D	sure, just mine all the silicon in this solar system
2019-09-13 15:02:15	Stealthy	only if you know the 2nd item
2019-09-13 15:02:18	A_D	and the one next door
2019-09-13 15:02:24	Stealthy	but what if you only had a 5th millionth key
2019-09-13 15:02:25	Stealthy	;)
2019-09-13 15:02:35	A_D	no, thats to brute force every hash in 256
2019-09-13 15:02:36	siXy	Powering them would be an exciting engineering challenge, too.
2019-09-13 15:02:40	Stealthy	you would need to recreate a hash chain from an assumed master key
2019-09-13 15:02:48	A_D	oh well you destroyed the solar systems anyway siXy
2019-09-13 15:02:55	A_D	may as well dyson sphere the stars
2019-09-13 15:03:01	siXy	I'll have to move nextdoor at this rate
2019-09-13 15:03:10	Stealthy	so for every iteration of an assumed master key you'd need to generate a hash chain to see if it comes up with one of the known hashes
2019-09-13 15:03:35	Stealthy	that's 5 million of hashes for every iteration of a starting hash
2019-09-13 15:03:44	lluad	(2^256 ~= 10^75. There are ~ 10^8 seconds in a year. So at 10GHz it'd take ~ 10^65 seconds, or ~ 10^58 years to walk the entire space.
2019-09-13 15:03:48	Stealthy	i never had the illusion that i'll get the actual match
2019-09-13 15:04:28	Stealthy	thats a guestimate
2019-09-13 15:04:49	A_D	a very good one
2019-09-13 15:05:05	A_D	so at worst case a fuckton of time
2019-09-13 15:05:22	A_D	I'd cut that in half to get what it'll probably take
2019-09-13 15:05:23	Stealthy	if you want to go more specific i can tell you the fastest intel docs can produce a 512 bit hash in 10 cycles
2019-09-13 15:05:28	A_D	give or take a thousand years
2019-09-13 15:05:40	Stealthy	intel docs avx1 hashing algo for sha256
2019-09-13 15:05:49	Stealthy	lemme grab my phone i'll tell you the exact number
2019-09-13 15:05:53	A_D	still requires you doing the math to get there.
2019-09-13 15:06:02	A_D	and it requires the compiler to use those instructions
2019-09-13 15:06:22	Stealthy	i know
2019-09-13 15:06:30	Stealthy	but since people are obsessed over finding the magic number
2019-09-13 15:06:31	Stealthy	:P
2019-09-13 15:06:55	Stealthy	https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/sha-256-implementations-paper.pdf
2019-09-13 15:07:49	A_D	this also assumes you can feed it fast enough
2019-09-13 15:08:01	A_D	having a space shuttle is great, sucks if you can't fuel it
2019-09-13 15:08:49	Stealthy	you can easily keep L3 fed with 512 bits sustained lol
2019-09-13 15:09:18	A_D	Not if you have to calculate them
2019-09-13 15:09:19	<--	DesertRock (~Desert@65.129.137.18) has quit (Quit: Quit)
2019-09-13 15:09:37	Stealthy	every calculation gives you new 512 bits
2019-09-13 15:09:43	Stealthy	which is the input of the next iteration
2019-09-13 15:09:57	A_D	which you are assuming you can get done in fewer than 10 cycles
2019-09-13 15:10:08	Stealthy	yes
2019-09-13 15:10:16	A_D	which, if you use four int64s, requires at least... 3? branches?
2019-09-13 15:10:29	Stealthy	you're mixing HLL and asm now
2019-09-13 15:10:54	Stealthy	i'm sure you've heard of simd
2019-09-13 15:10:58	A_D	Just want you to be sure you can get it done faster
2019-09-13 15:11:06	A_D	yes I know how simd works
2019-09-13 15:11:07	<--	carl- (~carl-@144.63.247.11) has quit (Ping timeout: 276 seconds)
2019-09-13 15:11:15	A_D	well, I know the theory
2019-09-13 15:11:27	A_D	I don't have a degree in CPU design >.>
2019-09-13 15:12:29	--	arahael2 is now known as Arahael
2019-09-13 15:12:51	A_D	anyway, this is hypothetical
2019-09-13 15:12:55	Stealthy	yea
2019-09-13 15:13:10	A_D	maybe go steal a supercomputer
2019-09-13 15:13:32	A_D	or ten
2019-09-13 15:15:43	<--	AgTh (~b50c6@static-211-214-117-93.thenetworkfactory.nl) has quit (Quit: Lost terminal)
2019-09-13 15:16:00	<--	aceeri_ (uid202865@gateway/web/irccloud.com/x-eqbljouaeyqpqsrp) has quit (Quit: Connection closed for inactivity)
2019-09-13 15:17:58	-->	mrCyborg (~mrCyborg@188.166.118.15) has joined #go-nuts
2019-09-13 15:21:36	-->	skywlkr (~skywlkr@unaffiliated/skywlkr) has joined #go-nuts
2019-09-13 15:22:53	<--	nindustries (~nindustri@unaffiliated/nindustries) has quit (Remote host closed the connection)
2019-09-13 15:23:29	-->	nindustries (~nindustri@unaffiliated/nindustries) has joined #go-nuts
2019-09-13 15:23:40	<--	skywlkr (~skywlkr@unaffiliated/skywlkr) has quit (Client Quit)
2019-09-13 15:23:41	A_D	oh I remember why I was looking in here, I found an interesting interaction with the %q format verb and a map
2019-09-13 15:23:52	A_D	and I can't decide if its worth writing a patch or bug report for
2019-09-13 15:24:07	-->	epony (epony@unaffiliated/epony) has joined #go-nuts
2019-09-13 15:24:16	A_D	map[color.Color]string{color.Gray{Y: 42}: "GREY", color.Black: "BLACK", color.White: "WHITE"} -> map[{'*'}:"GREY" {'\x00'}:"BLACK" {'\uffff'}:"WHITE"]
2019-09-13 15:25:34	<--	andlabs (~pietro@ool-44c660e7.dyn.optonline.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-09-13 15:27:15	-->	nanoz (nanoz@gateway/vpn/protonvpn/nanoz) has joined #go-nuts
2019-09-13 15:30:10	-->	tuyenpm (~tuyenpm@171.236.70.190) has joined #go-nuts
2019-09-13 15:30:20	<--	tuyenpm (~tuyenpm@171.236.70.190) has quit (Client Quit)
2019-09-13 15:31:35	GinjaNinja32	that's just what you get if you %q an int - looks like a uint16?
2019-09-13 15:32:07	A_D	yeah thats what I thought
2019-09-13 15:32:24	A_D	and yeah its an int64, they're color.RGBAs IIRC, which are a struct of four uint16s
2019-09-13 15:32:53	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:33:31	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 15:33:43	-->	avoidr (~avoidr@pD9E05F05.dip0.t-ipconnect.de) has joined #go-nuts
2019-09-13 15:34:21	GinjaNinja32	looks like `color.Gray` has a uint8, color.Black/color.White are `color.Gray16`s which have uint16s
2019-09-13 15:34:24	A_D	oh no, Gray is one uint8, which is coerced to four uint32s when a method is called
2019-09-13 15:34:25	A_D	yeah
2019-09-13 15:34:54	A_D	anyway, its more an issue of me printing them with %q I think
2019-09-13 15:34:57	GinjaNinja32	mm
2019-09-13 15:35:21	GinjaNinja32	docs say %q on an integer prints "a single-quoted character literal safely escaped with Go syntax."
2019-09-13 15:35:30	A_D	ah okay
2019-09-13 15:36:06	<--	lluad (~lluad@217.173.105.122) has quit (Ping timeout: 265 seconds)
2019-09-13 15:36:29	GinjaNinja32	interesting
2019-09-13 15:36:43	-->	andlabs (~pietro@172.58.238.135) has joined #go-nuts
2019-09-13 15:38:55	Stealthy	10 million hashes in 9 seconds lol
2019-09-13 15:38:57	GinjaNinja32	because it's a character literal, values above 0x10ffff just fail - \x.. below 0x20, then printable ASCII, then \u.... until U+FFFF, then \U........ until U+10FFFF, then %!q(uint32=...)
2019-09-13 15:39:09	Stealthy	that is the best i've had in different languages
2019-09-13 15:39:56	-->	trung (~Adium@199.253.244.24) has joined #go-nuts
2019-09-13 15:39:59	<--	bandit (~bandit@unaffiliated/bandit) has quit (Quit: bandit)
2019-09-13 15:40:24	-->	edrocks (~ed@66.194.206.178) has joined #go-nuts
2019-09-13 15:40:42	-->	plutoniix (~q@125.24.64.141) has joined #go-nuts
2019-09-13 15:40:55	<--	andlabs (~pietro@172.58.238.135) has quit (Client Quit)
2019-09-13 15:41:26	-->	kajo (~kajo@2a02:908:2f34:d740:23c3:83b5:3938:ca37) has joined #go-nuts
2019-09-13 15:41:32	<--	trung (~Adium@199.253.244.24) has left #go-nuts
2019-09-13 15:42:55	<--	jasonp (~jasonp@n3t.work) has quit (Ping timeout: 245 seconds)
2019-09-13 15:42:58	<--	nindustries (~nindustri@unaffiliated/nindustries) has left #go-nuts ("used escape rope!")
2019-09-13 15:44:37	Stealthy	anyone have a simple snippet on 'go routines' ie a routine that messages back on end so that the starting routine can keep track of how many were started and have ended?
2019-09-13 15:44:56	-->	trung (~Adium@199.253.244.24) has joined #go-nuts
2019-09-13 15:45:14	Stealthy	i'd imagine thats where channels would shine
2019-09-13 15:45:21	-->	jack_rabbit (~jack_rabb@206-221-145-146.ip.ctc.biz) has joined #go-nuts
2019-09-13 15:47:10	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:48:02	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 15:48:52	-->	bandit (bandit@gateway/vpn/protonvpn/bandit) has joined #go-nuts
2019-09-13 15:51:21	-->	skywlkr (~skywlkr@unaffiliated/skywlkr) has joined #go-nuts
2019-09-13 15:52:18	edrocks	Stealthy depends if you just need to wait for things to finish or if you have to do something with them at the end
2019-09-13 15:52:33	edrocks	Stealthy a simple example of fire and forget but wait until all finish https://golang.org/pkg/sync/#WaitGroup
2019-09-13 15:53:11	GinjaNinja32	even with fire+forget you could still accumulate results in a buffered channel, then close() it and read the results off in a loop
2019-09-13 15:53:35	-->	lluad (~lluad@2a02:8084:2861:3f80:7cf7:4890:3818:2f16) has joined #go-nuts
2019-09-13 15:53:45	GinjaNinja32	ie `wg.Wait(); close(results); for r := range results { ... ]`
2019-09-13 15:54:02	GinjaNinja32	...except with the right closing bracket, of course :D
2019-09-13 15:54:09	GinjaNinja32	my shift key intermittently doesn't work
2019-09-13 15:54:49	<--	skywlkr (~skywlkr@unaffiliated/skywlkr) has quit (Client Quit)
2019-09-13 15:57:17	-->	jasonp (~jasonp@n3t.work) has joined #go-nuts
2019-09-13 15:57:21	Numline1	Hey guys, so I've created this monstrosity - https://privatebin.net/?053f544645a60f0e#9xv7DYGw8wX7Bje4K3WzzRBdT2UBoAFawk7hHJGXhRVQ
2019-09-13 15:58:19	Numline1	What it does it transforms some characters into their basic equivalents, eg. ý into y
2019-09-13 15:58:26	edrocks	Numline1 I'd recommend against having a package named errors. There is already a builtin one
2019-09-13 15:58:40	seebs	and at least one non-builtin similar one
2019-09-13 15:58:46	edrocks	also there is a thing in the strings lib to do this I think strings.Replacer
2019-09-13 15:59:31	Numline1	so I was just wondering if there's someone knowledgeable when it comes to norm and transform packages to see if I missed some edge cases or something. Tests so far are running okay with everything like special chars, emojis or some random chinese.
2019-09-13 15:59:56	Numline1	edrocks yeah, unfortunately I created that when I was starting with Go as a custom error wrapper for API responses, poor choice that awaits refactoring
2019-09-13 16:00:22	<--	abiscuola (~abiscuola@176.9.150.19) has quit (Ping timeout: 246 seconds)
2019-09-13 16:00:34	Numline1	edrocks yep, but that'd probably require me to specify all runes to replace
2019-09-13 16:01:36	Numline1	I honestly have problems trying to test cover the error statement in my code because I can'f figure out any test case that'd invoke the error :/
2019-09-13 16:01:57	-->	skywlkr (~skywlkr@unaffiliated/skywlkr) has joined #go-nuts
2019-09-13 16:02:38	GinjaNinja32	i'd assume something like "\xff" would throw an error there
2019-09-13 16:02:44	GinjaNinja32	invalid utf8
2019-09-13 16:03:43	edrocks	Numline1 nevermind the replacer recommendation. Looks like you are using x/text/transform which is a good idea
2019-09-13 16:03:45	<--	skywlkr (~skywlkr@unaffiliated/skywlkr) has quit (Client Quit)
2019-09-13 16:04:08	Numline1	GinjaNinja32 I'll try that, thank you
2019-09-13 16:04:22	<--	dithmer (~dithmer@145.253.123.66) has quit (Remote host closed the connection)
2019-09-13 16:05:02	Numline1	edrocks yeah, I mostly scraped stuff from stackoverflow and molded it into this. I think I have fair understanding of what each part does, but I'm still reading godocs about those packages
2019-09-13 16:05:09	A_D	GinjaNinja32: depends on if a for loop is involved somewhere
2019-09-13 16:05:27	GinjaNinja32	hm?
2019-09-13 16:05:28	A_D	IIRC looping over strings directly gives \uffffffff if you get a bad char
2019-09-13 16:05:30	Numline1	Some even went over "precis" package, which is also more confusing
2019-09-13 16:05:58	A_D	`If the iteration encounters an invalid UTF-8 sequence, the second value will be 0xFFF`
2019-09-13 16:06:00	Numline1	A_D the code I use is posted above, so depends on that. I'm about to write a test case to make sure
2019-09-13 16:06:06	A_D	0xFFFD
2019-09-13 16:06:07	A_D	*
2019-09-13 16:06:25	GinjaNinja32	mm looks like FFFD
2019-09-13 16:06:34	GinjaNinja32	so it might just return a weird string
2019-09-13 16:06:36	-->	abiscuola (~abiscuola@176.9.150.19) has joined #go-nuts
2019-09-13 16:06:43	A_D	Numline1: you may want to try testing/quick to throw a wall of data at it as well
2019-09-13 16:07:10	Stealthy	A_D so far : https://play.golang.org/p/V85Hlkn673v
2019-09-13 16:07:24	Stealthy	8 threads
2019-09-13 16:07:52	Stealthy	gonna read that profiling linky now to implement perf tracking
2019-09-13 16:08:06	A_D	I'd suggest hash.sum(nil) over a literal
2019-09-13 16:08:15	Stealthy	where at
2019-09-13 16:08:32	A_D	also don't recreate sha256 every time, if you can help it, use a pool to prevent recreating data so often
2019-09-13 16:08:40	Numline1	GinjaNinja32 A_D so this is the result - https://numshare.s3-eu-west-2.amazonaws.com/Screen-Shot-2019-09-13-16-08-19-1568383700.png
2019-09-13 16:08:47	Numline1	It's parsed as some strange character
2019-09-13 16:08:50	-->	andlabs (~pietro@2607:fb90:2edf:26e1:5566:7e78:a0f5:95c8) has joined #go-nuts
2019-09-13 16:08:52	Numline1	assuming I wrote the test correctly
2019-09-13 16:09:01	A_D	that is correct behaviour
2019-09-13 16:09:04	Stealthy	i can just create one instance of sha256 but i'd have to reset it
2019-09-13 16:09:11	A_D	it'll replace things it doesn't understand with 0xFFFD
2019-09-13 16:09:16	A_D	which is what that character will be
2019-09-13 16:09:51	Numline1	A_D okay, thanks. I'll assert it with 0xFFFD to make sure
2019-09-13 16:10:00	A_D	yeah thats a good idea
2019-09-13 16:10:25	<--	xelra (~xelra@unaffiliated/xelra) has quit (Ping timeout: 240 seconds)
2019-09-13 16:10:26	-->	Tv` (uid62079@gateway/web/irccloud.com/x-mqoemkewxmskhtul) has joined #go-nuts
2019-09-13 16:11:19	Numline1	Okay, huge thanks to all of you guys
2019-09-13 16:11:33	A_D	np
2019-09-13 16:11:50	A_D	Stealthy: yes but resetting will probably be less allocation than creating a new one
2019-09-13 16:12:01	A_D	and it will definitely reduce gc pressure
2019-09-13 16:12:05	-->	xelra (~xelra@unaffiliated/xelra) has joined #go-nuts
2019-09-13 16:12:15	Stealthy	fair point
2019-09-13 16:12:17	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:12:26	A_D	check out sync,pool
2019-09-13 16:12:34	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 16:12:43	A_D	have each of your goroutines grab one out of a pool, put it back when its done
2019-09-13 16:13:02	A_D	assuming the pool size is the same as the goroutine count, it should never have any contention or waiting
2019-09-13 16:13:07	GinjaNinja32	sha256.New() calls .Reset() on its return value anyway
2019-09-13 16:13:23	GinjaNinja32	`d := new(...); d.Reset(); return d`
2019-09-13 16:13:44	-->	alrs (~lars@cpe-45-48-235-194.socal.res.rr.com) has joined #go-nuts
2019-09-13 16:13:55	Stealthy	turns out theres no .Reset
2019-09-13 16:14:03	Stealthy	i just remember from an implementation in another language
2019-09-13 16:14:28	A_D	it has a reset
2019-09-13 16:14:41	Stealthy	i made a typo lols
2019-09-13 16:15:00	A_D	`func New() hash.Hash {d := new(digest); d.Reset(); return d}`, as GinjaNinja32 said
2019-09-13 16:15:11	GinjaNinja32	https://golang.org/pkg/hash/#Hash
2019-09-13 16:15:19	GinjaNinja32	a Hash has Write, Sum, Reset, Size, and BlockSize
2019-09-13 16:15:46	A_D	and yeah, as I said, use sum(nil), not []byte{}
2019-09-13 16:15:48	Stealthy	im using crypto/sha256
2019-09-13 16:15:54	Stealthy	its supposed to be avx optimized
2019-09-13 16:15:59	A_D	yep, that code I just pasted is from that file
2019-09-13 16:16:00	Stealthy	but it has it
2019-09-13 16:16:07	GinjaNinja32	crypto/sha256.New() returns a hash.Hash :)
2019-09-13 16:16:15	Stealthy	aah
2019-09-13 16:16:18	-->	mindCrime__ (~mindCrime@216.85.170.148) has joined #go-nuts
2019-09-13 16:16:19	Stealthy	gg
2019-09-13 16:16:42	<--	xelra (~xelra@unaffiliated/xelra) has quit (Remote host closed the connection)
2019-09-13 16:17:47	-->	mindCrime_ (~mindCrime@216.85.170.148) has joined #go-nuts
2019-09-13 16:19:19	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined #go-nuts
2019-09-13 16:20:08	-->	xelra (~xelra@unaffiliated/xelra) has joined #go-nuts
2019-09-13 16:20:25	-->	agent_white (~agent_whi@unaffiliated/agent-white/x-6197888) has joined #go-nuts
2019-09-13 16:21:32	<--	mindCrime__ (~mindCrime@216.85.170.148) has quit (Ping timeout: 265 seconds)
2019-09-13 16:21:33	A_D	Stealthy: checking to see what the outputted asm with godbolt is probably a good idea as well
2019-09-13 16:21:40	<--	chargen (~chargen@2a02:2e02:9ee0:7100:343b:b6cc:4bca:9d3d) has quit (Quit: BBL)
2019-09-13 16:25:09	Stealthy	how about the i = i.Sub(i, big.NewInt(1))
2019-09-13 16:25:18	<--	jlebrech (~jlebrech@5.2.197.53) has quit (Remote host closed the connection)
2019-09-13 16:25:33	Stealthy	would you take it out of the loop and make a newint once to use in the loop
2019-09-13 16:25:50	Stealthy	even tho thats a slow loop anyway
2019-09-13 16:26:14	Stealthy	do you think it'll leak/clutter and should i reuse the same int
2019-09-13 16:26:22	<--	nanoz (nanoz@gateway/vpn/protonvpn/nanoz) has quit (Ping timeout: 265 seconds)
2019-09-13 16:27:11	Stealthy	https://pastebin.com/gTDWUZKk
2019-09-13 16:27:18	Stealthy	like so
2019-09-13 16:27:31	-->	pietv (~textual@95.165.92.89) has joined #go-nuts
2019-09-13 16:27:55	Stealthy	considering it'll be a 10 million year operation ;) lol
2019-09-13 16:29:14	-->	jlebrech (~jlebrech@5.2.197.53) has joined #go-nuts
2019-09-13 16:30:04	GinjaNinja32	looks like a race condition to me
2019-09-13 16:30:33	Stealthy	why, where
2019-09-13 16:30:47	-->	progart (~kamee@188.115.226.25) has joined #go-nuts
2019-09-13 16:31:05	GinjaNinja32	where is i declared
2019-09-13 16:31:23	Stealthy	first line in main
2019-09-13 16:31:35	GinjaNinja32	how many things can be writing to it at once?
2019-09-13 16:31:43	Stealthy	nothing writes to it
2019-09-13 16:31:49	-->	whaley (~whaley@c-73-78-132-227.hsd1.co.comcast.net) has joined #go-nuts
2019-09-13 16:31:52	Stealthy	hashtain takes a copy of the representation of i in bytes
2019-09-13 16:31:57	Stealthy	it's also readonly
2019-09-13 16:32:04	GinjaNinja32	you assign to it on line 7
2019-09-13 16:32:04	Stealthy	as in, it doesnt get modified
2019-09-13 16:32:31	Stealthy	hehe
2019-09-13 16:32:41	Stealthy	i'll paste the whole thing
2019-09-13 16:32:50	Stealthy	in that case i'll do the playground
2019-09-13 16:33:07	Stealthy	https://play.golang.org/p/6WzqI7yIDpt
2019-09-13 16:33:58	Stealthy	it works fine, the routines dont work with i itself
2019-09-13 16:34:23	Stealthy	but i made increaseval because i wonder if big.newint(1) in the loop is just a waste
2019-09-13 16:34:26	<--	whaley (~whaley@c-73-78-132-227.hsd1.co.comcast.net) has quit (Client Quit)
2019-09-13 16:34:49	<--	abiscuola (~abiscuola@176.9.150.19) has quit (Ping timeout: 240 seconds)
2019-09-13 16:35:34	-->	chargen (~chargen@2a02:2e02:9ee0:7100:459a:4d80:596:2a83) has joined #go-nuts
2019-09-13 16:37:52	Stealthy	i is basically the current 'master key' for the to be created (and tested) hash chain
2019-09-13 16:39:25	<--	__alex (~alex@217.110.54.179) has quit (Ping timeout: 265 seconds)
2019-09-13 16:41:11	-->	imsky (~textual@unaffiliated/imsky) has joined #go-nuts
2019-09-13 16:41:20	GinjaNinja32	still a race condition
2019-09-13 16:41:58	GinjaNinja32	hashchain takes the bytes, then you subtract one and assign it to i
2019-09-13 16:42:15	GinjaNinja32	what happens if two goroutines take the bytes simultaneously, then both read, then both write
2019-09-13 16:42:23	GinjaNinja32	you did 2 units of work but i only went down by 1
2019-09-13 16:43:37	<--	doped_dude (~doped_dud@72.163.220.3) has quit
2019-09-13 16:43:45	GinjaNinja32	if `sem` had a buffer of 1, it'd be fine because you could only have one goroutine touching i at a time
2019-09-13 16:44:09	<--	floppydh (~floppydh@buro.mquadr.at) has quit (Quit: WeeChat 2.6)
2019-09-13 16:44:28	Tv`	if sem had a buffer of 1, a lot of that code would be pointless
2019-09-13 16:44:45	GinjaNinja32	mm
2019-09-13 16:46:07	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 245 seconds)
2019-09-13 16:46:16	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined #go-nuts
2019-09-13 16:47:25	Stealthy	they are started sequentially passing the current state of i as a byte array at that time
2019-09-13 16:47:33	Stealthy	and thats what the routine works from
2019-09-13 16:47:43	Stealthy	it's a copy not a reference is it
2019-09-13 16:48:00	Stealthy	on top of that
2019-09-13 16:50:07	Tv`	so you lied to us about where i is declared.. okay
2019-09-13 16:50:27	GinjaNinja32	goroutine startup is not guaranteed to happen in any specific order
2019-09-13 16:50:39	GinjaNinja32	the calling goroutine might resume before the goroutine starts
2019-09-13 16:51:02	Tv`	oh no https://play.golang.org/p/6WzqI7yIDpt still has the race on i
2019-09-13 16:51:31	Stealthy	so you'd recommend to copy to a new byte array to pass?
2019-09-13 16:51:54	GinjaNinja32	i'd recommend doing something that doesn't involve raw assignment to the same variable from eight different goroutines at once
2019-09-13 16:52:15	Stealthy	so yes :P
2019-09-13 16:54:18	<--	gzj (~GZJ0X@45.78.13.208.16clouds.com) has quit (Remote host closed the connection)
2019-09-13 16:54:37	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:54:49	Tv`	copying it won't help much when you have a race on the decreasing also
2019-09-13 16:54:56	GinjaNinja32	the decreasing is the problem
2019-09-13 16:55:00	GinjaNinja32	.Bytes() is already a copy
2019-09-13 16:55:08	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 16:55:35	Stealthy	thats what i thought
2019-09-13 16:55:51	<--	absolutejam1 (~absolutej@vrrp.core.bridgehead.infra.victoriaplum.com) has quit (Ping timeout: 265 seconds)
2019-09-13 16:55:55	GinjaNinja32	you could probably do it with N worker goroutines each running `for v := range values { HashChain(v.Bytes()) }` and one master writing successive values of i to values
2019-09-13 16:56:08	GinjaNinja32	removes the need for the goroutines to spawn/die too
2019-09-13 16:56:48	GinjaNinja32	or rather, values of i.Bytes()
2019-09-13 16:57:13	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Remote host closed the connection)
2019-09-13 16:57:38	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined #go-nuts
2019-09-13 16:58:08	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 16:58:38	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 16:58:46	Stealthy	the idea is to have a fixed number of consecutive threads to create a hash chain from the given byte array; since every routine has their own actual/correct copy of i at that time, which decreases sequentially; i dont see an issue
2019-09-13 16:58:54	Stealthy	none of them modify i
2019-09-13 16:59:03	Tv`	all of them assign to i
2019-09-13 16:59:05	<--	AquaL1te (~AquaL1te@unaffiliated/aqual1te) has quit (Quit: leaving)
2019-09-13 16:59:15	Stealthy	i dont see where
2019-09-13 16:59:28	Tv`	the line that says `i = ...`
2019-09-13 16:59:45	Stealthy	oh you're talking about the routine func that calls hashchain lol
2019-09-13 17:00:19	Stealthy	now i start to see what you guys are talking about
2019-09-13 17:01:07	-->	whaley (~whaley@c-73-78-132-227.hsd1.co.comcast.net) has joined #go-nuts
2019-09-13 17:01:21	Stealthy	because i is decreased after hashchain and a new routine will start, it is not decreased yet
2019-09-13 17:01:26	Stealthy	gotcha
2019-09-13 17:02:30	Stealthy	well crap lol
2019-09-13 17:02:34	-->	absolutejam1 (~absolutej@154.62.128.42) has joined #go-nuts
2019-09-13 17:03:09	GinjaNinja32	you can also end up calling i.Sub() multiple times simultaneously
2019-09-13 17:03:34	A_D	Stealthy: the thing with bigint is it itself can be slow
2019-09-13 17:03:34	Stealthy	@_@
2019-09-13 17:03:39	A_D	and also yeah
2019-09-13 17:03:46	A_D	try run that in the race detector
2019-09-13 17:03:56	A_D	it'll probably smack your fingers something fierce
2019-09-13 17:04:54	Stealthy	i've come to peace with the bigint being slow tho
2019-09-13 17:04:57	A_D	thats why I specifically suggested using a set of int64, you're only updating the first three very seldom
2019-09-13 17:05:02	A_D	seldomly*
2019-09-13 17:05:10	A_D	well if you're okay with it being slow, go nuts
2019-09-13 17:05:22	Stealthy	as long as HashCHain function is fast
2019-09-13 17:05:39	A_D	everything you call there will have an issue
2019-09-13 17:05:42	Stealthy	they take roughly 9 seconds for 10 million hashes currently
2019-09-13 17:06:01	A_D	also why arent you showing all the code
2019-09-13 17:06:07	Stealthy	i did
2019-09-13 17:06:12	A_D	show it all, we can't help you if you don't give us everything
2019-09-13 17:06:28	A_D	oh you did nevermind
2019-09-13 17:06:45	<--	progart (~kamee@188.115.226.25) has quit (Quit: Leaving.)
2019-09-13 17:08:09	Stealthy	i'm each suggestion i have to look up and think about for a while lol
2019-09-13 17:08:25	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-09-13 17:08:27	Stealthy	because i'm a noob at golang
2019-09-13 17:08:57	Stealthy	even dont do much threading in other languages either
2019-09-13 17:09:27	<--	andlabs (~pietro@2607:fb90:2edf:26e1:5566:7e78:a0f5:95c8) has quit (Ping timeout: 245 seconds)
2019-09-13 17:10:19	-->	vulpix1337 (~vulpix@ec2-54-164-171-208.compute-1.amazonaws.com) has joined #go-nuts
2019-09-13 17:10:47	sztanpet	https://blog.golang.org/race-detector https://medium.com/dm03514-tech-blog/golang-candidates-and-contexts-a-heuristic-approach-to-race-condition-detection-e2b230e70d08
2019-09-13 17:10:55	Stealthy	basically if one of you guys, if you have the time, modify it, that would help lol
2019-09-13 17:11:41	vulpix1337	I'm a beginner at go programming - Having trouble defining a function which returns a ring from "container/ring" - can someone tell me what the signature should look like?
2019-09-13 17:12:13	sztanpet	Stealthy please dont expect other people to do your work for you, we prefer to help you learn how to solve your problem
2019-09-13 17:12:17	<--	whaley (~whaley@c-73-78-132-227.hsd1.co.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-09-13 17:12:24	Tv`	vulpix1337: func foo() *ring.Ring { ... }
2019-09-13 17:12:30	Stealthy	dont get me wrong i dont expect anyone to; but yall make it sound like a quick fix
2019-09-13 17:12:46	Stealthy	for me to get a grasp of what the fix/concept actually means is 5 minutes of googling :p
2019-09-13 17:12:50	sztanpet	vulpix1337 tour.golang.org just in case you missed it
2019-09-13 17:13:00	Tv`	vulpix1337: also, container/ring isn't a great idea and you often don't want to use it; i can't remember a single instance in who knows how many years of Go where i would have used it
2019-09-13 17:13:02	sztanpet	Stealthy is that bad?
2019-09-13 17:13:13	-->	sofianec (~sofianec@89.107.183.3) has joined #go-nuts
2019-09-13 17:13:19	Stealthy	no. i'm just saying if someone has the time, it would help
2019-09-13 17:13:22	-->	catbusters (uid40652@gateway/web/irccloud.com/x-qvvrmccsplgbtpej) has joined #go-nuts
2019-09-13 17:13:37	A_D	quick fix to explain, not to write
2019-09-13 17:13:38	sofianec	Hi. Can someone help en this?
2019-09-13 17:13:49	A_D	also, race detector is a friend
2019-09-13 17:13:53	A_D	sofianec: don't ask to ask
2019-09-13 17:14:11	sofianec	https://play.golang.org/p/lhinH7HjUOy
2019-09-13 17:14:15	vulpix1337	Tv`: Why is that?  It doesn't operate liek a ring structure in other languages?
2019-09-13 17:14:30	Tv`	vulpix1337: it's the Value interface{} part that sucks
2019-09-13 17:14:45	Tv`	vulpix1337: also, linked lists aren't that great with modern cpus
2019-09-13 17:15:11	<--	absolutejam1 (~absolutej@154.62.128.42) has quit (Ping timeout: 265 seconds)
2019-09-13 17:15:12	A_D	sofianec: you only sleep for one second after starting your goroutine, that'll get weird
2019-09-13 17:15:37	lemmi	sofianec: line 53
2019-09-13 17:16:08	A_D	and if you want to continue to retry, probably move stuff out to a function that you call repeatedly
2019-09-13 17:16:12	lemmi	sofianec: you are reading from done there *and* you are reading in line 43, but never writing
2019-09-13 17:16:17	A_D	and yeah
2019-09-13 17:16:29	A_D	you never write, therefore you just sit and wait to read forever
2019-09-13 17:16:45	sofianec	but I have a for () loop
2019-09-13 17:16:50	A_D	yes
2019-09-13 17:17:00	A_D	and thats in a goroutine
2019-09-13 17:17:19	A_D	you stop the timer right after starting it
2019-09-13 17:17:23	A_D	ticker*
2019-09-13 17:17:34	-->	progart (~kamee@188.115.226.25) has joined #go-nuts
2019-09-13 17:17:34	A_D	and you wait for a write to done that will never happen
2019-09-13 17:17:35	vulpix1337	Tv`: Can you explaina what "*ring.Ring" means exactly. Coming from C I would expect this to look like just "*Ring" if "Ring" is the type and it is a non-named return value.
2019-09-13 17:17:35	<--	progart (~kamee@188.115.226.25) has quit (Max SendQ exceeded)
2019-09-13 17:17:36	sofianec	right
2019-09-13 17:17:57	A_D	vulpix1337: its a pointer to the Ring struct found in the ring package
2019-09-13 17:18:03	-->	skywlkr (~skywlkr@unaffiliated/skywlkr) has joined #go-nuts
2019-09-13 17:18:21	A_D	assuming ring is a struct, its a pointer to the type >.>
2019-09-13 17:18:41	sofianec	If I call the ticker.Stop then done is executed?
2019-09-13 17:19:16	lemmi	in this code the done channel does nothing except ensure a deadlock
2019-09-13 17:19:19	vulpix1337	Ahh okay, thank you guys.  I understand better now I have to reference it like "package.struct".
2019-09-13 17:19:20	-->	progart (~kamee@188.115.226.25) has joined #go-nuts
2019-09-13 17:19:35	-->	analogue (~analogue@129.63.253.88) has joined #go-nuts
2019-09-13 17:19:49	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 276 seconds)
2019-09-13 17:19:51	<--	skywlkr (~skywlkr@unaffiliated/skywlkr) has quit (Client Quit)
2019-09-13 17:20:11	<--	marcuskwan (~marcuskwa@110-174-20-208.static.tpgi.com.au) has quit (Quit: marcuskwan)
2019-09-13 17:20:31	A_D	why would done be executed?
2019-09-13 17:20:31	A_D	after line 51 52 is executed, yes, but also after that, your ticker.C case sits and waits, so does your timeout, and so does your done
2019-09-13 17:20:31	A_D	so everything sitting waiting, nothing is doing any work
2019-09-13 17:20:31	A_D	what happens then is that nothing can ever change, so go panics
2019-09-13 17:20:31	A_D	also you check if the error is nill twice on line 29
2019-09-13 17:20:40	<--	plutoniix (~q@125.24.64.141) has quit (Quit: Leaving)
2019-09-13 17:20:44	vulpix1337	:q
2019-09-13 17:20:46	A_D	vulpix1337: yeah its namespacing, essentially
2019-09-13 17:20:53	A_D	have you gone through the go tour?
2019-09-13 17:21:01	-->	skywlkr (~skywlkr@unaffiliated/skywlkr) has joined #go-nuts
2019-09-13 17:21:04	A_D	may help you with some behaviours and syntax you're not aware of
2019-09-13 17:21:11	A_D	tour.golang.org IIRC
2019-09-13 17:21:12	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-09-13 17:21:50	sofianec	A bit :)
2019-09-13 17:22:00	vulpix1337	A_D: Yes, I apparently just did absorb it well T.T
2019-09-13 17:22:06	-->	rindvieh (~rindvieh@static-87-79-75-171.netcologne.de) has joined #go-nuts
2019-09-13 17:22:07	vulpix1337	* did not
2019-09-13 17:22:07	A_D	vulpix1337: lol thats okay
2019-09-13 17:22:16	A_D	the lang reference may be a bit faster for you to lookup then?
2019-09-13 17:22:31	A_D	https://golang.org/ref/spec its pretty small and has a nice index at the top
2019-09-13 17:23:01	A_D	also if you're coming from C, one thing that you may like/hate if you did not know: pointer resolution is usually done automatically for you
2019-09-13 17:24:01	Stealthy	taking .New out and resetting shaved off a full second
2019-09-13 17:24:15	Tv`	vulpix1337: i'd suggest http://tour.golang.org/
2019-09-13 17:24:19	A_D	now use a pool and create them all once instead of once per goroutine
2019-09-13 17:24:25	A_D	even faster still
2019-09-13 17:24:50	A_D	Stealthy: see https://golang.org/pkg/sync/#Pool
2019-09-13 17:25:12	Tv`	A_D: way too early to suggest sync.Pool to Stealthy, he has a bunch of learning to do first
2019-09-13 17:25:18	A_D	...true
2019-09-13 17:25:29	A_D	>.>
2019-09-13 17:25:29	vulpix1337	A_D: Thanks for that reference, what is meant by pointer resolution?
2019-09-13 17:25:46	Tv`	vulpix1337: in Go, C's "." and "->" operators are both spelled "."
2019-09-13 17:25:47	Stealthy	also in my case the bigint string can be slow; its the subroutine that has to be fast
2019-09-13 17:26:13	A_D	Tv`: thanks >.>
2019-09-13 17:26:15	Stealthy	a subroutine makes 10 million hashes based upon the one hash passed from the slow loop
2019-09-13 17:27:12	vulpix1337	Tv`: ahhh interesting
2019-09-13 17:27:50	Stealthy	with my cpu i can at max run 8 threads of these subroutines and thats where optimization can make an impact, not in main or on the slow string
2019-09-13 17:28:50	Stealthy	and these subroutines work with a byte (copy) of that slow string; its taken as the input for sha256 and outputs directly to the same byte array for the next iteration
2019-09-13 17:29:07	Stealthy	i dont see how a pool (or anything at this point) can make it quicker
2019-09-13 17:29:26	Stealthy	i even took the recreation of sha256 out and just write the buffer, calc sum
2019-09-13 17:30:05	Stealthy	https://play.golang.org/p/ce8QRliYV_H
2019-09-13 17:30:45	Stealthy	i mean... i could make the code less readable and dont call methods saving 2 asm instructions (call/ret) and result stack bull
2019-09-13 17:30:47	A_D	Next step would be reading up on arrays vs slices and how slice growth works, I think
2019-09-13 17:31:28	Stealthy	hm
2019-09-13 17:31:48	Stealthy	i've been introduced with slices in JS but im not sure how it'll make my case quicker
2019-09-13 17:31:58	<--	dullin (~dullin@219.ip-144-217-83.net) has quit (Read error: Connection reset by peer)
2019-09-13 17:32:01	Stealthy	i basically just sha256 over 1 byte array
2019-09-13 17:32:12	A_D	over a byte slice, which has a backing array
2019-09-13 17:32:27	A_D	if you want to do micro-optimisations you need to learn how the language works
2019-09-13 17:32:41	-->	dullin (~dullin@219.ip-144-217-83.net) has joined #go-nuts
2019-09-13 17:32:55	Tv`	Stealthy: please don't assume that javascript teaches you anything about go
2019-09-13 17:33:12	Stealthy	no i know, im just saying i've heard of the idea of slices
2019-09-13 17:33:24	A_D	The "idea" isn't a thing here
2019-09-13 17:33:26	Stealthy	i dont see how an impementation of them could help
2019-09-13 17:33:33	A_D	go slices are different to whatever you remember in js
2019-09-13 17:34:12	Stealthy	ie whats faster than:   bytearray = hash(bytearray)
2019-09-13 17:34:22	A_D	I said go read for a reason
2019-09-13 17:34:24	Tv`	Stealthy: see, you don't even know what a Go array is...
2019-09-13 17:34:34	Stealthy	ofc i dont
2019-09-13 17:34:37	A_D	I don't want to tell you how to optimise something without understanding why
2019-09-13 17:34:40	Stealthy	was just trying to fish for something more specific
2019-09-13 17:34:50	Stealthy	that "go read everything you can find on arrays and slices"
2019-09-13 17:34:54	Stealthy	than*
2019-09-13 17:35:01	<--	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Read error: Connection reset by peer)
2019-09-13 17:35:16	A_D	https://golang.org/ref/spec Here's a good place to start.
2019-09-13 17:35:33	Tv`	egads reading what will we world come to
2019-09-13 17:35:40	Tv`	*the world
2019-09-13 17:35:42	Stealthy	.....
2019-09-13 17:35:51	Stealthy	i read plenty
2019-09-13 17:35:57	A_D	we're telling you to read because you need to understand what you're doing
2019-09-13 17:36:02	Stealthy	was just looking for a more specific keyword/angle on what to search for
2019-09-13 17:36:02	A_D	not just listening to those who know why
2019-09-13 17:36:16	A_D	I just handed you the page you need to read
2019-09-13 17:36:25	A_D	literally 90% of the info is there
2019-09-13 17:36:25	Stealthy	i'm not interested in side info thats not irrelevant to my current problem when actively working on the problem
2019-09-13 17:36:28	A_D	there's an index at the top
2019-09-13 17:36:33	Tv`	Stealthy: that's just codewords for "i only want the answer, not to understand"
2019-09-13 17:36:34	A_D	It. Is. Relevant.
2019-09-13 17:36:47	Tv`	enjoy your adventure.
2019-09-13 17:36:55	A_D	Tv`: lol
2019-09-13 17:36:55	Stealthy	you guys are clever typers but horrible readers yourself
2019-09-13 17:37:01	Stealthy	taking A for B most of the time
2019-09-13 17:37:09	A_D	...you need to work on your reading comprehension.
2019-09-13 17:37:14	Stealthy	right back at ya
2019-09-13 17:37:18	A_D	Tv`: "We look for things.... things to make it go"
2019-09-13 17:37:30	A_D	star trek <3
2019-09-13 17:37:34	Stealthy	i was simply fishing for a more specific keyword into this arrays vs slices idea of yours
2019-09-13 17:37:40	Tv`	Stealthy: i think you're greatly overestimating how many words "everything [authoritative] you can find on arrays and slices" is
2019-09-13 17:37:43	Stealthy	rather than googling for tutorials on how to use them
2019-09-13 17:37:50	Stealthy	alright fuck off
2019-09-13 17:37:51	<--	Stealthy (~Stealthy@pdpc/supporter/active/stealthy) has quit
2019-09-13 17:37:53	A_D	Stealthy: Read. The Link. I Posted.
2019-09-13 17:37:54	A_D	-_-
2019-09-13 17:38:18	A_D	welp, we tried
2019-09-13 17:38:18	Tv`	i can think of exactly two web pages that match  "everything [authoritative] you can find on arrays and slices"
2019-09-13 17:38:26	A_D	oh?
2019-09-13 17:38:32	Tv`	spec and the blog post
2019-09-13 17:38:43	A_D	lol I forgot there was a blog post
2019-09-13 17:38:47	Tv`	it's actually good
2019-09-13 17:38:49	A_D	honestly that would have been better than the spec
2019-09-13 17:38:51	A_D	yeah
2019-09-13 17:38:54	Tv`	the older blog posts have some really good stuff
2019-09-13 17:38:56	A_D	I remember reading it
2019-09-13 17:39:00	A_D	they really do
2019-09-13 17:39:05	Tv`	pipelining, context, interfaces (the image series), slices
2019-09-13 17:39:16	A_D	tbh contexts still confuse the hell out of me
2019-09-13 17:39:18	A_D	but yeah
2019-09-13 17:39:33	A_D	I need to find a problem to solve with them before I understand them more
2019-09-13 17:39:57	<--	progart (~kamee@188.115.226.25) has quit (Quit: Leaving.)
2019-09-13 17:40:11	Tv`	A_D: web app and "currently logged in *User" works pretty well as an example
2019-09-13 17:40:23	Tv`	for the value side
2019-09-13 17:40:34	A_D	oh well, I think its time for me to get some tea, and yeah, the "behaviour I got", I worded that badly, I need to use them more to get a feel for when to use them
2019-09-13 17:40:35	Tv`	cancelling outgoing requests when client closes works for Done
2019-09-13 17:40:45	-->	Stealthy (~Stealthy@pdpc/supporter/active/stealthy) has joined #go-nuts
2019-09-13 17:41:05	A_D	thanks for all your help now and in the future btw Tv`
2019-09-13 17:41:07	Stealthy	fckin hell; that was 5th time in less than 2 hours i had to feel sorry because everyone thinks i just want an easy solution
2019-09-13 17:41:14	Stealthy	when its not even the case
2019-09-13 17:41:16	A_D	...we don't
2019-09-13 17:41:22	A_D	we want you to read and find your own solutions
2019-09-13 17:41:26	A_D	we're looking to teach
2019-09-13 17:41:36	A_D	I handed you one link with the exact information you need
2019-09-13 17:41:39	A_D	you ignored it
2019-09-13 17:41:46	Tv`	said more bluntly: we don't care what you want, we'll (try to) tell you where to learn what you need to learn ;)
2019-09-13 17:42:10	-->	etienne (quassel@unaffiliated/etienne) has joined #go-nuts
2019-09-13 17:42:16	Tv`	if you choose not to engage that material, that's not on us
2019-09-13 17:42:17	A_D	also https://blog.golang.org/go-slices-usage-and-internals is the other link you want
2019-09-13 17:42:24	A_D	okay brb tea
2019-09-13 17:42:32	A_D	(git)tea? :D
2019-09-13 17:42:44	<--	julio_ (~julio@243-213-190-109.dsl.ovh.fr) has left #go-nuts
2019-09-13 17:43:42	<--	Sulak (~Sulak@unaffiliated/sulak) has quit (Ping timeout: 265 seconds)
2019-09-13 17:43:47	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 17:44:12	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 17:44:44	j416	Stealthy: https://golang.org/conduct
2019-09-13 17:44:57	Stealthy	i dont care for that
2019-09-13 17:45:07	Stealthy	if its not for typical behaviour then kickban
2019-09-13 17:45:47	j416	then we won't care much to help you; sorry.
2019-09-13 17:46:08	Stealthy	whatever
2019-09-13 17:46:44	Stealthy	if normal values are not good enough then please enjoy your private elitist club by yourself
2019-09-13 17:46:55	j416	good luck with your task; the concept of a slice is different but it should not be all that difficult to grasp
2019-09-13 17:47:09	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 17:47:22	j416	Stealthy: I'm not here to be trapped in a spiral of negative energy; please cool down for a bit
2019-09-13 17:47:40	Stealthy	then dont invoke one like that
2019-09-13 17:47:41	<--	skywlkr (~skywlkr@unaffiliated/skywlkr) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-09-13 17:47:44	-->	pknull (~pooky@184.103.28.136) has joined #go-nuts
2019-09-13 17:48:04	Stealthy	add it to your conduct : dont put oil on fires
2019-09-13 17:48:27	j416	sorry if I upset you.
2019-09-13 17:49:22	-->	kattiyah (~khaled@93.168.18.157) has joined #go-nuts
2019-09-13 17:49:35	-->	ibtjw (~ibtjw@2603:300a:1bb:4800:bdd6:c442:3044:5bf0) has joined #go-nuts
2019-09-13 17:50:02	Stealthy	ironically i read that link last night while skimming through documentation
2019-09-13 17:50:25	j416	good
2019-09-13 17:50:39	j416	it applies to this channel
2019-09-13 17:50:52	-->	andlabs (~pietro@2a00:79e1:abc:1a0a:98c8:5c4b:7acf:6dd1) has joined #go-nuts
2019-09-13 17:50:55	<--	kattiyah (~khaled@93.168.18.157) has left #go-nuts
2019-09-13 17:51:44	<--	imsky (~textual@unaffiliated/imsky) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-09-13 17:54:11	-->	d9k (~d9k@178-55-208-82.bb.dnainternet.fi) has joined #go-nuts
2019-09-13 17:55:18	<--	cnsunyour (~cnsunyour@114.244.176.207) has quit (Ping timeout: 265 seconds)
