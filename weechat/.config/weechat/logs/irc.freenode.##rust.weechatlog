2019-09-13 09:06:12	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-09-13 09:06:12	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-09-13 09:06:12	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-09-13 09:06:12	--	Channel ##rust: 512 nicks (2 ops, 0 voices, 510 normals)
2019-09-13 09:06:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-09-13 09:09:11	-->	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has joined ##rust
2019-09-13 09:12:56	<--	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has quit (Remote host closed the connection)
2019-09-13 09:16:32	-->	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-09-13 09:22:09	<--	wmealing (~wmealing@124.149.193.135) has quit (Quit: wmealing)
2019-09-13 09:24:01	-->	tostr (~tostr@unaffiliated/tostr) has joined ##rust
2019-09-13 09:25:52	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-09-13 09:29:32	-->	xvilka (~xvilka@unaffiliated/xvilka) has joined ##rust
2019-09-13 09:30:21	xvilka	if someone wants to join translating all of Tectonic (modern fork of TeX/LaTeX engine) from C to Rust - see https://github.com/tectonic-typesetting/tectonic/issues/459
2019-09-13 09:52:50	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 09:54:54	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 09:55:31	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 09:57:04	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 09:59:31	-->	baali (~baali@117.214.177.6) has joined ##rust
2019-09-13 10:00:40	<--	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has quit (Ping timeout: 265 seconds)
2019-09-13 10:33:30	-->	triptec (~triptec@h88-129-43-171.cust.a3fiber.se) has joined ##rust
2019-09-13 10:40:54	-->	royal_screwup21 (5661e695@gateway/web/cgi-irc/kiwiirc.com/ip.86.97.230.149) has joined ##rust
2019-09-13 10:44:33	<--	panicbit (~panicbit@p57ADE381.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-09-13 10:44:56	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-09-13 10:45:40	-->	panicbit (~panicbit@p57ADE9A9.dip0.t-ipconnect.de) has joined ##rust
2019-09-13 10:48:29	-->	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has joined ##rust
2019-09-13 10:50:05	-->	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has joined ##rust
2019-09-13 10:52:41	vn971	Hi. Suppose I want to call a function that returns Result. If it will return Err, I want to add some additional information to the stack trace, but still error out (either panic or return an enriched Err up to the caller).
2019-09-13 10:52:44	vn971	How should I do that?
2019-09-13 10:53:21	vn971	I know I can, for example, use .unwrap_or_else(|err| panic!("... reason: {}", err));
2019-09-13 10:53:35	vn971	but that kinda transforms the err to a string. Is that OK?
2019-09-13 10:53:45	vn971	(I feel that it's not.)
2019-09-13 10:54:50	j`ey	well that panics, so you dont really pass a string anywhere
2019-09-13 10:54:52	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 245 seconds)
2019-09-13 10:55:08	yrp	are you thinkign somethings going to catch the panic?
2019-09-13 10:55:19	vn971	j`ey: ok, fair. What if I'd want to return a new Result though?
2019-09-13 10:55:31	vn971	yrp: well the panic hook maybe?
2019-09-13 10:56:07	j`ey	vn971: you can make your own struct MyError that wraps the error and includes extra info?
2019-09-13 10:56:52	vn971	j`ey: how do I propermy lake it "include extra info", how does it work? Is it implementing Display?
2019-09-13 10:57:06	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-09-13 10:57:37	vn971	on the JVM, you have Exception-s, which can have additional info, but also optionally point to another Exception as their "reason".
2019-09-13 10:58:28	vn971	* sorry, "properly make it"
2019-09-13 10:58:58	j`ey	vn971: yes Display, there's also source() which can return another error
2019-09-13 10:59:09	j`ey	https://doc.rust-lang.org/std/error/trait.Error.html#method.source
2019-09-13 10:59:09	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-09-13 11:00:39	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-09-13 11:02:36	<--	bitwinery (~bruno@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-09-13 11:04:29	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:09:06	-->	sysKin (~syskin@61-245-149-216.3df595.adl.nbn.aussiebb.net) has joined ##rust
2019-09-13 11:12:55	-->	abhinits2046 (uid373731@gateway/web/irccloud.com/x-iaxmgsbinpjodykk) has joined ##rust
2019-09-13 11:13:23	<--	abhinits2046 (uid373731@gateway/web/irccloud.com/x-iaxmgsbinpjodykk) has left ##rust
2019-09-13 11:16:34	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 11:17:58	<--	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has quit (Remote host closed the connection)
2019-09-13 11:18:53	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:20:29	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 11:24:55	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 11:24:56	-->	ellcs (~mantel@193.174.12.196) has joined ##rust
2019-09-13 11:27:19	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-09-13 11:27:42	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:30:21	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 246 seconds)
2019-09-13 11:36:25	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 11:45:00	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-09-13 11:51:21	<--	PeterRabbit (~peter@2600:6c64:6180:86:7547:7d6e:8024:e963) has quit (Read error: Connection reset by peer)
2019-09-13 11:51:42	-->	PeterRabbit (~peter@2600:6c64:6180:86:7547:7d6e:8024:e963) has joined ##rust
2019-09-13 11:56:52	-->	Ichorio (~Ichorio@2001:16b8:57ca:9600:8541:4cfa:2933:d307) has joined ##rust
2019-09-13 11:57:26	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-09-13 11:59:49	voker57	vn971: consider using this suggested scheme https://docs.rs/failure/0.1.5/failure/
2019-09-13 12:00:51	<--	BlackDex (~blackdex@ori.vyus.nl) has quit (Quit: ByeBye)
2019-09-13 12:09:36	Faux	"error: proc-macro derive panicked" ruh roh!
2019-09-13 12:11:48	Kinnison	ruhroh indeed
2019-09-13 12:13:01	<--	bpsecret (~bpsecret@unaffiliated/bpsecret) has quit (Ping timeout: 276 seconds)
2019-09-13 12:18:29	mstruebing	Is it recommended to `use` everything you need or is it more recommended to use the full qualifier i.e. `std::env::func()` instead of `use std::env` and `env::func()`?
2019-09-13 12:19:00	-->	bpsecret (~bpsecret@unaffiliated/bpsecret) has joined ##rust
2019-09-13 12:19:05	Kinnison	If I'm using it once in the entire file, I will use the full path
2019-09-13 12:19:15	Kinnison	If I'm using a bunch of a module, I'll use the module and do the latter
2019-09-13 12:19:20	Faux	The convention appears to be to `use` only if you are .. using the thing multiple times. This sucked in rust2015, so older code uses things everywhere in horrible ways.
2019-09-13 12:19:36	Kinnison	if I only want one thing out of the module and am using it a lot, I use just the bit I want
2019-09-13 12:20:35	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 246 seconds)
2019-09-13 12:26:05	ilmari	if it's a really long path, I'll `use` it even if I'm only using it once, especially in a function signature that would otherwise fit on one line
2019-09-13 12:26:22	ilmari	current case in point: `aws_lambda_events::event::sns::SnsEvent`
2019-09-13 12:26:34	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 12:27:07	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 245 seconds)
2019-09-13 12:29:03	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 12:30:02	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-09-13 12:30:51	M-ou-se	depending on how generic the name is, i sometimes also 'use' things inside a function, instead of at file scope
2019-09-13 12:32:53	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-09-13 12:35:45	-->	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has joined ##rust
2019-09-13 12:36:16	-->	BlackDex (~blackdex@ori.vyus.nl) has joined ##rust
2019-09-13 12:38:05	nepugia	Hello, I am having problems with the prebuild nightly-x86_64-unknown-linux-musl on alpine linux (which is musl too), which is that i cannot compile some programms dou to this toolchain not supporting dynamic linking, what other options do i have?
2019-09-13 12:38:38	nepugia	I did not find any concrete workarounds on the web (only partial fixes which i don't really know how i would use)
2019-09-13 12:39:05	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 12:39:10	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 12:41:37	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-09-13 12:44:58	oherrala	nepugia: the workaround I found is not to use musl binaries to compile rust
2019-09-13 12:45:42	nepugia	I have not compiled it myself, and i don't have glibc on my system either, setting up a chroot seams like a pretty expensive solution
2019-09-13 12:47:35	oherrala	nepugia: I mean you can't really build anything with musl version of Rust. procedural macros don't work so many crates are out.
2019-09-13 12:48:15	nepugia	hmm, i hope that will be fixed soon(tm) then, is there a prebuild statically linked glibc rust toolchain maybe?
2019-09-13 12:49:32	oherrala	nepugia: AFAIK you can't have statically linked glibc
2019-09-13 12:49:37	oherrala	that's why musl is used :)
2019-09-13 12:50:17	nepugia	well, coinstalling glibc next to musl is something i would rather avoid :)
2019-09-13 12:50:22	nepugia	i suppose a chroot it is then
2019-09-13 12:51:32	<--	tostr (~tostr@unaffiliated/tostr) has quit (Ping timeout: 245 seconds)
2019-09-13 12:52:50	oherrala	I would love to have someone tell me I'm wrong because I'd like to convert our build infrastructure to Alpine Linux
2019-09-13 12:53:37	Faux	Proc macros work, don't they? I'm pretty sure I'm using that somewhere.
2019-09-13 12:54:13	oherrala	Faux: not when using musl linked rust(c)
2019-09-13 12:56:17	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 245 seconds)
2019-09-13 12:57:39	nepugia	Well, not everything doesn't work, just wanted to get started with piston and hit my head severall times on crates using the features thingy, thus i used nightly, but with the stable i was able to get for instance alacritty on my system fine
2019-09-13 12:57:55	nepugia	though i dont know whether the stable version has any alpine linux specific patches i am unaware off
2019-09-13 12:58:22	-->	user9 (984d0e22@leoseb.u-ga.fr) has joined ##rust
2019-09-13 13:01:40	oherrala	This is the problem I'm facing: cannot produce proc-macro for `failure_derive v0.1.5` as the target `x86_64-unknown-linux-musl` does not support these crate types
2019-09-13 13:01:59	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-09-13 13:04:00	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 13:04:45	-->	ytain (~ghfg@2607:f2c0:92f1:f300:ed6b:80ab:697e:76e0) has joined ##rust
2019-09-13 13:05:27	j`ey	and that's because of dylibs, right?
2019-09-13 13:06:36	Faux	Direct use of failure works, for the target (building from normal amd64): https://paste.debian.net/1100534/
2019-09-13 13:06:52	Faux	..which is what I'm doing elsewhere and seemingly not having any problems.
2019-09-13 13:07:02	oherrala	j`ey: I think so
2019-09-13 13:07:19	oherrala	Faux: that's different thing
2019-09-13 13:07:33	vn971	j`ey: voker57: thanks! Will look into it a bit later (now distracted with other work).
2019-09-13 13:07:34	j`ey	Faux: your host is probably glibc?
2019-09-13 13:07:46	Faux	Yeah.
2019-09-13 13:07:58	oherrala	Faux; /opt/cargo/bin/rustc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=2208478b28b34d9fe2750b7939157da417d8918b, with debug_info, not stripped
2019-09-13 13:08:09	j`ey	Faux: so the proc_macro is compiled for glibc
2019-09-13 13:08:18	j`ey	when the host is musl, it doesnt work
2019-09-13 13:08:31	Faux	Ew. :)
2019-09-13 13:09:50	nepugia	guess i will get void linux in a chroot
2019-09-13 13:14:02	oherrala	nepugia: why not docker?
2019-09-13 13:15:05	nepugia	docker is not a linux?
2019-09-13 13:17:59	oherrala	nepugia: https://en.wikipedia.org/wiki/Docker_%28software%29
2019-09-13 13:18:10	nepugia	I know what docker is, docker is not a linux
2019-09-13 13:18:51	oherrala	what?
2019-09-13 13:19:09	nepugia	It is a tool to spin up linuxes using linux namespaces, but it isnt a linux in and of itself
2019-09-13 13:19:10	avu	nepugia: oherrala meant 'docker instead of chroot', not 'docker instead of void linux'
2019-09-13 13:19:14	nepugia	the same way Xen isnt linux
2019-09-13 13:19:22	nepugia	avu, oh
2019-09-13 13:19:27	oherrala	:D
2019-09-13 13:19:30	nepugia	well, in that case, docker is overkill
2019-09-13 13:19:32	nepugia	dont need it
2019-09-13 13:20:01	oherrala	nepugia: dunno about overkill, but the easy way: docker run rust.. :)
2019-09-13 13:20:41	nepugia	i just need a different namespace to run rust in, having to deal with docker is more complexity than i need :)
2019-09-13 13:20:54	vn971	oherrala: docker also makes your system super-insecure if you allow your user to access the docker daemon.
2019-09-13 13:23:03	oherrala	vn971: can you explain?
2019-09-13 13:25:59	vn971	oherrala: if your normal user has access, then it means that any programs running on your behalf of your user have access to the daemon. Having access to the daemon is the same as having root on the host system. You can just run docker with mounted /etc/passwd and read passwords, or mount hard disks inside, etc etc.
2019-09-13 13:26:17	vn971	* if your normal user has access to docker,..
2019-09-13 13:27:02	avu	if you can read passwords from /etc/passwd, you managed to get docker running on a UNIX from the 70s or 80s :p
2019-09-13 13:27:38	-->	tostr (~tostr@unaffiliated/tostr) has joined ##rust
2019-09-13 13:28:19	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Quit: Leaving)
2019-09-13 13:28:44	nepugia	funnily enough alpine linux does have passwords in /etc/passwd
2019-09-13 13:28:48	nepugia	for some reason... :)
2019-09-13 13:29:06	nepugia	or well, for one of my users it seams
2019-09-13 13:29:25	nepugia	(well the hash i mean..)
2019-09-13 13:29:26	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 13:29:36	oherrala	vn971: ok, so how is chroot more secure?
2019-09-13 13:29:51	nepugia	vn971, mount hard disks heh... i wonder why linux doesnt have something like freebsd securelevels
2019-09-13 13:31:35	vn971	avu: oh right, it's not that simple. I forgot the exact details then, but there's a ton of ways to get root on host if you have access to docker daemon. Docker itself kinda says it, unwillingly, in the part that describes giving access to the daemon.
2019-09-13 13:32:43	vn971	it was a bit more honest on that and there was a whole section describing the impact and why it can't be made secure, but then they decided to shrink/remove this part and there's only some small notice. Last time I checked at least. But the notice is still there.
2019-09-13 13:33:49	vn971	oherrala: chroot still requires you to use `root`. It's just being made explicit. You know that anybody who runs chroots can also damage your system, so it should only be you.
2019-09-13 13:34:14	vn971	(with docker, some people don't understand that having access to docker daemon == having root.)
2019-09-13 13:35:51	vn971	nepugia: linux has namespaces still, which can be unshared. E.g. bubblewrap, or just `unshare` if you don't want to touch mount points.
2019-09-13 13:35:53	oherrala	vn971: So Docker is super insecure because some people don't understand it?
2019-09-13 13:36:25	oherrala	vn971: probably the same people who use sudo?
2019-09-13 13:36:29	vn971	oherrala: whether docker is secure or not I don't know in detail, but _having access to docker daemon_ is the same as having root on your system.
2019-09-13 13:36:56	nepugia	vn971, i honestly dont know how namespaces would protect you against someone mounting disk devices
2019-09-13 13:37:06	lupine	best not to install docker, really
2019-09-13 13:37:17	vn971	oherrala: comparing to sudo, docker is then a password-less sudo (in a sense that it can easily be abused to raise priveleges, in an automated way).
2019-09-13 13:37:20	nepugia	best to install docker when it fits your usecase
2019-09-13 13:37:27	lupine	its only purpose is to make capitalists happy
2019-09-13 13:37:34	Faux	You can run container-like things, with safe mounting, inside user namespaces, if you're up for that kind of thing.
2019-09-13 13:38:34	Faux	https://paste.debian.net/1100536/ this doesn't need root, and is enabled by default in e.g. ubuntu's kernels.
2019-09-13 13:39:09	nepugia	namespaces are nice indeed
2019-09-13 13:39:58	vorner	Unprivileged dockers don't have the physical devices visible in them, so you can't mount them. Also, you can run the docker daemon with user privileges.
2019-09-13 13:40:07	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-09-13 13:40:33	vorner	But it has some (severe) limitations, so the defaults are to run it as a very privileged process.
2019-09-13 13:42:11	-->	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has joined ##rust
2019-09-13 13:42:15	nepugia	ugh, getting a no such file or directory when running cargo in my chroot, would be super nice if it actually said /what/ it tries to run
2019-09-13 13:42:26	nepugia	vorner, mknode?
2019-09-13 13:42:29	j`ey	does -v help?
2019-09-13 13:42:37	nepugia	s/e//
2019-09-13 13:42:41	<--	goncalor (~goncalor@unaffiliated/goncalor) has quit (Read error: Connection reset by peer)
2019-09-13 13:42:50	nepugia	j`ey, it does not :/
2019-09-13 13:44:37	<--	ki9a (~ki9a@about/csharp/regular/ki9a) has quit (Ping timeout: 245 seconds)
2019-09-13 13:44:40	-->	goncalor (~goncalor@unaffiliated/goncalor) has joined ##rust
2019-09-13 13:47:21	nepugia	huh, the thing it cant execute is... cargo :)
2019-09-13 13:47:34	nepugia	in the .rustup space somewhere... why that doesnt work i dont know
2019-09-13 13:47:53	<--	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has quit (Remote host closed the connection)
2019-09-13 13:47:56	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Ping timeout: 245 seconds)
2019-09-13 13:48:08	nepugia	ldd on that looks fine :/
2019-09-13 13:49:24	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 13:49:42	-->	happycoder_ (~happycode@14.139.185.114) has joined ##rust
2019-09-13 13:49:53	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 13:50:44	nepugia	hmm, i have /dev/shm and /proc and /sys mounted... did i miss something else linux wants normally?
2019-09-13 13:51:20	vn971	vorner: but if you have access to the docker daemon, what stops you from starting a priveleged container?
2019-09-13 13:52:47	vn971	nepugia: my advise: if you just want to isolate running of e.g. `rust`, take a look at bubblewrap. It's a tool that gives you full control over what's happening, and it's super-easy to get started with.
2019-09-13 13:53:07	nepugia	full control? how would that work?
2019-09-13 13:53:37	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 13:53:49	nepugia	hmm, i dont need a sandbox really
2019-09-13 13:53:52	vn971	nepugia: e.g. the simplest example:  `bwrap --unshare-all --ro-bind / / --tmpfs ~ bash`.  This will unshare all namespaces, bound `/` as read-only, hide your `~` completely and put you in a bash shell inside.
2019-09-13 13:53:59	vorner	vn971, If the docker daemon already starts with user privileges, it is unable to start privileged containers.
2019-09-13 13:54:16	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 13:54:20	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 268 seconds)
2019-09-13 13:54:23	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 13:54:35	nepugia	vn971, what? how from that command is it implied that you want to hide ~?
2019-09-13 13:54:44	vorner	https://docs.docker.com/engine/security/userns-remap/
2019-09-13 13:54:50	vn971	vorner: so you are saying you have experience in running docker daemon from a normal user, do I hear you correctly?
2019-09-13 13:55:07	nepugia	oh, you mount a tmpfs over it
2019-09-13 13:55:09	vn971	again, *docker* *daemon* -- as user.
2019-09-13 13:55:12	nepugia	but what if i just unmount it?
2019-09-13 13:55:39	vn971	nepugia: inside the jail, there are no suid programs, no way to invoke root, no `sudo` that would work.
2019-09-13 13:56:06	nepugia	how so? namespaces have root processes too...
2019-09-13 13:56:18	nepugia	just that root means somethign slightly different
2019-09-13 13:56:43	vn971	nepugia: I mean, if you run bubblewrap from non-root, then you will remain non-root.
2019-09-13 13:56:59	vn971	vorner: in the last link you're clearly confusing docker daemon with programs that are running inside docker.
2019-09-13 13:57:01	vorner	vn971, I think it starts with root itself. But it is not willing to start privileged containers and remaps all users (even 0/root) in the container onto UIDs that are non-root.
2019-09-13 13:57:13	vn971	vorner: blease educate yourself on the difference, TBH...
2019-09-13 13:58:02	nepugia	the programm seams to be setuid(0) so non-root isnt right i suppose
2019-09-13 13:58:56	nepugia	welp, the entire toolchain doesnt seam to want to work in my void linux chroot
2019-09-13 13:59:12	vn971	nepugia: it provides a limited subset of the so called user namespaces. It's setuid, it configures mount points, does unshares, and then strips off root rights and runs your actual thing without root again.
2019-09-13 14:00:07	nepugia	i dont see why i would need that for my usecase
2019-09-13 14:00:14	vn971	vorner: > But it is not willing to start privileged containers  -- I think this is an incorrect statement. The whole link is about which restricted containers can you run inside docker, not how you start `dockerd`.
2019-09-13 14:00:23	nepugia	the only thing i want to do is confuse processes as to where they shall look for glibc, which works fine with chroot
2019-09-13 14:00:58	vorner	vn971, Sorry, it's been a while since I looked into that thing. I need that crap (docker) in work, so I did do the research years ago and found the least evil way to run it on my system.
2019-09-13 14:01:05	vn971	nepugia: well you could do `bwrap --bind /path/to/chroot / bash`
2019-09-13 14:01:18	nepugia	i could then also just use chroot
2019-09-13 14:02:08	vn971	vorner: yeah, it's actually a pain for many developers.. You kinda need to use docker and that's it. That's final. :/
2019-09-13 14:02:08	vn971	What I personally did is then run `qemu` with a dockerd inside, and expose the dockerd port to the host system.
2019-09-13 14:02:31	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Remote host closed the connection)
2019-09-13 14:02:52	nepugia	isnt the entire point of docker to use linux namespaces? running it in a vm kinda defeats the point of lightweight containers
2019-09-13 14:03:29	<--	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-09-13 14:03:30	vn971	vorner: that requires a lot of work though. Installing another OS inside qemu, configuring docker inside the OS, expose the port through qemu, and finally set local environment variable DOCKER_HOST='tcp://127.0.0.1:2375'
2019-09-13 14:03:40	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-09-13 14:04:10	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-09-13 14:04:18	vn971	and if you need to access the containers created inside qemu, you need to pass all ports from inside qemu to host as well..
2019-09-13 14:04:20	delYsid	Faux: what does "application/xml".parse() do in your sonos.rs PR?  I sort of fail to understand why this string would need "parsing", and what the call actually does.
2019-09-13 14:04:23	vorner	And then it runs much slower and such… which is a PITA if develop for „bigger embedded“ (routers and such) and sometime needs to compile the whole damn system, or bigger C++ project.
2019-09-13 14:04:47	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-09-13 14:05:47	vn971	vorner: yes, of course. Then you lose all the speed that you could get from running docker natively, as if it'd be the case if dockerd could be made really secure. Basically you start to be like a MacOS or Windows user in that regard.
2019-09-13 14:06:27	nepugia	execve("./rustc", ["./rustc"], 0x7ffbffffbd10 /* 12 vars */) = -1 ENOENT (No such file or directory)
2019-09-13 14:06:40	nepugia	ugh, this is too annoying
2019-09-13 14:06:58	nepugia	maybe ill just wait till the toolchain is fixed to properly support musl...
2019-09-13 14:07:02	vn971	it's really a pity that dockerd has no option like `dockerd --restrict-priveleged`, which would forbid unrestricted mode, fordib mounting stuff from HOST, etc. Only run some public bullshit, allow copying if the invoked user itself has access to the files, etc.
2019-09-13 14:07:06	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-09-13 14:07:57	vn971	nepugia: musl works just fine for a lot of people (including me). How do you run it?
2019-09-13 14:08:08	vorner	Anyway, I'm pretty sure the unprivileged docker container is unable to do mknod or so and root inside (UID=0) is not really privileged with that setup. It's probably not 100% secure, but stuff like mounting things in use the privileges of the outside user, so if you want to mount something in, you actually have to make it something like word-readable.
2019-09-13 14:08:30	nepugia	vn971, i just run alpine linux
2019-09-13 14:09:15	nepugia	there the musl rust toolchain does not support dynamic linking which basically breaks all compiles i am interested in
2019-09-13 14:09:26	nepugia	(no way to tell it to link those things statically either)
2019-09-13 14:10:18	avu	vn971: you're absolutely right, I was just nitpicking, not disagreeing with you in general, sorry
2019-09-13 14:10:42	vn971	vorner: luckily docker is still honest about the security properties, so read this: https://docs.docker.com/engine/reference/commandline/dockerd/
2019-09-13 14:10:42	vn971	> Warning: Changing the default docker daemon binding to a TCP port or Unix docker user group will increase your security risks by allowing non-root users to gain root access on the host. Make sure you control access to docker. If you are binding to a TCP port, anyone with access to that port has full Docker access; so it is not advisable on an open network.
2019-09-13 14:11:48	vn971	* relatively honest, as this crucial thing is only written somewhere in the middle, so many people do not know it.
2019-09-13 14:13:21	nepugia	well, i give up on this... gues i wont be using rust then for now :/
2019-09-13 14:13:52	vorner	Yes, but that note assumes that you also run without the user namespace mapping option. Then you can start a docker with `--privileged` and have a root. If you start docker with the user-ns and try that, you get „Error response from daemon: privileged mode is incompatible with user namespaces.“ and it won't run.
2019-09-13 14:14:10	vorner	>  Potentially the most important security improvement is that, by default, container processes running as the root user will have expected administrative privilege (with some restrictions) inside the container but will effectively be mapped to an unprivileged uid on the host.
2019-09-13 14:15:42	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 245 seconds)
2019-09-13 14:16:35	Faux	delYsid: A header isn't necessarily a valid string, and they have chosen to call the conversion from a string into a HeaderThing a "parse".
2019-09-13 14:16:46	<--	baali (~baali@117.214.177.6) has quit (Ping timeout: 246 seconds)
2019-09-13 14:21:42	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-09-13 14:24:13	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-09-13 14:32:34	<--	happycoder_ (~happycode@14.139.185.114) has quit (Ping timeout: 268 seconds)
2019-09-13 14:33:14	vn971	vorner: you're again saying things about "--priveleged" _container_. Dockerd cannot be priveleged or not priveleged. It's the daemon.
2019-09-13 14:33:51	vn971	You cannot run dockerd with user namespace mapping option, or anything of the like.
2019-09-13 14:34:06	<--	fjellfras (~fjellfras@223.229.235.29) has quit (Quit: Leaving)
2019-09-13 14:35:13	vn971	the quoted text and link below are for dockerd and its daemon. As the documentation correctly says, having access to the dockerd TCP port or docker group allows "non-root users to gain root access on the host".
2019-09-13 14:37:29	vorner	No, I'm not saying that. I'm saying that if I run dockerd with the `--user-ns` *parameter*, it itself runs as root, yes, but refuses to start a container not mapped to your user. And the way to gain the root access to the host is by executing a privileged container and mapping the whole system into it or something such. It won't work with dockerd with the userns parameter, it'll refuse to do so.
2019-09-13 14:37:44	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 14:37:46	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-09-13 14:37:46	vorner	Or are you aware of *other* ways to gain root on the host?
2019-09-13 14:37:48	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-09-13 14:40:43	vorner	(or, it won't refuse to map it, but the „root“ inside will have the same restrictions to access the system as your user has outside, so it'll be effectively useless to do the mapping)
2019-09-13 14:40:55	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 246 seconds)
2019-09-13 14:41:26	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined ##rust
2019-09-13 14:44:25	vorner	Ah, crap, there's a way through the command line maze to disable this enforcement as a user. That's stupid :-|.
2019-09-13 14:44:44	vn971	vorner: ah, got it, there is a dockerd parameter as well indeed.
2019-09-13 14:45:05	vn971	vorner: I thought so as well, but if you read further, they say it's still enforced.
2019-09-13 14:46:57	<--	Ichorio (~Ichorio@2001:16b8:57ca:9600:8541:4cfa:2933:d307) has quit (Ping timeout: 245 seconds)
2019-09-13 14:47:03	vorner	Just tried, it isn't. I'm running dockerd with the mapping enabled, but `docker run --userns=host --privileged` works :-|. And it even allows me things I wasn't allowed before.
2019-09-13 14:48:17	vn971	ah right, --userns=host means to disable this thing... "Nice".
2019-09-13 14:48:44	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 265 seconds)
2019-09-13 14:49:05	vorner	But adding a parameter „Don't accept userns overrides“ to dockerd should technically be possible…
2019-09-13 14:49:17	vn971	Well, there's a reason why people joke that the letter "s" in docker stands for "security".
2019-09-13 14:49:52	<--	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has quit (Ping timeout: 245 seconds)
2019-09-13 14:52:27	-->	happycoder (~happycode@137.97.182.51) has joined ##rust
2019-09-13 14:54:43	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 14:59:45	-->	ki9a (~ki9a@about/csharp/regular/ki9a) has joined ##rust
2019-09-13 15:06:01	<--	jamm (~jamm@unaffiliated/jamm) has quit (Read error: Connection reset by peer)
2019-09-13 15:06:20	tjis	how would i run a bit of code only in debug mode?
2019-09-13 15:06:58	<--	happycoder (~happycode@137.97.182.51) has quit (Read error: No route to host)
2019-09-13 15:10:40	<--	lovesegfault (~bemeurer@4.16.192.242) has quit (Ping timeout: 246 seconds)
2019-09-13 15:11:52	-->	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has joined ##rust
2019-09-13 15:20:45	vn971	tjis: would this solve your problem?: https://doc.rust-lang.org/std/macro.cfg.html
2019-09-13 15:21:35	tjis	perhaps. is debug/release mode something I can look up with cfg?
2019-09-13 15:22:33	j`ey	debug_assertions is on for debug
2019-09-13 15:22:55	tjis	neat. that'll work great then. thank you
2019-09-13 15:23:12	<--	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has quit (Ping timeout: 245 seconds)
2019-09-13 15:29:30	-->	mbestavr-rh (mbestavrre@nat/redhat/x-slukdxasyyfiefhe) has joined ##rust
2019-09-13 15:30:12	raeken	https://podman.io/
2019-09-13 15:30:16	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-09-13 15:30:21	raeken	"What is Podman? Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode. Simply put: `alias docker=podman`. More details here. "
2019-09-13 15:30:26	-->	scunc (~scunc@183-140.its-is.uni.edu) has joined ##rust
2019-09-13 15:30:44	-->	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has joined ##rust
2019-09-13 15:32:53	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:33:31	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 15:34:52	vn971	raeken: it's only for those who want to enable "user namespaces" on their system though.
2019-09-13 15:36:24	vn971	many people feel it's not secure enough. Though Linux started adding the corresponding flag by default since recently, so maybe it'll eventually be considered more stable by security-oriented folks.
2019-09-13 15:36:32	<--	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has quit (Ping timeout: 245 seconds)
2019-09-13 15:37:19	-->	stephaneyfx (~stephaney@192.157.123.229) has joined ##rust
2019-09-13 15:38:40	<--	Proximyst (~Proximyst@116.203.198.234) has quit (Quit: Robbing a bank)
2019-09-13 15:38:55	-->	Proximyst (~Proximyst@116.203.198.234) has joined ##rust
2019-09-13 15:47:01	-->	jenny-m (~jdm-@75.98.19.133) has joined ##rust
2019-09-13 15:47:10	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:48:02	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 15:48:20	vn971	raeken: but it looks awesome if you already have userns anyway!
2019-09-13 15:52:43	-->	wmealing (~wmealing@124.149.193.135) has joined ##rust
2019-09-13 16:04:12	-->	npmccallum (npmccallum@nat/redhat/x-dmeigpcjoibniuox) has joined ##rust
2019-09-13 16:04:39	-->	npmccallum_ (npmccallum@nat/redhat/x-eaympaxdkzssviqq) has joined ##rust
2019-09-13 16:04:49	<--	npmccallum (npmccallum@nat/redhat/x-dmeigpcjoibniuox) has quit (Read error: Connection reset by peer)
2019-09-13 16:05:16	<--	npmccallum_ (npmccallum@nat/redhat/x-eaympaxdkzssviqq) has quit (Client Quit)
2019-09-13 16:05:31	-->	npmccallum (npmccallum@nat/redhat/x-jwpayofinzbkhtbb) has joined ##rust
2019-09-13 16:07:51	-->	AbedB (~AbedBhuty@bzq-79-178-21-93.red.bezeqint.net) has joined ##rust
2019-09-13 16:09:09	<--	npmccallum (npmccallum@nat/redhat/x-jwpayofinzbkhtbb) has quit (Client Quit)
2019-09-13 16:09:28	-->	npmccallum (npmccallum@nat/redhat/x-enlzokfuxnwxdyfg) has joined ##rust
2019-09-13 16:12:17	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:12:34	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:16:12	<--	npmccallum (npmccallum@nat/redhat/x-enlzokfuxnwxdyfg) has quit (Remote host closed the connection)
2019-09-13 16:16:12	la_mettrie	function_name(argument_name.struct_name.field_name)
2019-09-13 16:16:18	-->	mindCrime__ (~mindCrime@216.85.170.148) has joined ##rust
2019-09-13 16:16:29	<--	federico1 (~federico1@opensuse/member/Federico-Mena) has quit (Read error: Connection reset by peer)
2019-09-13 16:16:33	la_mettrie	now if this field_name is Option<T> instead of ordinary field, how the syntax goes?
2019-09-13 16:16:52	<--	SpaceManiac (~SpaceMani@2601:200:4400:ec::1006) has quit (Remote host closed the connection)
2019-09-13 16:17:31	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-09-13 16:17:47	-->	mindCrime_ (~mindCrime@216.85.170.148) has joined ##rust
2019-09-13 16:18:23	Lumpio-	If you want to get the value out of the option and crash if it's not there it's either unwrap() or as_ref().unwrap() if you want a reference to it instead
2019-09-13 16:18:36	-->	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has joined ##rust
2019-09-13 16:18:37	Lumpio-	If you want to do something else if the value isn't there, I'd use a match statement to check
2019-09-13 16:18:49	Lumpio-	(expression*)
2019-09-13 16:19:23	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c4ac5268e9bf2746a772b1d7aaf78cfe what's going wrong here?
2019-09-13 16:19:46	Yaniel	if let can sometimes look better than match
2019-09-13 16:19:52	Yaniel	and then there'
2019-09-13 16:20:00	Yaniel	and then there is unwrap_or_else()
2019-09-13 16:20:20	Lumpio-	Yeah if let is actually often nicer for options
2019-09-13 16:21:03	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 16:21:32	<--	mindCrime__ (~mindCrime@216.85.170.148) has quit (Ping timeout: 265 seconds)
2019-09-13 16:23:16	j`ey	Ah, it's because Input could be chosen by the caller, but I call it with a Vec
2019-09-13 16:23:19	Lumpio-	j`ey: A caller could plausibly pass in something... yeah
2019-09-13 16:23:23	Lumpio-	Something that is AsRef but not a Vec
2019-09-13 16:23:34	j`ey	and you cant impl AsRef in Fn()
2019-09-13 16:24:35	j`ey	and https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=010a0a94e574e7a09e91396ea5a30698 doesnt work
2019-09-13 16:26:30	Lumpio-	I'm not sure what that last version is even trying to do
2019-09-13 16:26:36	Lumpio-	Require Input to be Vec<u8>?
2019-09-13 16:26:45	Lumpio-	At that point you might as well say Parser: Fn(Vec<u8>) -> Vec<u8>
2019-09-13 16:26:58	j`ey	hm
2019-09-13 16:27:08	j`ey	maybe I meant something like Vec<u8>: Into<Input>?
2019-09-13 16:27:10	j`ey	or something
2019-09-13 16:27:13	Lumpio-	However what comes to parsing bytes when I tried out tokio I really liked the Bytes type for parsing
2019-09-13 16:27:18	Lumpio-	(The bytes crate isn't dependent on Tokio)
2019-09-13 16:27:28	Lumpio-	Has a couple of convenience methods Vec doesn't
2019-09-13 16:27:55	Yaniel	byteorder has some too
2019-09-13 16:28:46	j`ey	I dont have the full context, not my code
2019-09-13 16:31:17	Lumpio-	hm
2019-09-13 16:32:49	j`ey	I think they wanted Parser to be able take either &[u8] or &Vec<u8> hence the use of AsRef
2019-09-13 16:36:01	calops	but if you take &[u8], &Vec<u8> will work automatically
2019-09-13 16:36:05	calops	no?
2019-09-13 16:38:32	-->	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has joined ##rust
2019-09-13 16:38:48	j`ey	I asked why they went with AsRef, not heard back yet
2019-09-13 16:39:41	tjis	j`ey: this is actually the pattern i'm following. is there a better way to accomplish something like that?
2019-09-13 16:43:27	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-09-13 16:44:26	<--	baali (~baali@59.98.237.150) has quit (Quit: Leaving.)
2019-09-13 16:44:36	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 16:46:07	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 245 seconds)
2019-09-13 16:46:16	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined ##rust
2019-09-13 16:47:01	-->	elichai2 (uid212594@gateway/web/irccloud.com/x-uoedvggqaregeizh) has joined ##rust
2019-09-13 16:49:06	<--	baali (~baali@59.98.237.150) has quit (Client Quit)
2019-09-13 16:54:37	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:55:08	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:57:13	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Remote host closed the connection)
2019-09-13 16:57:38	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-09-13 16:58:08	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 16:58:38	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:58:49	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 17:02:08	<--	stephaneyfx (~stephaney@192.157.123.229) has quit (Quit: Leaving)
2019-09-13 17:04:43	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-09-13 17:05:45	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-09-13 17:06:06	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-09-13 17:06:10	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-09-13 17:06:49	<--	sysKin (~syskin@61-245-149-216.3df595.adl.nbn.aussiebb.net) has quit (Ping timeout: 240 seconds)
2019-09-13 17:08:16	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 246 seconds)
2019-09-13 17:08:25	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-09-13 17:10:36	<--	jenny-m (~jdm-@75.98.19.133) has quit (Quit: Leaving...)
2019-09-13 17:12:01	<--	tostr (~tostr@unaffiliated/tostr) has quit (Ping timeout: 276 seconds)
2019-09-13 17:18:46	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-09-13 17:19:35	-->	analogue (~analogue@129.63.253.88) has joined ##rust
2019-09-13 17:19:49	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 276 seconds)
2019-09-13 17:21:12	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-09-13 17:23:38	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-09-13 17:24:08	-->	t7 (~tommo@2a00:23c5:1284:fc00:a171:8f14:2f0e:83cc) has joined ##rust
2019-09-13 17:24:11	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:24:16	<--	zirpu (~allan@24.35.77.206) has quit (Client Quit)
2019-09-13 17:26:52	-->	nico103 (~nico@24.28.108.183) has joined ##rust
2019-09-13 17:28:15	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 17:28:52	-->	Ichorio (~Ichorio@2001:16b8:57ca:9600:59de:cc68:6c74:976c) has joined ##rust
2019-09-13 17:28:56	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:31:13	-->	mcoffin (~mcoffin@gateway/tor-sasl/mcoffin) has joined ##rust
2019-09-13 17:35:01	<--	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Read error: Connection reset by peer)
2019-09-13 17:35:13	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-09-13 17:35:53	<--	zirpu (~allan@24.35.77.206) has quit (Quit: WeeChat 2.6)
2019-09-13 17:36:08	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:39:02	<--	matthias_bgg_ (~mbgg@37.223.145.235) has quit (Ping timeout: 245 seconds)
2019-09-13 17:40:25	-->	Oct (foobar@poulet.zoy.org) has joined ##rust
2019-09-13 17:42:17	-->	jenny-m (~jdm-@corp-nat.fw1.untrust.tor1.mozilla.com) has joined ##rust
2019-09-13 17:43:45	Oct	hello, I have a crate of mine, when I put foo="2.0.1" in my Cargo file, it fetches version "2.1.0", is this expected?
2019-09-13 17:43:47	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 17:44:12	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 17:44:58	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 17:45:11	Faux	Yes, 2.0.1 means >=2.0.1 <3. https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
2019-09-13 17:45:16	Oct	mm, this seems to be an expected semver behavior
2019-09-13 17:45:23	Oct	thanks Faux :)
2019-09-13 17:47:09	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 17:47:43	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 17:47:47	<--	Ichorio (~Ichorio@2001:16b8:57ca:9600:59de:cc68:6c74:976c) has quit (Ping timeout: 245 seconds)
2019-09-13 17:48:58	-->	mryandao_ (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-09-13 17:50:43	-->	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has joined ##rust
2019-09-13 17:51:19	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-09-13 17:51:26	<--	ellcs (~mantel@193.174.12.196) has quit (Ping timeout: 265 seconds)
2019-10-17 11:12:42	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 11:12:42	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 11:12:42	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 11:12:42	--	Channel ##rust: 560 nicks (2 ops, 0 voices, 558 normals)
2019-10-17 11:12:58	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 11:15:56	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-17 11:17:03	-->	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 11:17:32	-->	ev4rist3 (~phoenix@x4db76dde.dyn.telefonica.de) has joined ##rust
2019-10-17 11:18:52	Xatenev	hmm, I'd like to know more about how vlang.org does their memory safety
2019-10-17 11:18:54	Xatenev	but i dont find a lot of info
2019-10-17 11:19:13	Xatenev	err
2019-10-17 11:19:14	Xatenev	vlang.io
2019-10-17 11:19:40	<--	DTEIT (DTEIT@nat/redhat/x-aqsmvoilvodamjix) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-10-17 11:19:46	<--	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2019-10-17 11:20:07	-->	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 11:21:11	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 11:21:11	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 11:21:11	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 11:21:11	--	Channel ##rust: 560 nicks (2 ops, 0 voices, 558 normals)
2019-10-17 11:21:11	-->	DTEIT (DTEIT@nat/redhat/x-qaruolhwehlnrqss) has joined ##rust
2019-10-17 11:21:22	Faux	It looks like a DSL for C, so presumably just inserts bounds checks, null checks, etc., and doesn't have pointer areithemereatic?
2019-10-17 11:21:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 11:22:14	Xatenev	Faux, have you looked at the vlang.io?
2019-10-17 11:22:21	Xatenev	DSL sounds as if you looked at vlang.org, i misstyped that
2019-10-17 11:23:21	Xatenev	yeah no pointer arithmetic
2019-10-17 11:23:26	Xatenev	atleast i dont find it in the dos
2019-10-17 11:23:27	Xatenev	docs*
2019-10-17 11:24:13	-->	t7 (~tommo@2a00:23c5:1284:fc00:3d29:e556:f917:896b) has joined ##rust
2019-10-17 11:24:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 11:24:55	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-17 11:25:04	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-17 11:25:18	Xatenev	I do like that you only have to declare a parameter as a reference and the compiler figures out for you whether it should pass a reference or the actual object
2019-10-17 11:25:19	Faux	https://paste.debian.net/1107619/ there's the output for the "json" example on their homepage, after running it through clang-format.
2019-10-17 11:25:19	Xatenev	thats cool
2019-10-17 11:26:36	<--	baali (~baali@59.97.69.245) has quit (Ping timeout: 268 seconds)
2019-10-17 11:31:19	Xatenev	Faux, It can do both it seems
2019-10-17 11:31:39	Xatenev	Does V use LLVM?
2019-10-17 11:31:39	Xatenev	No. V compiles directly to machine code. and V can also emit human readable C, which can then be compiled to run on any platform.
2019-10-17 11:31:50	Yaniel	*eventually
2019-10-17 11:32:16	Faux	Without looking, I am almost certain that they are generating C, then immediately running it through gcc (or clang, but they have decided llvm is evil).
2019-10-17 11:32:47	Xatenev	Faux, only for production builds because they don't have their own optimizer I think...
2019-10-17 11:32:50	-->	JWatkins (~quassel@unaffiliated/jwatkins) has joined ##rust
2019-10-17 11:32:52	Xatenev	atleast thats what I can read out of their docs
2019-10-17 11:33:04	Yaniel	oh, they actually have something that works now?
2019-10-17 11:33:17	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:33:18	Yaniel	last time it was brought up all they had was plans and broken code
2019-10-17 11:33:32	j`ey	it can generate C, ish
2019-10-17 11:33:37	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:33:42	Yaniel	and IIRC it was indeed going through C
2019-10-17 11:33:55	Faux	faux@astoria:~/clone/v% strace -yy -ff -eexecve ./v examples/json.v  2>&1 | fgrep 'cc"'
2019-10-17 11:33:57	Faux	[pid 15715] execve("/var/tmp/tcc/bin/tcc", ["/var/tmp/tcc/bin/tcc", "-std=gnu11", "-w", "-Werror=impl
2019-10-17 11:34:08	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:34:10	Faux	Insecure use of temp paths, good job.
2019-10-17 11:34:33	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:35:03	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:35:24	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:35:43	Xatenev	Faux, why insecure?
2019-10-17 11:35:53	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:36:18	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:36:42	Faux	Writing to a predictable path in a directory others control (such as /tmp or /var/tmp) is a classic security vulnerability (except on kernels with the hardening turned on).
2019-10-17 11:36:47	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:37:13	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:37:41	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:38:04	Xatenev	I don't understand how a security vulnerability can result from that
2019-10-17 11:38:19	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 11:38:39	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-17 11:40:14	-->	pedro4 (~pedro4@134.19.179.179) has joined ##rust
2019-10-17 11:40:31	Faux	CWE-377. Simplest case is the attacker creates a symlink from /tmp/temp.txt to /etc/shadow, and root opens and writes to it, and now the system is dead.
2019-10-17 11:41:13	Xatenev	who is the attacker in that case :O
2019-10-17 11:41:20	Faux	Me, a non-root user on the box.
2019-10-17 11:41:59	Xatenev	so what you are saying is i replace /var/tmp/tcc/bin/tcc with a file called temp.txt
2019-10-17 11:42:04	Xatenev	or well a symlink
2019-10-17 11:42:24	Xatenev	well thats not possible
2019-10-17 11:42:29	Xatenev	because of the access rights of the directory `tcc`
2019-10-17 11:42:40	Xatenev	writing is not permitted
2019-10-17 11:42:43	Xatenev	so i dont understand ur example :(
2019-10-17 11:43:04	Faux	The simplest attack does not apply to directories, no. Go read the docs on the classic CWE.
2019-10-17 11:43:36	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-17 11:44:27	Xatenev	I have read CWE-377 and i dont understand how it applies in this case :/
2019-10-17 11:44:40	Faux	It might not, but it almost certainly does.
2019-10-17 11:45:09	Xatenev	from what I understand it would only if the generated tcc directory would be writeable by `Other`
2019-10-17 11:45:19	Xatenev	otherwise its to be expected that it contains the expected files.
2019-10-17 11:45:54	Faux	I am not doing a security review of a random project beyond pointing out that it would automatically, immediately fail any automatic security scanner.
2019-10-17 11:46:09	Xatenev	:)
2019-10-17 11:46:11	mixi	what does it do if the directory already exists with different permissions/owner than it expects?
2019-10-17 11:46:20	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 11:46:25	j`ey	oh it's using tcc now, cool
2019-10-17 11:46:44	mixi	and if it goes the extra mile to check permissions/owner: does it do it in a racy way?
2019-10-17 11:46:57	-->	baali (~baali@59.98.234.75) has joined ##rust
2019-10-17 11:48:20	Faux	You can probably do that safely now on linux, with mkdirat(2) and friends.
2019-10-17 11:48:33	Faux	Not that anyone would ever bother.
2019-10-17 11:52:36	Faux	Haha, if it can't run /var/tmp/tcc it .. just uses gcc.
2019-10-17 11:53:27	Xatenev	Faux, lol
2019-10-17 11:53:28	Xatenev	^^
2019-10-17 11:56:00	Faux	So, the Makefile has the vuln, it runs "rm -rf /var/tmp/tcc". If you "ln -s /home /var/tmp/tcc" and then someone else runs 'make', they lose their homedir.
2019-10-17 11:56:51	Xatenev	oh yeah
2019-10-17 11:56:54	Xatenev	thats no good
2019-10-17 11:57:30	Faux	Hardened distros, including Ubuntu, ship with YAMA enabled, which should block that, but I didn't test it.
2019-10-17 11:58:01	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-17 11:58:32	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-10-17 11:58:33	Yaniel	ahh the classic "well then just delete... everything?"
2019-10-17 11:58:58	mixi	i'm pretty sure rm -rf doesn't follow symlinks
2019-10-17 11:59:12	Yaniel	a lot of fun was had when steam had a similar bug
2019-10-17 11:59:36	mixi	it would be different if the command was "rm -rf /var/tmp/tcc/" (note the trailing slash)
2019-10-17 11:59:54	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 11:59:59	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-17 12:00:04	Yaniel	I think the initial report was like "steam tried to update itself and now my / is empty"
2019-10-17 12:00:05	Faux	mixi: *flips table*
2019-10-17 12:00:34	Xatenev	mixi, It has a trailing slash.
2019-10-17 12:00:39	-->	Mrbuck (~Mrbuck@ec2-34-202-1-168.compute-1.amazonaws.com) has joined ##rust
2019-10-17 12:00:40	Faux	mixi: It is. But I wasn't aware of that, I only tested it.
2019-10-17 12:02:43	Faux	That zsh tab completion thing, where it draws the /, then removes it if you press return, is now creeping me out.
2019-10-17 12:03:53	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Ping timeout: 276 seconds)
2019-10-17 12:07:20	Moongoodgirl	isn't like half the point of V that it compiles to C?
2019-10-17 12:08:28	j`ey	Moongoodgirl: dont think so
2019-10-17 12:08:46	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:09:58	Moongoodgirl	huh.
2019-10-17 12:12:14	Yaniel	no, afaik that is more of a technical limitation for now
2019-10-17 12:13:15	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-17 12:13:20	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Ping timeout: 265 seconds)
2019-10-17 12:18:44	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Quit: Leaving)
2019-10-17 12:20:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 12:22:50	elichai2	any way to make this work? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3e95d748642db2358022268dffe8654a
2019-10-17 12:23:26	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-17 12:26:29	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-17 12:28:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:29:13	voker57	elichai2: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d3a673c9ecf84ddb003265fdee785b50
2019-10-17 12:29:21	Mrbuck	play.rust is copy cat og plat.go ?
2019-10-17 12:29:31	Mrbuck	coped from goland play ?
2019-10-17 12:30:09	elichai2	voker57: hmm why?
2019-10-17 12:30:16	voker57	why what?
2019-10-17 12:30:38	Moongoodgirl	elichai2: Files track their position. After writing data, the position is after the data you just wrote.
2019-10-17 12:30:56	Moongoodgirl	elichai2: If there wasn't any other data in the file, then you're at the end of the file, and read() returns empty.
2019-10-17 12:31:44	Moongoodgirl	Mrbuck: well, it looks different :P
2019-10-17 12:32:24	elichai2	Moongoodgirl: so why is it required even if I use the file descriptor itself?
2019-10-17 12:32:47	Faux	The file descriptor tracks it, not Rust.
2019-10-17 12:33:00	Moongoodgirl	elichai2: You're not using a raw file descriptor; you're using a Rust `File`.
2019-10-17 12:33:01	Faux	POSIX baby.
2019-10-17 12:33:12	elichai2	I know. just a sec :)
2019-10-17 12:33:14	Moongoodgirl	But, yeah, this is an OS thing, not specific to Rust.
2019-10-17 12:33:14	elichai2	Faux: ohh
2019-10-17 12:33:41	Faux	One day we'll invent a file API people can actually use!
2019-10-17 12:33:43	elichai2	i'll look into the seek implementation. thanks :)
2019-10-17 12:33:44	Mrbuck	Moongoodgirl: ok and are you good girl  ?
2019-10-17 12:34:07	 *	Moongoodgirl is a very good girl. Woof. :3
2019-10-17 12:34:10	Mrbuck	I noticed even in rust conf many women
2019-10-17 12:34:13	Mrbuck	I love it
2019-10-17 12:34:31	Mrbuck	Rust is women language I think
2019-10-17 12:34:38	Mrbuck	rustbook coauthor a woman
2019-10-17 12:34:45	Moongoodgirl	/r/unnecessarilygendered
2019-10-17 12:34:46	elichai2	yep :) it calls lseek64(3)
2019-10-17 12:35:23	Moongoodgirl	If we were inventing a file API from scratch, would we still track position?
2019-10-17 12:35:24	Mrbuck	Moongoodgirl:  is that redidt ?
2019-10-17 12:35:35	voker57	probably because Mozilla is SJWs and using gender quotas
2019-10-17 12:38:29	capitol	O_o
2019-10-17 12:38:41	Moongoodgirl	Making a new file API without being tied to current POSIX would actually be quite nice.
2019-10-17 12:39:04	Moongoodgirl	We could have handles to paths, which you could use to unlink a file without accidentally unlinking a different file if it got replaced.
2019-10-17 12:39:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 12:39:33	Faux	https://github.com/FauxFaux/tempfile-fast-rs/blob/cbfe975e52bc07a2e5bafcefd74d194e8a54613f/src/sponge.rs#L9 >.>
2019-10-17 12:39:50	Moongoodgirl	And also the Linux thing where you can make an anonymous file on a given filesystem, and later make a link to it (or not)
2019-10-17 12:40:32	Faux	¬_¬_¬
2019-10-17 12:44:06	Yaniel	>handles to paths, which you could use to unlink a file without accidentally unlinking a different file if it got replaced
2019-10-17 12:44:15	Yaniel	isn't this how linux file descriptors work, at least for file contents?
2019-10-17 12:44:41	Yaniel	s/linux/unix/
2019-10-17 12:45:28	Yaniel	also, a new file api that is not tied to posix is quite a relevant thing for redox, no?
2019-10-17 12:46:08	Moongoodgirl	There's no funlink() though.
2019-10-17 12:46:40	Yaniel	mm right, that would not make sense since hardlinks exist
2019-10-17 12:46:47	Moongoodgirl	And you can't atomically replace a file only if it's a specific file that you expect.
2019-10-17 12:46:48	Yaniel	so it'd have to track which one was used
2019-10-17 12:47:03	Yaniel	right
2019-10-17 12:47:44	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:48:42	Moongoodgirl	…or, heck, not even path handles, but just have variants of unlink() and rename() that take device and inode numbers.
2019-10-17 12:49:01	Moongoodgirl	I think that covers all the use cases.
2019-10-17 12:49:10	Yaniel	unlink that takes a file descriptor maybe?
2019-10-17 12:49:18	Yaniel	since that points to the inode
2019-10-17 12:50:55	Moongoodgirl	You need a path too though.
2019-10-17 12:51:00	Moongoodgirl	…like you just pointed out. xD
2019-10-17 12:51:05	Yaniel	...right
2019-10-17 12:51:19	Yaniel	need more coffee
2019-10-17 12:51:23	Yaniel	or more sleep
2019-10-17 12:51:25	Yaniel	or both
2019-10-17 12:52:26	Moongoodgirl	so like `extern "C" fn unlinki(path: *const c::char, device: c::int, inode: c::long)`
2019-10-17 12:53:10	Moongoodgirl	`-> c::int`
2019-10-17 12:53:44	Yaniel	or funlink_from(path, fd) -> int
2019-10-17 12:53:57	Yaniel	if you want to check the contents of the file before removing you need the fd anyway
2019-10-17 12:54:02	Moongoodgirl	true
2019-10-17 12:54:15	Moongoodgirl	but if you only want to check metadata, you don't need to open the file
2019-10-17 12:54:58	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-17 12:55:22	Yaniel	unless you use fstat()
2019-10-17 12:56:58	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 12:57:23	Moongoodgirl	the point is, if you use stat() and unlinki(), you don't need to open()
2019-10-17 12:57:35	Moongoodgirl	but if you use stat() and unlink_from(), you /do/ need to open()
2019-10-17 13:02:09	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 13:05:15	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2019-10-17 13:05:15	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-10-17 13:05:56	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-10-17 13:09:40	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:11:52	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-10-17 13:14:13	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-10-17 13:18:12	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-10-17 13:18:24	-->	dbohdan (~dbohdan@unaffiliated/dbohdan) has joined ##rust
2019-10-17 13:18:40	<--	andreas31 (~andreas@gateway/tor-sasl/andreas303) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	braydonf (~braydon@gateway/tor-sasl/braydonf) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	simlay1 (~simlay@gateway/tor-sasl/simlay) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:35	-->	repo (~jokke@jokke.space) has joined ##rust
2019-10-17 13:19:36	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:37	repo	hi!
2019-10-17 13:20:13	-->	AbedB_ (~AbedBhuty@bzq-79-183-67-120.red.bezeqint.net) has joined ##rust
2019-10-17 13:20:14	repo	i'm playing around with wasm-bindgen and was wondering if there's any way to pass an array of strings to an exported rust function?
2019-10-17 13:21:03	repo	i don't see it listed in the supported types but i thought asking won't hurt
2019-10-17 13:21:13	Yaniel	there is a way to pass strings at least
2019-10-17 13:21:13	j`ey	a Vec<String> might work?
2019-10-17 13:21:34	repo	j`ey: thanks, i'll give it a go
2019-10-17 13:22:24	repo	hmm
2019-10-17 13:22:27	repo	the trait bound `std::boxed::Box<[std::string::String]>: wasm_bindgen::convert::traits::FromWasmAbi` is not satisfied: the trait `wasm_bindgen::convert::traits::FromWasmAbi` is not implemented for `std::boxed::Box<[std::string::String]>
2019-10-17 13:23:00	<--	AbedB (~AbedBhuty@bzq-79-176-90-216.red.bezeqint.net) has quit (Ping timeout: 246 seconds)
2019-10-17 13:23:46	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 13:24:04	repo	or maybe it's an x-y problem... i'm trying to do fuzzy search on a list of elements. if i could have a growing vector stored in a struct i guess i could add the strings one by one (while storing them in this vector)
2019-10-17 13:24:24	repo	but i'm a total rust noobie so..
2019-10-17 13:24:33	j`ey	Vec<String> is a growing vector
2019-10-17 13:25:06	Yaniel	[String; N] would be an array
2019-10-17 13:25:11	Yaniel	fixed-size
2019-10-17 13:25:21	Yaniel	compile-time fixed-size even
2019-10-17 13:25:38	repo	yeah
2019-10-17 13:25:43	repo	that wouldn't do
2019-10-17 13:26:33	repo	thanks for the quick help! i'll be trying things out!
2019-10-17 13:26:41	Yaniel	an api that provides an iterator over results in order of descending accuracy could be quite nice too
2019-10-17 13:26:48	repo	yeah
2019-10-17 13:26:55	repo	exactly what i was thinking about
2019-10-17 13:27:31	repo	i'm pretty stoked about this whole wasm-bindgen thing. i had no clue how far along it already is
2019-10-17 13:27:34	Yaniel	although that matters more if you are communicating over a network, in which case the wasm bridge is irrelevant anyway :D
2019-10-17 13:30:39	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:32:32	-->	braydonf (~braydon@gateway/tor-sasl/braydonf) has joined ##rust
2019-10-17 13:32:39	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-10-17 13:33:23	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-10-17 13:33:33	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-10-17 13:35:16	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-10-17 13:35:57	-->	horatiohb (~horatiohb@167.99.225.252) has joined ##rust
2019-10-17 13:41:11	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Read error: Connection reset by peer)
2019-10-17 13:43:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 13:47:42	-->	AbedB__ (~AbedBhuty@bzq-79-182-102-149.red.bezeqint.net) has joined ##rust
2019-10-17 13:48:47	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-17 13:50:18	<--	AbedB_ (~AbedBhuty@bzq-79-183-67-120.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2019-10-17 13:51:49	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:55:33	-->	frostschutz (~frostschu@55d4e7d2.access.ecotel.net) has joined ##rust
2019-10-17 14:00:08	-->	rustico (~nbases@2800:40:28:19d:d4e1:bbd7:7b28:4ce0) has joined ##rust
2019-10-17 14:02:34	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 14:04:59	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 14:05:13	-->	narispo (~narispo@37.167.10.175) has joined ##rust
2019-10-17 14:06:51	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-17 14:06:58	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 245 seconds)
2019-10-17 14:07:07	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 14:08:46	<--	Mrbuck (~Mrbuck@ec2-34-202-1-168.compute-1.amazonaws.com) has quit (Quit: .)
2019-10-17 14:11:06	-->	Havohey (~Havohey@185.52.147.240) has joined ##rust
2019-10-17 14:11:10	-->	EvilKhaosKat (~evilkhaos@134.17.27.127) has joined ##rust
2019-10-17 14:13:45	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 14:16:44	-->	xj (~xj@pa49-197-89-21.pa.qld.optusnet.com.au) has joined ##rust
2019-10-17 14:16:47	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-17 14:18:03	<--	EvilKhaosKat (~evilkhaos@134.17.27.127) has quit
2019-10-17 14:21:52	-->	EvilKhaosKat (~evilkhaos@134.17.27.127) has joined ##rust
2019-10-17 14:21:55	<--	xj (~xj@pa49-197-89-21.pa.qld.optusnet.com.au) has quit (Remote host closed the connection)
2019-10-17 14:23:49	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-17 14:23:59	-->	andreas31 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-10-17 14:27:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 14:28:28	-->	ggVGc (~ggVGc@unaffiliated/walt) has joined ##rust
2019-10-17 14:29:05	-->	jenny-m (~jdm-@69-196-166-55.dsl.teksavvy.com) has joined ##rust
2019-10-17 14:29:37	<--	kurashu89 (~kurashu89@2601:c6:c100:b840:44af:99c:fc6:9ee4) has quit (Remote host closed the connection)
2019-10-17 14:30:24	-->	kurashu89 (~kurashu89@2601:c6:c100:b840:31f1:76f2:8e22:614e) has joined ##rust
2019-10-17 14:32:41	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-17 14:35:09	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-17 14:35:37	<--	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-fmelhqwwrknkflgp) has quit (Quit: Connection closed for inactivity)
2019-10-17 14:35:55	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 14:44:03	ZirconiumX	Rust semantics question. If I make a memory access in a function that is ultimately never used, is the compiler allowed to optimise out that memory access?
2019-10-17 14:44:11	sfackler	yes
2019-10-17 14:44:18	sfackler	unless you use volatile loads
2019-10-17 14:44:27	Lumpio-	...in a function that's never used?
2019-10-17 14:44:35	Lumpio-	Oooh or is it that the memory access is never used or
2019-10-17 14:46:27	ZirconiumX	The memory access :P
2019-10-17 14:46:27	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-10-17 14:46:42	ZirconiumX	Say I'm populating a struct with data from a table, but don't use some of the fields of it
2019-10-17 14:49:29	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 14:50:20	-->	ytain (~ghfg@2607:f2c0:921d:7a00:bcb3:a156:de4f:3301) has joined ##rust
2019-10-17 14:50:25	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:784f:8cc0:dd:6f62) has joined ##rust
2019-10-17 14:52:57	j`ey	that's a tricky case, since you may use them in other functions?
2019-10-17 14:53:19	j`ey	(or if the struct is local only, then yes, they should be able to be removed)
2019-10-17 14:55:29	vorner	Especially if you get a warning that the field is assigned but never used (I don't remember the exact wording), then I think rustc is allowed to both remove the write and the actual field from the structure.
2019-10-17 14:57:08	Lumpio-	I smell an X-Y problem
2019-10-17 14:57:18	Lumpio-	ZirconiumX: Why does it matter if it's optimized out or not
2019-10-17 14:57:25	Lumpio-	Are you doing something funny or just wondering about performance
2019-10-17 14:57:40	ZirconiumX	MMIO side effects, for example
2019-10-17 14:57:47	ZirconiumX	Also in general performance
2019-10-17 14:58:07	Lumpio-	For any sort of memory-mapped IO you should always use volatile accesses
2019-10-17 14:58:21	Lumpio-	https://crates.io/crates/vcell there
2019-10-17 14:59:12	ZirconiumX	I realise this
2019-10-17 15:02:38	ZirconiumX	Having written a device support crate I feel relatively experienced on MMIO
2019-10-17 15:04:50	Lumpio-	Well at any rate, I'm pretty sure the compile is allowed to optimize out anything that doesn't have side effects in the execution model it assumes
2019-10-17 15:05:26	-->	samhh (~sam@90.240.233.29) has joined ##rust
2019-10-17 15:05:41	Lumpio-	And the model does not assume that a memory location might be an IO register
2019-10-17 15:05:44	ZirconiumX	Which is why it doesn't hurt to know what that execution model is
2019-10-17 15:06:14	<--	jenny-m (~jdm-@69-196-166-55.dsl.teksavvy.com) has quit (Remote host closed the connection)
2019-10-17 15:06:23	Lumpio-	I wonder if it's documented anywhere
2019-10-17 15:06:26	-->	lauromoura__ (~lauromour@2804:7f5:f380:8d0e:cdec:5eac:d0db:6467) has joined ##rust
2019-10-17 15:06:33	Lumpio-	Seeing how sparse the documentation on internals is I bet you'll have to dig into LLVM's documentation
2019-10-17 15:07:15	<--	narispo (~narispo@37.167.10.175) has quit (Ping timeout: 240 seconds)
2019-10-17 15:07:53	Lumpio-	But I'm fairly sure, just like any other compiler, it has the "memory access doesn't have side effects, and unless told otherwise, memory doesn't change unless my thread changes it" assumption because otherwise it couldn't do many nice optimizations
2019-10-17 15:08:00	Lumpio-	Wonder if there's aformal name for that
2019-10-17 15:08:55	<--	lauromoura (~lauromour@2804:7f5:f380:de2c:a599:e1d3:3e9d:92b4) has quit (Ping timeout: 250 seconds)
2019-10-17 15:09:36	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-17 15:13:13	<--	jokoon (~jokoon@unaffiliated/jokoon) has quit (Read error: Connection reset by peer)
2019-10-17 15:24:54	nerdypepper	i am trying to iterate over a byte array, generated with `as_bytes`, and find the sum over it with `.iter().sum()` but this results in a panic
2019-10-17 15:24:59	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-17 15:25:25	nerdypepper	is this because the size of a u8 is not enough for the sum?
2019-10-17 15:25:35	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-10-17 15:25:56	Kinnison	Probably yes
2019-10-17 15:26:04	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-10-17 15:26:06	nerdypepper	why does the sum of a [u8] have to be of type u8, is there any way i can specify the sum to be a, say u32?
2019-10-17 15:26:07	Kinnison	.iter().map(|b| b as usize).sum()
2019-10-17 15:26:09	Kinnison	might do better
2019-10-17 15:26:11	nerdypepper	ahhh
2019-10-17 15:26:16	Kinnison	(guessing)
2019-10-17 15:26:16	nerdypepper	gotcha
2019-10-17 15:26:33	nerdypepper	i was thinking along the lines of `.sum::<i32>()` or something
2019-10-17 15:27:41	nerdypepper	thanks again Kinnison :D
2019-10-17 15:27:50	Kinnison	No problem :D
2019-10-17 15:31:47	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 15:32:48	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-10-17 15:33:11	-->	unreal (~unreal@unaffiliated/unreal) has joined ##rust
2019-10-17 15:38:31	oherrala	even better to use .iter().map(usize::from).sum() if possible
2019-10-17 15:39:04	oherrala	since "b as usize" can lead to funny bugs if someone someday changes what type b is
2019-10-17 15:39:46	Kinnison	true
2019-10-17 15:40:37	-->	narispo (~narispo@37.167.97.1) has joined ##rust
2019-10-17 15:41:28	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-10-17 15:45:31	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-17 15:46:11	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-17 15:55:49	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 15:55:49	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 15:55:49	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 15:55:49	--	Channel ##rust: 578 nicks (2 ops, 0 voices, 576 normals)
2019-10-17 15:56:04	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 15:58:53	<--	EvilKhaosKat (~evilkhaos@134.17.27.127) has quit (Remote host closed the connection)
2019-10-17 16:05:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 16:05:57	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 240 seconds)
2019-10-17 16:09:55	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-10-17 16:11:50	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-17 16:12:26	<--	narispo (~narispo@37.167.97.1) has quit (Read error: Connection reset by peer)
2019-10-17 16:12:48	-->	narispo (~narispo@89.227.232.106) has joined ##rust
2019-10-17 16:14:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:17:35	-->	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has joined ##rust
2019-10-17 16:20:01	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-17 16:21:02	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 16:23:14	<--	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has quit (Ping timeout: 276 seconds)
2019-10-17 16:25:16	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-17 16:25:33	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-17 16:29:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-17 16:30:18	<--	ytain (~ghfg@2607:f2c0:921d:7a00:bcb3:a156:de4f:3301) has quit (Ping timeout: 245 seconds)
2019-10-17 16:30:57	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 240 seconds)
2019-10-17 16:31:22	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-17 16:33:03	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-17 16:33:21	-->	ytain (~ghfg@2607:f2c0:9220:2f00:ed18:befc:1f8a:d5cb) has joined ##rust
2019-10-17 16:34:48	tjis	is it possible to use a dedicated documentation file, rather than a documentation comment? such as for module-wide documentation
2019-10-17 16:35:25	Faux	Not afaik. You can put nearly nothing except comments in your mod.rs, though, which is common.
2019-10-17 16:35:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:36:20	Kinnison	https://github.com/rust-lang/rust/issues/44732
2019-10-17 16:36:25	Kinnison	tracking issue for external docs ^^^
2019-10-17 16:39:26	tjis	I'm just mildly annoyed by having to prepend each line with ///
2019-10-17 16:41:09	-->	brandly (~brandly@c-24-61-240-6.hsd1.ma.comcast.net) has joined ##rust
2019-10-17 16:47:23	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 245 seconds)
2019-10-17 16:47:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 16:48:39	<--	pinkieval (~progval@pdpc/supporter/student/progval) has quit (Quit: We're here, we're queer, connection reset by peer.)
2019-10-17 16:49:02	-->	pinkieval (~progval@pdpc/supporter/student/progval) has joined ##rust
2019-10-17 16:49:28	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-10-17 16:52:52	faern	/! if it's a module comment.
2019-10-17 16:52:59	faern	//! *
2019-10-17 16:53:29	faern	tjis: Or would you also want to lift out the comments for functions/methods/types out of the code? That would be very hard to follow IMO.
2019-10-17 16:53:58	faern	If you have a decent IDE it will just auto-fill the comment start when you hit enter if you are already on a comment line.
2019-10-17 16:55:08	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-17 16:55:56	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:59:42	-->	gkmngrgn (~gkmngrgn@2a02:8109:a180:1590:b85c:ed2f:d3af:899a) has joined ##rust
2019-10-17 17:01:35	<--	gkmngrgn (~gkmngrgn@2a02:8109:a180:1590:b85c:ed2f:d3af:899a) has quit (Client Quit)
2019-10-17 17:07:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 17:08:38	-->	AbedB_ (~AbedBhuty@bzq-79-182-93-240.red.bezeqint.net) has joined ##rust
2019-10-17 17:08:43	-->	jenny-m (~jdm-@CPE688f2e0836e3-CM688f2e0836e0.cpe.net.cable.rogers.com) has joined ##rust
2019-10-17 17:10:19	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 17:11:59	<--	AbedB__ (~AbedBhuty@bzq-79-182-102-149.red.bezeqint.net) has quit (Ping timeout: 276 seconds)
2019-10-17 17:12:30	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Remote host closed the connection)
2019-10-17 17:13:11	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-10-17 17:13:44	-->	daum (~daum@50-201-134-18-static.hfc.comcastbusiness.net) has joined ##rust
2019-10-17 17:14:30	--	c-c is now known as Cuckooo
2019-10-17 17:15:09	--	Cuckooo is now known as Cuckoo
2019-10-17 17:15:16	<--	Cuckoo (csmr@hilla.kapsi.fi) has quit (Disconnected by services)
2019-10-17 17:15:42	tjis	faern: no you're right, I meant ##!
2019-10-17 17:15:44	tjis	err
2019-10-17 17:15:46	tjis	/!
2019-10-17 17:15:48	tjis	///!
2019-10-17 17:15:50	tjis	goddammit
2019-10-17 17:15:51	Faux	////!!!!
2019-10-17 17:15:59	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 17:16:20	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-17 17:16:21	tjis	anyway, yes, module level comments which can easily be multiple paragraphs
2019-10-17 17:16:39	-->	gwillen (~gwillen@unaffiliated/gwillen) has joined ##rust
2019-10-17 17:16:47	daum	hi guys - i have a questoin on using hype in getting query string parameters, i tried let params: HashMap<_, _> = Url::parse(&req.uri().to_string()).unwrap().query_pairs().into_owned().collect(), but req.uri() isn't guaranteed to be a full url (often has /) any suggestions on how to get the params?  Not sure if this is appropriate channel to ask
2019-10-17 17:16:48	Faux	My IDE inserts the appropriate comment when you press return.
2019-10-17 17:20:20	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-17 17:24:08	tjis	daum: req.uri().query() gets you the query string itself, but as a string. there's other crates to do that though
2019-10-17 17:24:58	daum	tjis, any specific one you'd recommend?  just trying to get a couple of parameters for a specific use case where speed/performance is very important
2019-10-17 17:25:54	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 246 seconds)
2019-10-17 17:25:55	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-10-17 17:26:08	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Quit: WeeChat 2.6)
2019-10-17 17:27:30	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 17:27:30	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:784f:8cc0:dd:6f62) has quit (Quit: Leaving)
2019-10-17 17:27:35	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Ping timeout: 276 seconds)
2019-10-17 17:27:59	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-10-17 17:29:02	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-17 17:29:06	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-17 17:33:07	tjis	I think any crate for query string parsing will do just fine and not where your speed concerns are likely going to be
2019-10-17 17:33:33	daum	thanks!
2019-10-17 17:36:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 17:38:13	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-17 17:45:39	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-10-17 17:46:02	<--	Remavas (Remavas@gateway/shell/xshellz/x-tnjqtzxbnyefjxtd) has quit (Ping timeout: 240 seconds)
2019-10-17 17:47:27	-->	Remavas (Remavas@gateway/shell/xshellz/x-hpbxjxofnqivytga) has joined ##rust
2019-10-17 17:49:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 17:51:00	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-18 08:05:45	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-18 08:05:45	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-18 08:05:45	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-18 08:05:45	--	Channel ##rust: 558 nicks (2 ops, 0 voices, 556 normals)
2019-10-18 08:06:01	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-18 08:06:36	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-18 08:07:12	-->	tsal (~tsal@i59F4AF25.versanet.de) has joined ##rust
2019-10-18 08:10:17	<--	tartarsauce (~xsoultart@133.91.253.129) has quit (Ping timeout: 240 seconds)
2019-10-18 08:11:42	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-10-18 08:14:28	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 08:17:42	<--	nickmass (~nickmass@nickmass.com) has quit (Quit: Quitting)
2019-10-18 08:19:11	-->	nickmass (~nickmass@nickmass.com) has joined ##rust
2019-10-18 08:19:24	-->	marusich (~marusich@unaffiliated/marusich) has joined ##rust
2019-10-18 08:22:31	-->	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has joined ##rust
2019-10-18 08:26:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-18 08:31:13	-->	m0rphism (~m0rphism@149.172.82.115) has joined ##rust
2019-10-18 08:32:50	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 08:35:42	<--	rustacean (~whateverg@128.106.166.91) has quit (Ping timeout: 268 seconds)
2019-10-18 08:39:40	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-18 08:39:51	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-18 08:42:07	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 08:42:33	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-10-18 08:42:40	<--	SiegeLord (~SiegeLord@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2019-10-18 08:46:38	-->	CodesInChaos (~cic@unaffiliated/codesinchaos) has joined ##rust
2019-10-18 08:52:43	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-18 08:52:50	<--	baali (~baali@59.98.234.75) has quit (Ping timeout: 240 seconds)
2019-10-18 08:57:17	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-10-18 08:58:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-18 08:59:44	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-18 09:01:04	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Read error: Connection reset by peer)
2019-10-18 09:02:50	<--	tsal (~tsal@i59F4AF25.versanet.de) has quit (Ping timeout: 240 seconds)
2019-10-18 09:02:58	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-18 09:03:21	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 09:04:21	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-18 09:06:19	-->	tsal (~tsal@i59F5F2AE.versanet.de) has joined ##rust
2019-10-18 09:08:05	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 09:11:54	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-10-18 09:13:33	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 250 seconds)
2019-10-18 09:20:18	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-18 09:26:21	-->	pedro4 (~pedro4@134.19.179.179) has joined ##rust
2019-10-18 09:27:30	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 09:35:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 09:36:10	-->	CodesInChaos_ (~cic@unaffiliated/codesinchaos) has joined ##rust
2019-10-18 09:38:02	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-18 09:39:59	<--	CodesInChaos (~cic@unaffiliated/codesinchaos) has quit (Ping timeout: 276 seconds)
2019-10-18 09:44:49	<--	t8 (~tommo@2a00:23c5:1284:fc00:e553:9ca:505b:9c6b) has quit (Quit: Konversation terminated!)
2019-10-18 09:48:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 09:54:43	-->	ionelmc (uid20175@python/site-packages/ionelmc) has joined ##rust
2019-10-18 09:56:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:02:43	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-10-18 10:03:02	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-10-18 10:03:27	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:03:57	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-18 10:04:58	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-18 10:09:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 10:12:29	-->	aLeSD (~aLeSD@139.47.115.104) has joined ##rust
2019-10-18 10:16:54	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:21:12	-->	finwevi (~quassel@2a01:e0a:157:80a0:216:3eff:fe5e:6c7b) has joined ##rust
2019-10-18 10:22:51	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-18 10:26:32	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-18 10:28:29	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:29:50	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-10-18 10:30:18	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:32:20	-->	jokoon (~jokoon@unaffiliated/jokoon) has joined ##rust
2019-10-18 10:33:01	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-18 10:34:06	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 10:36:25	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-18 10:41:49	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0::35) has quit (Quit: WeeChat 2.6)
2019-10-18 10:42:30	-->	samhh (~sam@90.240.224.84) has joined ##rust
2019-10-18 10:44:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:46:41	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-18 10:46:56	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-10-18 10:47:24	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-18 11:03:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 11:08:31	-->	Ichorio (~Ichorio@2001:16b8:57c4:6f00:34fc:fd62:aa7d:f0b0) has joined ##rust
2019-10-18 11:09:49	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-10-18 11:10:44	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-18 11:13:01	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-18 11:20:05	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-18 11:21:32	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-18 11:27:48	<--	murarth (murarth@gateway/vpn/privateinternetaccess/murarth) has quit (Ping timeout: 245 seconds)
2019-10-18 11:30:50	-->	setpill (~setpill@unaffiliated/setpill) has joined ##rust
2019-10-18 11:32:15	setpill	So I have this application, written in rust, that keeps erroring out with a "Too many open files" error.
2019-10-18 11:33:14	Kinnison	Does your system have a very low max-open-files setting, or perhaps you're leaking file handles
2019-10-18 11:33:17	Kinnison	Is this code we can see?
2019-10-18 11:33:21	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-10-18 11:33:21	setpill	Even after raising the limits in /etc/sysctl.conf and /etc/security/limits.conf and rebooting
2019-10-18 11:33:55	setpill	Kinnison: sure, it's open source, I didn't write it, I'm just trying to get it working (:
2019-10-18 11:33:59	setpill	https://github.com/Blockstream/electrs/
2019-10-18 11:34:53	j`ey	https://github.com/rust-lang/rust/issues/47955 could be this
2019-10-18 11:34:58	j`ey	apparently there's a bug in glibc
2019-10-18 11:35:24	setpill	`cat /proc/sys/fs/file-nr` gives "2912 0 500000"
2019-10-18 11:35:26	Kinnison	Interesting
2019-10-18 11:35:30	setpill	j`ey: would that still apply after rebooting?
2019-10-18 11:35:40	j`ey	found from https://www.reddit.com/r/rust/comments/az4xu0/production_rust_help_too_many_open_files_os_error/
2019-10-18 11:35:52	j`ey	setpill: does the error happen immediately?
2019-10-18 11:36:01	setpill	yes
2019-10-18 11:36:06	setpill	pretty much
2019-10-18 11:36:36	setpill	I can disable the service file and start it manually to double check, but I checked it a few minutes after reboot and it was already in a restart loop for some time
2019-10-18 11:39:29	setpill	disabled service, rebooted, manually started service -> instant fail
2019-10-18 11:39:43	setpill	give me a min and I can provide a trace
2019-10-18 11:40:02	setpill	(running with RUST_BACKTRACE=full)
2019-10-18 11:42:33	oherrala	how many network connections it's doing?
2019-10-18 11:42:45	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-18 11:43:50	<--	timClicks (~timclicks@115.69.172.167) has quit (Remote host closed the connection)
2019-10-18 11:44:06	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 11:49:26	setpill	https://gist.github.com/setpill/2dc0eacd6c3bd05ee3d1e89f78eb97a6 trace
2019-10-18 11:51:27	Windfisch	..
2019-10-18 12:09:13	<--	bravoslo (~bravoslo@89-212-162-157.static.t-2.net) has quit (Quit: Leaving)
2019-10-18 12:11:16	<--	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has quit (Quit: WeeChat 2.6)
2019-10-18 12:11:38	-->	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has joined ##rust
2019-10-18 12:15:52	setpill	Ok so noob question, but how do I convince rust to import/build/compile/install/whatever the libc crate?
2019-10-18 12:16:13	setpill	Want to try out this snippet https://gist.github.com/miquels/c47316f7b19a0af3d9927bafef94de35 on a test system.
2019-10-18 12:16:31	Lumpio-	You add it to your Cargo.toml file's [dependencies] section
2019-10-18 12:16:32	setpill	But getting a "error[E0432]: unresolved import `libc`"
2019-10-18 12:16:45	Xatenev	setpill, https://doc.rust-lang.org/nomicon/ffi.html
2019-10-18 12:17:20	setpill	Huh, so I need to create a package to compile a script?
2019-10-18 12:17:25	Lumpio-	A script?
2019-10-18 12:17:31	setpill	Well. Piece of code.
2019-10-18 12:17:44	Lumpio-	Well it's also possible to donwload the libc crate source code manually and build it manually
2019-10-18 12:17:53	j`ey	it's the easiest way to use a crate
2019-10-18 12:17:56	Lumpio-	But who wants to manage dependencies by hand?
2019-10-18 12:18:10	j`ey	'cargo new test-foo' and youre good to go
2019-10-18 12:18:12	Lumpio-	"Creating a package" is one command - cargo new --bin myprogram
2019-10-18 12:19:31	Xatenev	--bin isnt required anymore
2019-10-18 12:19:34	Xatenev	just new is enough :]
2019-10-18 12:19:52	Lumpio-	Ain't nobody got no time to memorize defaults when they change
2019-10-18 12:19:55	Xatenev	:P
2019-10-18 12:19:56	setpill	> edition = "2018"
2019-10-18 12:19:58	setpill	wat
2019-10-18 12:20:11	Lumpio-	That's how Rust handles breaking changes in the standard library/compiler
2019-10-18 12:20:18	setpill	oic
2019-10-18 12:20:24	Lumpio-	Old crates with no edition setting are "editing 2015"
2019-10-18 12:20:38	Lumpio-	edition, even
2019-10-18 12:24:09	setpill	Hrm.
2019-10-18 12:34:14	setpill	Well, it doesn't *seem* to be the libc issue.
2019-10-18 12:50:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 13:00:23	<--	jtdowney (~jtdowney@unaffiliated/jtdowney) has quit (Quit: Bye)
2019-10-18 13:00:51	-->	zorton (~zorton@unaffiliated/zorton) has joined ##rust
2019-10-18 13:01:00	-->	jtdowney (~jtdowney@unaffiliated/jtdowney) has joined ##rust
2019-10-18 13:03:01	Lumpio-	setpill: Do you get an error message..?
2019-10-18 13:03:18	setpill	Lumpio-: I posted my trace earlier
2019-10-18 13:03:43	zorton	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8fcd3103aadc52f4b84536b8a6242c9a
2019-10-18 13:03:49	zorton	seems ugly, cleaner method?
2019-10-18 13:04:00	setpill	Lumpio-: thread 'main' panicked at 'failed to open RocksDB: Error { message: "IO error: While open a file for appending: /home/electrs/mainnet/newin
2019-10-18 13:04:09	Lumpio-	oh
2019-10-18 13:04:12	setpill	Oh
2019-10-18 13:04:14	Lumpio-	I thought you were having issues compiling that libc thing
2019-10-18 13:04:17	setpill	Seems like the error was truncated
2019-10-18 13:04:33	setpill	Ah yeah I managed to do that, thanks for the pointers
2019-10-18 13:04:43	-->	IanWizard-Cloud (uid1815@gateway/web/irccloud.com/x-ftczoylcogfrxvke) has joined ##rust
2019-10-18 13:07:04	Lumpio-	The trace doesn't show "too many open files" yeah
2019-10-18 13:08:58	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-10-18 13:09:30	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 13:10:00	setpill	Lumpio-: does now
2019-10-18 13:10:03	setpill	it was cut off, my bad
2019-10-18 13:10:17	setpill	https://gist.github.com/setpill/2dc0eacd6c3bd05ee3d1e89f78eb97a6#file-gistfile1-txt-L19
2019-10-18 13:12:39	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-18 13:14:47	Lumpio-	Wonder what it's doing if it needs *that* many files
2019-10-18 13:14:57	Lumpio-	Since it's Linux you can just change the limits with system settings if need be
2019-10-18 13:15:07	Lumpio-	It's not reaaaally the program's job to change it I suppose
2019-10-18 13:15:13	setpill	That's the point, I already did
2019-10-18 13:15:24	setpill	This is after a fresh reboot, the first thing that happens.
2019-10-18 13:15:35	setpill	Well, there's other processes doing things
2019-10-18 13:16:00	setpill	But I've upped the per-user file descriptor limit to 100k and the system-wide one to 500k
2019-10-18 13:16:15	setpill	So I don't *think* either is running out for that process.
2019-10-18 13:16:19	setpill	I hope.
2019-10-18 13:16:40	la_mettrie	is it typical that since we are not using global variables, the main function is mostly for initialisation and the most important function where program's main loop resides is some other function?
2019-10-18 13:17:00	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 13:17:12	voker57	yes
2019-10-18 13:17:26	la_mettrie	okely-dokely...
2019-10-18 13:21:32	Moongoodgirl	…I mean, why wouldn't you put that in `main()`?
2019-10-18 13:22:10	la_mettrie	if the most fundamental variables are global i haven't encountered any difficulties in doing so
2019-10-18 13:22:18	Moongoodgirl	…actually, this seems orthogonal. Even if you /were/ using global variables, you could still have main() be mostly for initialization…or you could put the main event loop in main()
2019-10-18 13:24:40	<--	jokoon (~jokoon@unaffiliated/jokoon) has left ##rust ("Leaving")
2019-10-18 13:24:53	<--	Ichorio (~Ichorio@2001:16b8:57c4:6f00:34fc:fd62:aa7d:f0b0) has quit (Ping timeout: 250 seconds)
2019-10-18 13:25:50	Moongoodgirl	setpill: Did you already try running it in a debugger with a breakpoint on the panic, and running lsof on it when it gets to that point?
2019-10-18 13:26:18	Moongoodgirl	(xy: seeing exactly what it has open when it tries and fails to open another file)
2019-10-18 13:26:58	setpill	Moongoodgirl: nope, I have yet to figure out how that works. New to rust.
2019-10-18 13:27:29	Moongoodgirl	setpill: Are you familiar with debuggers in general?
2019-10-18 13:27:34	setpill	Nope :)
2019-10-18 13:28:48	setpill	The system this runs on doesn't have any rust tooling on it - there's a separate build system that compiles the rust code into a binary which is then installed on the system that runs it.
2019-10-18 13:29:22	setpill	Not exactly sure how I would go about debugging in this situation.
2019-10-18 13:29:34	j`ey	you dont need rust tools, you need gdb
2019-10-18 13:29:37	<--	samhh (~sam@90.240.224.84) has quit (Ping timeout: 240 seconds)
2019-10-18 13:29:42	j`ey	cant you run it on the build machine too?
2019-10-18 13:30:03	setpill	Well
2019-10-18 13:30:05	setpill	No.
2019-10-18 13:30:17	setpill	Let me check how many hundreds of TBs this db is currently taking up
2019-10-18 13:30:22	setpill	Er
2019-10-18 13:30:24	setpill	GBs
2019-10-18 13:30:29	la_mettrie	gdb serves fine as the primary debugger when programming with rust?
2019-10-18 13:30:58	j`ey	yes
2019-10-18 13:31:00	carado	it's what i use
2019-10-18 13:31:17	j`ey	setpill: do you need the full db to test?
2019-10-18 13:31:30	setpill	j`ey: it ran fine before
2019-10-18 13:31:48	liiwi	there's always https://www.onlinegdb.com ..
2019-10-18 13:32:06	setpill	Only now that it's done adding blocks and started indexing them there's this issue
2019-10-18 13:32:13	j`ey	setpill: before what?
2019-10-18 13:33:08	j`ey	oh, before the db was populated
2019-10-18 13:34:21	Moongoodgirl	…do you not have a separate development environment in which you can build, run, and debug this? ._.
2019-10-18 13:34:58	setpill	Moongoodgirl: I am not developing this...
2019-10-18 13:35:04	setpill	Just trying to run it.
2019-10-18 13:35:35	setpill	Only now that I can't, am I looking further into it.
2019-10-18 13:35:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 13:36:32	setpill	The db dir for electrs is 338G, and that is on top of bitcoind's 260G db.
2019-10-18 13:36:41	j`ey	you could also try running lsof in a loop or something and write the results out
2019-10-18 13:37:01	Moongoodgirl	…yeah, that might be good enough
2019-10-18 13:37:40	setpill	I looked at the trace and it has 3 "opening DB" lines, crashing after the third
2019-10-18 13:38:36	Moongoodgirl	I'm assuming there're potentially many file descriptor allocations that we're not seeing there
2019-10-18 13:38:45	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-18 13:38:45	Moongoodgirl	you don't get EMFILE from opening three files
2019-10-18 13:39:01	Moongoodgirl	…four, counting that socket
2019-10-18 13:39:25	-->	baali (~baali@59.98.207.62) has joined ##rust
2019-10-18 13:39:48	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-18 13:40:37	setpill	Running `ls -la $FOLDER | grep -e '^-' | wc -l` gives respectively 2005, 1008 and 6555
2019-10-18 13:41:35	setpill	Running `ulimit -{,H,S}n` as the user the service is executed as gives '100000' in all cases
2019-10-18 13:43:26	Moongoodgirl	okay but we want to investigate exactly what it has open
2019-10-18 13:43:28	Moongoodgirl	hence lsof
2019-10-18 13:43:55	setpill	Yep. Working on that. Just thought I'd share my findings so far.
2019-10-18 13:46:28	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-18 13:47:29	Moongoodgirl	Oh okay :)
2019-10-18 13:47:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 13:57:02	<--	exarkun (~exarkun@181.138.239.35.bc.googleusercontent.com) has quit (Remote host closed the connection)
2019-10-18 13:57:52	<--	IanWizard-Cloud (uid1815@gateway/web/irccloud.com/x-ftczoylcogfrxvke) has quit
2019-10-18 13:58:17	-->	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has joined ##rust
2019-10-18 14:01:24	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-18 14:03:56	setpill	Is there a simple oneliner to run `lsof -u electrs | wc -l` in rust? :x
2019-10-18 14:05:16	Faux	Heh, unlikely. You can walk /proc and see how many /proc/*/fd/* files you can access, which is close to what that is doing.
2019-10-18 14:05:48	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-18 14:06:03	setpill	T_T
2019-10-18 14:06:27	Faux	I mean, you could just shell out to lsof.
2019-10-18 14:06:38	setpill	That's what I'm asking...
2019-10-18 14:06:58	Faux	If that's what you want, some googlin' should be pretty easy.
2019-10-18 14:07:09	setpill	Well, I tried that first, of course.
2019-10-18 14:07:25	Faux	"run subprocess in rust and collect output" didn't return anything?
2019-10-18 14:07:59	setpill	I got stuck on how to pipe stdout from one program to stdin of another
2019-10-18 14:08:28	IanWizard-Cloud	I wonder if there's a better way to do it with calls to the kernel?  I've always found shell commands embedded in compiled languages to feel very "hacky".  Maybe that's just me though.
2019-10-18 14:08:55	Faux	You don't need to do the piping in shell, or you can just run a shell (sh -c '').
2019-10-18 14:09:15	Faux	IanWizard-Cloud: The problem is that lsof literally just opens files in /proc. Is lsof available as a library? No.
2019-10-18 14:09:16	M-ou-se	`wc -l` sounds pretty easy to do in rust :P
2019-10-18 14:09:34	M-ou-se	you can just run `lsof -u electrs` and count newlines in rust. no piping necessary
2019-10-18 14:10:45	Moongoodgirl	Doesn't lsof just poke through /proc?
2019-10-18 14:11:19	M-ou-se	Moongoodgirl: yes
2019-10-18 14:11:34	Moongoodgirl	…anyway, you don't need to invoke it from Rust; just run it in a loop in a shell while Electra is running
2019-10-18 14:12:44	Faux	She might want to run it before various steps, to "profile" where the problem is happening, which would be useful.
2019-10-18 14:13:44	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 14:14:44	setpill	Yes I'm trying to insert this lsof call at specific parts of the process so I can see what the lsof state was at the time a certain piece of code was executed.
2019-10-18 14:15:25	setpill	Also too much of a rust noob to start considering reimplementing lsof in rust (:
2019-10-18 14:16:51	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-10-18 14:17:38	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-18 14:17:50	<--	designwish (~designwis@51.ip-51-68-136.eu) has quit (Quit: ZNC - http://znc.in)
2019-10-18 14:18:20	<--	francisv (123080@vetur.ifi.uio.no) has quit (Read error: Connection reset by peer)
2019-10-18 14:18:27	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-18 14:21:21	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-10-18 14:22:56	<--	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has quit (Quit: WeeChat 2.5)
2019-10-18 14:23:21	-->	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has joined ##rust
2019-10-18 14:27:02	-->	designwish (~designwis@51.ip-51-68-136.eu) has joined ##rust
2019-10-18 14:27:32	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-10-18 14:31:08	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-18 14:31:25	<--	meandi_2 (~meandi@dyndsl-178-142-251-086.ewe-ip-backbone.de) has quit (Ping timeout: 265 seconds)
2019-10-18 14:32:11	-->	cseder (~cseder@62.141-0-116.customer.lyse.net) has joined ##rust
2019-10-18 14:32:53	 *	Moongoodgirl pokes around.
2019-10-18 14:33:15	Faux	I rewrote the netlink parts (from ss) in rust but that is not what you're after here.
2019-10-18 14:35:06	Moongoodgirl	The part that we care about is pretty simple. Just list /proc/self/fd; for each file, call symlink_metadata() and fs::read_link() and save all the return values
2019-10-18 14:35:42	Moongoodgirl	lsof has a /lot/ of functionality, but we only need a very small subset
2019-10-18 14:37:52	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Ping timeout: 264 seconds)
2019-10-18 14:38:13	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Ping timeout: 245 seconds)
2019-10-18 14:38:14	<--	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has quit (Quit: WeeChat 1.9.1)
2019-10-18 14:38:49	Faux	One liner competition?
2019-10-18 14:40:25	Moongoodgirl	Well, in the interest of not solving somecreature's problem for them…
2019-10-18 14:40:31	-->	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has joined ##rust
2019-10-18 14:40:34	-->	ytain (~ghfg@2607:f2c0:9223:9300:b02f:cad2:1710:9bd6) has joined ##rust
2019-10-18 14:40:35	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 14:41:59	Faux	evalr ok no I give up: std::fs::read_dir("/proc").unwrap().filter_map(|r| r.ok()).filter(|e| e.path().is_dir()).map(|e| std::fs::read_dir(e.path()).unwrap().map(|r| r.unwrap()).map(|e
2019-10-18 14:43:21	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-10-18 14:44:51	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-18 14:45:26	Moongoodgirl	yeah
2019-10-18 14:45:35	Moongoodgirl	It'll be about 6..12 lines, and that's okay :P
2019-10-18 14:45:48	Moongoodgirl	trying to golf it will get you unreadable
2019-10-18 14:46:15	Faux	std::fs::read_dir("/proc") .unwrap() .filter_map(|r| r.ok()) .filter(|e| e.path().is_dir()) .filter_map(|e| std::fs::read_dir(e.path()).ok()) .flatten() .filter_map(|r| r.ok()) .filter(|e| e.path().symlink_metadata().is_ok()) .count();
2019-10-18 14:46:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 14:47:05	Faux	It gives a different number to lsof, who knows.
2019-10-18 14:47:29	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 14:47:39	Faux	https://quad.pe/e/C6N5GoJPd6.png intellij loses track at the flatten() unfortunately.
2019-10-18 14:50:50	-->	meandi (~meandi@dyndsl-178-142-253-254.ewe-ip-backbone.de) has joined ##rust
2019-10-18 14:55:21	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 14:56:04	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-18 14:56:08	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-18 15:00:12	<--	designwish (~designwis@51.ip-51-68-136.eu) has quit (Quit: ZNC - https://znc.in)
2019-10-18 15:03:20	<--	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Leaving)
2019-10-18 15:03:24	<--	braydonf (~braydon@gateway/tor-sasl/braydonf) has quit (Remote host closed the connection)
2019-10-18 15:04:11	-->	braydonf (~braydon@gateway/tor-sasl/braydonf) has joined ##rust
2019-10-18 15:04:12	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 268 seconds)
2019-10-18 15:04:30	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-10-18 15:06:19	noracodes	Coming to you live from Rust Belt Rust
2019-10-18 15:07:32	-->	AbedB (~AbedBhuty@bzq-109-66-2-63.red.bezeqint.net) has joined ##rust
2019-10-18 15:09:43	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-18 15:11:25	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-18 15:11:56	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 15:12:00	-->	designwish (~designwis@51.ip-51-68-136.eu) has joined ##rust
2019-10-18 15:15:40	Moongoodgirl	Faux: because you're counting…`/proc/*/*`? I think?
2019-10-18 15:15:51	Moongoodgirl	instead of /proc/self/fd/*
2019-10-18 15:16:18	Moongoodgirl	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=02abb74c6c58940efe7494378d09f77f
2019-10-18 15:16:28	Moongoodgirl	this gives you the actual list
2019-10-18 15:17:17	Moongoodgirl	actually, you may even want to drop the metadata
2019-10-18 15:17:28	Moongoodgirl	really we're just interested in the symlink target
2019-10-18 15:21:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 15:21:18	Faux	Moongoodgirl: Heh, yeah.
2019-10-18 15:23:12	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-18 15:27:09	-->	samhh (~sam@90.240.224.84) has joined ##rust
2019-10-18 15:31:48	<--	samhh (~sam@90.240.224.84) has quit (Client Quit)
2019-10-18 15:31:59	setpill	Haven't figured it out yet (somehow my pipelines got broken) but gotta head off for now. Appreciate the help, all :)
2019-10-18 15:32:43	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-18 15:32:50	<--	setpill (~setpill@unaffiliated/setpill) has quit (Quit: o/)
2019-10-18 15:33:02	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-18 15:35:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 15:39:18	-->	exarkun (~exarkun@181.138.239.35.bc.googleusercontent.com) has joined ##rust
2019-10-18 15:44:11	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 15:45:07	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-18 15:46:16	<--	tmager (~Thunderbi@146.115.18.74) has quit (Remote host closed the connection)
2019-10-18 15:46:33	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-18 15:49:43	-->	LunarJetman (LunarJetma@5ec1bc5a.skybroadband.com) has joined ##rust
2019-10-18 15:51:04	<--	baali (~baali@59.98.207.62) has quit (Ping timeout: 268 seconds)
2019-10-18 16:00:56	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 16:05:45	-->	baali (~baali@59.98.235.240) has joined ##rust
2019-10-18 16:09:46	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 16:13:15	<--	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has quit (Quit: WeeChat 2.5)
2019-10-18 16:14:25	-->	jenny-m (~jdm-@69-196-166-55.dsl.teksavvy.com) has joined ##rust
2019-10-18 16:19:00	-->	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has joined ##rust
2019-10-18 16:19:44	<--	stzsch (~no@2804:14d:4cd1:823f:5604:a6ff:fe8e:d858) has quit (Ping timeout: 276 seconds)
2019-10-18 16:22:27	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-18 16:26:17	-->	kri404 (~kri404@90.199.234.48) has joined ##rust
2019-10-18 16:30:12	-->	dmc (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-10-18 16:31:35	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 16:34:47	--	cseder is now known as cseder_away
2019-10-18 16:36:50	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 240 seconds)
2019-10-18 16:45:52	<--	baali (~baali@59.98.235.240) has quit (Quit: Leaving.)
2019-10-18 16:46:21	-->	baali (~baali@59.98.235.240) has joined ##rust
2019-10-18 16:46:27	<--	baali (~baali@59.98.235.240) has quit (Client Quit)
2019-10-18 16:48:25	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 16:51:44	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-21 09:25:20	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-21 09:25:20	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-21 09:25:20	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-21 09:25:20	--	Channel ##rust: 556 nicks (2 ops, 0 voices, 554 normals)
2019-10-21 09:25:35	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-21 09:28:33	<--	Red15 (~red15@unaffiliated/red15) has quit (Quit: WeeChat 1.9.1)
2019-10-21 09:28:44	-->	Red15 (~red15@unaffiliated/red15) has joined ##rust
2019-10-21 09:30:12	<--	Red15 (~red15@unaffiliated/red15) has quit (Client Quit)
2019-10-21 09:32:28	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-10-21 09:33:07	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-10-21 09:33:53	-->	Red15 (~red15@unaffiliated/red15) has joined ##rust
2019-10-21 09:39:01	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-21 09:41:23	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-21 09:45:57	<--	xsoultartar (~xsoultart@133.91.253.129) has quit (Ping timeout: 240 seconds)
2019-10-21 09:50:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 09:51:18	<--	plluksie (~plluksie@89-75-127-15.dynamic.chello.pl) has quit (Ping timeout: 268 seconds)
2019-10-21 09:56:26	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-10-21 09:56:57	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-21 10:01:05	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-10-21 10:01:41	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-21 10:08:05	-->	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has joined ##rust
2019-10-21 10:10:57	<--	dozn (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Ping timeout: 240 seconds)
2019-10-21 10:11:01	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-21 10:12:04	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-21 10:12:15	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-21 10:14:59	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-21 10:16:11	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Quit: Leaving)
2019-10-21 10:16:29	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-10-21 10:16:44	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-21 10:18:42	vasilakisfil	hi I have this diesel model https://gist.github.com/vasilakisfil/ccc12827ca448d3405b2c9dae961cf19  and I want to create a trait out of it, with default impl because I have like 5+ models like it. The problem is, how can I generalize the use declarations.
2019-10-21 10:18:54	vasilakisfil	use declarations are not types, so how do I inject those ?
2019-10-21 10:19:58	liiwi	b
2019-10-21 10:20:00	liiwi	erp
2019-10-21 10:22:58	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-10-21 10:25:26	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 10:25:30	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0::35) has quit (Ping timeout: 246 seconds)
2019-10-21 10:26:32	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 246 seconds)
2019-10-21 10:30:20	ZirconiumX	vasilakisfil: The only way I can think of is a macro
2019-10-21 10:39:33	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-21 10:44:25	-->	Coldblackice_ (~c@unaffiliated/coldblackice) has joined ##rust
2019-10-21 10:45:17	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-10-21 10:45:38	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 240 seconds)
2019-10-21 10:47:55	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 250 seconds)
2019-10-21 10:49:14	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-21 10:53:39	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-21 10:54:47	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-10-21 10:55:57	-->	Mrbuck (~Mrbuck@ec2-34-195-230-118.compute-1.amazonaws.com) has joined ##rust
2019-10-21 10:56:26	Mrbuck	did we have discord bot connected here?
2019-10-21 10:56:41	j`ey	no
2019-10-21 10:57:09	Mrbuck	so you guys so lazy ?
2019-10-21 10:57:10	Mrbuck	:P
2019-10-21 10:57:12	Mrbuck	joke
2019-10-21 11:00:38	<--	simcop2387 (8MHIexBI@p3m/member/simcop2387) has quit (Quit: ZNC - http://znc.sourceforge.net)
2019-10-21 11:01:41	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 11:02:40	<--	designwish (~designwis@51.ip-51-68-136.eu) has quit (Read error: Connection reset by peer)
2019-10-21 11:05:24	Moongoodgirl	Mrbuck: we're lazy because we don't have a bridge to Discord in particular? O.o
2019-10-21 11:08:20	Mrbuck	Moongoodgirl: oh_k
2019-10-21 11:08:32	lavalike	these bridges are a scourge, please don't
2019-10-21 11:08:45	Moongoodgirl	…
2019-10-21 11:08:51	Moongoodgirl	That was clarification, not concession.
2019-10-21 11:09:28	Moongoodgirl	I didn't wanna, y'know, accidentally misrepresent what you were saying. :V
2019-10-21 11:09:35	lavalike	and mine an imploration
2019-10-21 11:10:00	-->	designwish (~designwis@51.ip-51-68-136.eu) has joined ##rust
2019-10-21 11:11:46	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-10-21 11:12:21	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-21 11:28:02	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-21 11:31:52	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-10-21 11:37:00	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Ping timeout: 260 seconds)
2019-10-21 11:39:45	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 11:40:11	<--	Mrbuck (~Mrbuck@ec2-34-195-230-118.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2019-10-21 11:43:12	-->	ddima (~d-goldin@mail.moulodi.com) has joined ##rust
2019-10-21 11:45:36	-->	Stanley|00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-21 11:46:37	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Ping timeout: 268 seconds)
2019-10-21 11:57:41	<--	narispo (~narispo@2a01:e0a:2a2:1590:8913:b676:50a4:f3f7) has quit (Ping timeout: 276 seconds)
2019-10-21 11:59:43	tjis	So I notice I can't use Arc<RefCell> cause refcell does not implement sync. What I actually want to do is build a hashmap in a bunch of futures, finally returning it as a result. I know that at any point there'll be only one function accessing the hashmap, and it is fine if concurrent access panics (which I thought refcell would give me). What should i be doing?
2019-10-21 12:00:37	tjis	I guess I could use Mutex instead
2019-10-21 12:00:47	Yaniel	or RwLock?
2019-10-21 12:02:02	Yaniel	so Arc<RwLock<HashMap<T,U>>>
2019-10-21 12:02:22	tjis	or rwlock but there's no concurrent access going to happen so the extra features rwlock gives don't actually matter
2019-10-21 12:04:10	-->	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has joined ##rust
2019-10-21 12:05:20	vorner	Mutex would be fine (locking an uncontended mutex is very fast). Or, there's AtomicRefCell, which is what you describe.
2019-10-21 12:05:59	vorner	But I wonder, if you can guarantee that there won't be any concurrent accesses, do you actually *need* the Arc there? Won't you get away without it, using the right combinators or something?
2019-10-21 12:06:21	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-21 12:14:58	-->	ytain (~ghfg@2607:f2c0:94cc:f800:9487:e890:502c:1f2e) has joined ##rust
2019-10-21 12:14:59	<--	XVar (~XVar@unaffiliated/xvar) has quit (Ping timeout: 268 seconds)
2019-10-21 12:17:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 12:17:55	-->	fanta1 (~fanta1@p200300F76BC32F005D9AD5B2FA74FB88.dip0.t-ipconnect.de) has joined ##rust
2019-10-21 12:18:18	<--	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has left ##rust
2019-10-21 12:22:21	-->	narispo (~narispo@37.164.175.149) has joined ##rust
2019-10-21 12:35:16	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-21 12:40:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-21 12:49:12	<--	RayS (~raysl@sdf1.xen.prgmr.com) has quit (Quit: ZNC 1.7.3 - https://znc.in)
2019-10-21 12:49:34	-->	RayS (~raysl@sdf1.xen.prgmr.com) has joined ##rust
2019-10-21 12:51:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 12:52:32	-->	Mateon2 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-10-21 12:53:14	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 240 seconds)
2019-10-21 12:53:19	--	Mateon2 is now known as Mateon1
2019-10-21 13:00:35	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 265 seconds)
2019-10-21 13:03:58	-->	XVar (~XVar@unaffiliated/xvar) has joined ##rust
2019-10-21 13:17:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-21 13:21:40	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-21 13:29:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 13:29:35	-->	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has joined ##rust
2019-10-21 13:44:13	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-21 13:46:53	tjis	atomicrefcell looks very nice
2019-10-21 13:48:06	-->	phwalkr (~phwalkr@2001:1284:f013:5b1f:6931:4a15:8996:81e9) has joined ##rust
2019-10-21 13:49:44	tjis	vorner: My specific problem is that I got an FnMut closure that captured the hashmap. I can't move the hashmap out of the closure on last call cause there's no way for rust to know that it is indeed the last call
2019-10-21 13:54:52	<--	fanta1 (~fanta1@p200300F76BC32F005D9AD5B2FA74FB88.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-10-21 13:54:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-21 13:56:21	vorner	You could somehow capture only &mut HashMap or pass it to each call of the closure, maybe.
2019-10-21 13:57:18	-->	fanta1 (~fanta1@p200300F76BC32F005D9AD5B2FA74FB88.dip0.t-ipconnect.de) has joined ##rust
2019-10-21 13:57:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-21 13:58:25	tjis	I'm working with tokio/futures, so lifetimes would be an issue
2019-10-21 14:10:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 14:16:57	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Quit: __gotcha)
2019-10-21 14:17:19	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-21 14:21:48	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-21 14:23:59	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has left ##rust
2019-10-21 14:24:11	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 246 seconds)
2019-10-21 14:31:58	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-10-21 14:34:12	-->	L29Ah (~L29Ah@unaffiliated/l29ah) has joined ##rust
2019-10-21 14:37:09	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 250 seconds)
2019-10-21 14:38:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-21 14:39:08	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-10-21 14:40:50	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has left ##rust
2019-10-21 14:49:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 14:52:16	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-21 14:53:29	-->	p8m (~ident1@2604:2d80:5f81:e700::80) has joined ##rust
2019-10-21 14:54:29	<--	fsasm (~fsasm@62.178.93.7) has quit (Ping timeout: 250 seconds)
2019-10-21 14:55:02	<--	fanta1 (~fanta1@p200300F76BC32F005D9AD5B2FA74FB88.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-10-21 15:02:53	-->	jbg (~jbg@cz.rf.net.nz) has joined ##rust
2019-10-21 15:03:57	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-10-21 15:06:04	-->	lauromoura__ (~lauromour@2804:7f5:f380:4d43:f8dc:e6a:a6c1:795b) has joined ##rust
2019-10-21 15:07:02	-->	localhorse (uid18992@gateway/web/irccloud.com/x-isconqeutlwacdug) has joined ##rust
2019-10-21 15:09:20	<--	lauromoura_ (~lauromour@2804:7f5:f380:3fe:a014:e879:58be:2a69) has quit (Ping timeout: 246 seconds)
2019-10-21 15:09:30	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-10-21 15:09:56	-->	foodoo (~foodoo@static.227.205.46.78.clients.your-server.de) has joined ##rust
2019-10-21 15:09:56	-->	Mrbuck (~Mrbuck@ec2-34-195-230-118.compute-1.amazonaws.com) has joined ##rust
2019-10-21 15:13:16	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-21 15:13:41	<--	phwalkr (~phwalkr@2001:1284:f013:5b1f:6931:4a15:8996:81e9) has quit (Quit: Leaving...)
2019-10-21 15:16:02	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-21 15:16:11	de-vri-es	I'm trying to get actions-rs/clippy-check (the github action) to work. I made a small test repository and added some warnings, but I don't see the annotations or the summary on github :[
2019-10-21 15:16:16	de-vri-es	test repo here: https://github.com/de-vri-es/test-clippy-check/pull/1
2019-10-21 15:17:17	de-vri-es	the workflow is pretty much identical to the example from https://github.com/actions-rs/clippy-check
2019-10-21 15:17:32	de-vri-es	did I do something wrong?
2019-10-21 15:22:26	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 240 seconds)
2019-10-21 15:22:47	<--	Mrbuck (~Mrbuck@ec2-34-195-230-118.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2019-10-21 15:25:20	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-10-21 15:29:22	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-21 15:30:15	-->	L29Ah (~L29Ah@unaffiliated/l29ah) has joined ##rust
2019-10-21 15:31:34	<--	noracodes (~quassel@qaul.net/dev/noracodes) has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2019-10-21 15:32:24	jbg	de-vri-es: did you sign up for the github actions public beta? :)
2019-10-21 15:32:33	de-vri-es	yeah :)
2019-10-21 15:32:47	de-vri-es	the action does run, and the output shows the warnings, but they don't appear as annotations
2019-10-21 15:32:56	jbg	ah i see
2019-10-21 15:34:16	de-vri-es	weird thing is, I also cloned the examples repository from actions-rs, and added some warnings there
2019-10-21 15:34:22	de-vri-es	in that fork, the annotations work
2019-10-21 15:34:54	-->	xsoultartar (~xsoultart@210.161.134.36) has joined ##rust
2019-10-21 15:36:12	-->	royal_screwup21 (3e1f7b01@gateway/web/cgi-irc/kiwiirc.com/ip.62.31.123.1) has joined ##rust
2019-10-21 15:38:27	nl3dee	hi all,
2019-10-21 15:39:02	<--	xsoultartar (~xsoultart@210.161.134.36) has quit (Client Quit)
2019-10-21 15:39:07	nl3dee	I can't find if it's possible to build a macro with a repeated pattern that contains some optional part (defined with `?`)
2019-10-21 15:39:12	nl3dee	https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=bf3191993f376473d2cefb68ad494c50
2019-10-21 15:39:29	nl3dee	any help would be appreciated :)
2019-10-21 15:41:50	nl3dee	I can call the pattern with the optional part directly, but I can't if it's part of the repetition
2019-10-21 15:42:13	nl3dee	I mean, it's called but the optional part is discarded
2019-10-21 15:42:41	nl3dee	or I get the error "attempted to repeat an expression containing no syntax variables matched as repeating at this depth"
2019-10-21 15:42:50	nl3dee	which I can't really understand :(
2019-10-21 15:46:13	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-21 15:47:27	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-21 15:49:46	<--	syphar (~syphar@p200300C3FF13B501CDB716D2BA57EF3B.dip0.t-ipconnect.de) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-21 15:49:57	tjis	is there something like a hashmap for when you just got a handful of values and actually storing it as a hashmap is a bit overkill?
2019-10-21 15:50:12	tjis	like, I still want the guarantees that I don't have duplicate keys but it should probably store as a vec or something
2019-10-21 15:50:47	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-10-21 15:51:06	jbg	a hashmap isn't exactly an obese structure, have you found that the memory usage is excessive for your application?
2019-10-21 15:51:17	tjis	no, I'm just prematurely optimizing
2019-10-21 15:51:40	jbg	must be nice to have so much time to kill ;)
2019-10-21 15:51:56	tjis	I.. don't...
2019-10-21 15:52:02	tjis	so I guess hashmap it is
2019-10-21 15:54:06	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-21 15:54:19	-->	turion (~turion@93.240.237.218) has joined ##rust
2019-10-21 15:58:13	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 268 seconds)
2019-10-21 16:00:30	the_bugyi_man	Hey all. I want to write some integration tests for this new CLI app I'm writing (https://github.com/bbugyi200/vshlog). I feel like the easiest way to do this would be to test `main()` directly. In Python I would just make main's signature be `main(argv=None)`, let `argv` default to `sys.argv` and then only actually send in arguments manually during testing. What is the rustic equivalent to this? Do I have to
2019-10-21 16:00:33	the_bugyi_man	write another function for `main()` to wrap (e.g. `run(argv)`)?
2019-10-21 16:02:29	danieldg	the_bugyi_man: yes
2019-10-21 16:02:48	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-21 16:03:02	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-21 16:03:07	the_bugyi_man	danieldg: Boo. :(
2019-10-21 16:03:07	danieldg	or have main() { let options = parse_args(); run(options) }
2019-10-21 16:03:27	danieldg	then just test run using an options struct that you build
2019-10-21 16:04:22	the_bugyi_man	danieldg: Ok. Thanks. I was hoping for a different way. I guess `main()` should have a very minimal body anyway, so this is probably the best way.
2019-10-21 16:05:03	danieldg	you could also test the actual application by running it as a command...
2019-10-21 16:05:04	the_bugyi_man	*anyway though
2019-10-21 16:05:38	jbg	yeah, i would probably just have the integration tests be out-of-process, and run the app as a command passing the necessary args in. seems much cleaner
2019-10-21 16:06:03	<--	narispo (~narispo@37.164.175.149) has quit (Ping timeout: 264 seconds)
2019-10-21 16:08:38	the_bugyi_man	@jbg @danieldg Yeah. Maybe. I really like how in my rust code so far all of the unit tests are right next to the code they test. Its like built-in documentation that you can't let go stale (otherwise the CI pipeline will fail). I would like this same benefit for the integration tests.
2019-10-21 16:09:17	danieldg	./yourapp --test foo_test
2019-10-21 16:10:10	danieldg	though that might be harder to do in reality, depening on the test
2019-10-21 16:12:21	the_bugyi_man	The more I think about it, the more I like the `run(argv)` option. I initialize logging inside of `main()` too and would like to leave that out of the integration tests. Using `run(argv)` gives me a good way to do that.
2019-10-21 16:13:14	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 240 seconds)
2019-10-21 16:13:32	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-21 16:14:10	<--	hussam (uid193284@gateway/web/irccloud.com/x-bsigupxdmqgfbwli) has quit
2019-10-21 16:19:49	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-21 16:20:57	<--	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has quit (Quit: jose_neta)
2019-10-21 16:23:18	-->	hussam (uid193284@gateway/web/irccloud.com/x-qmlafdflzlavaipe) has joined ##rust
2019-10-21 16:25:20	-->	baali (~baali@106.207.140.94) has joined ##rust
2019-10-21 16:26:30	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-10-21 16:27:28	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 16:27:29	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-21 16:31:10	-->	narispo (~narispo@37.166.20.145) has joined ##rust
2019-10-21 16:37:00	<--	pedro4 (sid145515@gateway/web/irccloud.com/x-fezoboxkkcgnsvlq) has quit
2019-10-21 16:37:08	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-21 16:38:01	-->	pedro4 (~pedro4@194.187.251.155) has joined ##rust
2019-10-21 16:39:15	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (Quit: Bye.)
2019-10-21 16:39:31	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-10-21 16:42:13	nl3dee	in case someone want the answer of my previous question: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=8f81cacf4196403a186c91409254f11a
2019-10-21 16:42:25	nl3dee	seems like the optional argument have to be named
2019-10-21 16:42:57	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-10-21 16:44:02	<--	dowwie (~dowwie@unaffiliated/dowwie) has quit (Ping timeout: 240 seconds)
2019-10-21 16:44:13	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-21 16:47:17	<--	federico1 (~federico1@opensuse/member/Federico-Mena) has quit (Ping timeout: 240 seconds)
2019-10-21 16:53:26	delYsid	error-chain vs failure: I hear failure is destined to be standardized?  From my limited experience, I pretty much prefer error-chain though.  Are the two equivalent?  Should I invest the time to move to failure now?  Or are they going to coexist for the foreseeable future?
2019-10-21 16:53:48	delYsid	I kind of dont get failure when reading the docs, while the declarative nature of the rror_chain! macro is pretty appealing to me.
2019-10-21 16:54:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-21 16:57:25	<--	narispo (~narispo@37.166.20.145) has quit (Ping timeout: 265 seconds)
2019-10-21 17:00:58	<--	baali (~baali@106.207.140.94) has quit (Read error: Connection reset by peer)
2019-10-21 17:06:51	<--	efm (~efm@vpn.tummy.com) has quit (Quit: Konversation terminated!)
2019-10-21 17:06:55	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 17:09:31	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-21 17:10:01	dutchie	i should probably look into error handling more sophisticated than `type Result<T> = std::result::Result<T, Box<dyn Error>>`
2019-10-21 17:15:18	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 245 seconds)
2019-10-21 17:26:25	-->	baali (~baali@106.207.140.94) has joined ##rust
2019-10-21 17:29:50	-->	jose_neta (~anonymous@a94-132-89-254.cpe.netcabo.pt) has joined ##rust
2019-10-21 17:31:01	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2019-10-21 17:31:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-21 17:32:02	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-21 17:32:12	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-21 17:33:31	<--	ytain (~ghfg@2607:f2c0:94cc:f800:9487:e890:502c:1f2e) has quit (Ping timeout: 250 seconds)
2019-10-21 17:36:07	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-21 17:37:03	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 265 seconds)
2019-10-21 17:38:15	<--	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Remote host closed the connection)
2019-10-21 17:39:57	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-21 17:42:53	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-21 17:44:38	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Client Quit)
2019-10-21 17:44:59	<--	jose_neta (~anonymous@a94-132-89-254.cpe.netcabo.pt) has quit (Quit: jose_neta)
2019-10-21 17:50:17	-->	fanta1 (~fanta1@p200300F76BC32F001047B3926836E688.dip0.t-ipconnect.de) has joined ##rust
2019-10-21 17:52:18	<--	matthias_bgg (~mbgg@37.223.137.234) has quit (Ping timeout: 268 seconds)
2019-10-21 17:53:25	-->	t7 (~tommo@2a00:23c5:1284:fc00:1060:ff4d:42f9:1bcc) has joined ##rust
2019-10-21 17:53:32	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Ping timeout: 268 seconds)
2019-10-22 09:05:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-22 09:05:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-22 09:05:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-22 09:05:18	--	Channel ##rust: 559 nicks (2 ops, 0 voices, 557 normals)
2019-10-22 09:05:34	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-22 09:08:39	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-22 09:08:49	delYsid	OK, I am passing it to HashMap::insert, so thats probably one of those special cases
2019-10-22 09:09:25	mstruebing	fixed it by using the `rust` docker container from dockerhub instead of some predefined cargo github action
2019-10-22 09:09:26	Moongoodgirl	Ahh…yeah, I would expect type mismatches if the type of the HashMap isn't annotated or constrained somehow.
2019-10-22 09:09:44	Moongoodgirl	for example…
2019-10-22 09:10:38	Moongoodgirl	evalr: use std::collections::HashMap; fn foo() {} fn bar() {} let mut map = HashMap::new(); map.insert('f', foo); map.insert('b', bar);
2019-10-22 09:10:40	--	Notice(evalr): error[E0308]: mismatched types
2019-10-22 09:10:42	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=4c2bd5c574843b717b89fb890489ec7f&version=stable&mode=debug
2019-10-22 09:11:14	Moongoodgirl	here the type of HashMap is inferred to be `HashMap<&'static str, _::foo>` because of the first insert()
2019-10-22 09:12:15	Moongoodgirl	evalr: use std::collections::HashMap; fn foo() {} fn bar() {} let mut map: HashMap<&'static str, fn()> = HashMap::new(); map.insert('f', foo); map.insert('b', bar);
2019-10-22 09:12:18	--	Notice(evalr): error[E0308]: mismatched types
2019-10-22 09:12:20	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=454ac4ccc26749db93746b8e5384072e&version=stable&mode=debug
2019-10-22 09:12:38	Moongoodgirl	uh. those are chars, not strings
2019-10-22 09:12:44	Moongoodgirl	I know this language, I swear >.>
2019-10-22 09:12:54	Moongoodgirl	evalr: use std::collections::HashMap; fn foo() {} fn bar() {} let mut map: HashMap<char, fn()> = HashMap::new(); map.insert('f', foo); map.insert('b', bar);
2019-10-22 09:12:59	--	Notice(evalr): ()
2019-10-22 09:14:08	Moongoodgirl	If you return the map, it's also a non-issue (because you have to write the type of the map in the function signature, and of course you'll write `fn()` for the value type rather than any specific function type)
2019-10-22 09:18:24	delYsid	Strange, I return the map from a function, but I still get very weird mismatch errors if I dont use func as Func.
2019-10-22 09:18:37	delYsid	Anyway, its ok, only a minor thing.
2019-10-22 09:19:05	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 09:19:09	Moongoodgirl	That's odd. Can you post the code in question?
2019-10-22 09:19:41	delYsid	let me see.
2019-10-22 09:19:52	<--	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 244 seconds)
2019-10-22 09:20:08	Moongoodgirl	evalr: use std::collections::HashMap; fn foo() {} fn bar() {} fn new() -> HashMap<char, fn()> { let mut map = HashMap::new(); map.insert('f', foo); map.insert('b', bar); map }
2019-10-22 09:20:11	--	Notice(evalr): error[E0308]: mismatched types
2019-10-22 09:20:12	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=7bfb6bf52f9c06c061370544569b640d&version=stable&mode=debug
2019-10-22 09:20:33	delYsid	https://blind.guru/main.rs
2019-10-22 09:22:30	delYsid	If I write "wetter_orf_at as Handler" it builds.
2019-10-22 09:23:12	Moongoodgirl	I don't understand this inference
2019-10-22 09:24:07	Moongoodgirl	It seems pretty obvious to me that the type of the map is well-known because of the function's return type
2019-10-22 09:24:13	Moongoodgirl	and that should trigger coercions
2019-10-22 09:24:52	Moongoodgirl	It looks like, instead, the type is being inferred based on the first insert() call, and then it's conflicting with the type in the signature?
2019-10-22 09:24:53	Moongoodgirl	wtf
2019-10-22 09:25:08	Arnavion	Moongoodgirl: The type isn't known at the time of the .insert()
2019-10-22 09:25:21	Arnavion	Moongoodgirl: Insert an   if false { return map; }   before the .insert() and it'll work
2019-10-22 09:25:39	-->	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined ##rust
2019-10-22 09:25:55	Moongoodgirl	evalr: use std::collections::HashMap; fn foo() {} fn bar() {} fn new() -> HashMap<char, fn()> { let mut map = HashMap::new(); if false { return map } map.insert('f', foo); map.insert('b', bar); map }
2019-10-22 09:25:57	--	Notice(evalr): ()
2019-10-22 09:26:01	Moongoodgirl	waaat
2019-10-22 09:26:44	Moongoodgirl	I don't get it. It's one variable; the variable is returned, so its type must be the type written in the function signature
2019-10-22 09:27:07	Arnavion	The "variable is returned" step happens after the "call .insert() on this variable" step
2019-10-22 09:27:08	Moongoodgirl	and that applies to the variable in general, not just after specific points in code as written or control flow
2019-10-22 09:27:26	Arnavion	The type analysis does follow the order of written code
2019-10-22 09:27:31	delYsid	I tend to hit weird corner cases just by playing around :-)
2019-10-22 09:27:33	Arnavion	(I swear I've had this conversation with you before)
2019-10-22 09:27:35	Moongoodgirl	what. :(
2019-10-22 09:27:53	Moongoodgirl	that's…a bit yikes
2019-10-22 09:28:23	Kinnison	Your issue, most likely, is that you've used fn() as a type, rather than &dyn Fn()
2019-10-22 09:28:55	Moongoodgirl	Kinnison: that's not it; all of these types coerce to `fn() -> ()`
2019-10-22 09:29:12	Arnavion	(And a   &dyn Fn()   won't have anything to borrow from)
2019-10-22 09:29:24	delYsid	Kinnison: Last time someone told me to use &dyn Fn over fn it turned out they were giving bad advice.
2019-10-22 09:29:29	 *	Kinnison boggles
2019-10-22 09:29:32	Moongoodgirl	the issue here is, as Arn_vion said, that type analysis follows the order of code as written :/
2019-10-22 09:30:19	Kinnison	Oh I see
2019-10-22 09:30:25	Moongoodgirl	delYsid: well, function trait objects are more inclusive than just functions
2019-10-22 09:30:31	Moongoodgirl	but sometimes you just don't need that
2019-10-22 09:30:32	delYsid	So, is using as Handler ok in this case, or should I write it differently somehow?
2019-10-22 09:30:53	Moongoodgirl	I mean, there's no problem with writing `as Handler`
2019-10-22 09:30:59	Moongoodgirl	it's fine, and it'll force the issue
2019-10-22 09:31:11	Arnavion	It won't accidentally compile something that isn't a Handler, so there's no problem
2019-10-22 09:31:21	delYsid	OK.
2019-10-22 09:31:24	Arnavion	It's not like   as i32   where you have to worry about truncation etc
2019-10-22 09:31:26	Moongoodgirl	personally, I would prefer annotating the type of the map in the declaration
2019-10-22 09:31:36	Moongoodgirl	just a `: HashMap<_, Handler>`
2019-10-22 09:31:57	Kinnison	Does anyone have a link to a good explanation of what the difference is between a function type and a dyn Fn* ?
2019-10-22 09:32:49	delYsid	Kinnison: AIUI, static vs. dynamic dispatch?
2019-10-22 09:33:13	Kinnison	hmm
2019-10-22 09:33:17	Moongoodgirl	`fn ..` are regular functions. fn items have unique types, but coerce to `fn ..`. Non-capturing closures also coerce to `fn ..`.
2019-10-22 09:33:55	Moongoodgirl	The trait objects, on the other hand, let you use capturing closures and anything that implements the traits, too.
2019-10-22 09:34:23	Kinnison	Aha thanks
2019-10-22 09:34:31	 *	Kinnison should reread all of that part of the stdlib docs
2019-10-22 09:34:38	Kinnison	Clearly it's something I've not grokked properly
2019-10-22 09:34:55	Moongoodgirl	There are three traits. Choosing one means making a tradeoff between what the callee of the API can do and what the caller of the API can do.
2019-10-22 09:36:07	-->	matthias_bgg (~mbgg@95.169.226.6) has joined ##rust
2019-10-22 09:36:17	-->	cmr_z (~cmr@oftn/oswg-member/cmr) has joined ##rust
2019-10-22 09:36:20	 *	Kinnison nods
2019-10-22 09:36:26	Moongoodgirl	FnOnce moves the callable (the closure or whatever it is), so you can only call it once. Closures that move from the environment have to be used as `FnOnce`.
2019-10-22 09:36:45	Moongoodgirl	FnMut takes a mutable reference, so you can call it multiple times
2019-10-22 09:36:55	Kinnison	Aaah, so fn() is effectively a plain function pointer, where Fn* represent a function pointer with a (optional?) capture context
2019-10-22 09:37:11	Moongoodgirl	Fn takes an immutable reference, so you can call it multiple times, and…also call it multiple times at the same time? I guess?
2019-10-22 09:37:27	Moongoodgirl	Kinnison: It's a trait, so it can be anything at all. :P
2019-10-22 09:37:35	Moongoodgirl	(well…once the trait stabilizes, that is)
2019-10-22 09:37:37	Kinnison	heh fair
2019-10-22 09:38:12	-->	panicbit2 (~panicbit@p57ADED42.dip0.t-ipconnect.de) has joined ##rust
2019-10-22 09:39:08	Moongoodgirl	capturing closures are implemented as anonymous types with a function pointer plus fields to store references or ownership of the captures, and implementing whichever of the Fn* traits are appropriate
2019-10-22 09:39:47	Kinnison	Aha
2019-10-22 09:39:58	Kinnison	Thank you, that was clear and comprehensible
2019-10-22 09:40:08	 *	Kinnison puts Fn, FnMut, and FnOnce onto his reading list
2019-10-22 09:40:27	<--	panicbit (~panicbit@p5B09E2F9.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-10-22 09:41:19	Moongoodgirl	^.^ .
2019-10-22 09:41:26	Arnavion	evalr:   fn foo() -> Vec<i32> { let mut x = Default::default(); x.push(5); x }   // Moongoodgirl: Here's a simpler example of type inference going in the direction of written code rather than back-propagating from the return site
2019-10-22 09:41:29	--	Notice(evalr): error[E0282]: type annotations needed
2019-10-22 09:41:31	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=fe0135f8274a9080bfa43a6450a9b834&version=stable&mode=debug
2019-10-22 09:41:48	Moongoodgirl	Arnavion :(
2019-10-22 09:41:52	Arnavion	Especially "type must be known at this point"
2019-10-22 09:41:59	Moongoodgirl	Geez
2019-10-22 09:42:27	<--	panicbit2 (~panicbit@p57ADED42.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-10-22 09:42:31	Moongoodgirl	Are there plans to change this?
2019-10-22 09:42:40	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-22 09:42:43	Arnavion	I don't know, but I doubt it
2019-10-22 09:42:57	Moongoodgirl	First instance in code as written makes sense as a final fallback, but there are many things that should be done first…
2019-10-22 09:43:11	-->	panicbit2 (~panicbit@p57ADEC64.dip0.t-ipconnect.de) has joined ##rust
2019-10-22 09:43:29	Moongoodgirl	starting with function signatures, and going through interactions with other things that have known types
2019-10-22 09:43:46	Moongoodgirl	and /lastly/ if you still don't know what it is, make inferences based on the first usage written in the code
2019-10-22 09:44:28	Arnavion	(Funnily enough   fn foo() -> i32 { let mut x = Default::default(); x += 5; x }   has no problem compiling, because {number} is special I guess)
2019-10-22 09:46:17	Arnavion	Actually
2019-10-22 09:46:25	Arnavion	evalr: #[derive(Default)] struct S; impl std::ops::AddAssign<i32> for S { fn add_assign(&mut self, other: i32) { } } fn foo() -> S { let mut x = Default::default(); std::ops::AddAssign::add_assign(&mut x, 5); x }
2019-10-22 09:46:28	--	Notice(evalr): ()
2019-10-22 09:46:40	Arnavion	I guess it's just   .method()   that requires the type
2019-10-22 09:46:56	Arnavion	because of needing to know where to look it up from, I guess
2019-10-22 09:48:53	-->	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has joined ##rust
2019-10-22 09:51:46	-->	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has joined ##rust
2019-10-22 09:54:43	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 09:57:01	--	zorton is now known as ZORTON
2019-10-22 10:02:42	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-22 10:03:24	Arnavion	https://github.com/arsing/openssl-pkcs11-demo/blob/master/src/pkcs11.rs#L31-L58   Is there a way to write this with Entry combinators? Or at least without the repetition of lines 34-38 with lines 51-55 ?
2019-10-22 10:03:54	Arnavion	(though technically the two   entry.insert()   calls have different signatures, so they're not exactly identical)
2019-10-22 10:09:36	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-22 10:15:57	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 246 seconds)
2019-10-22 10:16:39	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-22 10:20:10	--	ZORTON is now known as Zorton
2019-10-22 10:20:16	<--	turion (~turion@93.240.237.218) has quit (Quit: Leaving.)
2019-10-22 10:20:23	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0::35) has quit (Quit: WeeChat 2.6)
2019-10-22 10:26:03	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-22 10:26:08	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-22 10:26:55	<--	nekron (~nekron@noordsee.de) has quit (Remote host closed the connection)
2019-10-22 10:27:52	-->	nekron (~nekron@noordsee.de) has joined ##rust
2019-10-22 10:27:57	-->	royal_screwup21 (2ee94e14@gateway/web/cgi-irc/kiwiirc.com/ip.46.233.78.20) has joined ##rust
2019-10-22 10:28:00	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-22 10:29:25	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 10:31:19	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-22 10:31:58	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-22 10:34:48	-->	xsoultartar (~xsoultart@133.91.253.129) has joined ##rust
2019-10-22 10:37:23	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-22 10:37:25	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Quit: WeeChat 2.4)
2019-10-22 10:37:44	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-22 10:41:02	<--	royal_screwup21 (2ee94e14@gateway/web/cgi-irc/kiwiirc.com/ip.46.233.78.20) has quit (Remote host closed the connection)
2019-10-22 10:44:01	-->	baali (~baali@59.98.185.91) has joined ##rust
2019-10-22 10:46:30	-->	Coldblackice_ (~c@unaffiliated/coldblackice) has joined ##rust
2019-10-22 10:50:29	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 250 seconds)
2019-10-22 10:50:48	<--	hussam (uid193284@gateway/web/irccloud.com/x-qmlafdflzlavaipe) has quit (Quit: Connection closed for inactivity)
2019-10-22 10:55:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-22 10:57:01	-->	royal_screwup21 (c1f066d2@gateway/web/cgi-irc/kiwiirc.com/ip.193.240.102.210) has joined ##rust
2019-10-22 10:57:41	<--	royal_screwup21 (c1f066d2@gateway/web/cgi-irc/kiwiirc.com/ip.193.240.102.210) has quit (Remote host closed the connection)
2019-10-22 10:58:10	-->	hussam (uid193284@gateway/web/irccloud.com/x-hzkvrodzjpssfncl) has joined ##rust
2019-10-22 10:59:57	faern	I'm running rustfmt on travis with `cargo fmt -- --check`. In the last few days it started failing with `error: no such subcommand: `fmt``. It does work on the stable Rust Travis builds, but not nightly. Does anyone have any idea why `cargo-fmt` might be possible to find on one toolchain but not the other?
2019-10-22 11:00:47	Kinnison	Travis now defaults to the minimal profile
2019-10-22 11:00:56	Kinnison	you need to `rustup component add rustfmt` if you want `cargo fmt` to work
2019-10-22 11:01:19	Kinnison	Nightly doesn't always *have* rustfmt
2019-10-22 11:01:34	Kinnison	so you may also need some extra effort to make it work
2019-10-22 11:02:23	faern	I run all of this in docker. And I get rustfmt with the `-c rustfmt` argument to the new shiny rustup install. And it did work last week. It just magically stopped working recently.
2019-10-22 11:02:55	faern	I mean. I can see from the build it does install rustfmt. And I can see that it has `/root/.cargo/bin/cargo-fmt`. but `cargo fmt` still fails with the above error.
2019-10-22 11:03:49	faern	Great news travis swapped to the minimal setup very fast. But since I do this in docker I need to install rustup+rust myself. I'm also using the minimal profile.
2019-10-22 11:04:29	faern	And if I change `cargo fmt` into `cargo-fmt` (since that's what the binary is called), I get a different error: `Error during execution of `cargo metadata`: error: could not find `Cargo.toml` in `/travis` or any parent directory`
2019-10-22 11:05:17	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-22 11:05:26	Kinnison	If you do -c on the rustup-init line, it won't backtrack for you
2019-10-22 11:05:35	faern	But just above that I do `cwd && ls -la` and I see that I'm in /travis and it *does* have Cargo.toml. I'm wondering if it's something with how docker bind-mounts the folder or something. As I said, this just stopped working without anyone touching anything. So I suspect a change in either travis or rustfmt
2019-10-22 11:05:37	Kinnison	because rustup-init *forces* the install in order to get you a toolchain up front
2019-10-22 11:05:44	faern	Kinnison: Oh. I thought that was exactly what -c was supposed to do?
2019-10-22 11:05:47	Kinnison	You *might* prefer doing --default-toolchain none on the rustup-init
2019-10-22 11:05:51	Kinnison	and then do an install with -c
2019-10-22 11:06:06	Kinnison	Yeah, it's a bit awkward but the idea is to ensure that rustup-init always gives you *something*
2019-10-22 11:06:13	faern	WAT. I explicitly tried that but -c was not a valid argument when I tried.
2019-10-22 11:06:17	Kinnison	it should be warning you about components which were missing but forced
2019-10-22 11:06:32	Kinnison	faern: `rustup toolchain install nightly -c rustfmt` should do what you want
2019-10-22 11:06:42	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-10-22 11:06:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 11:06:50	Kinnison	faern: but only if the toolchain isn't already installed
2019-10-22 11:07:03	Kinnison	We're looking at a --permit-downgrades type option to add components, permitting downgrades
2019-10-22 11:07:04	faern	Wow. Ok
2019-10-22 11:07:21	Kinnison	but for now, the UX on all this is brand new and use-cases are wanted
2019-10-22 11:07:34	Kinnison	If you have a good description of your use-case and how we can make it better, please do file an issue if there's not one matching
2019-10-22 11:08:17	faern	So only way to make it backtrack is --default-toolchain none and then rustup toolchain install nightly -c rustfmt. That will backtrack to last working rustfmt?
2019-10-22 11:08:56	Kinnison	yep
2019-10-22 11:09:37	faern	Cool. Will try that.
2019-10-22 11:09:43	-->	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has joined ##rust
2019-10-22 11:09:47	Kinnison	Good luck :D
2019-10-22 11:10:01	faern	If they use the same flag. Clear documentation about which one backtracks and which one does not would be a good improvement :)
2019-10-22 11:11:17	Kinnison	Yeah, the forcing of rustup-init was a last-minute thing to deal with a horrible problem we had when we weren't doing that :D
2019-10-22 11:11:49	<--	ycjung (~hallabada@141.223.107.7) has quit (Quit: WeeChat 2.6)
2019-10-22 11:13:08	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-22 11:13:31	<--	t8 (~tommo@2a00:23c5:1284:fc00:dc58:2d93:27af:9017) has quit (Remote host closed the connection)
2019-10-22 11:14:58	faern	So, what you suggested will probably help me in the long run, when rustfmt is unavailable next time. But it does not solve the issue of `cargo fmt` not finding `cargo-fmt`. As I said, the rustfmt install did work before this as well :)
2019-10-22 11:15:06	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-22 11:15:07	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-22 11:15:15	-->	t7 (~tommo@2a00:23c5:1284:fc00:f921:eb5a:8488:5266) has joined ##rust
2019-10-22 11:15:36	Kinnison	cargo-fmt is provided by the rustfmt component I think
2019-10-22 11:15:41	delYsid	Uhh, the scraper crate is pretty amazing.
2019-10-22 11:15:58	faern	Kinnison: Yes, the binary is there. But `cargo fmt` does not find it ¯\(o_º)/¯
2019-10-22 11:16:08	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-22 11:16:52	-->	kai (~kai@samba/team/kai) has joined ##rust
2019-10-22 11:17:15	Kinnison	the binary is a rustup proxy I think
2019-10-22 11:18:05	-->	artblanc (~Arturo@176.56.75.2) has joined ##rust
2019-10-22 11:18:21	--	kai is now known as kblin
2019-10-22 11:26:18	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-22 11:33:40	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-22 11:35:30	-->	cmdaemon (cmdaemon@gateway/vpn/privateinternetaccess/cmdaemon) has joined ##rust
2019-10-22 11:36:18	-->	panicbit3 (~panicbit@p57ADE88D.dip0.t-ipconnect.de) has joined ##rust
2019-10-22 11:38:02	<--	panicbit2 (~panicbit@p57ADEC64.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-10-22 11:45:45	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 11:47:57	<--	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-10-22 11:52:28	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-22 11:56:38	-->	ycjung (~hallabada@141.223.107.7) has joined ##rust
2019-10-22 12:01:25	<--	cmdaemon (cmdaemon@gateway/vpn/privateinternetaccess/cmdaemon) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-22 12:06:33	-->	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has joined ##rust
2019-10-22 12:07:27	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-22 12:08:42	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-22 12:09:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-22 12:21:07	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-22 12:21:10	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Read error: Connection reset by peer)
2019-10-22 12:21:11	--	__gotcha1 is now known as __gotcha
2019-10-22 12:22:05	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 12:24:31	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-22 12:28:38	<--	narispo (~narispo@2a01:e0a:2a2:1590:8913:b676:50a4:f3f7) has quit (Ping timeout: 276 seconds)
2019-10-22 12:29:08	-->	narispo (~narispo@2a01:e0a:2a2:1590:8913:b676:50a4:f3f7) has joined ##rust
2019-10-22 12:33:11	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 276 seconds)
2019-10-22 12:35:48	<--	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has quit (Remote host closed the connection)
2019-10-22 12:37:24	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-10-22 12:54:59	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-22 12:56:14	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-22 12:58:04	<--	artblanc (~Arturo@176.56.75.2) has quit (Ping timeout: 268 seconds)
2019-10-22 12:59:35	<--	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has quit (Client Quit)
2019-10-22 12:59:50	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 276 seconds)
2019-10-22 13:00:14	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-22 13:06:45	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-22 13:07:17	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 13:12:57	<--	stalled (~stalled@unaffiliated/stalled) has quit (Ping timeout: 240 seconds)
2019-10-22 13:16:06	-->	nl3dee (~nl3dee@aclermont-ferrand-653-1-2-211.w86-207.abo.wanadoo.fr) has joined ##rust
2019-10-22 13:17:28	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-22 13:17:49	-->	ytain (~ghfg@2607:f2c0:957c:fe00:6dc2:5780:4bf7:ada4) has joined ##rust
2019-10-22 13:19:42	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-10-22 13:20:59	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-22 13:23:38	-->	tartarsauce (~xsoultart@2001:268:c0a2:ce72:4970:547c:e2a4:9b17) has joined ##rust
2019-10-22 13:26:51	<--	xsoultartar (~xsoultart@133.91.253.129) has quit (Ping timeout: 240 seconds)
2019-10-22 13:30:53	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 265 seconds)
2019-10-22 13:31:10	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-22 13:36:17	<--	libertyprime (~libertypr@124.197.60.232) has quit (Quit: Lost terminal)
2019-10-22 13:37:08	<--	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has quit (Quit: jose_neta)
2019-10-22 13:38:27	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-22 13:39:18	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-10-22 13:40:03	<--	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has quit (Ping timeout: 240 seconds)
2019-10-22 13:40:43	<--	tartarsauce (~xsoultart@2001:268:c0a2:ce72:4970:547c:e2a4:9b17) has quit (Ping timeout: 245 seconds)
2019-10-22 13:43:57	<--	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-10-22 13:44:43	-->	mkulke (3e601b02@62.96.27.2) has joined ##rust
2019-10-22 13:45:07	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-10-22 13:48:41	-->	stalled (~stalled@unaffiliated/stalled) has joined ##rust
2019-10-22 13:51:23	<--	mkulke (3e601b02@62.96.27.2) has quit (Ping timeout: 260 seconds)
2019-10-22 13:51:36	<--	libertyprime (~libertypr@124.197.60.232) has quit (Quit: leaving)
2019-10-22 13:52:55	-->	imsnif (~aram@178-191-226-21.adsl.highway.telekom.at) has joined ##rust
2019-10-22 13:54:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 13:55:53	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-22 13:59:47	-->	artblanc (~Arturo@176.56.75.2) has joined ##rust
2019-10-22 13:59:51	<--	finwevi (~quassel@2a01:e0a:157:80a0:216:3eff:fe5e:6c7b) has left ##rust ("https://quassel-irc.org - Chat comfortably. Anywhere.")
2019-10-22 14:00:31	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-10-22 14:00:46	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-10-22 14:01:33	<--	baali (~baali@59.98.185.91) has quit (Ping timeout: 245 seconds)
2019-10-22 14:03:56	<--	ycjung (~hallabada@141.223.107.7) has quit (Quit: WeeChat 2.6)
2019-10-22 14:03:57	la_mettrie	"error[E0623]: lifetime mismatch - these two types are declared with different lifetimes... ...but data from `object_a` flows into `object_b` here"
2019-10-22 14:03:59	la_mettrie	but my whole program is designed so that data is supposed to flow between those two objects
2019-10-22 14:04:49	<--	artblanc (~Arturo@176.56.75.2) has quit (Quit: Leaving)
2019-10-22 14:14:45	j`ey	paste code
2019-10-22 14:15:06	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-22 14:16:08	j`ey	is object b borrowing from a?
2019-10-22 14:18:03	-->	ycjung (~hallabada@141.223.107.7) has joined ##rust
2019-10-22 14:18:43	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-22 14:22:42	<--	llorllal1 (~llorllale@152.0.160.141) has quit (Quit: WeeChat 1.9.1)
2019-10-22 14:23:02	la_mettrie	why the compiler doesn't tell where these lifetime requirements come from? yesterday this compiled fine. now i don't know why it now demands some lifetimes for a certain variable
2019-10-22 14:23:29	ZirconiumX	Show us the error message
2019-10-22 14:24:30	j`ey	im assuming you changed stuff since yesterday
2019-10-22 14:25:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-22 14:25:45	la_mettrie	error message is there above
2019-10-22 14:28:23	j`ey	look at the changes you made since yesterday
2019-10-22 14:30:08	la_mettrie	in rust the program has to be designed so that the data does not flow between two different objects because if compiler demands lifetimes for them, then it all gets distorted?
2019-10-22 14:31:23	j`ey	is that the entire error message?
2019-10-22 14:32:46	j`ey	https://github.com/rust-lang/rust/issues/44409 heh 2year old issues about this error
2019-10-22 14:33:02	la_mettrie	the error message has some more ofc  https://pastebin.com/JAW1HSfv
2019-10-22 14:33:17	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-10-22 14:34:56	j`ey	you could try change it to change_gridunit_texture<'a>(gridarg: &'a mut Gridvec, arg1: &'a mut SDLMasterVars,
2019-10-22 14:35:06	j`ey	but i thought that was the default
2019-10-22 14:38:31	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 14:41:02	wucke13	How can I put a thing a thing in a struct, which doesn't have a size known at compile time
2019-10-22 14:42:19	j`ey	Box usually
2019-10-22 14:43:19	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-22 14:43:40	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-22 14:43:50	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 276 seconds)
2019-10-22 14:43:53	la_mettrie	okay, not it complains that data flows from object X to the same object. wtf...  and it points out only one type on the parameter list but speaks of "two types"  https://pastebin.com/B24bWaXu
2019-10-22 14:44:13	wucke13	As I need the thing also in a another thread, I tryied adding Arc<thingtype> to the struct, though that cauuses an error:
2019-10-22 14:44:46	wucke13	the trait `mavlink::connection::MavConnection` is not implemented for `std::boxed::Box<dyn mavlink::connection::MavConnection + std::marker::Send + std::marker::Sync>`
2019-10-22 14:45:03	j`ey	la_mettrie: nice
2019-10-22 14:52:58	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-22 14:55:19	jbg	wucke13: show some code. it sounds like you defined the type as Arc<Thing> but are passing a Box<Thing> when initialising it
2019-10-22 14:55:20	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-22 14:57:24	jbg	iirc Box should be unnecessary there. Arc already heap-allocates so Arc<Thing> should be sufficient
2019-10-22 15:01:23	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-22 15:05:07	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-22 15:05:47	faern	Still banging my head against the issue where `cargo metadata` fails with `error: could not find `Cargo.toml` in `/travis` or any parent directory` even though I can show the file is really there. Clearly visible here: https://travis-ci.com/mullvad/mullvadvpn-app/jobs/248272965#L298-L316
2019-10-22 15:06:08	faern	Fails on nightly, works on stable+beta. But works on all three release channels when I run the very same script and docker container locally... :/
2019-10-22 15:06:31	<--	lauromoura__ (~lauromour@2804:7f5:f380:4d43:f8dc:e6a:a6c1:795b) has quit (Remote host closed the connection)
2019-10-22 15:06:44	-->	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has joined ##rust
2019-10-22 15:06:50	-->	lauromoura__ (~lauromour@2804:7f5:f380:4d43:2dac:68b0:cbf8:c9f5) has joined ##rust
2019-10-22 15:07:34	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-wthvodiayzpcwtin) has quit (Write error: Connection reset by peer)
2019-10-22 15:07:43	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-chbouhbgxypuyold) has quit (Write error: Connection reset by peer)
2019-10-22 15:07:44	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-qnrhrwhwoaigxzyn) has quit (Remote host closed the connection)
2019-10-22 15:07:47	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-dvotvkqodqewrkve) has quit (Read error: Connection reset by peer)
2019-10-22 15:07:51	<--	siraben (sirabenmat@gateway/shell/matrix.org/x-rtlzjlaldvmiodao) has quit (Read error: Connection reset by peer)
2019-10-22 15:07:51	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-jhrvfzfcsxyybtbo) has quit (Remote host closed the connection)
2019-10-22 15:07:54	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (Write error: Connection reset by peer)
2019-10-22 15:07:58	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (Write error: Connection reset by peer)
2019-10-22 15:07:58	<--	dwagenk (dwagenkcom@gateway/shell/matrix.org/x-yyvdjvkrxrdtqrmk) has quit (Write error: Connection reset by peer)
2019-10-22 15:08:00	<--	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has quit (Client Quit)
2019-10-22 15:09:35	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Remote host closed the connection)
2019-10-22 15:09:57	-->	Mateon1 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-10-22 15:11:38	-->	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has joined ##rust
2019-10-22 15:15:32	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 15:17:34	madprops	is there a way to make a program run a function when it exits in any way?
2019-10-22 15:19:38	faern	madprops: Put it at the end of your main function? :D
2019-10-22 15:19:52	faern	madprops: Or use one of the signal hook libraries that exist if you are targeting *nix
2019-10-22 15:22:24	madprops	faern, wondering if I could use signal_hook crate to registar any kind of signal
2019-10-22 15:22:34	madprops	thought probably i should limit it to a couple
2019-10-22 15:22:56	faern	Many signals are not even exit signals. You probably want SIGTERM
2019-10-22 15:23:23	wucke13	jbg: Sure! https://paste.krebsco.de/yECxXG4c
2019-10-22 15:23:23	faern	if your process is sent a SIGKILL you won't be able to run any function. Because the kernel will kill you, it's nothing any process can do anything about.
2019-10-22 15:25:28	hodapp	woo! I ordered the Rust book finally
2019-10-22 15:26:41	Xatenev	hodapp, wooo
2019-10-22 15:26:56	Xatenev	hodapp, is that the same thing as the online book
2019-10-22 15:26:59	Xatenev	just printed?
2019-10-22 15:28:11	hodapp	whatever this one is: https://nostarch.com/Rust2018
2019-10-22 15:28:19	la_mettrie	many APIs have an option to run a function when a window is closed
2019-10-22 15:28:33	hodapp	I was aiming to work a bit on the ESP32 in Rust but it looks like this is all still quite bleeding-edge
2019-10-22 15:28:54	Xatenev	hm yeah i think thats the one thats online
2019-10-22 15:29:39	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-22 15:30:05	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-22 15:34:53	-->	kreyren (~kreyren@94.113.101.16) has joined ##rust
2019-10-22 15:35:06	<--	kreyren (~kreyren@94.113.101.16) has left ##rust ("Leaving")
2019-10-22 15:38:05	<--	ycjung (~hallabada@141.223.107.7) has quit (Quit: WeeChat 2.6)
2019-10-22 15:38:25	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-22 15:42:50	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 265 seconds)
2019-10-22 15:44:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-22 15:44:30	-->	royal_screwup21 (2ee94e1c@gateway/web/cgi-irc/kiwiirc.com/ip.46.233.78.28) has joined ##rust
2019-10-22 15:51:22	delYsid	First time since I started to use Rust that I had something compile that didn't work (hang). Pretty good statistics so far.  Still, this was a surprise.
2019-10-22 15:51:41	j`ey	logic error?
2019-10-22 15:51:50	delYsid	proc.stdin.as_mut().unwrap().write_all(text.as_bytes())?;
2019-10-22 15:52:20	delYsid	Cut&pasto.  Got this line from the web...  Can you spot the problem?
2019-10-22 15:53:42	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-22 15:54:03	delYsid	taking stdin as a ref will prevent Drop, and therefore the subprocess deadlocks when reading from the pipe output.
2019-10-22 15:54:13	delYsid	Remove the as_mut() and everything is fine.
2019-10-22 15:54:55	Yaniel	well, rust promises to be safe, not to never deadlock :P
2019-10-22 15:55:35	Yaniel	anyway, gotta love stdin shenanigans, they always end up biting
2019-10-22 15:56:28	delYsid	Yeah, guessed that.  I am actually pretty happy with what I get from rustc...
2019-10-22 15:57:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 15:58:37	doomba	error: component 'rustfmt' for target 'x86_64-unknown-freebsd' is unavailable for download for channel stable
2019-10-22 15:59:02	doomba	rustup installs working rustc and cargo but there are no rustfmt and rls
2019-10-22 16:00:13	-->	Nickeeh (~quassel@bulbasaur.sjorsgielen.nl) has joined ##rust
2019-10-22 16:00:50	j`ey	freebsd is tier2, that might be the reason
2019-10-22 16:01:42	ishw0r	https://users.rust-lang.org/t/ideas-for-redesigning-the-rust-logo/26051/63 LOL
2019-10-22 16:01:42	doomba	ah looks like https://github.com/rust-lang/rust/issues/62558 is the reason
2019-10-22 16:03:05	 *	ishw0r chuckled a bit..
2019-10-22 16:03:31	ishw0r	anywho. <3 rayon
2019-10-22 16:04:30	-->	dfin (~dsd@xdsl-188-154-174-181.adslplus.ch) has joined ##rust
2019-10-22 16:05:10	delYsid	hmm, cssparser is missing an impl Error for ParseError
2019-10-22 16:06:27	dfin	hi. Is there any way to remove the match in the expression: let idx = match some_result { Ok(idx) => idx, Err(idx) => idx }?
2019-10-22 16:08:07	faern	dfin: Not that I'm aware of. You have a Result<X, X> where both variants have the same type? That would require some special impl<X> for Result<X, X> { pub fn unwrap_any(self) -> X } which I don't think exists.
2019-10-22 16:09:19	<--	royal_screwup21 (2ee94e1c@gateway/web/cgi-irc/kiwiirc.com/ip.46.233.78.28) has quit (Remote host closed the connection)
2019-10-22 16:11:32	faern	dfin: If you find yourself repeating this a lot in your crate, you might consider adding a local trait and implement it for Result<X, X> in order to get this functionality locally :)
2019-10-22 16:12:07	faern	Or just a standalone function fn<X>(result: Result<X, X>) -> X
2019-10-22 16:19:16	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-22 16:19:55	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-22 16:20:57	<--	Coldblackice_ (~c@unaffiliated/coldblackice) has quit (Ping timeout: 268 seconds)
2019-10-22 16:25:50	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-22 16:26:13	-->	baali (~baali@106.207.153.147) has joined ##rust
2019-10-22 16:26:15	--	osa1_ is now known as osa1
2019-10-22 16:26:58	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-22 16:27:35	<--	timemage (~timemage@unaffiliated/timemage) has quit (Read error: No route to host)
2019-10-22 16:36:03	<--	amitizle (~amitizle@vmi213363.contaboserver.net) has quit (Ping timeout: 240 seconds)
2019-10-22 16:40:06	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 16:45:51	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 246 seconds)
2019-10-22 16:50:53	<--	baali (~baali@106.207.153.147) has quit (Quit: Leaving.)
2019-10-22 16:50:56	<--	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has quit (Remote host closed the connection)
2019-10-22 16:51:09	wucke13	jbg: Did the past work for you?
2019-10-22 16:51:59	jbg	wucke13: yes it did, but I was afk :) having a look now
2019-10-22 16:52:10	wucke13	Oh, thank you :)
2019-10-22 16:53:15	-->	porky11 (~porky11@p200300F843C0CED4068D38FFFEA832A5.dip0.t-ipconnect.de) has joined ##rust
2019-10-22 16:58:31	jbg	wucke13: mavlink::connect returns a Result<Box<dyn MavConnection + Send + Sync>>
2019-10-22 16:58:32	jbg	https://docs.rs/mavlink/0.6.0/mavlink/fn.connect.html
2019-10-22 16:59:19	jbg	so after you unwrap the result and wrap it in Arc, you have an Arc<Box<dyn MavConnection + Send + Sync>>
2019-10-22 16:59:46	jbg	and the error message is correctly telling you that you can't assign that to an Arc<MavConnection> (which is deprecated syntax for Arc<dyn MavConnection>)
2019-10-22 16:59:46	wucke13	And that is bad because?
2019-10-22 17:00:02	wucke13	Ahh
2019-10-22 17:00:18	jbg	you should just be able to update the type on the struct field
2019-10-22 17:02:00	jbg	however, note that Arc<Box<T>> is generally redundant
2019-10-22 17:02:11	jbg	and Arc implements From<Box<T>>: https://doc.rust-lang.org/std/sync/struct.Arc.html#impl-From%3CBox%3CT%3E%3E
2019-10-22 17:02:38	wucke13	Won't that removing Arc break the thread spawned?
2019-10-22 17:02:57	jbg	so, instead of Arc::new(...), you could do let mavconn: Arc<_> = mavlink::connect(...).unwrap().into();
2019-10-22 17:03:22	jbg	converting the Box into an Arc
2019-10-22 17:03:47	wucke13	I more or less copied that with the Arc from mavlinks example https://github.com/mavlink/rust-mavlink/blob/master/src/bin/mavlink-dump.rs
2019-10-22 17:03:49	Arnavion	wucke13: Arc<Box<T>> is redundant with Arc<T> because Arc already stores the T with indirection
2019-10-22 17:03:58	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Remote host closed the connection)
2019-10-22 17:04:47	wucke13	Ahh
2019-10-22 17:06:22	jbg	btw, sounds like you're working on something quite interesting :) i've flown plenty of drones and keep meaning to try some hacking :)
2019-10-22 17:06:33	-->	baali (~baali@106.207.153.147) has joined ##rust
2019-10-22 17:06:36	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-22 17:07:10	wucke13	It's part of my bachelor thesis. I'm trying to build a proof of concept programming which translates some subset of MAVLink to MSP flight controllers, like iNAV and Betaflight.
2019-10-22 17:08:05	jbg	nice!
2019-10-22 17:09:53	wucke13	And this code is going to be a convenience wrapper around mavlink, as the mavlink rust implementation doesn't offer non-blocking recv :D
2019-10-22 17:11:05	wucke13	I'm getting a lot of followup errors after implementing your suggested change
2019-10-22 17:12:46	jbg	pastebin the new code and the errors?
2019-10-22 17:13:04	wucke13	I'll do, hang on a moment :)
2019-10-22 17:13:19	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-22 17:15:08	wucke13	Code: https://paste.krebsco.de/aP6ufm4Q , error: https://paste.krebsco.de/h3XaDk67
2019-10-22 17:15:51	ishw0r	wooo
2019-10-22 17:16:17	jbg	I think you just need to add the + Send + Sync bounds
2019-10-22 17:16:21	jbg	Arc<MavConnection + Send + Sync>
2019-10-22 17:16:23	-->	timemage (~timemage@unaffiliated/timemage) has joined ##rust
2019-10-22 17:16:30	jbg	alternatively, do Arc<_> and the compiler will infer the type for you
2019-10-22 17:17:15	wucke13	Arc<_> will make the clone in line 26 fail
2019-10-22 17:17:33	jbg	are you sure? i don't think so, because the type is known at that point
2019-10-22 17:17:48	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-22 17:18:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-22 17:18:05	wucke13	Adding + Send + Sync to line 22 works. About <_>, I will send you the error
2019-10-22 17:18:29	wucke13	https://paste.krebsco.de/MaAVjNDP
2019-10-22 17:18:38	jbg	ah, i didn't realise you'd tried it - i am a bit surprised, because line 22 should contain enough information for the compiler to know the type completely
2019-10-22 17:19:06	jbg	oh, i think the former error is a consequence of the latter error
2019-10-22 17:19:23	jbg	with the _, your struct field will need to have the + Send + Sync bounds on it
2019-10-22 17:19:33	jbg	which i am guessing it did not
2019-10-22 17:20:04	wucke13	Ah ok. It would make sence to have that on the struct field, as otherwise there may be instances of the struct which may not work, right?
2019-10-22 17:20:39	jbg	it would be a good idea to have it there, as if you write code later that depends on sending or sharing the MavConnection between threads, you'll probably need those bounds expressed there
2019-10-22 17:22:07	wucke13	Unfortunately, adding it only to the struct still keeps up the error about line 26 (the .clone()), as the compiler is missing a type annotation there
2019-10-22 17:22:45	jbg	ah well, i guess you'll have to be more verbose with the types. i don't fully understand why Arc<_> isn't enough in this case, but in your position i'd just express the type fully and leave it at that :)
2019-10-22 17:23:02	wucke13	Will do so :)
2019-10-22 17:23:09	wucke13	Thank you for the detailed help!
2019-10-22 17:23:37	jbg	no problem, good luck with your thesis! i'll have to get onto programming some drones with Rust :)
2019-10-22 17:25:44	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 260 seconds)
2019-10-22 17:25:46	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-22 17:26:53	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-10-22 17:27:16	wucke13	jbg: Definetely! I'm eager on having more and more components in the ecosystem written in rust and clearly decomposed, like thats my personal goal in my research :D
2019-10-22 17:35:51	wucke13	How would I match on the io::Error ErrorKind?
2019-10-22 17:36:08	<--	jose_neta (~anonymous@40.211.37.188.rev.vodafone.pt) has quit (Quit: jose_neta)
2019-10-22 17:36:23	Moongoodgirl	there's a kind() method
2019-10-22 17:36:30	ishw0r	found it pretty neat `Rayon's uses a work-stealing scheduler` (https://docs.rs/rayon/1.2.0/rayon/struct.ThreadPool.html#method.install)
2019-10-22 17:36:37	Moongoodgirl	You can match on ErrorKind, but not exhaustively
2019-10-22 17:37:17	Moongoodgirl	in my experience, checking for one or two specific variants is usually the most common (and that often flattened into an outer match, rather than having a dedicated match block just for the kind)
2019-10-22 17:37:23	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 250 seconds)
2019-10-22 17:38:29	wucke13	But `Err(e) if e.kind() == io::ErrorKind::WouldBlock =>`  complains about `moves value into pattern guard`
2019-10-22 17:38:57	Moongoodgirl	`Err(ref e)` to borrow instead of moving it
2019-10-22 17:39:36	wucke13	Neat, thank you!
2019-10-22 17:42:10	Moongoodgirl	Mmhmm :)
2019-10-22 17:42:25	Moongoodgirl	You usually don't need ref much anymore
2019-10-22 17:42:38	-->	jhfrontz (b8397101@cpe-184-57-113-1.columbus.res.rr.com) has joined ##rust
2019-10-22 17:42:42	Moongoodgirl	Using a field in a pattern guard is one of the cases where you do
2019-10-22 17:43:34	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-22 17:43:53	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-22 17:44:22	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-22 17:46:35	jhfrontz	I'm getting a weird error (using the latest nightly) -- `cargo clean` is reporting "error: could not find `Cargo.toml` in `/builds/jhf/functionary` or any parent directory" (even though there is definitely a readable Cargo.toml in the current directory).  I googled around and there was some indication that this was a catch-all error for other
2019-10-22 17:46:35	jhfrontz	unlikely error conditions.  But I'm not really sure how to debug it.
2019-10-22 17:46:38	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Read error: Connection reset by peer)
2019-10-22 17:46:47	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-22 17:47:16	Arnavion	RUST_LOG=debug cargo clean
2019-10-22 17:47:17	-->	aLeSD (~aLeSD@122.red-80-24-12.staticip.rima-tde.net) has joined ##rust
2019-10-22 17:47:30	Arnavion	or trace, if that's not enough
2019-10-22 17:51:46	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-10-23 10:06:11	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-23 10:06:11	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-23 10:06:11	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-23 10:06:11	--	Channel ##rust: 565 nicks (2 ops, 0 voices, 563 normals)
2019-10-23 10:06:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-23 10:11:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-23 10:13:44	-->	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has joined ##rust
2019-10-23 10:14:22	<--	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has quit (Quit: ##namespace)
2019-10-23 10:15:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 10:15:48	-->	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has joined ##rust
2019-10-23 10:17:12	<--	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has quit (Remote host closed the connection)
2019-10-23 10:19:54	-->	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has joined ##rust
2019-10-23 10:19:57	<--	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has quit (Read error: Connection reset by peer)
2019-10-23 10:22:51	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-23 10:31:10	-->	baali (~baali@59.98.235.70) has joined ##rust
2019-10-23 10:39:39	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 246 seconds)
2019-10-23 10:42:20	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-23 10:43:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 10:46:39	<--	emilsp (~emilsp@freenode/staff/emilsp) has quit (Ping timeout: 633 seconds)
2019-10-23 10:47:16	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Ping timeout: 268 seconds)
2019-10-23 10:47:58	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 10:49:33	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-23 10:53:18	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-23 10:53:48	-->	emilsp (~emilsp@freenode/staff/emilsp) has joined ##rust
2019-10-23 11:03:01	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-23 11:03:01	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-23 11:03:01	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-23 11:03:01	--	Channel ##rust: 566 nicks (2 ops, 0 voices, 564 normals)
2019-10-23 11:03:17	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-23 11:04:03	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 245 seconds)
2019-10-23 11:06:17	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-23 11:08:34	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-23 11:15:37	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-23 11:17:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 11:21:14	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 11:27:21	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-23 11:31:37	<--	baali (~baali@59.98.235.70) has quit (Quit: Leaving.)
2019-10-23 11:38:20	<--	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has quit (Ping timeout: 276 seconds)
2019-10-23 11:45:28	-->	t7 (~tommo@2a00:23c5:1284:fc00:d531:a822:5915:81b5) has joined ##rust
2019-10-23 11:45:38	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-10-23 11:49:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-23 11:52:20	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 12:04:27	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 240 seconds)
2019-10-23 12:07:38	-->	baali (~baali@117.241.129.141) has joined ##rust
2019-10-23 12:08:34	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 265 seconds)
2019-10-23 12:09:19	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-10-23 12:09:40	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-23 12:10:43	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 245 seconds)
2019-10-23 12:14:20	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-23 12:15:29	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-23 12:15:54	-->	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has joined ##rust
2019-10-23 12:20:43	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-23 12:20:53	-->	lineus_ (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has joined ##rust
2019-10-23 12:21:39	<--	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has quit (Ping timeout: 240 seconds)
2019-10-23 12:24:47	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 12:25:03	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-10-23 12:25:19	-->	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has joined ##rust
2019-10-23 12:34:36	<--	pedro4 (sid145515@gateway/web/irccloud.com/x-rcerpicnzrcbqlfw) has quit
2019-10-23 12:36:04	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 264 seconds)
2019-10-23 12:41:20	-->	pedro4 (~pedro4@194.187.251.155) has joined ##rust
2019-10-23 12:41:30	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-23 12:42:32	<--	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has quit (Quit: brb)
2019-10-23 12:48:19	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-23 12:48:25	-->	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has joined ##rust
2019-10-23 12:48:42	<--	t3rtius (~user@2a02:2f0a:450a:9b00:8a78:4f45:b48:c1d4) has quit (Quit: ERC has quit.)
2019-10-23 12:49:58	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 268 seconds)
2019-10-23 12:50:36	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 268 seconds)
2019-10-23 12:54:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-23 12:56:46	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-23 12:58:41	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 13:02:37	<--	AbedB (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-10-23 13:07:26	-->	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has joined ##rust
2019-10-23 13:10:37	vn971	I have a "metaquestion" I guess. Why does clippy make a warning on a code like that
2019-10-23 13:10:38	vn971	`something.function().function2().another_function() == false`
2019-10-23 13:10:38	vn971	It proposes to instead write `!something....`
2019-10-23 13:10:38	vn971	I find the `!something....` syntax, however, much less readable if the main body is big. Basically, most of us read code from left to right. Having a negation on the leftmost position requires from us to remember the negation and not make a mistake with it. Putting it on the rightmost position, however, would save us from this effort, and we'd only encounter the negation when we already have a boolean.
2019-10-23 13:11:59	Stanley00	vn971: how about !another_funtion(something.function()...) ?
2019-10-23 13:13:21	Moongoodgirl	comparing booleans is generally considered bad style
2019-10-23 13:13:29	vn971	Stanley00: here, I guess negation is nice near the "boolean-returning" function. So I'd be OK with clippy throwing a warning here. This way of writing still requires you to keep more things in memory, so it is not ideal.
2019-10-23 13:13:38	Moongoodgirl	although you do make a pretty good argument
2019-10-23 13:14:00	vn971	Moongoodgirl: that could be true, but in both scenarios we still compare them..
2019-10-23 13:14:01	Moongoodgirl	as with basically everything style, the most important thing is to be consistent
2019-10-23 13:14:25	Moongoodgirl	so if this is your project, feel free to change the lint settings and add a note to your style document :)
2019-10-23 13:15:42	-->	ot (~css@unaffiliated/css) has joined ##rust
2019-10-23 13:15:44	Moongoodgirl	vn971: by /compare/, I mean `$bool == true`, `$bool == false`, `bool != true`, and `$bool != false`
2019-10-23 13:15:45	vn971	Moongoodgirl: then again that would be lack of consistency for contributors, and the need to have non-standard configuration.. Is it OK to ask on clippy-s default behavior?
2019-10-23 13:15:47	Stanley00	another counter argument is, if the method chain is long enough that it hard to keep in memory, you better write predict function for it
2019-10-23 13:15:54	Moongoodgirl	where $bool is an expression of type bool
2019-10-23 13:16:01	Moongoodgirl	I was trying to avoid having to write all that out :P
2019-10-23 13:16:31	Moongoodgirl	generally the expectation is that you write `$bool` or `!$bool`
2019-10-23 13:16:46	Moongoodgirl	vn971: …actually, better idea. not()
2019-10-23 13:17:30	Moongoodgirl	you do have to import a trait, but it gives you postfix negation without being redundant and (mostly) without falling afoul of that style guideline
2019-10-23 13:18:21	vn971	Moongoodgirl: but why would we have a lint that reduces readability or requires the reader to keep more things in valuable memory to begin with?
2019-10-23 13:18:52	Moongoodgirl	evalr: use std::ops::Not; let bool_ = true; if bool_.not() {}
2019-10-23 13:18:54	--	Notice(evalr): ()
2019-10-23 13:19:17	Moongoodgirl	vn971: <Moongoodgirl> comparing booleans is generally considered bad style
2019-10-23 13:19:20	Moongoodgirl	<Moongoodgirl> generally the expectation is that you write `$bool` or `!$bool`
2019-10-23 13:19:59	_0x40_	why not just `let var = function().function2()...` before the if?
2019-10-23 13:20:08	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-23 13:21:34	vn971	_0x40_: you could do that. But is it desired to have a work-around instead of fixing clippy, *IF* we consider that the behavior can be improved?
2019-10-23 13:21:50	Stanley00	vn971: think about if bool_ == true; if bool_ != true; if bool_ == false; if bool_ != false; you have to check both comparator and value. if bool_ and if !bool_ is shorter, and easier to read
2019-10-23 13:23:52	vn971	Stanley00: !bool is shorter, that is true. If it is a super-trivial expression, it might even help. For longer chained ones, however, you really have to keep in mind the negation while continuing to read left-to-right.
2019-10-23 13:23:52	vn971	`!something.function().function().is_good()`  <--- given 1 second to read the code, does it check that something is good or bad?
2019-10-23 13:25:25	Stanley00	vn971: you already got recommend about .not(), and also, let meaningful_condition_name = ...; if !meanful_condition_name is not just a workaround
2019-10-23 13:25:34	Moongoodgirl	(`!is_*()` might even be considered an antipattern, though I'm not sure. Generally they come in sets. For sure you wouldn't use `!maybe.is_some()`; that's what `is_none()` is for.)
2019-10-23 13:26:40	-->	aLeSD (~aLeSD@122.red-80-24-12.staticip.rima-tde.net) has joined ##rust
2019-10-23 13:26:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 13:27:25	-->	ytain (~ghfg@2607:f2c0:9254:6e00:1d08:48ca:3c9a:50ea) has joined ##rust
2019-10-23 13:27:29	_0x40_	I think having large expressions in the if condition is bad style in and of itself. Using `let` with a descriptive variable name will make it much clearer at first glance what the code is doing.
2019-10-23 13:29:13	Stanley00	totally agree
2019-10-23 13:30:37	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 13:31:52	<--	ytain (~ghfg@2607:f2c0:9254:6e00:1d08:48ca:3c9a:50ea) has quit (Ping timeout: 264 seconds)
2019-10-23 13:33:16	vn971	while I agree that you should avoid large `if` expressions and that you can use `.not()`, does it really answer the clippy question? The question is why does clippy give a warning on suffix `== false`, but _does_ recommend `!` instead. If clippy would just complain about `if` body being too big, that would be understandable.
2019-10-23 13:34:05	vn971	its recommendation for `!` is at question specifically.
2019-10-23 13:34:14	Stanley00	does clippy have checking for if body being too big?
2019-10-23 13:34:25	vn971	Stanley00: not that I'm aware of.
2019-10-23 13:34:50	Stanley00	then, you can try create an issue/request for them then
2019-10-23 13:35:04	Moongoodgirl	The lint probably exists because `== true` is considered bad style.
2019-10-23 13:35:44	vn971	Moongoodgirl: writing that would indeed be bad, and we should prevent that in a linter.
2019-10-23 13:35:49	Moongoodgirl	In favor of using just the boolean expression, or `!`
2019-10-23 13:36:18	Moongoodgirl	…hang on, doesn't clippy have descriptions for all of the lints?
2019-10-23 13:36:46	j`ey	Moongoodgirl: patches welcome :p
2019-10-23 13:37:04	Moongoodgirl	j`ey: ?
2019-10-23 13:37:29	Moongoodgirl	ugh, the clippy website is terrible
2019-10-23 13:37:52	Moongoodgirl	>Why this is bad: Unnecessary code.
2019-10-23 13:38:05	Moongoodgirl	hmm, no justification here
2019-10-23 13:39:00	vn971	it says: "error: equality checks against false can be replaced by a negation"  to me
2019-10-23 13:39:59	vn971	ah, on the link. Nevermind.
2019-10-23 13:43:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-23 13:45:03	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-23 13:47:27	-->	murarth_ (murarth@gateway/vpn/privateinternetaccess/murarth) has joined ##rust
2019-10-23 13:47:57	<--	murarth (murarth@gateway/vpn/privateinternetaccess/murarth) has quit (Ping timeout: 240 seconds)
2019-10-23 13:47:57	--	murarth_ is now known as murarth
2019-10-23 13:48:01	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-23 13:56:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 13:56:45	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-23 13:58:02	la_mettrie	SDL-Rust docs say that in some cases lifetimes of SDL_Texture variables become too complex and then unsafe textures are needed.  I wonder if my program has such complex lifetimes after all. There is a 2D vector (like 300x300 or so) populated with objects each containing one SDL_Texture. These textures are often changed or erased and objects holding them are often thrown into same functions with other structs
2019-10-23 13:58:04	la_mettrie	objects where they interact.
2019-10-23 13:58:34	la_mettrie	*other struct objects
2019-10-23 13:59:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 14:01:20	-->	sven^ (~quassel@unaffiliated/sven/x-8293843) has joined ##rust
2019-10-23 14:03:06	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-23 14:06:06	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Ping timeout: 252 seconds)
2019-10-23 14:07:33	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-10-23 14:08:29	<--	rustacean (~whateverg@111.65.57.55) has quit (Ping timeout: 276 seconds)
2019-10-23 14:11:13	-->	wildermind (uid300433@gateway/web/irccloud.com/x-lqjnkhavkokmjbns) has joined ##rust
2019-10-23 14:14:10	voker57	they probably become too complex when you send them to GPU and back
2019-10-23 14:14:38	-->	AbedB (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-23 14:15:56	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-23 14:16:42	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-23 14:17:58	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-10-23 14:20:02	Moongoodgirl	la_mettrie: I'm not familiar with SDL, but be advised that writing unsafe code means shouldering a lot of responsibility. If it turns out that you do need to get into unsafe APIs or other unsafe code, you should probably read the Nomicon first.
2019-10-23 14:20:03	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-10-23 14:21:30	la_mettrie	"more responsibility". even more than in non-memory-safe languages?
2019-10-23 14:22:29	-->	ytain (~ghfg@2607:f2c0:9376:4000:f5e7:d7c9:ba3d:60d4) has joined ##rust
2019-10-23 14:23:16	Moongoodgirl	Writing C also means shouldering a lot of responsibility. Too many people don't take it seriously enough, or don't fully understand the implications and intricacies of the language.
2019-10-23 14:25:14	<--	sean__ (~sean@ks3323102.kimsufi.com) has quit (Ping timeout: 240 seconds)
2019-10-23 14:27:46	-->	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-23 14:27:54	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-23 14:28:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 14:29:02	Moongoodgirl	In Safe Rust, everything that would be a UB heisenbug in C is a compile-time error instead.
2019-10-23 14:29:27	Moongoodgirl	Using unsafe features means that's no longer the case.
2019-10-23 14:29:38	Moongoodgirl	I urge you to use `unsafe` carefully, judiciously, and sparingly.
2019-10-23 14:30:40	<--	AbedB (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 264 seconds)
2019-10-23 14:32:52	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 14:37:54	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-23 14:43:13	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-10-23 14:43:13	--	Elfo_ is now known as Elfo
2019-10-23 14:45:55	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-10-23 14:51:23	-->	aep (~aep@libqxt/developer/aep) has joined ##rust
2019-10-23 14:51:47	aep	does anyone remember the cargo bug where no-default-features won't apply and the workaround?
2019-10-23 14:52:17	aep	i.e. i specified default-features = false but cargo.lock will still show _some_ default dependencies
2019-10-23 14:54:19	aep	likely pulled in by an optional dependency again having that crate as dependency with default features enabled
2019-10-23 15:00:39	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-23 15:01:21	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-23 15:05:09	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-23 15:05:41	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 15:06:52	-->	lauromoura_ (~lauromour@2804:7f5:f380:994a:6814:40ab:89ed:f0d0) has joined ##rust
2019-10-23 15:08:09	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-23 15:09:09	<--	lauromoura (~lauromour@2804:7f5:f380:4d43:2dac:68b0:cbf8:c9f5) has quit (Ping timeout: 246 seconds)
2019-10-23 15:14:08	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-10-23 15:19:22	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-23 15:22:44	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Quit: WeeChat 2.6)
2019-10-23 15:22:57	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-10-23 15:29:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-23 15:33:43	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 15:34:38	-->	jhfrontz (~Adium@cpe-184-57-113-1.columbus.res.rr.com) has joined ##rust
2019-10-23 15:37:47	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-10-23 15:40:01	-->	alexozer (~alexozer@pool-173-49-130-2.phlapa.fios.verizon.net) has joined ##rust
2019-10-23 15:40:51	<--	alexozer (~alexozer@pool-173-49-130-2.phlapa.fios.verizon.net) has left ##rust ("WeeChat 2.6")
2019-10-23 15:42:35	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-23 15:46:38	<--	baali (~baali@117.241.129.141) has quit (Ping timeout: 276 seconds)
2019-10-23 15:47:28	-->	ksqsf (~user@223.246.35.213) has joined ##rust
2019-10-23 15:49:32	<--	jenny-m (~jdm-@167.100.78.229) has quit (Quit: Leaving...)
2019-10-23 15:58:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 16:03:54	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 16:19:55	<--	libertyprime (~libertypr@124.197.60.232) has quit (Quit: leaving)
2019-10-23 16:26:22	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-10-23 16:26:27	<--	ksqsf (~user@223.246.35.213) has quit (Ping timeout: 240 seconds)
2019-10-23 16:27:20	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-23 16:27:24	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-23 16:29:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-23 16:30:34	-->	fanta1 (~fanta1@p200300F76BC35C0074F2DD1634864D79.dip0.t-ipconnect.de) has joined ##rust
2019-10-23 16:33:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 16:39:26	georgemp	Hi..anybody have any recommendations for mixing Cargo and Conan (C/C++ Package Manager). I've come across ConanCargoWrapper (which doesn't seem to be maintained any longer) and conan-rs. Anything else out there? Thanks
2019-10-23 16:40:48	<--	imsnif (~aram@178-191-226-21.adsl.highway.telekom.at) has quit (Remote host closed the connection)
2019-10-23 16:41:01	<--	ytain (~ghfg@2607:f2c0:9376:4000:f5e7:d7c9:ba3d:60d4) has quit (Ping timeout: 250 seconds)
2019-10-23 16:43:39	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-10-23 16:44:53	<--	meandi_2 (~meandi@dyndsl-178-142-253-104.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-10-23 16:48:57	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-23 16:50:50	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-23 16:53:02	-->	safe (~safe@unaffiliated/safe) has joined ##rust
2019-10-23 16:56:35	murla	How can I run both usual and ignored tests via cargo test?
2019-10-23 16:57:52	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-23 16:58:05	Kinnison	murla: cargo test -- --include-ignored
2019-10-23 16:58:35	-->	_Vi (~vi@vi-server.org) has joined ##rust
2019-10-23 16:58:57	murla	Kinnison, isn't it nightly only?
2019-10-23 16:59:04	Kinnison	I just got that from stable IIRC
2019-10-23 16:59:07	 *	Kinnison checks
2019-10-23 16:59:15	Kinnison	1.37.0
2019-10-23 16:59:20	Kinnison	so it should be stable
2019-10-23 16:59:57	murla	weird, I use 1.38 but it says it's only available for nightly
2019-10-23 17:00:32	murla	> error: The "include-ignored" flag is only accepted on the nightly compiler
2019-10-23 17:00:32	murla	error: test failed, to rerun pass '--lib'
2019-10-23 17:01:06	Kinnison	Oh so it does
2019-10-23 17:01:07	murla	(2 lines) am I possibly doing anything wrong?
2019-10-23 17:01:08	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 245 seconds)
2019-10-23 17:01:10	 *	Kinnison boggles
2019-10-23 17:01:26	Kinnison	Why would the --help show it if it's nightly only?
2019-10-23 17:01:28	Kinnison	that's very confusing
2019-10-23 17:01:38	Kinnison	I apologise
2019-10-23 17:01:56	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 17:01:59	Kinnison	I guess you want `cargo +nightly test -- --include-ignored` then :/
2019-10-23 17:02:35	vn971	I've created the issue for clippy warning: https://github.com/rust-lang/rust-clippy/issues/4717
2019-10-23 17:02:38	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-23 17:02:40	murla	I've found this issue closed a long time ago https://github.com/rust-lang/rust/pull/55053
2019-10-23 17:03:08	 *	murla checks cargo test -- --help 
2019-10-23 17:04:13	Kinnison	that's where I found --include-ignored but I had just made and built a fresh project with stable to find that out
2019-10-23 17:04:14	Kinnison	v.odd
2019-10-23 17:04:23	<--	fanta1 (~fanta1@p200300F76BC35C0074F2DD1634864D79.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-10-23 17:04:52	murla	well, cargo is 1.38 for sure
2019-10-23 17:05:01	murla	--include-ignored is shown in help
2019-10-23 17:05:26	Kinnison	it seems very odd that the help would tell you a flag which you can't use
2019-10-23 17:07:37	murla	makes sense, of course
2019-10-23 17:08:13	murla	well, everything fails for me with this error (cargo +nightly, invoking nightly cargo binary directly too)
2019-10-23 17:08:27	murla	something is wrong with my setup, I guess
2019-10-23 17:08:49	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-23 17:10:26	-->	tsaka__ (~torstein@dslb-188-102-222-125.188.102.pools.vodafone-ip.de) has joined ##rust
2019-10-23 17:10:30	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-23 17:10:37	Kinnison	lemme install nightly
2019-10-23 17:13:04	Kinnison	Okay yep, same error here
2019-10-23 17:13:06	Kinnison	so not your fault at all
2019-10-23 17:13:15	Kinnison	Something very squiffy is going on
2019-10-23 17:13:17	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 240 seconds)
2019-10-23 17:13:29	Kinnison	I suggest you file a bug on rust-lang/rust :D
2019-10-23 17:13:40	Kinnison	Hopefully they'll either tell you the fix, or admit there's a bug to fix
2019-10-23 17:14:12	murla	Kinnison, thank you very much for checking it out
2019-10-23 17:14:22	murla	I know I'm not alone now :)
2019-10-23 17:14:36	Kinnison	No problem, I'm sorry I couldn't find the right answer for you, but at least you know it's not your system at fault
2019-10-23 17:15:09	murla	I'll add a reminder for myself to file a report
2019-10-23 17:16:29	<--	KeyJoo (~KeyJoo@46.249.6.99) has quit (Quit: KeyJoo)
2019-10-23 17:16:33	<--	lauromoura_ (~lauromour@2804:7f5:f380:994a:6814:40ab:89ed:f0d0) has quit (Ping timeout: 246 seconds)
2019-10-23 17:18:36	Kinnison	👍
2019-10-23 17:19:57	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-23 17:23:12	<--	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has quit (Ping timeout: 246 seconds)
2019-10-23 17:24:39	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-10-23 17:25:00	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-10-23 17:27:42	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-23 17:28:13	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0::35) has quit (Ping timeout: 245 seconds)
2019-10-23 17:28:51	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-23 17:32:05	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-23 17:33:13	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 17:34:35	-->	lauromoura (~lauromour@2804:7f5:f380:aeee:6814:40ab:89ed:f0d0) has joined ##rust
2019-10-23 17:38:51	<--	nl3dee (~nl3dee@aclermont-ferrand-653-1-2-211.w86-207.abo.wanadoo.fr) has quit (Ping timeout: 240 seconds)
2019-10-23 17:39:54	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-23 17:42:36	-->	ytain (~ghfg@2607:f2c0:95a4:6800:2cd5:ead3:6ed7:a1d2) has joined ##rust
2019-10-23 17:44:32	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-10-23 17:45:44	<--	ot (~css@unaffiliated/css) has quit (Quit: ChatZilla 0.9.93 [Firefox 56.0/20170929190952])
2019-10-23 17:50:45	<--	wildermind (uid300433@gateway/web/irccloud.com/x-lqjnkhavkokmjbns) has quit (Quit: Connection closed for inactivity)
2019-10-23 17:56:38	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 276 seconds)
2019-10-23 17:56:54	-->	ytain_ (~ghfg@2607:f2c0:9256:c00:cc58:a36:97c0:30e8) has joined ##rust
2019-10-23 17:57:23	<--	ytain (~ghfg@2607:f2c0:95a4:6800:2cd5:ead3:6ed7:a1d2) has quit (Ping timeout: 245 seconds)
2019-10-23 17:59:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-23 18:00:30	-->	o01eg (~o01eg@2a02:2698:82b:11be:79b8:a0ee:dede:8230) has joined ##rust
2019-10-23 18:01:44	-->	learning1 (~pi@121.121.99.187) has joined ##rust
2019-10-23 18:02:27	<--	learningc (~pi@121.122.105.195) has quit (Ping timeout: 240 seconds)
2019-10-23 18:03:34	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-10-23 18:03:46	-->	tmager1 (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-23 18:04:47	<--	matthias_bgg (~mbgg@95.169.226.6) has quit (Ping timeout: 265 seconds)
2019-10-23 18:04:49	<--	Xatenev (~I@87.190.19.178) has quit (Quit: Leaving)
2019-10-23 18:05:31	<--	tmager (~Thunderbi@96.78.200.121) has quit (Ping timeout: 250 seconds)
2019-10-23 18:05:31	--	tmager1 is now known as tmager
2019-10-23 18:05:33	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-23 18:06:53	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has left ##rust
2019-10-23 18:07:49	-->	fanta1 (~fanta1@p200300F76BC35C0074F2DD1634864D79.dip0.t-ipconnect.de) has joined ##rust
2019-10-23 18:08:00	<--	fsasm (~fsasm@62.178.93.7) has quit (Ping timeout: 246 seconds)
2019-10-23 18:15:03	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Quit: WeeChat 2.6)
2019-10-23 18:15:11	<--	aLeSD (~aLeSD@122.red-80-24-12.staticip.rima-tde.net) has quit (Remote host closed the connection)
2019-10-24 10:39:40	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-24 10:39:40	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-24 10:39:40	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-24 10:39:40	--	Channel ##rust: 565 nicks (2 ops, 0 voices, 563 normals)
2019-10-24 10:39:56	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-24 10:43:18	<--	lopsided98 (~quassel@c-73-149-219-1.hsd1.ma.comcast.net) has quit (Quit: No Ping reply in 180 seconds.)
2019-10-24 10:43:51	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 264 seconds)
2019-10-24 10:44:47	-->	lopsided98 (~quassel@2601:18a:0:ff60::5a4e) has joined ##rust
2019-10-24 10:52:18	jellie	Hey, let me just ask because I'm lost. Is it possible to store a struct in less than 1 byte? Here's my code I'm probably screwing up in many ways https://gist.github.com/urbanslug/d17158502fc00805ef1bbb863c1fe260
2019-10-24 10:54:34	-->	t7 (~tommo@2a00:23c5:1284:fc00:a5dd:11f7:4d88:e9e7) has joined ##rust
2019-10-24 10:57:21	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-24 10:57:30	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-24 10:57:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 10:59:57	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 250 seconds)
2019-10-24 11:01:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 11:03:23	j`ey	jellie: nah
2019-10-24 11:03:56	Moongoodgirl	wait, does packed_struct even do packed vectors?
2019-10-24 11:04:46	j`ey	jellie: even a bool is a byte
2019-10-24 11:05:21	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-24 11:05:31	jellie	Moongoodgirl: It seems to be doing something interesting in that example
2019-10-24 11:06:01	jellie	I also realized that a hex value is a 4 bit value which means it's also possible to use hex as a type haha
2019-10-24 11:06:35	jellie	j`ey: Might you know why Rust would umm "waste" this memory?
2019-10-24 11:06:58	j`ey	jellie: cos CPUs cant access memory at that granularity
2019-10-24 11:07:00	Moongoodgirl	jellie: to be honest, I'm not sure what this example is demonstrating
2019-10-24 11:07:23	Moongoodgirl	jellie: bit-level addressing isn't worth it
2019-10-24 11:07:26	jellie	j`ey: Al I see
2019-10-24 11:07:55	j`ey	jellie: wasting 4bits isnt bad
2019-10-24 11:08:05	Moongoodgirl	jellie: you'd need three extra bits in a pointer to address at the bit level, but because of padding and alignment, the pointer size would have to /double/(!) in most cases
2019-10-24 11:08:12	jellie	Moongoodgirl: I was trying to see if I was going to see two contiguous values in a byte
2019-10-24 11:08:22	Moongoodgirl	so the entire stack doesn't support bit-level addressing
2019-10-24 11:08:28	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-24 11:08:41	jellie	but I figured the stack stores values in bytes
2019-10-24 11:08:57	jellie	I think I've seen something like that done in D and/or C
2019-10-24 11:09:00	Moongoodgirl	you can do packing, but then it's more expensive and complicated to access
2019-10-24 11:09:21	Moongoodgirl	it's that tradeoff between space and time
2019-10-24 11:09:21	jellie	Moongoodgirl: Not to mention I don't know what I'm doing
2019-10-24 11:09:30	jellie	:)
2019-10-24 11:09:57	Moongoodgirl	jellie: Okay. How much data do you need in memory at once?
2019-10-24 11:10:02	j`ey	you can pack two 4bits in a u8 yup
2019-10-24 11:10:13	jellie	j`ey: How?
2019-10-24 11:10:23	j`ey	just have a u8!
2019-10-24 11:10:27	jellie	Well I'd like to store a chromosome
2019-10-24 11:10:31	j`ey	and then use shifts
2019-10-24 11:10:43	jellie	I don't know how much I need but let me tell you what I want
2019-10-24 11:10:52	jellie	I read these files that have ascii text
2019-10-24 11:11:11	jellie	they can be many gigz. The current one I'm using is 10G
2019-10-24 11:11:17	Moongoodgirl	jellie: Unless it's really a whole lot, where /really a whole lot/ has a fairly specific meaning, this is premature optimization
2019-10-24 11:11:19	faern	Sounds like premature optimization. Do the obvious implementation and test it. Only change it if there is a performance bottleneck.
2019-10-24 11:11:21	jellie	the mem on the comp is 128G
2019-10-24 11:12:04	jellie	I then I have to split this data on the 10G file depending on another file, a VCF, that could also be gigz but the current one is about 70M.
2019-10-24 11:12:09	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-24 11:12:28	jellie	When I split this I'll be building a graph, something like a network, to show variation.
2019-10-24 11:12:33	jellie	Have I lost you?
2019-10-24 11:12:59	jellie	Moongoodgirl: Okay I'll consider it premature optimization for now
2019-10-24 11:13:07	jellie	I doubt I'll run out of memory
2019-10-24 11:13:37	jellie	I've seen people use protobuf to help with the packing maybe but I'm not sure exactly how
2019-10-24 11:13:57	jellie	I'm not a systems programmer at all.
2019-10-24 11:14:50	Kinnison	Protobufs are a wire format, not efficient for live-set use
2019-10-24 11:15:43	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-24 11:16:04	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-24 11:16:14	Moongoodgirl	<Moongoodgirl> jellie: Generally, for operating on data in a running program, you trade a bit of size for simplicity and ease of use (and make it more compact when you serialize)
2019-10-24 11:16:59	Kinnison	indeedy
2019-10-24 11:17:21	Moongoodgirl	It might also be possible to do things in a streaming way, so you only have a small part of the data set in memory at once
2019-10-24 11:17:50	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-10-24 11:17:56	jellie	Moongoodgirl: That's actually what I'm thinking of doing
2019-10-24 11:17:57	j`ey	jellie: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7ed716937e4617c3aba4934920281663
2019-10-24 11:17:58	Moongoodgirl	generating statistics on the data sounds like it would be suited to that
2019-10-24 11:18:05	j`ey	just a little demo of storing 2x4bits
2019-10-24 11:18:11	jellie	Strean per chromosome inot memory
2019-10-24 11:18:25	jellie	j`ey: Let me look at it
2019-10-24 11:18:30	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 11:18:41	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-24 11:19:28	faern	jellie: Keep in mind that if you store multiple things in a single byte you will need to do bitmasking and similar to access and write to the data. So it will cost a lot more CPU to represent the data in memory like this.
2019-10-24 11:19:53	j`ey	some more :P
2019-10-24 11:20:19	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Remote host closed the connection)
2019-10-24 11:20:52	jellie	faern: I'm willing to try it
2019-10-24 11:20:55	j`ey	jellie: that packed struct might be able to automate some of this, ive never used it
2019-10-24 11:21:03	jellie	but I also am worried about programming time
2019-10-24 11:21:22	j`ey	just do the simple thing, with a nice api :-)
2019-10-24 11:21:38	Kinnison	I think you're trying to prematurely optimise.  Write you code so that you abstract the storage of the bases, and then you can worry about a more compact storage format later if you need to
2019-10-24 11:21:57	Kinnison	e.g. always refer to bases by their index into the sequence, not by any kind of borrow
2019-10-24 11:22:10	jellie	j`ey: I'm still trying to understand your code :) I'm not even done with the rust book reminds me of https://github.com/biod/BioD/blob/57c81f275faab5cdec4746bfc7af81e31bac0f69/bio/core/base.d#L64
2019-10-24 11:22:34	jellie	Kinnison: I think you're right
2019-10-24 11:22:43	jellie	Plus I need to deliver a good damn tool in time
2019-10-24 11:22:48	j`ey	jellie: basically you take an 8 bit number and store 4 bits in the top half and 4 in the lower half
2019-10-24 11:23:09	jellie	j`ey: Ah
2019-10-24 11:23:19	<--	JonnyCodewalker (~JonnyCode@ip5f5ad6d2.dynamic.kabel-deutschland.de) has left ##rust ("Leaving")
2019-10-24 11:23:20	jellie	easier to write a bug like that though
2019-10-24 11:23:25	jellie	and to debug
2019-10-24 11:23:33	jellie	compared to an enum
2019-10-24 11:23:38	j`ey	yes, that's why you write a nice API that you can swap out later on!
2019-10-24 11:24:32	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-24 11:24:46	jellie	j`ey: Thanks
2019-10-24 11:24:58	jellie	I'll put a pin on this and optimize later
2019-10-24 11:25:12	j`ey	sounds like a plan!
2019-10-24 11:26:00	-->	mychat18 (~user@bzq-79-179-32-81.red.bezeqint.net) has joined ##rust
2019-10-24 11:27:37	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-10-24 11:27:55	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-24 11:29:30	<--	mychat18 (~user@bzq-79-179-32-81.red.bezeqint.net) has left ##rust ("Closing Window")
2019-10-24 11:29:36	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 11:30:53	<--	slomo (~slomo@unaffiliated/slomo) has quit (Ping timeout: 252 seconds)
2019-10-24 11:33:17	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-10-24 11:34:52	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 11:36:30	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 11:41:13	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-24 11:42:46	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 11:54:23	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 11:57:03	delYsid	Are there any plans to add accessibility support to servo?
2019-10-24 11:58:51	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-24 12:01:36	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-24 12:02:39	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 12:10:26	<--	panicbit3 (~panicbit@p57ADE88D.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-10-24 12:11:50	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-10-24 12:11:53	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-10-24 12:12:04	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-24 12:12:46	Yaniel	probably not, servo is not really being developed to be a standalone browser
2019-10-24 12:13:17	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-10-24 12:13:24	-->	ev4rist3 (~phoenix@x4e37c364.dyn.telefonica.de) has joined ##rust
2019-10-24 12:13:28	Yaniel	rather it serves as a testing ground for stuff to be merged into firefox later
2019-10-24 12:14:56	<--	dwagenk (dwagenkcom@gateway/shell/matrix.org/x-pfzregtwxbfeyyqn) has quit (Quit: 30 day idle timeout.)
2019-10-24 12:15:05	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 12:20:15	delYsid	ok.
2019-10-24 12:25:13	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Ping timeout: 268 seconds)
2019-10-24 12:28:14	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-24 12:32:29	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 12:35:15	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 12:37:39	-->	panicbit3 (~panicbit@p57ADE88D.dip0.t-ipconnect.de) has joined ##rust
2019-10-24 12:38:10	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 268 seconds)
2019-10-24 12:41:15	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 12:41:17	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 252 seconds)
2019-10-24 12:42:23	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 252 seconds)
2019-10-24 12:43:24	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 12:43:35	<--	brnzz (~brnzz@185.104.181.38) has quit (Quit: The Lounge - https://thelounge.chat)
2019-10-24 12:44:28	-->	brnzz (~brnzz@185.104.181.38) has joined ##rust
2019-10-24 12:46:17	<--	m0rphism (~m0rphism@149.172.82.115) has quit (Ping timeout: 240 seconds)
2019-10-24 12:51:07	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 12:55:28	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-24 12:56:36	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 12:57:14	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-24 12:58:15	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-24 13:01:17	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 250 seconds)
2019-10-24 13:02:31	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:03:30	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-24 13:04:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-24 13:05:52	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 252 seconds)
2019-10-24 13:09:36	-->	ytain (~ghfg@2607:f2c0:937a:ac00:e968:153d:d1a3:2206) has joined ##rust
2019-10-24 13:09:36	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 13:11:54	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-24 13:12:03	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 264 seconds)
2019-10-24 13:14:53	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 245 seconds)
2019-10-24 13:17:14	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:21:30	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-10-24 13:21:38	<--	learning1 (~pi@121.121.99.187) has quit (Ping timeout: 240 seconds)
2019-10-24 13:22:34	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 13:25:46	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:30:20	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 246 seconds)
2019-10-24 13:33:42	-->	learning1 (~pi@121.121.99.187) has joined ##rust
2019-10-24 13:34:13	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-10-24 13:34:36	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:34:53	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 245 seconds)
2019-10-24 13:38:56	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 240 seconds)
2019-10-24 13:42:39	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-24 13:44:09	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:47:44	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 13:48:57	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 265 seconds)
2019-10-24 13:51:54	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 13:54:05	<--	mutin-s (~s-mutin@85.234.114.134) has quit (Remote host closed the connection)
2019-10-24 13:54:30	-->	mutin-s (~s-mutin@85.234.114.134) has joined ##rust
2019-10-24 13:57:06	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 13:58:04	<--	crockwork (~crockwork@155.98.132.5) has quit (Quit: crockwork)
2019-10-24 13:58:31	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-10-24 13:59:52	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-24 14:00:17	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 14:08:50	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 246 seconds)
2019-10-24 14:10:54	-->	Mateon1 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-10-24 14:11:04	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 14:12:24	la_mettrie	This game-of-life example code with unsafe textures has a strange function structure. Just look at the last lines of the code. There is additional main function there. Without unsafe textures the same example has normal functions.  What does this mean?  So, unsafe textures have to be used through as modules or how this code is supposed to be run?
2019-10-24 14:12:26	la_mettrie	https://github.com/Rust-SDL2/rust-sdl2/blob/master/examples/game-of-life-unsafe-textures.rs
2019-10-24 14:12:55	la_mettrie	*-through
2019-10-24 14:13:40	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-24 14:15:08	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 14:16:12	-->	mawk (mawk@serveur.io) has joined ##rust
2019-10-24 14:16:13	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 268 seconds)
2019-10-24 14:16:17	<--	mawk (mawk@serveur.io) has left ##rust ("Leaving")
2019-10-24 14:17:28	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-24 14:17:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-24 14:19:04	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 14:21:16	-->	ave_milia (ave@gateway/vpn/privateinternetaccess/avemilia) has joined ##rust
2019-10-24 14:21:53	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-10-24 14:22:14	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 14:24:14	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 268 seconds)
2019-10-24 14:24:29	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 276 seconds)
2019-10-24 14:26:26	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 14:28:27	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-10-24 14:30:43	Yaniel	without unsafe textures the example does absolutely nothing
2019-10-24 14:31:08	Yaniel	it has two mains, one is compiled when the "unsafe_textures" feature is enabled, the other is compiled when that feature is not enabled
2019-10-24 14:31:37	Yaniel	I'm guessing this is mainly to prevent builds from failing
2019-10-24 14:35:43	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 245 seconds)
2019-10-24 14:36:57	la_mettrie	thanks
2019-10-24 14:37:00	la_mettrie	i tried to apply similar treatment to my own code, but it seems to fail with sdl2::gfx
2019-10-24 14:37:02	la_mettrie	I have a line "use sdl2::gfx::primitives::DrawRenderer;" there (with that "#[cfg(feature = "unsafe_textures")]" line above it) and the compiler says: error: linking with `cc` failed: exit code: 1 [...] cannot find -lSDL2_gfx
2019-10-24 14:37:46	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 265 seconds)
2019-10-24 14:38:08	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-10-24 14:39:03	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-24 14:39:31	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Read error: Connection reset by peer)
2019-10-24 14:39:38	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-10-24 14:40:02	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-24 14:41:39	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 14:46:30	Yaniel	do you have SDL2_gfx installed?
2019-10-24 14:50:27	la_mettrie	yes, I could use those primitives (like line drawing command) before I added those cfg-lines
2019-10-24 14:51:25	la_mettrie	hmm, or maybe the code didn't get compiled for the other reasons but i think it never complained about SDL2_gfx
2019-10-24 14:52:02	Yaniel	sdl2_gfx is separate from sdl2
2019-10-24 14:52:02	la_mettrie	i think i have the proper line in Cargo.toml, gfx = ["sdl2-sys/gfx"]
2019-10-24 14:52:14	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Ping timeout: 246 seconds)
2019-10-24 14:55:39	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-24 14:58:58	la_mettrie	okay, their Cargo.toml contains also a line ""
2019-10-24 14:59:02	la_mettrie	"required-features = ["gfx"]"
2019-10-24 14:59:07	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 14:59:22	la_mettrie	but i don't know how that can be included to my Cargo.toml which has no [[example]] lines
2019-10-24 14:59:57	Yaniel	uhh let me hit the cargo docs for you
2019-10-24 15:01:05	Yaniel	https://doc.rust-lang.org/cargo/reference/manifest.html#the-required-features-field-optional
2019-10-24 15:01:53	Yaniel	but I think what you need is https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features
2019-10-24 15:04:07	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-24 15:05:13	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 15:06:38	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-24 15:09:11	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 265 seconds)
2019-10-24 15:11:11	-->	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined ##rust
2019-10-24 15:13:25	-->	p8m (~user1@196.245.151.211) has joined ##rust
2019-10-24 15:14:32	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 276 seconds)
2019-10-24 15:28:11	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-10-24 15:28:59	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-24 15:32:02	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 15:32:27	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 264 seconds)
2019-10-24 15:36:17	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 15:37:04	-->	heeen (heeen@endboss.org) has joined ##rust
2019-10-24 15:37:16	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-24 15:39:08	heeen	https://gist.github.com/rust-play/c77f3f741c477bbdb3956ffd4a0ae556
2019-10-24 15:39:15	heeen	can someone help me figure this out
2019-10-24 15:39:29	heeen	how do I get InstanceExtensions from RawInstanceExtensions
2019-10-24 15:40:10	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-10-24 15:41:56	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 268 seconds)
2019-10-24 15:42:16	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-24 15:43:25	-->	jenny-m (~jdm-@2605:8d80:6e0:bdf7:899d:afa2:a193:12e5) has joined ##rust
2019-10-24 15:45:39	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-10-24 15:46:14	<--	juga (~juga@unaffiliated/juga) has quit (Remote host closed the connection)
2019-10-24 15:51:45	-->	b5509cd (50c14a9e@gateway/web/cgi-irc/kiwiirc.com/ip.80.193.74.158) has joined ##rust
2019-10-24 15:52:33	--	Elfo_ is now known as Elfo
2019-10-24 15:57:19	<--	b5509cd (50c14a9e@gateway/web/cgi-irc/kiwiirc.com/ip.80.193.74.158) has quit (Remote host closed the connection)
2019-10-24 16:04:11	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-10-24 16:07:11	<--	ExoUNX (~ExoUNX@unaffiliated/exounx) has quit (Ping timeout: 265 seconds)
2019-10-24 16:09:04	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-10-24 16:10:16	-->	baali (~baali@59.98.184.26) has joined ##rust
2019-10-24 16:11:59	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Quit: WeeChat 2.4)
2019-10-24 16:12:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 16:17:09	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 16:19:29	-->	clarete (~user@pool-108-46-36-53.nycmny.fios.verizon.net) has joined ##rust
2019-10-24 16:20:38	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 16:23:01	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Remote host closed the connection)
2019-10-24 16:23:33	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-10-24 16:24:46	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-24 16:25:02	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-24 16:26:09	murla	Kinnison, I've submitted the issue for cargo test -- --include-ignored https://github.com/rust-lang/cargo/issues/7540. Let's see what folks find out.
2019-10-24 16:26:12	chin-tastic	heeen: if you're referring to vulkano, there's a `From` impl, so just use `.into()` on your raw one.
2019-10-24 16:27:04	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-10-24 16:27:27	heeen	chin-tastic: I was missing a ref
2019-10-24 16:27:45	heeen	chin-tastic: but it turns out the resulting InstanceExtensions object is just empty
2019-10-24 16:28:51	-->	justanotheruser (justanothe@gateway/vpn/nordvpn/justanotheruser) has joined ##rust
2019-10-24 16:29:14	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-10-24 16:30:00	chin-tastic	Gross.
2019-10-24 16:32:34	-->	felix34 (~muh@5.2.76.19) has joined ##rust
2019-10-24 16:33:50	felix34	If I want several modules to share a common interface, what's the recommended way to write a set of tests that apply to all the modules (or crates)?
2019-10-24 16:33:55	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-24 16:35:32	ZirconiumX	felix34: That "common interface" is a trait, and you can write a test that takes in that trait as a parameter and runs the test on it
2019-10-24 16:36:37	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-10-24 16:38:33	felix34	ZirconiumX: ok, and the test will be run on everything that implements the trait, so that e.g the test will verify tht calling .foo() on StructA and StructB is both possible and returns the correct result?
2019-10-24 16:42:03	Kinnison	murla: I *think* it's likely to need to be on rust-lang/rust not rust-lang/cargo, but it's a good starting point :D
2019-10-24 16:43:37	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-24 16:45:00	ZirconiumX	felix34: sure
2019-10-24 16:46:00	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-24 16:46:05	ZirconiumX	Although "calling .foo() on StructA and StructB is ... possible" is mandated by Rust requiring you to implement a function with the same signature as the one in the trait
2019-10-24 16:46:14	ZirconiumX	So if you don't implement the function you get a compile error
2019-10-24 16:46:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 16:49:15	<--	ave_milia (ave@gateway/vpn/privateinternetaccess/avemilia) has quit (Quit: f)
2019-10-24 16:49:55	felix34	ZirconiumX: well it could panic at compile time with "TODO: add functionality here" :) the idea is to have the tests verify function to...
2019-10-24 16:51:06	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 16:51:09	ZirconiumX	That's fair
2019-10-24 16:51:17	felix34	* panic at run time
2019-10-24 16:52:53	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-10-24 16:57:17	-->	b5509cd (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has joined ##rust
2019-10-24 16:57:55	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-24 16:57:59	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-24 17:00:46	asm89	I'm struggling to turn a futures::Stream<T> into a futures::Stream<&T>. Am I wrong in expecting some straightfoward-ish way to do this? My Google fu failing me?
2019-10-24 17:00:59	asm89	For iteration over collections I look at iter and into_iter.
2019-10-24 17:02:12	sfackler	you would need to buffer the entire stream of Ts into a Vec or something like that
2019-10-24 17:03:05	asm89	seems that way
2019-10-24 17:03:15	asm89	but I'm trying to make this streaming
2019-10-24 17:04:02	felix34	asm89: buffer into a channel?
2019-10-24 17:04:41	asm89	I've been using buffer_unordered() from streamext. I guess that's buffering, so buffering elsewhere myself won't hurt.
2019-10-24 17:05:54	asm89	ok, I'll try to shuffle some things around
2019-10-24 17:06:08	asm89	I might up cloning this data for now to unblock myself
2019-10-24 17:06:21	asm89	I guess I need to adjust something in my mental model when it comes to working with iterators vs streams. :)
2019-10-24 17:11:24	jebrosen	I don't think this changes from iterators to streams
2019-10-24 17:12:46	jebrosen	In Iterator<T> or Stream<T> the consumer is responsible for keeping the T alive as long as it needs, in Iterator<&T> or Stream<&T> the producer guarantees all of the items live for some time (usually as long as the container the items are in is alive)
2019-10-24 17:13:50	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Quit: WeeChat 2.6)
2019-10-24 17:15:52	j`ey	I have this in my Cargo.toml https://paste.rs/90M, but I get warning: unused manifest key: source
2019-10-24 17:15:57	j`ey	what am i missing?
2019-10-24 17:16:05	j`ey	(cargo 1.34)
2019-10-24 17:17:26	j`ey	oh it goes in .cargo/config
2019-10-24 17:21:13	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 268 seconds)
2019-10-24 17:21:18	-->	raeken_ (~quassel@gate.reality-bytes.com) has joined ##rust
2019-10-24 17:21:37	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-24 17:21:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-24 17:22:06	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Quit: WeeChat 2.6)
2019-10-24 17:24:11	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-24 17:24:22	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined ##rust
2019-10-24 17:25:50	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 276 seconds)
2019-10-24 17:26:42	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-24 17:27:15	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 17:27:37	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-24 17:35:33	asm89	jebrosen: agreed, but convincing the compiler that the Stream<&T> doesn't live longer than Stream<T> I think is trickier.
2019-10-24 17:36:49	jebrosen	You can't turn an iterator over T into an Iterator over &T, either - I'm not sure what is "trickier" than what here
2019-10-24 17:37:05	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 265 seconds)
2019-10-24 17:39:48	jebrosen	Slightly related: what wants a Stream<&T> anyway?
2019-10-24 17:40:31	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-24 17:41:59	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-24 17:50:04	<--	b5509cd (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has quit (Remote host closed the connection)
2019-10-24 17:50:24	murla	Kinnison, but why on rust repo, not cargo one?
2019-10-24 17:50:50	Kinnison	Because I *think* the thing processing the flags after the "--" is the generated test, rather than cargo
2019-10-24 17:51:13	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-24 17:54:58	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-24 17:57:37	<--	talchas (~user@c-73-222-34-238.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-10-24 17:58:29	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-24 17:59:06	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-24 18:00:35	-->	talchas (~user@c-73-158-252-30.hsd1.ca.comcast.net) has joined ##rust
2019-10-24 18:00:40	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 264 seconds)
2019-10-24 18:00:46	<--	raeken_ (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 265 seconds)
2019-10-24 18:00:55	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-10-24 18:02:27	-->	mszyszko (~mszyszko@2a02:908:1866:7620:1bc7:cc66:b4f3:df17) has joined ##rust
2019-10-25 09:01:51	--	irc: disconnected from server
2019-10-25 09:02:27	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-25 09:02:27	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-25 09:02:27	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-25 09:02:27	--	Channel ##rust: 561 nicks (2 ops, 0 voices, 559 normals)
2019-10-25 09:02:47	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-25 09:10:28	<--	jellie (~zipper@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-10-25 09:17:48	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-25 09:18:54	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-25 09:22:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 09:22:55	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-25 09:31:26	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-10-25 09:31:50	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-10-25 09:36:52	-->	crockwork (~crockwork@155.98.132.1) has joined ##rust
2019-10-25 09:45:27	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-25 09:45:27	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-25 09:45:27	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-25 09:45:27	--	Channel ##rust: 563 nicks (2 ops, 0 voices, 561 normals)
2019-10-25 09:45:42	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-25 09:46:09	<--	heftig (heftig@archlinux/developer/heftig) has quit (Quit: heftig)
2019-10-25 09:46:46	-->	heftig (heftig@archlinux/developer/heftig) has joined ##rust
2019-10-25 09:47:17	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-25 09:55:47	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-25 09:58:15	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-10-25 09:59:42	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 09:59:59	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Remote host closed the connection)
2019-10-25 10:00:13	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-25 10:02:42	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Ping timeout: 246 seconds)
2019-10-25 10:03:50	-->	cseder (~weechat@2a01:79e:3401:d0f8:6db9:3e80:8f1f:ffb2) has joined ##rust
2019-10-25 10:10:50	<--	cseder (~weechat@2a01:79e:3401:d0f8:6db9:3e80:8f1f:ffb2) has quit (Quit: $sudo rm -rf / # Because Life Sucks)
2019-10-25 10:15:20	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 10:17:42	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-10-25 10:18:55	<--	safe (~safe@unaffiliated/safe) has quit (Read error: Connection reset by peer)
2019-10-25 10:22:11	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-10-25 10:22:24	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 10:28:01	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-10-25 10:28:08	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-25 10:31:41	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-25 10:31:59	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 10:32:16	-->	karoofish (karoofish@gateway/shell/suchznc/x-qrhbazectpylbhiu) has joined ##rust
2019-10-25 10:36:40	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-25 10:40:40	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 10:42:32	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-10-25 10:45:50	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-25 10:46:04	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Ping timeout: 252 seconds)
2019-10-25 10:48:15	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 10:50:12	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-25 10:50:28	<--	proycon (~proycon@ip4da1229d.direct-adsl.nl) has quit (Remote host closed the connection)
2019-10-25 10:56:33	-->	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-25 10:57:32	<--	AbedB (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 276 seconds)
2019-10-25 10:59:41	-->	aLeSD (~aLeSD@host241-59-dynamic.171-212-r.retail.telecomitalia.it) has joined ##rust
2019-10-25 11:00:05	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-25 11:08:14	felix34	how do I look at documentation offline for a crate? for example I can do `rustup doc std::io` but not `rustup doc reqwest`
2019-10-25 11:09:40	oherrala	if you have the crate as a dependency for project, run cargo doc
2019-10-25 11:10:10	oherrala	and it will build the docs for your project as well as all dependencies
2019-10-25 11:12:12	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-25 11:13:28	<--	crockwork (~crockwork@155.98.132.1) has quit (Quit: crockwork)
2019-10-25 11:13:29	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-25 11:16:00	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-25 11:17:29	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 11:17:37	jbg	felix34: the docs are in target/doc - to open the docs for reqwest open target/doc/reqwest/index.html - that assumes that you have reqwest as a dep of course.
2019-10-25 11:18:34	felix34	oherrala: thanks! currently building, we'll see if that does it
2019-10-25 11:19:06	oherrala	jbg, felix34; or cargo doc --open
2019-10-25 11:20:10	felix34	why am I getting unused code warnings from code that is only referenced by a `mod` statement in `lib.rs`?
2019-10-25 11:23:23	oherrala	felix34: if the lib itself is not using the function in question and it's not made public, then it can be considered as unused
2019-10-25 11:23:25	Kinnison	if it's not used, and it's not public, then it will give that warning
2019-10-25 11:23:29	Kinnison	snap!
2019-10-25 11:23:55	felix34	oherrala: aha, ok
2019-10-25 11:25:23	felix34	oherrala: `cargo doc` built a bunch of stuff and I can open the docs with `cargo doc --open` butit's all specific to this crate... is thre no general way to get crate docs accessible, or to view just the docs for a specific crate (like reqwest)?
2019-10-25 11:26:01	felix34	would ideally like to be able to read crate docs offline while writing code, rather than after the code is written / etc
2019-10-25 11:26:25	Kinnison	You have to have downloaded and built the docs for a crate in order to view them offline
2019-10-25 11:26:34	Kinnison	hence `cargo doc` as the suggestion
2019-10-25 11:26:47	felix34	ok, well good to know then
2019-10-25 11:26:49	Kinnison	On the left you should see a list of all the deps so you can pick whatever dep crate you wanted
2019-10-25 11:26:59	Kinnison	Otherwise you're essentially asking for an offline mirror of docs.rs :D
2019-10-25 11:27:38	felix34	yeah, or just a central directory in my home dir with all the docs from all the crates I've downloaded in the past
2019-10-25 11:28:12	Kinnison	:D
2019-10-25 11:28:20	Kinnison	Not an awful idea
2019-10-25 11:30:44	Moongoodgirl	install crate docs in `~/.cargo/share/doc`?
2019-10-25 11:35:27	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-25 11:42:58	<--	cmdaemon (cmdaemon@gateway/vpn/privateinternetaccess/cmdaemon) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-25 11:49:47	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-25 11:51:20	-->	dn2k (~er@unaffiliated/dn2k) has joined ##rust
2019-10-25 11:52:51	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-25 11:58:03	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 12:06:27	-->	Elfo (~Elfo@unaffiliated/elfo) has joined ##rust
2019-10-25 12:06:50	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-25 12:12:20	<--	infinee (~infinee@061093245022.static.ctinets.com) has quit (Read error: Connection reset by peer)
2019-10-25 12:12:27	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-25 12:12:49	-->	infinee (~infinee@061093245022.static.ctinets.com) has joined ##rust
2019-10-25 12:18:47	<--	dutchie (~jholland@unaffiliated/dutchie) has quit (Ping timeout: 276 seconds)
2019-10-25 12:18:47	<--	richardwhiuk (richardwhi@scarlet.richardwhiuk.com) has quit (Ping timeout: 276 seconds)
2019-10-25 12:20:15	-->	dutchie (~jholland@unaffiliated/dutchie) has joined ##rust
2019-10-25 12:26:53	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-10-25 12:35:18	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-25 12:40:11	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 12:41:06	-->	cukier (sid268358@gateway/web/irccloud.com/x-ldkrcvvgqtspqkgn) has joined ##rust
2019-10-25 12:49:21	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 265 seconds)
2019-10-25 12:51:10	-->	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has joined ##rust
2019-10-25 12:56:44	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-10-25 12:59:09	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-10-25 12:59:32	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-25 13:04:14	-->	ytain (~ghfg@2607:f2c0:925e:3500:9c63:84a9:db64:825e) has joined ##rust
2019-10-25 13:11:21	<--	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has quit (Remote host closed the connection)
2019-10-25 13:12:04	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 265 seconds)
2019-10-25 13:14:47	<--	jamm (~jamm@unaffiliated/jamm) has quit (Quit: Leaving)
2019-10-25 13:15:59	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-10-25 13:17:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-25 13:22:39	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 13:25:06	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-10-25 13:26:03	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 246 seconds)
2019-10-25 13:33:44	-->	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has joined ##rust
2019-10-25 13:38:05	<--	narispo (~narispo@2a01:e35:2fbc:8b90:843d:a277:747d:479e) has quit (Ping timeout: 276 seconds)
2019-10-25 13:38:37	<--	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has quit (Ping timeout: 240 seconds)
2019-10-25 13:44:00	-->	narispo (~narispo@2a01:e35:2fbc:8b90:843d:a277:747d:479e) has joined ##rust
2019-10-25 13:47:11	<--	matthias_bgg (~mbgg@37.223.137.234) has quit (Ping timeout: 276 seconds)
2019-10-25 13:50:20	jbg	i wonder how big that folder would get. i have 20 or so fairly large rust projects, and the dep tree often has several versions of some crates (despite me trying to submit PRs as often as possible to get people to update deps)
2019-10-25 13:50:36	jbg	i guess any centralised doc folder would need to keep docs for every version you use of every crate you use
2019-10-25 13:51:08	jbg	it would presumably grow without bounds, since whatever maintains it wouldn't really know if you stopped using an old version or if you just started using a newer version (but still have the old version around)
2019-10-25 13:51:12	jbg	or maybe you'd only do direct deps?
2019-10-25 13:51:32	jbg	so you'd have a smaller version of the same problem
2019-10-25 13:55:39	<--	Smjert (~Smjert@unaffiliated/smjert) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-10-25 13:56:54	-->	Smjert (~Smjert@unaffiliated/smjert) has joined ##rust
2019-10-25 13:58:55	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 13:58:56	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-25 13:59:35	oherrala	cargo doc already build docs of dependencies of a project so its quite easy to keep all necessary docs at hand for correct versions of deps.
2019-10-25 14:00:22	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-10-25 14:02:19	-->	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has joined ##rust
2019-10-25 14:04:43	-->	AbedB__ (~AbedBhuty@173.239.197.23) has joined ##rust
2019-10-25 14:04:46	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 14:05:07	jbg	oherrala: yes, i wasn't referring to any difficulty, but rather the constantly-growing nature of a hypothetical ~/.cargo/share/doc
2019-10-25 14:05:39	jbg	it would be very easy to make cargo doc output all its docs there, but every time a dep updates you'd get another version of the docs of that dep added there
2019-10-25 14:06:00	jbg	and you wouldn't know if you could remove the old version, because another crate might depend on that old version
2019-10-25 14:06:41	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-25 14:08:28	<--	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 264 seconds)
2019-10-25 14:10:17	oherrala	my project with 334 crates generated 548MB of docs and 24k files. That's average of 1.7MB/crate and 73 files/crate.
2019-10-25 14:11:01	oherrala	I was actually expecting more files per crate
2019-10-25 14:11:05	Yaniel	that's a lot of html
2019-10-25 14:12:23	-->	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-25 14:12:33	oherrala	Yaniel: yeah, html is really poor way to distribute docs. It's lots of small files. Really I/O intensive.
2019-10-25 14:12:55	oherrala	as has been seen with Rust's docs itself.
2019-10-25 14:13:22	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-25 14:13:44	Yaniel	I don't think the number of files is the problem
2019-10-25 14:15:08	-->	fredmorcos (~fredmorco@141.143.213.11) has joined ##rust
2019-10-25 14:15:08	<--	fredmorcos (~fredmorco@141.143.213.11) has quit (Remote host closed the connection)
2019-10-25 14:15:09	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-25 14:15:42	Yaniel	and html itself wouldn't even be that bad for the most part
2019-10-25 14:15:47	-->	fredmorcos (~fredmorco@141.143.213.11) has joined ##rust
2019-10-25 14:15:49	<--	fredmorcos (~fredmorco@141.143.213.11) has quit (Client Quit)
2019-10-25 14:16:03	<--	AbedB__ (~AbedBhuty@173.239.197.23) has quit (Ping timeout: 240 seconds)
2019-10-25 14:16:11	Yaniel	but looking at the Iterator page there's a few hundred kb in fonts and a megabyte or two of javascript
2019-10-25 14:16:20	-->	baali (~baali@59.98.239.163) has joined ##rust
2019-10-25 14:16:43	-->	AbedB__ (~AbedBhuty@173.239.197.142) has joined ##rust
2019-10-25 14:17:41	jbg	i ran `cargo doc` on every crate in my ~/dev/ and ended up with ~9 GiB of docs
2019-10-25 14:18:07	jbg	which is workable, but the unbounded growth of a centralised folder as any dependency makes an update would probably become unworkable quickly
2019-10-25 14:18:22	Yaniel	how smart is it even wrt sharing said fonts and js between crates
2019-10-25 14:18:40	jbg	unless you did it as something that indexed the crates you had so that it could know when it could prune something
2019-10-25 14:19:08	jbg	which requires knowledge of where you keep your crates, so probably out of scope for `cargo` itself
2019-10-25 14:19:11	Moongoodgirl	Indexing every project that exists on the system seems impractical
2019-10-25 14:19:13	Moongoodgirl	yeah
2019-10-25 14:19:37	jbg	but without that, you can't know if, say, phf==0.7.1 is still used by some crate on your system or not, so you can't know if you can ditch the docs for it
2019-10-25 14:19:50	-->	fredmorcos (~fredmorco@141.143.213.11) has joined ##rust
2019-10-25 14:19:50	<--	fredmorcos (~fredmorco@141.143.213.11) has quit (Client Quit)
2019-10-25 14:20:13	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 265 seconds)
2019-10-25 14:20:31	Moongoodgirl	You could use heuristics based on atimes, present versions, and disk usage to decide when to drop a particular doc
2019-10-25 14:20:42	<--	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-10-25 14:20:55	-->	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-25 14:21:03	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-25 14:21:11	jbg	that would be quite annoying when i encounter a problem with something and find that the old version of xyz crate that it depends on had its docs pruned because i never looked at them before
2019-10-25 14:21:32	jbg	i probably look at some crate's docs for the first time on a daily basis
2019-10-25 14:21:41	<--	AbedB__ (~AbedBhuty@173.239.197.142) has quit (Ping timeout: 268 seconds)
2019-10-25 14:22:12	Moongoodgirl	…that makes it sound like you never want to delete docs.
2019-10-25 14:22:15	jbg	and running `cargo tree -d` or similar on any fairly large project will show that the existence of a newer version doesn't make it less likely that you're still using an older version
2019-10-25 14:22:23	Yaniel	some sort of rustdocd could potentially be neat actually
2019-10-25 14:22:24	jbg	i never want to delete docs for something that is still depended on
2019-10-25 14:22:56	Moongoodgirl	…then you have no choice but to somehow track all of the projects present.
2019-10-25 14:23:19	jbg	exactly - either that or let your doc folder grow continuously with the only pruning strategy being "delete it and recreate it"
2019-10-25 14:23:20	Yaniel	it could recursively crawl projects as cargo touches them (assuming cargo gets hooks for such things)
2019-10-25 14:23:28	jbg	people seem to accept that kind of behaviour from things like docker, so maybe that would be ok :D
2019-10-25 14:23:37	jbg	but yeah, i would use a cargodocd
2019-10-25 14:23:39	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has quit (Ping timeout: 240 seconds)
2019-10-25 14:23:48	Yaniel	and provide a central deduplicated archive of docs that IDEs etc could hook into
2019-10-25 14:23:52	jbg	Yaniel: nice idea. then it doesn't need to know where you keep your projects
2019-10-25 14:23:59	Moongoodgirl	I would prefer docs getting deleted and having to be regenerated
2019-10-25 14:24:38	jbg	hmm true, you could just generate the docs on-the-fly as needed
2019-10-25 14:24:41	Yaniel	the daemon can prune docs periodically if their respective projects are gone
2019-10-25 14:24:43	jbg	there's already a central storage of the crates
2019-10-25 14:24:50	Yaniel	or if there is storage pressure
2019-10-25 14:24:54	jbg	cargodocd could just be a web server
2019-10-25 14:25:01	Yaniel	maybe keep only a shortened version
2019-10-25 14:25:10	jbg	that generates docs on-the-fly
2019-10-25 14:25:17	jbg	the central storage then just becomes the cache of cargodocd
2019-10-25 14:25:21	Moongoodgirl	jbg: with the heuristics, note that the third heuristic could work both ways and be tunable. You could set a minimum size to start pruning.
2019-10-25 14:25:22	Yaniel	say, just a listing of function signatures
2019-10-25 14:26:11	Moongoodgirl	Yaniel: eh, that seems out of scope for this project. It more rustdoc's domain.
2019-10-25 14:26:13	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-25 14:26:20	Yaniel	possible
2019-10-25 14:26:42	Yaniel	hmm, do docs change depending on enabled features?
2019-10-25 14:26:52	jbg	usually docs are made with all features enabled
2019-10-25 14:26:54	Yaniel	or does cargo doc always cover everything
2019-10-25 14:27:08	-->	fredmorcos (~fredmorco@141.143.213.11) has joined ##rust
2019-10-25 14:27:16	<--	fredmorcos (~fredmorco@141.143.213.11) has quit (Remote host closed the connection)
2019-10-25 14:27:22	Yaniel	like, even when two features are mutually exclusive (is that even supported?)
2019-10-25 14:27:29	Moongoodgirl	I think they do change based on features, so you'd have to make sure to enable all features when invoking `cargo doc`?
2019-10-25 14:27:29	jbg	the simplest solution to my needs (which might differ from other people's needs), i think, would be just something that can serve docs for any crate i have downloaded
2019-10-25 14:27:42	Moongoodgirl	I don't think features can be mutually exclusive (at the cargo level)
2019-10-25 14:27:44	jbg	mutually exclusive features aren't a thing, i think - features are purely additive
2019-10-25 14:28:05	Moongoodgirl	you can cause features to be mutually exclusive though
2019-10-25 14:28:33	Moongoodgirl	consider: `#[cfg(feature(bar))] struct Foo; #[cfg(feature(baz))] struct Foo;`
2019-10-25 14:28:48	Moongoodgirl	if both features are enabled, this will fail to build
2019-10-25 14:30:36	jbg	yeah - i think that is contrary to the intent of features, and i think your docs.rs build would fail if you did that
2019-10-25 14:30:39	jbg	but it's indeed possible
2019-10-25 14:30:55	jbg	i am pretty sure docs.rs builds docs with all features enabled
2019-10-25 14:31:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-25 14:32:04	Yaniel	could also be interesting to have this cargodocd running on a tmpfs
2019-10-25 14:32:20	Yaniel	if one has a lot of RAM available anyway
2019-10-25 14:32:51	-->	AbedB__ (~AbedBhuty@173.239.197.23) has joined ##rust
2019-10-25 14:33:14	jbg	i'm not sure that i'm so concerned with the performance of loading my docs that the difference between ssd and ram would matter
2019-10-25 14:35:36	jbg	once the docs are generated they should load extremely fast even if it's spinning rust they're loading from. if they have to be generated (never looked at before, or pruned out due to storage pressure, or whatever) then i guess there'd be a multi-second latency to generate them anyway, so where you store them becomes even less significant
2019-10-25 14:36:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 14:37:14	<--	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 276 seconds)
2019-10-25 14:37:34	-->	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-25 14:38:51	<--	AbedB__ (~AbedBhuty@173.239.197.23) has quit (Ping timeout: 240 seconds)
2019-10-25 14:38:57	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 268 seconds)
2019-10-25 14:39:54	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-25 14:40:20	oherrala	jbg: docs.rs builds with default features only
2019-10-25 14:40:28	-->	AbedB__ (~AbedBhuty@173.239.197.142) has joined ##rust
2019-10-25 14:40:36	jbg	oherrala: ah, glad to be corrected. good to know
2019-10-25 14:40:46	oherrala	jbg: see for example this crate which doesn't have default features: https://docs.rs/buffering/
2019-10-25 14:41:03	jbg	now that i think about it, crates with alternative implementations for things (e.g. platform-specific) might have mutually-exclusive features in the manner that Moongoodgirl described
2019-10-25 14:41:11	jbg	right
2019-10-25 14:41:53	oherrala	jbg: and crate maintainer can control what features docs.rs builds, see https://docs.rs/about under "Metadata for custom builds"
2019-10-25 14:42:45	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-10-25 14:44:17	<--	AbedB_ (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-10-25 14:46:22	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-25 14:46:34	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined ##rust
2019-10-25 14:49:03	<--	dn2k (~er@unaffiliated/dn2k) has quit (Ping timeout: 245 seconds)
2019-10-25 14:49:11	oherrala	Yaniel: When writing files, the amount of files is a huge issue. Each file needs many syscalls: open, write, close. Writing thousands of small files is way too slower than writing single big one. Same is also true for reading files.
2019-10-25 14:49:59	oherrala	after the files have hit the disc, it's usually not big issue, except if you need to read many of them as fast as possible.
2019-10-25 14:51:44	oherrala	See for example here: https://github.com/rust-lang/rustup.rs/issues/1540#issuecomment-494985001 "Both 'rustc' and 'rust-std' components claimed a somewhat constant install rate of 11.7 MiB/s; 'rust-docs' varied between as low as 15 KiB/s and as high as 300 KiB/s."
2019-10-25 14:52:55	Moongoodgirl	neo fs api archive support?
2019-10-25 14:53:11	Moongoodgirl	and|or vectored file operations
2019-10-25 14:53:45	oherrala	Yaniel: and there's some notes what rustup has had to do to speed things up: https://www.reddit.com/r/rust/comments/brtec1/rustup_1183_released/eogpfgr/
2019-10-25 14:54:01	Moongoodgirl	or maybe even just a function that can atomically create a file with all the contents and metadata in just one syscall
2019-10-25 14:54:25	<--	brnzz (~brnzz@185.104.181.38) has left ##rust ("The Lounge - https://thelounge.chat")
2019-10-25 14:54:27	Moongoodgirl	that would be useful for other things too :P
2019-10-25 14:56:34	oherrala	Moongoodgirl: no wonder many things use databases instead of disc directly
2019-10-25 14:57:22	Moongoodgirl	I think that's a very small part of the story of choosing a database over flat file.
2019-10-25 14:58:43	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-25 15:02:08	-->	ZoomZoomZoom (~Zoom@91.151.203.4) has joined ##rust
2019-10-25 15:05:11	<--	lauromoura (~lauromour@2804:7f5:f380:aeee:1df6:5b4a:502f:b01d) has quit (Ping timeout: 276 seconds)
2019-10-25 15:07:22	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-25 15:09:03	-->	dozn__ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has joined ##rust
2019-10-25 15:11:41	<--	stzsch (~no@2804:14d:4cd1:823f:5604:a6ff:fe8e:d858) has quit (Ping timeout: 276 seconds)
2019-10-25 15:11:57	<--	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Ping timeout: 240 seconds)
2019-10-25 15:13:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 15:13:29	<--	pedro4 (~pedro4@134.19.179.195) has quit (Ping timeout: 268 seconds)
2019-10-25 15:17:08	-->	stzsch (~no@2804:14d:4cd1:823f:5604:a6ff:fe8e:d858) has joined ##rust
2019-10-25 15:19:23	<--	fuzen (fuzen@fsf/member/Fuzen) has quit (Quit: ZNC - https://znc.in)
2019-10-25 15:20:54	<--	AbedB__ (~AbedBhuty@173.239.197.142) has quit (Ping timeout: 268 seconds)
2019-10-25 15:21:26	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-25 15:30:22	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-25 15:30:23	-->	lauromoura (~lauromour@2804:7f5:f380:1317:1df6:5b4a:502f:b01d) has joined ##rust
2019-10-25 15:30:39	-->	fuzen (fuzen@fsf/member/Fuzen) has joined ##rust
2019-10-25 15:38:22	-->	jenny-m (~jdm-@75.98.19.134) has joined ##rust
2019-10-25 15:42:04	<--	fuzen (fuzen@fsf/member/Fuzen) has quit (Quit: ZNC - https://znc.in)
2019-10-25 15:43:26	-->	fuzen (~fuzen@fsf/member/Fuzen) has joined ##rust
2019-10-25 15:46:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-25 15:48:42	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-25 15:51:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 15:51:57	felix34	my unit tests have the `user super::*` line in them. the compiler warns me this is an unused import, but when I take it out my tests stop working because things stop being found in that scope. what's going on?
2019-10-25 15:52:22	felix34	* that should be `use super::*`
2019-10-25 15:53:04	faern	felix34: Sounds like a bug :/ Can you try narrowing it down to a small example that you could maybe post on the playground or something?
2019-10-25 15:53:28	Moongoodgirl	Not necessarily a bug. Might just be interactions with conditional compilation.
2019-10-25 15:53:57	felix34	Moongoodgirl: I'm not doing anything special...
2019-10-25 15:54:13	Moongoodgirl	yeah, but, tests.
2019-10-25 15:54:35	<--	narispo (~narispo@2a01:e35:2fbc:8b90:843d:a277:747d:479e) has quit (Ping timeout: 276 seconds)
2019-10-25 15:54:51	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-25 15:56:14	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Remote host closed the connection)
2019-10-25 15:57:18	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined ##rust
2019-10-25 15:57:22	<--	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has quit (Remote host closed the connection)
2019-10-25 15:57:37	jbg	yeah, i've had something similar before when the tests themselves are conditionally compiled but the `use` line isn't
2019-10-25 15:57:44	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Remote host closed the connection)
2019-10-25 15:57:51	<--	RayS (~raysl@sdf1.xen.prgmr.com) has quit (Quit: ZNC 1.7.3 - https://znc.in)
2019-10-25 15:58:09	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-25 15:58:09	jbg	so when you're doing a normal build, since the tests are not compiled, it *is* an unused import
2019-10-25 15:58:40	felix34	jbg: aha, so how do I mark the `mod test` bundle for only compiling when testing?
2019-10-25 15:58:51	-->	narispo (~narispo@37.171.34.46) has joined ##rust
2019-10-25 15:59:59	-->	RayS (~raysl@sdf1.xen.prgmr.com) has joined ##rust
2019-10-25 16:00:08	jbg	just put #[cfg(test)] on it
2019-10-25 16:02:11	felix34	jbg: that did it, thanks!
2019-10-25 16:03:38	<--	Nahual (~Nahual@unaffiliated/nahual) has quit (Ping timeout: 245 seconds)
2019-10-25 16:09:41	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-25 16:16:37	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-10-25 16:19:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-25 16:25:15	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 16:26:54	-->	kolyad (~kolyad@196.245.151.213) has joined ##rust
2019-10-25 16:27:08	-->	NicTrib (~NicTrib@2600:380:5056:247e:1d64:e859:ccda:ee65) has joined ##rust
2019-10-25 16:27:29	<--	kolyad (~kolyad@196.245.151.213) has quit (Client Quit)
2019-10-25 16:30:04	<--	NicTrib (~NicTrib@2600:380:5056:247e:1d64:e859:ccda:ee65) has quit (Remote host closed the connection)
2019-10-25 16:32:37	esotericnonsense	are there any linters that can comprehensively cover the various 'possible gotchas' in rust code? for example, highlight expect, unwrap, highlight iterating a result or option, anything that's an "oops I ignored an error condition here by mistake"
2019-10-25 16:32:47	esotericnonsense	perhaps clippy or cargo check with some strict option set or something?
2019-10-25 16:33:01	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-25 16:33:11	esotericnonsense	or like #[disallow(esotericnonsense_was_lazy)] ?
2019-10-25 16:34:36	Moongoodgirl	unwrap() and especially expect() aren't antipatterns
2019-10-25 16:35:08	Moongoodgirl	a lint on implicitly iterating over Option or Result, though…I'd use that
2019-10-25 16:44:14	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-25 16:48:27	jbg	unwrap() is definitely considered an antipattern in some of our code
2019-10-25 16:48:58	-->	matthias_bgg (~mbgg@95.169.226.6) has joined ##rust
2019-10-25 16:49:01	jbg	not to the level of "this definitely indicates a problem", but we generally have a comment next to any use of unwrap() justifying it if it's not obvious
2019-10-25 16:50:25	jbg	we'd definitely appreciate some lint that pointed them out. esotericnonsense, i don't know of one
2019-10-25 16:51:32	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 268 seconds)
2019-10-25 16:52:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-25 16:53:20	<--	fuzen (~fuzen@fsf/member/Fuzen) has quit (Quit: ZNC - https://znc.in)
2019-10-25 16:53:57	-->	fuzen (fuzen@fsf/member/Fuzen) has joined ##rust
2019-10-25 16:54:23	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-10-25 16:57:22	-->	AbedB (~AbedBhuty@bzq-79-179-37-110.red.bezeqint.net) has joined ##rust
2019-10-25 16:58:25	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 17:00:20	<--	ellcs (~mantel@212.12.60.67) has quit (Remote host closed the connection)
2019-10-25 17:04:48	<--	baali (~baali@59.98.239.163) has quit (Quit: Leaving.)
2019-10-25 17:05:02	<--	Xatenev (~I@87.190.19.178) has quit (Quit: Leaving)
2019-10-25 17:05:48	<--	slomo (~slomo@unaffiliated/slomo) has quit (Read error: Connection reset by peer)
2019-10-25 17:06:06	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-10-25 17:07:57	<--	RayS (~raysl@sdf1.xen.prgmr.com) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-10-25 17:10:16	-->	RayS (~raysl@sdf1.xen.prgmr.com) has joined ##rust
2019-10-25 17:10:43	<--	ZoomZoomZoom (~Zoom@91.151.203.4) has quit (Quit: Leaving)
2019-10-25 17:12:15	<--	jenny-m (~jdm-@75.98.19.134) has quit (Quit: Leaving...)
2019-10-25 17:12:30	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-10-25 17:25:04	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-25 17:25:04	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-25 17:25:04	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-25 17:25:04	--	Channel ##rust: 568 nicks (2 ops, 0 voices, 566 normals)
2019-10-25 17:25:20	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-25 17:28:13	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-10-25 17:29:41	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-25 17:31:08	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 245 seconds)
2019-10-25 17:34:28	<--	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has quit (Quit: Ping timeout (120 seconds))
2019-10-25 17:34:57	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-25 17:35:40	-->	cmdaemon (cmdaemon@gateway/vpn/privateinternetaccess/cmdaemon) has joined ##rust
2019-10-25 17:36:56	-->	jenny-m (~jdm-@2620:101:80f2:224:a53e:9214:b931:a272) has joined ##rust
2019-10-25 17:37:39	-->	Deesl (~bsdboy@redhat/deesl) has joined ##rust
2019-10-25 17:45:38	<--	stalled (~stalled@unaffiliated/stalled) has quit (Ping timeout: 265 seconds)
2019-10-25 17:48:26	delYsid	Is there a macro somewhere that provides an impl for FromStr for an enum?
2019-10-25 17:48:54	-->	mszyszko (~mszyszko@185.244.214.211) has joined ##rust
2019-10-25 17:49:00	jbg	enum_utils has a derive for FromStr
2019-10-25 17:49:18	jbg	i think enum_derive also does
2019-10-25 17:51:37	<--	narispo (~narispo@37.171.34.46) has quit (Ping timeout: 240 seconds)
2019-10-25 17:52:21	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-25 17:54:30	-->	narispo (~narispo@2a01:e35:2fbc:8b90:843d:a277:747d:479e) has joined ##rust
2019-10-25 17:55:04	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-25 17:56:13	<--	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Leaving)
2019-10-28 09:59:47	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-28 09:59:47	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-28 09:59:47	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-28 09:59:47	--	Channel ##rust: 562 nicks (2 ops, 0 voices, 560 normals)
2019-10-28 10:00:03	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-28 10:11:32	<--	eythian (~quassel@fsf/member/eythian) has quit (Quit: No Ping reply in 180 seconds.)
2019-10-28 10:13:25	-->	eythian (~quassel@fsf/member/eythian) has joined ##rust
2019-10-28 10:19:23	-->	aLeSD (~aLeSD@host241-59-dynamic.171-212-r.retail.telecomitalia.it) has joined ##rust
2019-10-28 10:20:46	<--	slomo (~slomo@unaffiliated/slomo) has quit (Read error: Connection reset by peer)
2019-10-28 10:21:33	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-10-28 10:27:47	leaves	With Rust 2018, are there still situations where "extern crate" is useful? I've found I could replace all my uses of "extern crate" with simple "use", even for macro crates. But I still see a lot of people use "extern crate" ...
2019-10-28 10:28:09	leaves	(See https://doc.rust-lang.org/edition-guide/rust-2018/macros/macro-changes.html)
2019-10-28 10:28:10	j`ey	leaves: in new code?
2019-10-28 10:28:30	j`ey	maybe it's 2015 code that hasnt been converted yet, or they want to remain compatible with older compilers
2019-10-28 10:28:30	leaves	j`ey: I think so.
2019-10-28 10:28:59	leaves	right -- but I wonder if "extern crate" still can do something that "use" cannot?
2019-10-28 10:29:48	j`ey	I feel there may be... but, something about macros, but I cant remembeer exactly :(
2019-10-28 10:31:24	Yaniel	the fact that #[macro_use] still exists
2019-10-28 10:31:51	Yaniel	and some crates have inter-dependent macros so you must have them all in scope
2019-10-28 10:32:41	Yaniel	I think macros are now also namespaced, which #[macro_use] extern crate foo; bypasses
2019-10-28 10:32:41	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-28 10:39:08	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Read error: Connection reset by peer)
2019-10-28 10:39:21	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-28 10:40:31	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 10:40:35	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-28 10:44:17	ycjung	Hi all. I'm starting a new cargo app project. Is it a good practice to always add a separate library target besides the main app? I'm writing the code to prototype some algorithm and the main app will be a demo of it.
2019-10-28 10:44:20	faern	I quite often see newly updated crates still having `extern crate` in their documentation examples and README etc. I assume this is just because they did not update the docs yet.
2019-10-28 10:45:12	-->	kuznero (~kuznero@5.254.82.116) has joined ##rust
2019-10-28 10:46:35	kuznero	Hi All! I have probably a stupid question. At some point in my program I need to read from stdin of a current process and simulate user has typed something (by writing to stdout?): https://pastebin.com/0humg2BS Please help, as provided example can read from stdin only when user really types, but not when I write to stdout...
2019-10-28 10:47:16	<--	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Leaving)
2019-10-28 10:47:26	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-10-28 10:49:17	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-28 10:51:08	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Remote host closed the connection)
2019-10-28 10:51:21	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-28 10:53:23	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-28 10:53:38	<--	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has quit (Ping timeout: 245 seconds)
2019-10-28 10:56:27	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 264 seconds)
2019-10-28 10:56:29	--	__gotcha1 is now known as __gotcha
2019-10-28 10:57:08	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-28 10:57:49	Blub\0	kuznero: stdin/out/err are all separate file descriptors, they're not usually connected, there's no general way to "send something to stdin"
2019-10-28 10:58:20	Blub\0	kuznero: you'd have to change your code so that it doesn't use stdin directly, but something which knows when to read the simulated data and when to read the real data
2019-10-28 10:58:27	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 10:59:09	yrp	couldnt you just open and write to the stdin fd?
2019-10-28 10:59:55	kuznero	Hm, haven't tried that as it only implements Read trait if I remember right
2019-10-28 11:00:10	yrp	are you on linux?
2019-10-28 11:00:14	kuznero	Yes
2019-10-28 11:00:17	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-10-28 11:00:22	yrp	open /dev/fd/0
2019-10-28 11:00:47	yrp	or proc/self/fd/0
2019-10-28 11:00:57	yrp	that will give you a file descriptor that you can write to
2019-10-28 11:01:35	kuznero	Hm, slightly hackish?
2019-10-28 11:02:05	kuznero	But perhaps writing to linux fd of a current process might help
2019-10-28 11:02:19	yrp	more than slightly
2019-10-28 11:02:27	Kinnison	You can't guarantee to be able to open those
2019-10-28 11:02:37	Kinnison	e.g. if you're running under setuid/sudo from a terminal owned by another user
2019-10-28 11:03:10	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-28 11:03:29	Kinnison	Also writing to stdin won't cause that to become available to read
2019-10-28 11:03:45	Kinnison	writing to stdin is typically only used for (odd) terminal control sequences
2019-10-28 11:03:59	kuznero	Ah, that's not good. But generally there should be a way "write" instead of a user in the same process.
2019-10-28 11:05:55	yrp	do you want the data to be available on that fd, or do you want the it to appear to the user that theyve typed some text?
2019-10-28 11:06:35	 *	liiwi notes shared memory and pipes
2019-10-28 11:06:44	kuznero	It is a workaround, I need to read something that user typed, but then I will just ignore it.
2019-10-28 11:09:03	kuznero	How do I echo into /proc/NNN/fd/0 in bash?
2019-10-28 11:10:14	-->	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has joined ##rust
2019-10-28 11:10:50	kuznero	`echo > ./0`
2019-10-28 11:11:13	kuznero	But writing to `/dev/fd/0` didn't make it available for reading, as was already mentioned.
2019-10-28 11:11:17	kuznero	Interesting
2019-10-28 11:14:32	felix34	data_source2.rs, the JSON fields may be named differently for either
2019-10-28 11:14:46	felix34	Is there any way to separate the serde JSON deserialize_with information from the struct it's associated with? For example if I want to define a struct `NewData` in common.rs, but then fill it from data_source1.rs and data_source2.rs, the JSON fields may be named differently for either
2019-10-28 11:17:59	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 11:18:39	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-28 11:20:44	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Read error: Connection reset by peer)
2019-10-28 11:20:45	--	__gotcha1 is now known as __gotcha
2019-10-28 11:22:38	voker57	better use a wrapper struct
2019-10-28 11:23:00	felix34	voker57: what is a wrapper struct?
2019-10-28 11:23:24	voker57	struct DataSource1(NewData)
2019-10-28 11:23:35	voker57	then implement deserializing for it differently
2019-10-28 11:24:57	felix34	voker57: where can I read about wrapper structs in the documnetation?
2019-10-28 11:27:58	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-28 11:28:14	felix34	I've never heard of inheritance with structs
2019-10-28 11:28:49	voker57	there is no inheritance
2019-10-28 11:29:08	voker57	it's simply a new struct with one field
2019-10-28 11:30:00	felix34	voker57: if the new struct just has a field containing the main /common struct, how do I define the desierialize_with keywords for the common struct?
2019-10-28 11:30:43	felix34	a pastebin/playgroud would be very hel
2019-10-28 11:30:48	felix34	helpful
2019-10-28 11:30:51	voker57	you implement deserialize for both wrappers only
2019-10-28 11:31:03	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 268 seconds)
2019-10-28 11:31:51	voker57	https://gist.github.com/30ab37f042d2c6578e4fbcbcbcdc2e83
2019-10-28 11:32:13	voker57	instead of derive, to custom deserialize with fields you need, etc
2019-10-28 11:34:08	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 11:34:34	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Quit: leaving)
2019-10-28 11:36:01	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 11:36:35	felix34	voker57: ah, i sthis what you mean? https://gist.github.com/rust-play/1e357ef1d520ec36906c0d8117816a49
2019-10-28 11:39:48	voker57	unfortunately wrapper struct do not work like this
2019-10-28 11:40:30	voker57	https://serde.rs/remote-derive.html
2019-10-28 11:40:32	<--	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has quit (Ping timeout: 252 seconds)
2019-10-28 11:41:14	felix34	voker57: aha, perfect, thanks!
2019-10-28 11:44:10	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Quit: Lost terminal)
2019-10-28 11:48:30	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-28 11:50:00	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-28 11:51:58	la_mettrie	now i have unsafe sdl textures implemented but the compiler still wants struct's sdl_texture variable to have lifetime. wtf?
2019-10-28 11:52:23	<--	kuznero (~kuznero@5.254.82.116) has quit (Quit: Leaving)
2019-10-28 11:52:47	j`ey	cant help withot the code and/or the error
2019-10-28 11:53:28	la_mettrie	error https://pastebin.com/KwbisZ9r
2019-10-28 11:55:53	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 11:55:55	MechanicalError	hi
2019-10-28 11:56:49	j`ey	la_mettrie: and the Cargo.toml?
2019-10-28 11:56:50	<--	aLeSD (~aLeSD@host241-59-dynamic.171-212-r.retail.telecomitalia.it) has quit (Ping timeout: 240 seconds)
2019-10-28 11:58:10	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Client Quit)
2019-10-28 11:58:13	la_mettrie	j`ey: https://pastebin.com/cASBkyBi
2019-10-28 11:58:50	j`ey	la_mettrie: that's not enabling the sdl2 unsafe texture feature
2019-10-28 11:58:58	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 11:59:09	j`ey	you need to add it to the list on line 22
2019-10-28 12:00:38	la_mettrie	ok, thanks
2019-10-28 12:02:27	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Client Quit)
2019-10-28 12:03:08	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-28 12:11:05	-->	aLeSD (~aLeSD@host241-59-dynamic.171-212-r.retail.telecomitalia.it) has joined ##rust
2019-10-28 12:11:19	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 12:13:51	<--	virkony (~nikolay@2a02:678:50b:1100:523e:aaff:fe7c:6f48) has quit (Ping timeout: 264 seconds)
2019-10-28 12:14:36	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:14:43	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has left ##rust
2019-10-28 12:15:24	-->	virkony (~nikolay@2a02:678:54f:9700:523e:aaff:fe7c:6f48) has joined ##rust
2019-10-28 12:15:35	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-28 12:15:50	-->	mwa (~mwa@unaffiliated/mwa) has joined ##rust
2019-10-28 12:16:24	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:16:27	<--	aLeSD (~aLeSD@host241-59-dynamic.171-212-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2019-10-28 12:16:44	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Client Quit)
2019-10-28 12:17:03	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:17:25	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Client Quit)
2019-10-28 12:17:44	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:18:52	<--	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has quit (Ping timeout: 265 seconds)
2019-10-28 12:20:21	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Client Quit)
2019-10-28 12:21:28	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:22:56	<--	Philonous (~Philonous@unaffiliated/philonous) has quit (Quit: ZNC - http://znc.in)
2019-10-28 12:23:19	-->	Philonous (~Philonous@unaffiliated/philonous) has joined ##rust
2019-10-28 12:24:45	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 12:24:48	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 12:26:00	-->	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has joined ##rust
2019-10-28 12:28:02	<--	masonl (~masonl@194-193-202-239.tpgi.com.au) has quit (Ping timeout: 240 seconds)
2019-10-28 12:29:00	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 12:29:00	<--	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has quit (Remote host closed the connection)
2019-10-28 12:30:02	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 252 seconds)
2019-10-28 12:31:29	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 268 seconds)
2019-10-28 12:34:05	-->	threelights (~threeligh@129.170.194.175) has joined ##rust
2019-10-28 12:41:57	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-28 12:42:51	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-28 12:45:38	-->	noonien (uid162445@gateway/web/irccloud.com/x-hucnnvxofypcrvxs) has joined ##rust
2019-10-28 12:45:57	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 12:46:28	noonien	hello folks
2019-10-28 12:46:32	noonien	what's the state of async in rust?
2019-10-28 12:47:27	M-ou-se	noonien: https://areweasyncyet.rs/
2019-10-28 12:48:09	noonien	thank you!
2019-10-28 12:48:12	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-28 12:48:17	noonien	not much progress since last time i checked :(
2019-10-28 12:49:56	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-28 12:50:02	<--	learning1 (~pi@121.121.99.187) has quit (Ping timeout: 240 seconds)
2019-10-28 12:50:17	Kinnison	Progress has been steady and not really logged there
2019-10-28 12:50:32	Kinnison	Most of the core crates (tokio, hyper, etc) are ready for the release in a few weeks
2019-10-28 12:50:55	Kinnison	I expect we'll see the Rust release, and then within a few days, updates to a large proportion of the core crates
2019-10-28 12:51:03	noonien	i'm mostly interested in `async` functions
2019-10-28 12:51:04	Kinnison	With others coming in later as things settle
2019-10-28 12:51:12	noonien	last time i tried, there were a lot of problems with the borrow checker
2019-10-28 12:51:16	Kinnison	then they're coming in the next release (barring any major shockers)
2019-10-28 12:51:38	noonien	that was about ~6 months ago
2019-10-28 12:52:46	-->	learning1 (~pi@121.121.99.187) has joined ##rust
2019-10-28 13:08:29	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-28 13:08:33	--	nerdopoly4 is now known as nerdopoly
2019-10-28 13:16:55	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 13:19:52	-->	ytain (~ghfg@2607:f2c0:9448:800:487d:6947:11ce:abd3) has joined ##rust
2019-10-28 13:30:56	-->	voidwalker (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-28 13:30:58	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-28 13:31:18	--	voidwalker is now known as Guest57699
2019-10-28 13:31:45	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Read error: Connection reset by peer)
2019-10-28 13:34:32	<--	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has quit (Ping timeout: 276 seconds)
2019-10-28 13:34:47	elichai2	Is there a list somewhere of all of *rustc* lints?
2019-10-28 13:35:25	elichai2	https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html seems outdated
2019-10-28 13:35:37	elichai2	(ie bare trait objects are warnings, not allow)
2019-10-28 13:42:15	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-28 13:43:23	-->	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has joined ##rust
2019-10-28 13:44:29	<--	narispo (~narispo@2a01:e0a:2a2:1590:b455:1e2a:1315:40ad) has quit (Ping timeout: 246 seconds)
2019-10-28 13:45:17	-->	narispo (~narispo@37.173.137.137) has joined ##rust
2019-10-28 13:50:47	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 246 seconds)
2019-10-28 13:50:55	sfackler	rustc -Whelp will list them all
2019-10-28 13:51:03	<--	Oct (foobar@poulet.zoy.org) has quit (Ping timeout: 264 seconds)
2019-10-28 13:52:02	-->	b5509cd (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has joined ##rust
2019-10-28 13:54:11	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 13:55:50	-->	b5509cd65 (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has joined ##rust
2019-10-28 13:55:56	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 13:56:09	<--	b5509cd65 (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has quit (Remote host closed the connection)
2019-10-28 13:56:23	-->	b5509cd77 (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has joined ##rust
2019-10-28 13:56:26	<--	b5509cd (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has quit (Ping timeout: 240 seconds)
2019-10-28 13:56:51	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 13:57:10	--	b5509cd77 is now known as b5509cd
2019-10-28 13:59:27	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-28 14:03:44	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-28 14:04:09	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-28 14:05:53	<--	b5509cd (50f93895@gateway/web/cgi-irc/kiwiirc.com/ip.80.249.56.149) has quit (Remote host closed the connection)
2019-10-28 14:08:00	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 14:08:06	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 14:08:55	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-10-28 14:08:59	-->	lauromoura (~lauromour@2804:7f5:f380:33fa:d5d0:d1ab:aba6:f669) has joined ##rust
2019-10-28 14:09:14	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 240 seconds)
2019-10-28 14:11:13	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:6c3c:d745:995b:9b13) has joined ##rust
2019-10-28 14:13:51	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-28 14:21:22	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 14:23:53	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 14:28:01	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-28 14:34:14	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-28 14:34:55	<--	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has quit (Quit: WeeChat 2.6)
2019-10-28 14:37:08	-->	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has joined ##rust
2019-10-28 14:40:59	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-10-28 14:44:58	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-28 14:46:20	-->	rosterok (uid236576@gateway/web/irccloud.com/x-kzfzauvxflhfkelb) has joined ##rust
2019-10-28 14:47:11	-->	INSANU (~jhonnyvar@51.37.183.30) has joined ##rust
2019-10-28 14:47:58	INSANU	Lets say I have some_string: String. and then I write the statement, some_string.chars().collect();
2019-10-28 14:48:39	INSANU	I wonder why in the debugger shows to me this result as being alloc::vec::Vec<void>
2019-10-28 14:48:55	INSANU	shouldn't it be something like, alloc::vec::Vec<char> ?
2019-10-28 14:49:09	INSANU	I cant navigate in the values of the vector as well
2019-10-28 14:51:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-28 14:54:20	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 14:56:28	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-10-28 14:58:26	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 15:02:47	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-28 15:04:37	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 240 seconds)
2019-10-28 15:04:37	--	__gotcha1 is now known as __gotcha
2019-10-28 15:04:52	j`ey	INSANU: bad debug info I suppose..
2019-10-28 15:05:47	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-10-28 15:08:30	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-28 15:10:42	<--	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2019-10-28 15:11:55	-->	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has joined ##rust
2019-10-28 15:19:13	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Quit: Buh-Bye)
2019-10-28 15:20:21	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-28 15:21:08	<--	threelights (~threeligh@129.170.194.175) has quit (Ping timeout: 276 seconds)
2019-10-28 15:22:30	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-28 15:24:02	<--	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2019-10-28 15:24:57	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 265 seconds)
2019-10-28 15:36:04	<--	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2019-10-28 15:36:15	-->	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has joined ##rust
2019-10-28 15:37:07	-->	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has joined ##rust
2019-10-28 15:38:01	tempate	I'm trying to have something like https://gist.github.com/Tempate/f8055a763e0b24601e589630e671f079 but rust complains, "this parameter and the return type are declared with different lifetimes..."
2019-10-28 15:40:18	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-28 15:40:48	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-28 15:40:54	-->	lauromoura_ (~lauromour@177.132.100.142) has joined ##rust
2019-10-28 15:41:24	<--	lauromoura (~lauromour@2804:7f5:f380:33fa:d5d0:d1ab:aba6:f669) has quit (Ping timeout: 246 seconds)
2019-10-28 15:41:36	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-28 15:42:16	tempate	I would like best_nodes to be a vector of pointers to different nodes in children, and to return one of them
2019-10-28 15:45:17	j`ey	tempate: try .remove(pick)
2019-10-28 15:47:34	tempate	j`ey: https://bpaste.net/show/HZNM2
2019-10-28 15:48:37	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 15:49:11	j`ey	you might have to add a specific lifetime then: fn tree_policy<'a>(&'a self, children: &'a mut Vec<Node>, cp: f64) -> &'a mut Node
2019-10-28 15:49:37	j`ey	it's good if you can try to make a self contained example, kinda like here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=919b236cda18cc65c2f28118cc393912
2019-10-28 15:49:46	tempate	I'm pretty sure I tried that already but I'll try it again
2019-10-28 15:50:32	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-28 15:51:55	tempate	You are right about the self contained example. I'll do so the next time ;)
2019-10-28 15:52:18	tempate	Adding the lifetime did work but I'm not sure I understand why
2019-10-28 15:52:58	tempate	I've read the docs on lifetimes but I still don't fully grasp them
2019-10-28 15:54:48	j`ey	yes, in this case I dont fully understand it either :|
2019-10-28 16:00:28	jebrosen	tempate: This is one of the elision rules - when you don't specify the output lifetime, it's assumed to be the lifetime of &self if it's there
2019-10-28 16:02:23	tempate	I guess my problem is that I got the impression that lifetimes were implicit. I didn't know that returning a value with a lifetime made it last longer.
2019-10-28 16:05:30	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-10-28 16:08:01	jebrosen	I feel like this code has another problem you might not have run into yet because of other errors
2019-10-28 16:08:27	jebrosen	Oh no, it is right
2019-10-28 16:09:14	j`ey	tempate: that is correct, it doesnt actually change the behaviour
2019-10-28 16:09:24	jebrosen	tempate: Returning the value doesn't "make" it live longer, it just requires it to live as long as it promises
2019-10-28 16:10:17	tempate	jebrosen: how long has it promised to live for?
2019-10-28 16:10:24	jebrosen	Without specifying a lifetime, the function promises it returns an &mut Node that can be accessed as long as 'self' is valid
2019-10-28 16:11:10	tempate	jebrosen: why do I have to specify the lifetime then?
2019-10-28 16:11:44	jebrosen	Normally if you have two input references/lifetimes and an output, you have to say which one it comes from. If you have an &self, it defaults to the output "coming from" &self instead
2019-10-28 16:11:51	j`ey	ah
2019-10-28 16:11:58	j`ey	I thought they were all tied together
2019-10-28 16:12:01	jebrosen	But in your case that's wrong, because you are returning data from children, not self
2019-10-28 16:12:58	tempate	oh, I see
2019-10-28 16:13:07	tempate	interesting, thank you very much
2019-10-28 16:13:29	jebrosen	tempate: The compiler is smart enough to figure out the right lifetimes by reading the code, but IIRC it's intentional that humans should be able to read only the function signature and know which lifetimes are related
2019-10-28 16:13:49	<--	Lorkki (lorkki@lorkki.net) has quit (Quit: The Lounge - https://thelounge.chat)
2019-10-28 16:14:32	tempate	So the rust compiler is dumbing it down for us, not sure how I feel about that
2019-10-28 16:14:42	jebrosen	https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision
2019-10-28 16:14:51	j`ey	yes elision is good and bad
2019-10-28 16:16:44	-->	Lorkki (lorkki@lorkki.net) has joined ##rust
2019-10-28 16:17:41	<--	mizu_no_oto (~textual@2604:6000:1012:40ee:6c3c:d745:995b:9b13) has quit (Ping timeout: 250 seconds)
2019-10-28 16:18:06	-->	baali (~baali@59.98.239.241) has joined ##rust
2019-10-28 16:20:55	-->	cdown (~cdown@89.32.122.5) has joined ##rust
2019-10-28 16:22:07	esotericnonsense	are there any builder macros that I can customise such that options are treated as, well, optional (e.g. setters created) but non-options are treated as being necessary for the new() function (e.g. this type has no Default)?
2019-10-28 16:22:15	esotericnonsense	or is it time to learn how to macro? :D
2019-10-28 16:27:46	--	irc: disconnected from server
2019-10-28 16:35:52	-->	Syrinxos (~syrinxos@93-34-1-82.ip47.fastwebnet.it) has joined ##rust
2019-10-28 16:35:52	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-28 16:35:52	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-28 16:35:52	--	Channel ##rust: 577 nicks (2 ops, 0 voices, 575 normals)
2019-10-28 16:36:09	esotericnonsense	faern: I suppose I was thinking of having no builder struct and just build directly on the type, though it wouldn't be immutable after building has 'completed' I guess
2019-10-28 16:36:12	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-28 16:37:22	faern	I usually go for a builder struct when the possible ways to construct something either requires many constructors, or a bunch of Option<> arguments.
2019-10-28 16:38:36	faern	But where to place the mandatory fields depends a lot on the use case. For OpenOptions it makes sense because you can configure it and then open many files with the same options.
2019-10-28 16:39:43	faern	Whereas for std::process::Command it usually would *not* make any sense to configure it with arguments and environment and then spawn many different binaries :') So there it makes sense to specify binary in the builder constructor.
2019-10-28 16:39:54	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-28 16:40:25	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 16:43:41	<--	ytain (~ghfg@2607:f2c0:9448:800:487d:6947:11ce:abd3) has quit (Quit: ...)
2019-10-28 16:46:32	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-28 16:47:09	-->	neceve (~quassel@unaffiliated/neceve) has joined ##rust
2019-10-28 16:51:10	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 16:53:06	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-28 16:53:25	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-28 16:55:13	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-28 16:58:50	<--	narispo (~narispo@37.173.137.137) has quit (Ping timeout: 240 seconds)
2019-10-28 17:01:03	-->	narispo (~narispo@37.167.240.72) has joined ##rust
2019-10-28 17:03:33	<--	leaves (~leaves@unaffiliated/leaves) has quit (Ping timeout: 265 seconds)
2019-10-28 17:03:47	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-10-28 17:04:51	madprops	should i use process::Command to open an application?
2019-10-28 17:04:58	madprops	should I just append a & to the end ?
2019-10-28 17:05:11	madprops	or, what's the best way to open an application
2019-10-28 17:05:53	<--	aljama (~quassel@unaffiliated/aljama) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2019-10-28 17:06:13	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 250 seconds)
2019-10-28 17:06:21	--	cdown_ is now known as cdown
2019-10-28 17:10:56	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Remote host closed the connection)
2019-10-28 17:11:20	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 246 seconds)
2019-10-28 17:11:30	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-28 17:12:02	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-28 17:14:58	-->	aljama (~quassel@unaffiliated/aljama) has joined ##rust
2019-10-28 17:15:46	<--	narispo (~narispo@37.167.240.72) has quit (Ping timeout: 268 seconds)
2019-10-28 17:16:27	-->	narispo (~narispo@37.164.154.98) has joined ##rust
2019-10-28 17:17:12	-->	threelights (~threeligh@129.170.194.178) has joined ##rust
2019-10-28 17:18:35	ZirconiumX	madprops: bash /s
2019-10-28 17:20:28	madprops	i was suggested to use an async lib
2019-10-28 17:20:33	ZirconiumX	Being serious though, I've struggled to do asynchronous process interaction very well, so often I just spawn a bash script
2019-10-28 17:20:37	madprops	idk if i should use tokyo, or other
2019-10-28 17:20:47	ZirconiumX	tokio is not tokyo
2019-10-28 17:20:48	Yaniel	what do you want to achieve
2019-10-28 17:21:00	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-28 17:21:27	madprops	i've actually been using "sh someCommand" with process::Command and it works, but now I want for instance, launch an application that only exits when closed. I don't want to block the main program that launches it of course
2019-10-28 17:21:47	ZirconiumX	Honestly, if you don't need to interact with the application, either block your main thread or spawn a subthread that blocks
2019-10-28 17:22:25	ZirconiumX	Or try using an asynchronous library if you really want.
2019-10-28 17:22:37	<--	neceve (~quassel@unaffiliated/neceve) has quit (Ping timeout: 240 seconds)
2019-10-28 17:23:10	Yaniel	Command looks like what you should be using yes
2019-10-28 17:23:27	Yaniel	there should not be any need for any shell nonsense though
2019-10-28 17:24:27	Yaniel	and as long as you don't collect the child's output or explicitly wait for it it does not seem like Command should be blocking anything
2019-10-28 17:26:21	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-10-28 17:28:00	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-10-28 17:28:51	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 252 seconds)
2019-10-28 17:31:26	-->	neceve (~quassel@unaffiliated/neceve) has joined ##rust
2019-10-28 17:35:35	-->	mxco86_ (~mxco86@cpc151821-shef17-2-0-cust76.17-1.cable.virginm.net) has joined ##rust
2019-10-28 17:36:34	madprops	Yaniel: if I run it like: Command::new("sh").arg("-c").arg(cmd)
2019-10-28 17:36:38	madprops	it does block
2019-10-28 17:36:44	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 268 seconds)
2019-10-28 17:37:08	madprops	maybe i should just spawn a thread
2019-10-28 17:37:29	johnw_	Is there a crate for Linux and macOS that can determine the heap and stack currently in use by another process?
2019-10-28 17:37:33	Yaniel	are you calling .spawn() on it
2019-10-28 17:37:49	madprops	nope, status()
2019-10-28 17:38:02	ZirconiumX	That's why it blocks
2019-10-28 17:38:18	Yaniel	that's what the status() docs say :P
2019-10-28 17:38:19	ZirconiumX	"Executes a command as a child process, waiting for it to finish and collecting its exit status."
2019-10-28 17:38:22	madprops	you're right, it works now, thanks
2019-10-28 17:38:36	--	johnw_ is now known as johnw
2019-10-28 17:43:39	<--	mxco86_ (~mxco86@cpc151821-shef17-2-0-cust76.17-1.cable.virginm.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-29 09:21:40	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-29 09:21:40	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-29 09:21:40	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-29 09:21:40	--	Channel ##rust: 568 nicks (2 ops, 0 voices, 566 normals)
2019-10-29 09:21:55	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-29 09:23:51	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-29 09:26:58	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 09:28:51	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 09:31:51	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 264 seconds)
2019-10-29 09:33:03	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-29 09:33:26	<--	_xor (~xor@74.215.46.133) has quit (Remote host closed the connection)
2019-10-29 09:39:38	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-10-29 09:40:42	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 09:45:21	-->	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has joined ##rust
2019-10-29 09:50:27	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 09:53:38	<--	libertyprime (~libertypr@client-173-172.guest.otago.ac.nz) has quit (Ping timeout: 245 seconds)
2019-10-29 09:56:09	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-10-29 09:56:19	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-29 09:58:45	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 09:59:23	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 10:06:26	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-29 10:10:51	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-10-29 10:11:29	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-10-29 10:18:18	<--	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has quit (Ping timeout: 252 seconds)
2019-10-29 10:30:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-29 10:39:35	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 10:40:51	<--	baali (~baali@59.98.239.241) has quit (Ping timeout: 264 seconds)
2019-10-29 10:47:45	-->	gierdo (~Dominik_G@195.145.2.250) has joined ##rust
2019-10-29 10:55:41	-->	baali (~baali@59.98.234.229) has joined ##rust
2019-10-29 10:55:42	-->	libertyprime (~libertypr@118.149.232.223) has joined ##rust
2019-10-29 10:57:02	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-29 11:01:59	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-29 11:03:46	-->	frostschutz (~frostschu@55d4dacd.access.ecotel.net) has joined ##rust
2019-10-29 11:08:53	-->	AbedB_ (~AbedBhuty@173.239.197.142) has joined ##rust
2019-10-29 11:12:26	<--	AbedB (~AbedBhuty@bzq-79-181-50-11.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-10-29 11:17:21	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 11:24:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-10-29 11:28:50	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-29 11:33:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 11:37:14	-->	m0rphism (~m0rphism@HSI-KBW-082-212-034-016.hsi.kabelbw.de) has joined ##rust
2019-10-29 11:37:24	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 11:38:00	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 11:40:42	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-29 11:41:13	<--	lompik (~lompik@unaffiliated/lompik) has quit (Read error: Connection reset by peer)
2019-10-29 11:43:06	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-10-29 11:45:18	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 245 seconds)
2019-10-29 11:46:31	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 11:47:21	-->	luis (~luis@kerno.org) has joined ##rust
2019-10-29 11:50:18	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 245 seconds)
2019-10-29 11:55:46	<--	libertyprime (~libertypr@118.149.232.223) has quit (Quit: leaving)
2019-10-29 11:56:43	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-29 12:10:03	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-10-29 12:11:19	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-10-29 12:11:53	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-10-29 12:12:33	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-29 12:15:20	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-29 12:15:22	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 268 seconds)
2019-10-29 12:15:26	-->	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has joined ##rust
2019-10-29 12:17:35	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-10-29 12:18:21	-->	Juzzika (~Juzzika@189.84-78-194.adsl-static.isp.belgacom.be) has joined ##rust
2019-10-29 12:19:40	-->	cdown (~cdown@199.201.66.44) has joined ##rust
2019-10-29 12:21:50	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-29 12:23:59	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 12:24:44	<--	gierdo (~Dominik_G@195.145.2.250) has quit (Remote host closed the connection)
2019-10-29 12:29:15	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 12:36:59	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-10-29 12:40:02	<--	cdown (~cdown@199.201.66.44) has quit (Ping timeout: 268 seconds)
2019-10-29 12:40:07	--	cdown_ is now known as cdown
2019-10-29 12:48:12	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-29 12:48:28	<--	Juzzika (~Juzzika@189.84-78-194.adsl-static.isp.belgacom.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-29 12:48:41	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 265 seconds)
2019-10-29 12:48:47	<--	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has quit (Ping timeout: 276 seconds)
2019-10-29 12:52:25	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-29 12:53:33	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 12:54:06	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 12:54:25	<--	drewr (~drew@elastic/staff/drewr) has quit (Ping timeout: 250 seconds)
2019-10-29 13:06:06	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-29 13:06:12	<--	efm (~efm@vpn.tummy.com) has quit (Excess Flood)
2019-10-29 13:06:57	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-29 13:09:07	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-10-29 13:15:19	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 13:15:34	-->	ytain (~ghfg@2607:f2c0:9278:f800:443a:5d9a:1753:afae) has joined ##rust
2019-10-29 13:19:45	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-29 13:25:11	-->	t7 (~tommo@2a00:23c5:1284:fc00:d890:f2d4:6fb0:6876) has joined ##rust
2019-10-29 13:25:43	-->	bronsen (housetier@pdpc/supporter/professional/housetier) has joined ##rust
2019-10-29 13:27:49	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-10-29 13:28:12	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-10-29 13:34:14	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-29 13:36:21	tempate	I have a function that returns an array which I would like to run at compile time. I've written my array generation code in build.rs but I'm unsure on how to use the generated array in, say, src/main.rs
2019-10-29 13:36:44	j`ey	have you written the array out to a file?
2019-10-29 13:36:53	tempate	I have not
2019-10-29 13:37:49	j`ey	that's what you want to do
2019-10-29 13:38:07	tempate	j`ey: do you mean something like this: https://doc.rust-lang.org/cargo/reference/build-scripts.html#case-study-code-generation ?
2019-10-29 13:38:12	bronsen	I am reading http://adventures.michaelfbryan.com/posts/how-not-to-riir/ ; the article says "...add the cc crate as a build dependency..." and show a command "cargo add --build cc". However, my version of cargo (1.38.0) does not have this subcommand. how do I install this subcommand thing?
2019-10-29 13:38:46	j`ey	bronsen: I think that is a crate called cargo-edit
2019-10-29 13:38:53	j`ey	tempate: yeah
2019-10-29 13:39:18	tempate	j`ey: writing to the file like that seems incredibly ugly. Isn't there a better way of doing it?
2019-10-29 13:39:44	j`ey	tempate: no
2019-10-29 13:40:01	tempate	I have to have my function as a string?
2019-10-29 13:40:39	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-29 13:40:51	j`ey	I think there were some crates to help with it
2019-10-29 13:41:30	tempate	I was looking at https://crates.io/crates/build-helper before
2019-10-29 13:41:56	j`ey	that's 2 years old
2019-10-29 13:42:40	tempate	Does that mean I shouldn't
2019-10-29 13:42:44	tempate	use it?
2019-10-29 13:42:45	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 13:43:09	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 13:43:24	tempate	In C two years old would be surprisingly new :P
2019-10-29 13:43:57	j`ey	just pointing it out :P
2019-10-29 13:44:59	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-29 13:46:29	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 13:52:02	-->	eremitah_ (~int@unaffiliated/eremitah) has joined ##rust
2019-10-29 13:52:41	-->	forgottenone (~forgotten@176.88.102.114) has joined ##rust
2019-10-29 13:53:57	faern	tempate: If the construction of the array only uses things allowed in a const fn you can compute it at build time directly in main.rs. Otherwise you have to wait for better const support :)
2019-10-29 13:54:12	<--	eremitah (~int@unaffiliated/eremitah) has quit (Ping timeout: 246 seconds)
2019-10-29 13:54:13	--	eremitah_ is now known as eremitah
2019-10-29 13:54:27	tempate	faern: I'm aware, but unluckily it doesn't
2019-10-29 13:55:06	faern	tempate: Two years old for a language that became 1.0 4 years ago is a long time, yes. It's kind of like C code written in the 90s ;)
2019-10-29 13:55:19	tempate	I'm very displeased at having to have my function inside a string anyway, and the packages I'm looking at don't have any examples for me to follow.
2019-10-29 13:55:39	tempate	faern: heh, yeah, I figured
2019-10-29 13:56:43	j`ey	tempate: phf_codegen has some stuff
2019-10-29 13:56:48	j`ey	tempate: what does the array contain?
2019-10-29 13:57:22	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-29 13:57:24	tempate	j`ey: https://bpaste.net/show/BR7EO
2019-10-29 13:58:27	j`ey	you should be able to do it quite easily
2019-10-29 13:58:51	j`ey	println!("NAME_OF_ARRAY: [usize; N_COMBS] = {};", gen_winning_combs());
2019-10-29 13:59:00	bronsen	j`ey: thank you, installing cargo-edit did solve my problem :)
2019-10-29 13:59:13	j`ey	(that probably has to be {:?}, but close)
2019-10-29 13:59:15	j`ey	bronsen: cool
2019-10-29 13:59:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-29 13:59:42	tempate	Hmm, alright, let me try
2019-10-29 14:00:25	faern	tempate: Why don't you use lazy_static and have it computed once on first access?
2019-10-29 14:01:23	tempate	faern: I honestly don't know. I'm very novice to rust and, talking it through with someone here the other day, we got to the conclusion that having it this way was a good idea.
2019-10-29 14:01:38	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-29 14:01:57	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 240 seconds)
2019-10-29 14:04:31	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-29 14:08:40	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 14:10:15	<--	forgottenone (~forgotten@176.88.102.114) has quit (Quit: Konversation terminated!)
2019-10-29 14:11:10	tempate	faern: do you think that'd be better?
2019-10-29 14:12:26	tempate	j`ey: I got it working, thanks
2019-10-29 14:15:13	-->	kuznero (~kuznero@91.109.28.145) has joined ##rust
2019-10-29 14:17:48	kuznero	Hi All! After I moved my terminal into raw mode and out (with termion through tui crate), I am spawning a new process with Command::new().args(...).spawn()?.wait_with_output()?; What's interesting is that the process I start (e.g. `emacs -nw`) get some kind of terminal control sequence in its stdin (which is then getting displayed as if user edited a file). It is highly annoying. Please help!
2019-10-29 14:18:59	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-10-29 14:21:40	j`ey	tempate: lazy static is simpler i suppose
2019-10-29 14:22:59	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Quit: Buh-Bye)
2019-10-29 14:30:11	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 276 seconds)
2019-10-29 14:30:38	kuznero	I'm sure it's a bit weird, but I'm still hopeful that I'm not the only one seeing this strange thing...
2019-10-29 14:33:11	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 14:35:39	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-29 14:36:16	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Client Quit)
2019-10-29 14:36:52	faern	tempate: I would have used lazy_static if the other solution is kind of convoluted or a hack. lazy static will have the computation cost at runtime, but only once. So if you can live with that it's way easier.
2019-10-29 14:37:12	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 14:37:20	j`ey	once_cell is apparently an interesting alteernative to lazy_static now
2019-10-29 14:43:53	<--	stzsch (~no@2804:14d:4cd1:823f:5604:a6ff:fe8e:d858) has quit (Ping timeout: 246 seconds)
2019-10-29 14:45:20	-->	stzsch (~no@2804:14d:4cd1:823f:5604:a6ff:fe8e:d858) has joined ##rust
2019-10-29 14:45:36	-->	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has joined ##rust
2019-10-29 14:50:26	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-29 14:54:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-29 14:58:03	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Quit: Buh-Bye)
2019-10-29 14:59:11	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 14:59:29	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Read error: Connection reset by peer)
2019-10-29 14:59:29	--	__gotcha1 is now known as __gotcha
2019-10-29 15:00:14	-->	learningc (~pi@121.122.92.70) has joined ##rust
2019-10-29 15:02:17	<--	learning1 (~pi@121.121.99.187) has quit (Ping timeout: 240 seconds)
2019-10-29 15:02:52	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 15:04:26	<--	baali (~baali@59.98.234.229) has quit (Quit: Leaving.)
2019-10-29 15:05:44	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 15:06:49	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Client Quit)
2019-10-29 15:07:32	-->	toure (toure@nat/redhat/x-wuiduqvgxxtqmrds) has joined ##rust
2019-10-29 15:08:46	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 15:12:18	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-29 15:16:54	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-29 15:18:38	<--	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has quit (Ping timeout: 245 seconds)
2019-10-29 15:19:29	-->	grabarz (~user@ip5f5bf62d.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-29 15:20:37	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Quit: Buh-Bye)
2019-10-29 15:20:46	<--	grabarz (~user@ip5f5bf62d.dynamic.kabel-deutschland.de) has left ##rust
2019-10-29 15:20:50	-->	grabarz (~user@ip5f5bf62d.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-29 15:21:34	<--	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has quit (Quit: quit.)
2019-10-29 15:22:39	noonien	hello folks!
2019-10-29 15:22:45	noonien	i'm rather new to rust
2019-10-29 15:23:05	Yaniel	hi
2019-10-29 15:23:12	noonien	is it possible to pass a Read + Write trait as a function argument?
2019-10-29 15:23:30	noonien	it's actually a TCPStream, but i would like to abstract that away
2019-10-29 15:23:53	Yaniel	you can make the function generic
2019-10-29 15:24:10	Yaniel	and declare that the only limit on types it can be instantiated for is that they have to be both Read and Write
2019-10-29 15:24:19	-->	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has joined ##rust
2019-10-29 15:24:45	sfackler	fn foo<S>(stream: S) where S: Read + Write { ... }
2019-10-29 15:25:27	noonien	oh, awesome! Thanks!
2019-10-29 15:27:16	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 15:30:20	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Client Quit)
2019-10-29 15:33:47	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-10-29 15:34:00	kuznero	There are none, piped and inherit in Stdio in rust. Is there any way to spawn a process that is not a child of a current process somehow?
2019-10-29 15:34:19	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 15:34:47	noonien	that doesn't sound like something that has to do with rust. that's just how most operating systems work
2019-10-29 15:34:47	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 15:35:48	kuznero	But in linux when I Command::new().spawn() a new child process is created that by default inherits stdin/stdout from its parent.
2019-10-29 15:36:47	sfackler	that's correct
2019-10-29 15:36:50	<--	bthesorceror (~brandon@190.125.24.136.in-addr.arpa) has quit (Ping timeout: 240 seconds)
2019-10-29 15:38:52	kuznero	That might be perhaps a syscall or something low level like that?
2019-10-29 15:39:11	sfackler	what is the behavior you want
2019-10-29 15:40:27	kuznero	I need an independent stdin/stdout as I have a problem of contaminated stdin that I cannot solve a normal way
2019-10-29 15:41:11	sfackler	what are those independent stdin/stdouts going to be connected to?
2019-10-29 15:41:20	sfackler	 /dev/null? A file? a pipe?
2019-10-29 15:41:51	kuznero	Terminal's stdin/stdout
2019-10-29 15:42:21	sfackler	but that's connected to the parent process
2019-10-29 15:42:29	sfackler	as well, how can it be independent at the same time?
2019-10-29 15:42:48	Yaniel	if anything, that would contaminate it even worse
2019-10-29 15:43:33	kuznero	Independent from the current process but not from its parent. Like start cli in terminal (so, terminal is parent for cli). Cli then start another cli-2 (cli is parent for cli-2). What I want is to make a parent of cli (terminal) also a parent for cli-2.
2019-10-29 15:43:43	noonien	kuznero: usually, you do a fork(), replace what you need, and then execve
2019-10-29 15:44:31	sfackler	how would the behavior of that differ from spawning the process normally?
2019-10-29 15:44:33	kuznero	noonien, fork in bash? Not sure I follow... I start Command::new().args().spawn()... no fork
2019-10-29 15:44:39	kuznero	I can perhaps try to explain the real issue I have (as a result trying to find a workaround). Here is the link to how I init raw terminal with tui/termion: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/shell.rs#L19
2019-10-29 15:44:39	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 15:45:18	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 15:45:18	noonien	sorry, i'm new to rust. fork is a syscall, which is usually exposed on most stdlibs. most stdlibs also have a way to launch a process with pipes to it, which basically does the same thing as i described above.
2019-10-29 15:45:37	kuznero	Once it is initialized I can draw some nice TUI in terminal and then as part of one of the actions there I need to start default editor. So, I drop term (effectively reverting raw mode into previous stat)
2019-10-29 15:45:40	sfackler	Command::spawn calls for + exec
2019-10-29 15:46:11	sfackler	*fork
2019-10-29 15:46:16	kuznero	and the I call Command::new("vim").Args("somefile").spawn()?.wait...
2019-10-29 15:46:24	Yaniel	kuznero: that sounds exactly like you want to hand over your stdio to the new process
2019-10-29 15:46:30	noonien	it's really not clear what you are trying to achieve, you are tring to communicate with with the parent process, but not communicate with it?
2019-10-29 15:46:47	noonien	perhaps you just want some pipes to the new process,  maybe that's what "piped" is for?
2019-10-29 15:47:03	kuznero	Problem is that when I start editor (e.g. emacs -nw) stdin get some extra stuff in it: '[>84;0;0c' (in alacritty with tmux) or '[>61;337;0c' in terminology
2019-10-29 15:47:05	noonien	then you can communicate with your new process' stdin/stdout/stderr via the pipes
2019-10-29 15:47:22	noonien	yes, because the stdout is no longer a terminal
2019-10-29 15:47:35	<--	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has quit (Ping timeout: 246 seconds)
2019-10-29 15:47:45	kuznero	No, piped is not going to work. Let's part the idea with working around the parent.
2019-10-29 15:48:08	noonien	you cannot "reparent" a child, if that's what you're trying to achieve
2019-10-29 15:48:16	kuznero	Here is how I start the editor: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/editor.rs#L26
2019-10-29 15:48:28	noonien	not that reparenting has anything to do with this. you just seem to need to have the right files in the right process
2019-10-29 15:48:37	Yaniel	are you trying to have the parent be some sort of overlay that can intercept certain input or inject stuff?
2019-10-29 15:48:47	kuznero	nope
2019-10-29 15:48:50	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-29 15:49:01	Yaniel	or have the child process completely take over all IO
2019-10-29 15:49:10	kuznero	I just need to start editor and let user edit it without interruptions as if he/she just started it from terminal
2019-10-29 15:49:26	noonien	do you still need to keep the parent running?
2019-10-29 15:49:46	kuznero	Here is the note that I try to address: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/shell.rs#L44
2019-10-29 15:50:37	kuznero	noonien, yes, but let's not focus on reparenting for now. I am trying to explain the issue I was trying to solve first. Reparenting is just a theory that I though might help (but that is a long shot)
2019-10-29 15:51:08	Yaniel	so you want the child to completely take over everything?
2019-10-29 15:51:11	noonien	you cannot reparent a process, you can replace a process
2019-10-29 15:51:12	<--	AbedB_ (~AbedBhuty@173.239.197.142) has quit (Ping timeout: 268 seconds)
2019-10-29 15:51:12	<--	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-10-29 15:51:20	Yaniel	and do you want to return to the parent when the child exits?
2019-10-29 15:51:33	noonien	but it sounds like the "parent process" is actually a shell, so when the child exits, you still want the shell to be alive, no?
2019-10-29 15:51:34	kuznero	Yaniel, yes, thus I used inherited stdin/out.
2019-10-29 15:52:04	noonien	and using inherit causes those issues still?
2019-10-29 15:52:53	kuznero	It is not inherited that causes the issue. It is specifically the combination of enter/exiting the raw mode for terminal and then starting the child process
2019-10-29 15:53:15	<--	chromis (sid150893@gateway/web/irccloud.com/x-shswytedwenjrqnr) has left ##rust
2019-10-29 15:53:23	noonien	well, there you go
2019-10-29 15:53:28	kuznero	So, here I start/stop raw mode: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/shell.rs#L17-42
2019-10-29 15:53:48	-->	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has joined ##rust
2019-10-29 15:53:53	kuznero	And here I start editor: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/shell.rs#L44-65
2019-10-29 15:54:10	kuznero	But raw mode is being reverting on drop(term)
2019-10-29 15:54:46	noonien	have you looked at the sourcode for `Command`?
2019-10-29 15:54:54	noonien	perhaps it does some things you aren't expecting
2019-10-29 15:55:27	kuznero	A bit, I suspect though that it is the raw mode leftovers that send some control sequence like \033 in terminal
2019-10-29 15:55:48	jebrosen	Does tui also opt in to additional input modes, like mouse events, that you're not disabling?
2019-10-29 15:56:14	kuznero	jebrosen, that might be the case, never looked into disable other things
2019-10-29 15:57:05	kuznero	Though, I'm not sure if that is possible
2019-10-29 15:57:54	kuznero	It is termion crate that tui is using as one of backends that I use
2019-10-29 15:58:34	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 15:58:50	Flonk	Can I define a custom cast, like `4. as MyType`? Or is that a no-no
2019-10-29 15:59:02	kuznero	Ah, no, I am using Keys input only: https://gitlab.com/productivity-box/my-journal/blob/master/src/core/shell.rs#L17
2019-10-29 15:59:07	j`ey	Flonk: not with as, but you can use Into or From
2019-10-29 15:59:56	Flonk	j`ey, ah yeah `From` popped up on google.
2019-10-29 15:59:59	Flonk	Fair enough, thanks :)
2019-10-29 16:00:57	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (Quit: Bye.)
2019-10-29 16:01:18	-->	polyzen (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-10-29 16:03:16	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (Ping timeout: 240 seconds)
2019-10-29 16:03:41	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 246 seconds)
2019-10-29 16:05:29	kuznero	And in general if anyone will have time and enough passion to review the code and give some recommendations that would be great: https://gitlab.com/productivity-box/my-journal (mj is the name of the crate)
2019-10-29 16:05:30	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-29 16:06:04	jebrosen	kuznero: Oh, is that actually input into the editor as text or just visible on the screen
2019-10-29 16:06:30	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-10-29 16:06:31	kuznero	It is an input in editor, otherwise, it would not have been sooo annoying
2019-10-29 16:07:16	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Max SendQ exceeded)
2019-10-29 16:07:49	jebrosen	Terminology doesn't seem to use that escape sequence, so I'm not even sure where that's coming from
2019-10-29 16:07:52	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-29 16:08:02	jebrosen	What about vim?
2019-10-29 16:09:29	kuznero	jebrosen, terminology shows another sequence instead.
2019-10-29 16:10:27	kuznero	With vim it is simpler in a sense (and went unnoticed for some time) because of normal mode by default. A couple of extre key presses put file editing into the right mode without file being modified. But with `emacs -nw` it becomes apparent very fast.
2019-10-29 16:11:07	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-29 16:11:10	-->	AbedB (~AbedBhuty@bzq-109-67-41-209.red.bezeqint.net) has joined ##rust
2019-10-29 16:12:30	Xatenev	kuznero, you have singular 'idea' everywhere except here To list registered ideas just type in the following:
2019-10-29 16:12:32	Xatenev	prob typo
2019-10-29 16:12:35	jebrosen	'[>61;337;0c' in terminology < is that not the one that shows in terminology
2019-10-29 16:12:55	kuznero	jebrosen, yes, that is the one
2019-10-29 16:13:18	jebrosen	What sequence does it show "instead"?
2019-10-29 16:16:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-29 16:16:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-29 16:16:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-29 16:16:18	--	Channel ##rust: 579 nicks (2 ops, 0 voices, 577 normals)
2019-10-29 16:16:32	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-29 16:17:31	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-29 16:21:40	jebrosen	Hm, I'm not bored enough to follow undocumented escape sequences across the whole internet. But I still suspect that something to do with the terminal mode isn't being reset properly
2019-10-29 16:22:48	kuznero	jebrosen, that was my original line of thinking as well. Basically, now I will try to record attributes before terminal hit raw mode and got back and try to see what is missing. Maybe recovering from raw mode does not go well.
2019-10-29 16:24:16	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-10-29 16:27:25	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-10-29 16:27:51	<--	natechan (~natechan@2600:1702:a20:5610:9c91:cbe5:8dcc:a334) has quit (Ping timeout: 246 seconds)
2019-10-29 16:30:59	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-10-29 16:31:32	-->	electricityZZZZ (~rustisafu@108-216-157-17.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-10-29 16:33:06	electricityZZZZ	so i was looking at geekbench and it looks like the apple A13 cpu is as fast (or faster) than an intel i5 from a recent macbook pro,... since you guys understand computers much better than i do, is geekbench missing something? note that it includes clang as a benchmark, which as i understand should be a fairly difficult benchmark
2019-10-29 16:33:42	electricityZZZZ	oh and the A13 is about 10x lower power,... i am thinking about transitioning my development work to an ipad but i'd really like to be able to run rustc, cargo, etc on the ipad...
2019-10-29 16:34:00	avu	electricityZZZZ: it's "just" single core performance, right?
2019-10-29 16:34:06	<--	frostschutz (~frostschu@55d4dacd.access.ecotel.net) has quit (Quit: Leaving)
2019-10-29 16:34:31	-->	alex-helfet (~alex@cpc68330-cdif16-2-0-cust38.5-1.cable.virginm.net) has joined ##rust
2019-10-29 16:34:39	electricityZZZZ	i could argue that multicore perf is the same too if you rescale based on the number of cores
2019-10-29 16:35:06	avu	electricityZZZZ: the A13 has 2 fast cores, the macbook 4
2019-10-29 16:36:02	electricityZZZZ	https://browser.geekbench.com/v5/cpu/compare/488483?baseline=488616
2019-10-29 16:36:16	avu	also, there is not iPad using the A13 yet :)
2019-10-29 16:36:56	electricityZZZZ	multicore clang isn't all that different, 33.1 klines/sec i5 vs 29.5 klines/sec A13
2019-10-29 16:37:22	electricityZZZZ	but one question is, am i a fool for trusting this benchmark? are there tasks which the intel is superior at?
2019-10-29 16:38:17	alex-helfet	guess: maybe the iPhone gets thermally throttled if you run longer benchmarks, so that perf isn't sustainable?
2019-10-29 16:38:47	avu	benchmarks are always always misleading in one way or another. One way this one might be missleading is that it just measures CPU performance, leaving out IO or how much you're going to suffer by iOS devices having much less memory
2019-10-29 16:39:25	electricityZZZZ	are the A13 cpus not able to address as much mem as intel?
2019-10-29 16:39:28	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-29 16:39:29	avu	alex-helfet: well, that's the case with macbooks as well, unfortunately :)
2019-10-29 16:39:34	electricityZZZZ	are they like faux 64-bit?
2019-10-29 16:39:39	j`ey	no theyre real 64bit
2019-10-29 16:39:42	alex-helfet	avu: haha :)
2019-10-29 16:39:47	avu	electricityZZZZ: no, Apple just doesn't give the devices much ram
2019-10-29 16:40:04	avu	it's usually not necessary on iOS
2019-10-29 16:40:11	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-29 16:40:38	electricityZZZZ	in my experience i can run my older iphone at full load without it apparently thermally throttling at all
2019-10-29 16:40:46	avu	you can't get an A13 with more than 4GB right now, might change once the new iPad PRO models based on it come out though
2019-10-29 16:41:08	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-29 16:41:29	electricityZZZZ	right,...
2019-10-29 16:41:59	alex-helfet	the top intel chips on browser.geekbench.com
2019-10-29 16:42:14	alex-helfet	are faster but they all have higher clockspeed
2019-10-29 16:43:04	 *	kuznero thanks jebrosen for help! And stops for today... Have a good rest of the day!
2019-10-29 16:43:16	<--	kuznero (~kuznero@91.109.28.145) has quit (Quit: Leaving)
2019-10-29 16:44:34	electricityZZZZ	i mean okay so the device doesn't have much ram but i am talking about the cpu here,...
2019-10-29 16:45:20	electricityZZZZ	part of my question is to understand what CPUs do,... i am guessing that benches which have high branch rates and maybe lots of random memory access/cache thrashing is where CPUs excel?
2019-10-29 16:45:26	gchristensen	I have a Mutex. if I do: mydata.lock().unwrap().do_a_thing(); when does the lock get released exactly? at the end of that line, or the end of the scope?
2019-10-29 16:45:35	gchristensen	end of the outer scope*
2019-10-29 16:46:56	j`ey	electricityZZZZ: the less memory accesses, the 'better' in CPU benchmarks
2019-10-29 16:47:46	electricityZZZZ	 i am asking about differential advantage, meaning showing a larger difference between a "better" CPU and a "worse" CPU, and also difference between CPU and GPU etc
2019-10-29 16:48:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 16:51:19	<--	grabarz (~user@ip5f5bf62d.dynamic.kabel-deutschland.de) has quit (Ping timeout: 265 seconds)
2019-10-29 16:51:37	alex-helfet	gchirstensen: when the value falls out of scope. Maybe this is helpful: https://doc.rust-lang.org/book/ch15-03-drop.html
2019-10-29 16:57:55	alex-helfet	gchirstensen: although, perhaps this is better: https://doc.rust-lang.org/reference/expressions.html#temporary-lifetimes
2019-10-29 16:58:29	gchristensen	the temporary lifetimes link is helpful
2019-10-29 16:58:35	gchristensen	I know the answer at the intuitive level, but couldn't teach it properly
2019-10-29 16:59:09	j`ey	I should probably read that page too
2019-10-29 16:59:10	gchristensen	(always thrilling to realize the things you only know intuitively and not in such detail that you can explain.)
2019-10-29 16:59:32	<--	Coldblackice_ (~c@unaffiliated/coldblackice) has quit (Ping timeout: 265 seconds)
2019-10-29 17:00:05	alex-helfet	yes, interesting how much detail and precision you need to teach the answer to a good question.
2019-10-29 17:00:40	<--	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has quit (Ping timeout: 264 seconds)
2019-10-29 17:04:31	alex-helfet	Any advice on which Rust graphics and input libraries to use? I'm writing a very simple game (noughts and crosses, aka tic-tac-toe) and need to draw to the screen and accept mouse clicks.
2019-10-29 17:05:01	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-10-29 17:06:39	la_mettrie	alex-helfet: sdl (for both graphics and inputs)
2019-10-29 17:07:23	electricityZZZZ	alex-helfet: http://arewegameyet.com/    https://github.com/aochagavia/rocket
2019-10-29 17:08:59	alex-helfet	helpful suggestions, thank you :)
2019-10-29 17:10:02	electricityZZZZ	i can say that the rocket project i linked to compiled and ran fine for me, so it would be a fine starting place ;)
2019-10-29 17:12:03	<--	lauromoura_ (~lauromour@177.132.100.142) has quit (Ping timeout: 240 seconds)
2019-10-29 17:13:19	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 17:13:59	<--	ytain (~ghfg@2607:f2c0:9278:f800:443a:5d9a:1753:afae) has quit (Ping timeout: 250 seconds)
2019-10-29 17:14:25	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 17:14:58	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-10-29 17:15:17	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-29 17:17:16	-->	ssbr_laptop (~scorchsab@python/site-packages/ssbr) has joined ##rust
2019-10-29 17:20:03	-->	owlscientist (~owlscient@sburn/devel/name) has joined ##rust
2019-10-29 17:22:00	<--	electricityZZZZ (~rustisafu@108-216-157-17.lightspeed.sntcca.sbcglobal.net) has quit (Quit: Leaving)
2019-10-29 17:23:54	-->	b5509cd (5223450f@gateway/web/cgi-irc/kiwiirc.com/ip.82.35.69.15) has joined ##rust
2019-10-29 17:24:22	<--	owlscientist (~owlscient@sburn/devel/name) has quit (Client Quit)
2019-10-29 17:26:34	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-29 17:28:12	-->	owlscientist (~owlscient@sburn/devel/name) has joined ##rust
2019-10-29 17:28:12	<--	owlscientist (~owlscient@sburn/devel/name) has quit (Client Quit)
2019-10-29 17:28:24	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-29 17:29:59	-->	lineus (~lineus@dynamic-acs-24-101-67-254.zoominternet.net) has joined ##rust
2019-10-29 17:30:32	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Quit: WeeChat 2.6)
2019-10-29 17:32:04	-->	lauromoura (~lauromour@2804:7f5:f380:3f80:adfb:ffd1:4273:f00a) has joined ##rust
2019-10-29 17:32:11	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-29 17:32:27	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 240 seconds)
2019-10-29 17:36:45	-->	baali (~baali@59.98.234.229) has joined ##rust
2019-10-29 17:36:45	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-10-29 17:37:22	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-29 17:37:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 17:40:02	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-10-29 17:40:03	<--	ssbr_laptop (~scorchsab@python/site-packages/ssbr) has quit (Ping timeout: 240 seconds)
2019-10-29 17:40:22	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-10-29 17:40:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 17:42:49	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-10-29 17:42:50	-->	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has joined ##rust
2019-10-29 17:43:24	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-10-29 17:43:42	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2019-10-29 17:43:58	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-29 17:44:07	-->	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has joined ##rust
2019-10-29 17:45:13	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-29 17:47:08	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-10-29 17:49:11	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-29 17:49:52	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 264 seconds)
2019-10-29 17:50:07	delYsid	Given a RawFd, how do I do a read/write on that?
2019-10-29 17:50:36	delYsid	I've tried UnixStream and File, but both throw some sort of assertion.
2019-10-29 17:50:48	alex-helfet	what's the assertion?
2019-10-29 17:51:06	j`ey	https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html this?
2019-10-29 17:53:08	delYsid	j`ey: Yes, I looked through that traits list of impls, but only File and UnixStream look like what I want, but both fail.
2019-10-29 17:53:34	j`ey	then what alex-helfet said
2019-10-29 17:53:42	delYsid	Error: Os { code: 5, kind: Other, message: "Input/output error" }
2019-10-29 17:54:04	j`ey	are you sure the rawfd is valid?
2019-10-29 17:54:34	delYsid	well, sure is probably an exaggregation.  I am playing with nix::pty::forkpty
2019-10-29 17:54:45	delYsid	but if that function works, it should AIUI
2019-10-29 17:55:12	alex-helfet	can you paste a minimal example that fails?
2019-10-30 09:15:49	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-30 09:15:49	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-30 09:15:49	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-30 09:15:49	--	Channel ##rust: 574 nicks (2 ops, 0 voices, 572 normals)
2019-10-30 09:16:04	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-30 09:16:22	<--	Xatenev (~Xatenev@2a02:8108:9640:4455:c40d:2a7c:f5ff:f284) has quit (Read error: Connection reset by peer)
2019-10-30 09:18:17	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2019-10-30 09:23:52	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-10-30 09:24:23	-->	adamgr (~adamgr@c-24-16-28-124.hsd1.wa.comcast.net) has joined ##rust
2019-10-30 09:25:43	-->	m0rphism (~m0rphism@HSI-KBW-082-212-034-016.hsi.kabelbw.de) has joined ##rust
2019-10-30 09:25:44	<--	CodesInChaos (~cic@unaffiliated/codesinchaos) has quit (Ping timeout: 276 seconds)
2019-10-30 09:29:10	-->	dftxbs3e_ (~dftxbs3e@unaffiliated/dftxbs3e) has joined ##rust
2019-10-30 09:29:19	<--	dftxbs3e_ (~dftxbs3e@unaffiliated/dftxbs3e) has quit (Remote host closed the connection)
2019-10-30 09:35:14	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 240 seconds)
2019-10-30 09:37:01	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-30 09:39:20	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-10-30 09:41:27	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-10-30 09:42:17	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 09:43:38	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-10-30 09:43:49	--	cdown_ is now known as cdown
2019-10-30 09:49:47	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Read error: Connection reset by peer)
2019-10-30 09:55:58	-->	fanta1 (~fanta1@p200300F76BC5850071AAF776B3FB1258.dip0.t-ipconnect.de) has joined ##rust
2019-10-30 09:59:43	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-10-30 09:59:45	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 250 seconds)
2019-10-30 10:00:40	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-30 10:00:45	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-30 10:00:50	<--	infinii (~infinee@061093245022.static.ctinets.com) has quit (Ping timeout: 240 seconds)
2019-10-30 10:04:50	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 240 seconds)
2019-10-30 10:04:56	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-30 10:07:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 10:07:38	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-10-30 10:07:56	<--	tsaka_ (~torstein@x4dbf8865.dyn.telefonica.de) has quit (Ping timeout: 240 seconds)
2019-10-30 10:08:26	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-10-30 10:08:37	-->	mxco86_ (~mxco86@fpc151869-shef17-2-0-cust38.17-1.static.cable.virginm.net) has joined ##rust
2019-10-30 10:10:32	<--	marusich (~marusich@unaffiliated/marusich) has quit (Remote host closed the connection)
2019-10-30 10:10:53	<--	mxco86_ (~mxco86@fpc151869-shef17-2-0-cust38.17-1.static.cable.virginm.net) has quit (Client Quit)
2019-10-30 10:18:53	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-30 10:20:29	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 10:22:34	-->	infinii (~infinee@061093245022.static.ctinets.com) has joined ##rust
2019-10-30 10:24:49	-->	bromind (~bromind@pas38-2-82-224-180-63.fbx.proxad.net) has joined ##rust
2019-10-30 10:25:28	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Ping timeout: 265 seconds)
2019-10-30 10:29:20	<--	wrl (~wrl@naphtha.ix.illest.net) has quit (Read error: Connection reset by peer)
2019-10-30 10:33:24	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-10-30 10:33:26	<--	AbedB_ (~AbedBhuty@bzq-79-183-5-209.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-10-30 10:34:11	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-30 10:35:23	<--	infinii (~infinee@061093245022.static.ctinets.com) has quit (Ping timeout: 268 seconds)
2019-10-30 10:37:18	-->	weirane (~Thunderbi@2001:da8:d800:196:25b0:eccf:470e:b25c) has joined ##rust
2019-10-30 10:38:32	<--	weirane (~Thunderbi@2001:da8:d800:196:25b0:eccf:470e:b25c) has left ##rust
2019-10-30 10:41:36	-->	infinii (~infinee@061093245022.static.ctinets.com) has joined ##rust
2019-10-30 10:48:43	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-30 10:50:02	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-30 10:51:51	-->	cart_man (~cart_man@105.226.51.146) has joined ##rust
2019-10-30 10:51:59	cart_man	What is the best way to match a String ?
2019-10-30 10:53:05	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-30 10:53:14	cart_man	 hastebin.com/qizimoxini.js
2019-10-30 10:53:32	Moongoodgirl	as in `match`, against constant strings?
2019-10-30 10:54:25	cart_man	Moongoodgirl, Wwell what ever that is. It gives me an error expected one of '...', '..=' , '..' or \|\ here
2019-10-30 10:54:39	cart_man	and indicates the "-n"
2019-10-30 10:55:36	-->	libertyprime (~libertypr@118.149.158.87) has joined ##rust
2019-10-30 10:55:38	<--	baali (~baali@59.98.234.229) has quit (Ping timeout: 240 seconds)
2019-10-30 10:55:51	Moongoodgirl	`match _.as_ref() { "-n" => _ }`
2019-10-30 10:56:01	-->	baali (~baali@59.98.237.91) has joined ##rust
2019-10-30 10:56:34	Moongoodgirl	note that looping like that is unidiomatic; `for arg in env::args().skip(1)` would be better
2019-10-30 10:56:54	Moongoodgirl	and, actually, you probably want to use a proper argument-parsing crate
2019-10-30 10:57:16	cart_man	Moongoodgirl, What does that word mean in context of rust? idiomatic?
2019-10-30 10:57:32	cart_man	Moongoodgirl, Maybe but this seems to easy to do?
2019-10-30 10:57:44	cart_man	Just ... is it -n  ... ok throw the next arg in here
2019-10-30 11:00:17	Moongoodgirl	it /works/, but it's weird in Rust|not typically how things are done|there's a better or more common way
2019-10-30 11:01:55	Moongoodgirl	If you have more than a couple options, you're gonna run into a lot of boilerplate pretty quickly
2019-10-30 11:02:24	cart_man	Moongoodgirl, I only have 4 luckily ... its very simple and the program is meant to be as lean as possible
2019-10-30 11:02:37	Moongoodgirl	(also this doesn't correctly handle `-mn foo` where -m is a flag—that's pretty much universally considered equivalent to `-m -n foo`, but won't work with your code)
2019-10-30 11:02:57	cart_man	Problem with the Iterator is that suppose the arg of args is "-m" how do I tell it to use the "NEXT" arg ?
2019-10-30 11:03:03	Moongoodgirl	Premature optimization? We have zero-cost abstractions and link-time optimization and stuff.
2019-10-30 11:03:13	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-30 11:04:26	cart_man	Moongoodgirl, I see what you are saying
2019-10-30 11:05:02	-->	tsaka_ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-30 11:09:51	Moongoodgirl	You can bind the iterator to a variable and then call next() repeatedly. `let mut args = env::args().skip(1); while let Some(arg) = args.next() { match arg.as_ref() { "-n" => println!("{:?}", args.next()) } }`
2019-10-30 11:10:32	Moongoodgirl	but actually try using an argument-parsing crate, and measure the size of your program built with --release, and consider whether it's really too big
2019-10-30 11:11:29	-->	anovick_ (~anovick@bzq-109-65-60-116.red.bezeqint.net) has joined ##rust
2019-10-30 11:11:32	<--	anovick_ (~anovick@bzq-109-65-60-116.red.bezeqint.net) has quit (Remote host closed the connection)
2019-10-30 11:11:54	-->	anovick (~anovick@bzq-109-65-60-116.red.bezeqint.net) has joined ##rust
2019-10-30 11:12:50	<--	anovick (~anovick@bzq-109-65-60-116.red.bezeqint.net) has left ##rust
2019-10-30 11:13:12	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 11:22:00	heeen	can someone try to run the vulkano triangle example and try to close the window using window decorations? for me it will not close and the window manager complains about the app not responding
2019-10-30 11:24:14	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-30 11:30:37	-->	rorymckinley (~rorymckin@41.13.238.214) has joined ##rust
2019-10-30 11:32:41	-->	mkulke (3e601b02@62.96.27.2) has joined ##rust
2019-10-30 11:33:23	rorymckinley	Hello - I am literally following along with the Rust book tutorial, and I noticed that, after adding `rand = "0.3.14"` to Cargo.toml, `cargo build` installed 2 versions of `rand` - `rand v0.3.23` and `rand v0.4.6` - what have I done wrong?
2019-10-30 11:33:53	mkulke	Hi, there i'm trying to cancel a tokio::timer::Delay future. Can i still do that once it's `.await`ed?
2019-10-30 11:33:57	j`ey	that's the only line you have in your Cargo.toml?
2019-10-30 11:33:59	voker57	probably other dependency required another rand version
2019-10-30 11:35:37	voker57	= does not fix the patch level, so 0.3.x will match
2019-10-30 11:42:42	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-vvcheznktwbkoqwr) has quit (Read error: Connection reset by peer)
2019-10-30 11:42:42	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (Read error: Connection reset by peer)
2019-10-30 11:42:42	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (Remote host closed the connection)
2019-10-30 11:42:42	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-slhcqgjcdekeunfq) has quit (Read error: Connection reset by peer)
2019-10-30 11:42:42	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-xktjcisiztqmhibe) has quit (Read error: Connection reset by peer)
2019-10-30 11:42:42	<--	Ericson2314 (ericson231@gateway/shell/matrix.org/x-lvhqkcngmpsylumt) has quit (Remote host closed the connection)
2019-10-30 11:42:42	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-jktgtiqenppbzckp) has quit (Remote host closed the connection)
2019-10-30 11:42:42	rorymckinley	Yes, that is the only line I have under dependencies - should I just update the Cargo.toml file to use the newer rand lib?
2019-10-30 11:42:42	<--	siraben (sirabenmat@gateway/shell/matrix.org/x-ntyuafnzxfkqzvbq) has quit (Read error: Connection reset by peer)
2019-10-30 11:42:42	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-pbnnnajeitzdfdwf) has quit (Write error: Connection reset by peer)
2019-10-30 11:43:05	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-10-30 11:43:09	voker57	post your Cargo.toml
2019-10-30 11:43:43	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-30 11:43:58	voker57	if tutorial is made for that version of rand, you might want to keep that version
2019-10-30 11:44:16	Alexendoo	mkulke: You could wrap it in an Abortable from futures_util
2019-10-30 11:44:26	<--	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2019-10-30 11:44:29	<--	mkulke (3e601b02@62.96.27.2) has quit (Remote host closed the connection)
2019-10-30 11:46:35	rorymckinley	voker57: https://gist.github.com/rorymckinley/d70a957bb88b697a44a21fc4d9c55dfd
2019-10-30 11:46:55	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-30 11:46:57	voker57	rorymckinley: that's Cargo.lock not .toml
2019-10-30 11:47:06	-->	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has joined ##rust
2019-10-30 11:47:07	j`ey	the toml is at the bottom
2019-10-30 11:47:30	voker57	ah
2019-10-30 11:47:36	voker57	it's probably windows thing
2019-10-30 11:47:42	j`ey	rand 0.3.23 has a dependency on rand 0.4.6
2019-10-30 11:47:44	rorymckinley	Yeah, sorry, when I created the gist, the Cargo.toml was the first file I added
2019-10-30 11:47:49	cart_man	Moongoodgirl, What does as_ref() do btw?
2019-10-30 11:48:04	rorymckinley	The thing is I am running on Linux :)
2019-10-30 11:48:12	Alexendoo	Oh rand does the semver trick? That's great
2019-10-30 11:48:14	voker57	nvm j`ey is right
2019-10-30 11:48:18	cart_man	Ohh cheap reference-to-reference conversion
2019-10-30 11:48:42	voker57	so, not your fault, keep going :)
2019-10-30 11:48:46	j`ey	https://github.com/dtolnay/semver-trick/
2019-10-30 11:48:47	rorymckinley	Ok, is that common practice for an older version of a library to depend on a newer version?
2019-10-30 11:48:50	j`ey	related to this rorymckinley
2019-10-30 11:50:07	cart_man	Moongoodgirl, Ok so lets say I use match &args[n].as_ref() { "-n" => {}}  what should "-n" be?  "-n".as_ref() or String::from("-n") ?
2019-10-30 11:50:26	cart_man	meant String_fromUtf8
2019-10-30 11:50:32	<--	narispo (~narispo@2a01:e0a:2a2:1590:29c9:8f2e:abc6:6667) has quit (Ping timeout: 246 seconds)
2019-10-30 11:51:09	-->	narispo (~narispo@37.171.222.86) has joined ##rust
2019-10-30 11:52:45	rorymckinley	Ah, thanks voker, and j'ey - I (sorta) get it now - at least well enough to move on :)
2019-10-30 11:53:22	j`ey	rorymckinley: gl
2019-10-30 11:53:32	rorymckinley	thanks :)
2019-10-30 11:56:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 11:58:36	<--	lineus (~lineus@24.101.206.59) has quit (Ping timeout: 240 seconds)
2019-10-30 11:59:55	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-10-30 12:00:11	-->	grabarz (~janko@ip5f5bf62d.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-30 12:03:47	<--	adamgr (~adamgr@c-24-16-28-124.hsd1.wa.comcast.net) has quit (Quit: adamgr)
2019-10-30 12:08:46	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-10-30 12:10:45	-->	couchy (~Couchy@185.79-161-15.customer.lyse.net) has joined ##rust
2019-10-30 12:17:20	-->	ot (~css@unaffiliated/css) has joined ##rust
2019-10-30 12:21:26	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 12:21:51	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-10-30 12:24:03	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Read error: Connection reset by peer)
2019-10-30 12:24:13	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-30 12:26:07	<--	couchy (~Couchy@185.79-161-15.customer.lyse.net) has quit (Quit: WeeChat 2.6)
2019-10-30 12:27:04	<--	narispo (~narispo@37.171.222.86) has quit (Ping timeout: 264 seconds)
2019-10-30 12:32:33	<--	rorymckinley (~rorymckin@41.13.238.214) has quit (Ping timeout: 268 seconds)
2019-10-30 12:32:50	-->	b5509cd (6d9b4522@gateway/web/cgi-irc/kiwiirc.com/ip.109.155.69.34) has joined ##rust
2019-10-30 12:35:50	-->	mkulke (3e601b02@62.96.27.2) has joined ##rust
2019-10-30 12:37:05	-->	narispo (~narispo@37.172.85.124) has joined ##rust
2019-10-30 12:38:47	<--	masonl (~masonl@194-193-202-239.tpgi.com.au) has quit (Ping timeout: 250 seconds)
2019-10-30 12:38:57	mkulke	Hello, however recommended `futures_util::future::abortable` to me earlier (before the crappy web irc client kicked me out): Thank you very much. This worked perfectly, i'll have to look into the future util crate, it looks very rather elegant
2019-10-30 12:39:04	mkulke	*whoever
2019-10-30 12:39:17	<--	libertyprime (~libertypr@118.149.158.87) has quit (Ping timeout: 240 seconds)
2019-10-30 12:41:29	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-10-30 12:43:42	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-30 12:46:07	<--	Coldblackice (~c@unaffiliated/coldblackice) has quit (Ping timeout: 268 seconds)
2019-10-30 12:47:50	<--	crockwork (~crockwork@2604:c340:2000:0:a137:f278:f9ae:525) has quit (Quit: crockwork)
2019-10-30 12:51:44	-->	BeerLove_ (~BeerBuddy@125.22.102.134) has joined ##rust
2019-10-30 12:52:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 12:57:49	-->	IlPalazzo-ojiisa (c3fb7554@195.251.117.84) has joined ##rust
2019-10-30 12:59:27	IlPalazzo-ojiisa	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ba931dd99b789cd61a7cbfda7b1c8b77
2019-10-30 12:59:31	IlPalazzo-ojiisa	Why doesn't this work?
2019-10-30 12:59:55	<--	mkulke (3e601b02@62.96.27.2) has quit (Ping timeout: 260 seconds)
2019-10-30 13:00:06	j`ey	Sender takes a Type
2019-10-30 13:00:59	j`ey	type Sndr = std::sync::mpsc::Sender<String>; fixes the first error
2019-10-30 13:01:01	IlPalazzo-ojiisa	...even though channel() doesn't?
2019-10-30 13:01:14	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-10-30 13:02:11	j`ey	channel does
2019-10-30 13:02:25	j`ey	it's just inferred from context
2019-10-30 13:02:53	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-30 13:03:07	IlPalazzo-ojiisa	Oh! In that case, thank you @context for letting Rust infer the type.
2019-10-30 13:03:17	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 240 seconds)
2019-10-30 13:03:31	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-10-30 13:03:54	IlPalazzo-ojiisa	It was so simple, after all. Thank you!
2019-10-30 13:05:15	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-30 13:07:44	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-30 13:08:34	-->	Ericson2314 (ericson231@gateway/shell/matrix.org/x-zikrtcvpfdqnvskv) has joined ##rust
2019-10-30 13:08:34	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-10-30 13:08:34	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-vgjjboasteewgpvp) has joined ##rust
2019-10-30 13:08:34	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-gzgljmwwaujhxkgn) has joined ##rust
2019-10-30 13:08:34	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-fqaxouyqrsdkqhhu) has joined ##rust
2019-10-30 13:08:35	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-qwrohwmxidmfyxco) has joined ##rust
2019-10-30 13:08:35	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-sseowzznwqenmtgn) has joined ##rust
2019-10-30 13:08:35	-->	siraben (sirabenmat@gateway/shell/matrix.org/x-nxvkmbyqpazcxplp) has joined ##rust
2019-10-30 13:16:23	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-10-30 13:16:40	<--	IlPalazzo-ojiisa (c3fb7554@195.251.117.84) has quit (Remote host closed the connection)
2019-10-30 13:18:55	<--	b5509cd (6d9b4522@gateway/web/cgi-irc/kiwiirc.com/ip.109.155.69.34) has quit (Remote host closed the connection)
2019-10-30 13:21:39	<--	m0rphism (~m0rphism@HSI-KBW-082-212-034-016.hsi.kabelbw.de) has quit (Ping timeout: 264 seconds)
2019-10-30 13:26:26	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 13:34:50	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Ping timeout: 268 seconds)
2019-10-30 13:35:31	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-30 13:37:03	-->	m0rphism (~m0rphism@HSI-KBW-082-212-034-016.hsi.kabelbw.de) has joined ##rust
2019-10-30 13:45:15	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-10-30 13:56:28	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-30 14:00:19	<--	BeerLove_ (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-30 14:00:57	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2019-10-30 14:02:55	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-30 14:05:54	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-10-30 14:06:19	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-10-30 14:11:54	-->	AbedB_ (~AbedBhuty@bzq-79-176-28-84.red.bezeqint.net) has joined ##rust
2019-10-30 14:12:23	Flonk	I tried to follow https://rust-lang-nursery.github.io/rust-cookbook/algorithms/randomness.html - so I added `rand = "0.7.2"` to my Cargo.toml since random numbers are not part of of the standard library it seems. I get a really obscure error when running `cargo build && cargo run`: https://hastebin.com/teficeyufi
2019-10-30 14:14:06	voker57	what's your rustc/cargo version?
2019-10-30 14:14:18	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-30 14:14:29	voker57	extern crate should no longer be needed
2019-10-30 14:14:41	voker57	i mean, the line, not the crate itself
2019-10-30 14:16:58	faern	Can we hide Rust 2015 deep in the mines of Moria soon? Way too many people find old docs and try to use extern crate or use trait objects without the dyn keyword etc.
2019-10-30 14:18:07	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-30 14:18:07	voker57	problem here is not docs but old rust itself
2019-10-30 14:20:02	faern	Sure. cargo+rustc should have a built in self destruction date. If the system time is >12 weeks after the release date it can warn ;)
2019-10-30 14:21:43	tjis	not using dyn should give you a nice warning though right?
2019-10-30 14:21:46	voker57	just make the only possible way to run rust through the rustup curl2sudo ;)
2019-10-30 14:22:03	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 14:22:19	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 14:24:50	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Read error: Connection reset by peer)
2019-10-30 14:30:45	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-30 14:33:21	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Quit: _Vi)
2019-10-30 14:33:38	faern	voker57: Just make the compiler not something you can download. The core team manages a number of build servers with the latest and greatest compiler and you submit your code to them for build.
2019-10-30 14:34:03	-->	ksqsf (~user@222.195.68.197) has joined ##rust
2019-10-30 14:42:50	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Ping timeout: 240 seconds)
2019-10-30 14:47:54	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-10-30 14:48:13	<--	sobol (~steve@kauai.gps.caltech.edu) has quit (Ping timeout: 268 seconds)
2019-10-30 14:50:26	<--	grabarz (~janko@ip5f5bf62d.dynamic.kabel-deutschland.de) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-30 14:54:54	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-30 15:00:55	Flonk	voker57, oh I see
2019-10-30 15:01:02	Flonk	voker57, lemme try that then
2019-10-30 15:01:14	<--	baali (~baali@59.98.237.91) has quit (Ping timeout: 240 seconds)
2019-10-30 15:01:26	voker57	i hope you meant "try updating rust"
2019-10-30 15:02:00	Flonk	I'm on v1.37
2019-10-30 15:02:08	Flonk	I just followed orders
2019-10-30 15:02:13	voker57	hm weird then
2019-10-30 15:02:17	Flonk	And wrote "extern crate rand"
2019-10-30 15:02:32	voker57	on 1.36 unmodified example works for me
2019-10-30 15:03:16	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-30 15:04:13	voker57	Flonk: add edition = "2018" to [package] section of your Cargo.toml if it is not there
2019-10-30 15:04:13	Flonk	Does it matter that this is not main.rs? (It did matter with `mod` statements, I had to add a #[path] directive)
2019-10-30 15:04:24	Flonk	voker57, oh, I'll do that
2019-10-30 15:05:10	voker57	if you set the path to binary in Cargo.toml it shouldn't matter
2019-10-30 15:05:26	Flonk	voker57, yup the error disappeared now. The edition thing did it
2019-10-30 15:05:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-30 15:05:42	Flonk	Thanks :)
2019-10-30 15:05:51	voker57	yw
2019-10-30 15:09:18	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-30 15:13:52	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 15:15:36	-->	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has joined ##rust
2019-10-30 15:22:34	-->	grabarz (~janko@p50857DC3.dip0.t-ipconnect.de) has joined ##rust
2019-10-30 15:23:18	<--	grabarz (~janko@p50857DC3.dip0.t-ipconnect.de) has quit (Client Quit)
2019-10-30 15:23:28	<--	seanBE (~seanBE@unaffiliated/seanbe) has quit (Ping timeout: 264 seconds)
2019-10-30 15:24:00	j`ey	what is cargo putting in the .wasm that changes every build?
2019-10-30 15:24:41	j`ey	(I have a .wasm checked into git, cargo build without any changes seems to modify the file)
2019-10-30 15:25:52	<--	SpaceManiac (~SpaceMani@2601:200:4400:f::1028) has quit (Ping timeout: 264 seconds)
2019-10-30 15:25:54	Kinnison	I imagine it's possible its putting build date/time stamps in there or somesuch
2019-10-30 15:26:22	j`ey	it changes the .wasm quite a bit
2019-10-30 15:26:25	j`ey	looking at the hexdump
2019-10-30 15:27:19	j`ey	1097bytes difference
2019-10-30 15:28:02	<--	leaves (~leaves@unaffiliated/leaves) has quit (Quit: leaving)
2019-10-30 15:28:03	Kinnison	I guess it's possible there might be non-determininsm in the optimisers, but I'm grasping at air now
2019-10-30 15:28:11	j`ey	I'd hope not!
2019-10-30 15:29:55	-->	seanBE (~seanBE@unaffiliated/seanbe) has joined ##rust
2019-10-30 15:32:09	-->	SpaceManiac (~SpaceMani@2601:200:4400:f::100f) has joined ##rust
2019-10-30 15:32:33	<--	holgersson (~quassel@unaffiliated/holgersson) has quit (Ping timeout: 250 seconds)
2019-10-30 15:34:20	j`ey	maybe codegen-units is doing something here
2019-10-30 15:34:38	Kinnison	perhaps try setting it to 1
2019-10-30 15:35:30	-->	holgersson (~quassel@unaffiliated/holgersson) has joined ##rust
2019-10-30 15:35:48	j`ey	I ran cargo build, md5sum, rm, cargo build, md5sum, and that's the same for a native build
2019-10-30 15:36:44	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 15:37:50	j`ey	I wonder if I just messed up and somehow didn't commit the binary when i thought I had
2019-10-30 15:39:07	j`ey	yes, I think I messed up
2019-10-30 15:40:02	<--	holgersson (~quassel@unaffiliated/holgersson) has quit (Ping timeout: 240 seconds)
2019-10-30 15:41:14	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Ping timeout: 240 seconds)
2019-10-30 15:41:37	-->	holgersson (~quassel@unaffiliated/holgersson) has joined ##rust
2019-10-30 15:44:18	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-30 15:46:40	delYsid	https://github.com/nix-rust/nix/pull/1147 <-- surprised this got overlooked, so I am suspicious about my judgement.  How would use do a poll-loop without this PR?  Did I overlook something?
2019-10-30 15:46:57	delYsid	s/use/you/
2019-10-30 15:47:07	j`ey	Kinnison: just FYI I tried to squash the wasm with git rebase, but when i got the conflict I just did 'git add' to the wasm binary, thinking it was the updated one
2019-10-30 15:47:26	Kinnison	rebasing with binary lumps is never fun
2019-10-30 15:48:21	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-10-30 15:48:59	j`ey	squashed properly now, and everything is fine
2019-10-30 15:51:11	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Ping timeout: 276 seconds)
2019-10-30 15:53:11	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-30 15:54:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-30 16:00:03	-->	baali (~baali@59.98.237.91) has joined ##rust
2019-10-30 16:01:06	j`ey	has anyone used miniz_oxide, or can recommend any pure rust compression/decompression crates that can be compiled to wasm?
2019-10-30 16:02:20	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-30 16:02:45	j`ey	(Going to use it for benchmarks)
2019-10-30 16:03:51	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 16:03:56	j`ey	Also maybe going to use the zip crate
2019-10-30 16:07:14	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 240 seconds)
2019-10-30 16:08:39	-->	johnw_ (~johnw@haskell/developer/johnw) has joined ##rust
2019-10-30 16:10:52	<--	johnw (~johnw@haskell/developer/johnw) has quit (Ping timeout: 264 seconds)
2019-10-30 16:11:21	-->	con3 (~kvirc@154.119.40.237) has joined ##rust
2019-10-30 16:13:44	<--	con3 (~kvirc@154.119.40.237) has quit (Max SendQ exceeded)
2019-10-30 16:14:28	-->	con3 (~kvirc@154.119.40.237) has joined ##rust
2019-10-30 16:16:19	<--	con3 (~kvirc@154.119.40.237) has quit (Max SendQ exceeded)
2019-10-30 16:16:47	-->	con3 (~kvirc@154.119.40.237) has joined ##rust
2019-10-30 16:24:30	<--	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
2019-10-30 16:27:12	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-10-30 16:27:26	-->	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has joined ##rust
2019-10-30 16:35:23	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Quit: Mom decided I had to go to bed.)
2019-10-30 16:39:23	wucke13	Can a rust macro like this work? my_macro!(var_x, number_y,((name,type), ...));?
2019-10-30 16:40:04	-->	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has joined ##rust
2019-10-30 16:41:22	<--	polyzen (~dmc@archlinux/trusteduser/polyzen) has quit (Quit: WeeChat 2.6)
2019-10-30 16:41:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-30 16:43:34	-->	t7 (~tommo@2a00:23c5:1284:fc00:78a5:7a85:53a1:1317) has joined ##rust
2019-10-30 16:43:51	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-30 16:45:25	-->	dmc (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-10-30 16:47:11	Flonk	God this language is complicated. It's like I'm learning pointers/monads/chinese all over again.
2019-10-30 16:47:46	Kinnison	Flonk: it has a bit of a vertical learning curve at the start, but soon it'll even out a bit for you
2019-10-30 16:48:11	Kinnison	Flonk: For me, the trick was to not try and run before I could walk -- I kept trying to do small simple things, rather than trying to do "oh I know how to do this in C, so it must be easy in Rust" type things
2019-10-30 16:49:39	sheelp	I'd like to improve my quick implementation of file transfer with a progress bar and would really appreciate some feedback!  https://gist.github.com/rust-play/a68fefa627313251e70dca91a16c534e.
2019-10-30 16:49:42	Flonk	Yeah I try to keep it simple :)
2019-10-30 16:50:11	sheelp	 One thing I know I can do, but I'm not sure how, is to remove the allocation from poll_next, but I seem to keep getting lifetime errors when I move the buffer into the UploadProgress type.
2019-10-30 16:50:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 16:50:21	Flonk	Right now I added a reference to a struct and all of a sudden <'a>'s creep into the whole codebase and nothing compiles
2019-10-30 16:50:51	sheelp	Kinnison, I know what you mean, the, in C I'd do it like this is really biting me right now.
2019-10-30 16:51:48	wucke13	The other way round: How would the matcher of a macro look, that takes to expr and at least one tuple of (type, identifier)?
2019-10-30 16:52:02	Kinnison	Flonk: Yeah, learning about how to decide between borrowing something long-term, borrowing it only when called, and taking ownership or cloning something, can take a while
2019-10-30 16:52:20	Kinnison	Flonk: And sometimes you just gotta have the lifetimes spelled out :D
2019-10-30 16:52:53	Flonk	...I need more coffee
2019-10-30 16:53:05	Kinnison	LD
2019-10-30 16:53:06	Kinnison	:D
2019-10-30 16:55:19	-->	kmelvn (karl@2a01:7e00::f03c:91ff:fed2:9e14) has joined ##rust
2019-10-30 16:58:35	sheelp	Does someone see how I might remove the allocation on line 40 of https://gist.github.com/rust-play/a68fefa627313251e70dca91a16c534e so that I don't allocate on every call.  When I try to make it a field on UploadProgress I can't pass it to inner.read_exact as I would need 2 mutable references.
2019-10-30 16:59:13	sheelp	Is my approach even valid?  I may not be thinking idiomatically.
2019-10-30 17:05:00	ZirconiumX	sheelp: Maybe move the Vec into the UploadProgress struct?
2019-10-30 17:05:35	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-10-30 17:08:49	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 268 seconds)
2019-10-30 17:10:45	sheelp	ZirconiumX, that results in the following two errors, which seems to indicate it may be the wrong approach?  Do you see something I don't?  https://gist.github.com/rust-play/7ce59bdd5120a97cbc3bf6243c8620c2
2019-10-30 17:11:39	-->	b5509cd (5223450f@gateway/web/cgi-irc/kiwiirc.com/ip.82.35.69.15) has joined ##rust
2019-10-30 17:11:41	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-30 17:12:43	ZirconiumX	Maybe the allocation is unavoidable here, then.
2019-10-30 17:13:06	ZirconiumX	That's rather annoying, honestly.
2019-10-30 17:13:08	ZirconiumX	Hmm.
2019-10-30 17:13:32	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Remote host closed the connection)
2019-10-30 17:13:45	-->	mandeep (~mandeep@unaffiliated/mandeepb) has joined ##rust
2019-10-30 17:14:58	dmgk	this is confusing, why the Sized requirement? https://play.rust-lang.org/?gist=cef53560ac65b4858ba83c7e8a2b87a2
2019-10-30 17:15:26	sheelp	Right?!  There has to be a better way, that's too many unnecessary allocations, especially when it scales linearly with file size.
2019-10-30 17:16:09	-->	ragecryx (~ragecryx@2a02:2149:822f:2b00:1957:d738:d011:6e4c) has joined ##rust
2019-10-30 17:24:20	wucke13	How can I get an instance of any number type from a r: Read?
2019-10-30 17:26:03	sheelp	wucke13 is the number in a string?  do you know the size of the number?
2019-10-30 17:28:05	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-10-30 17:31:52	wucke13	No, the number is in a byte stream for that I only have have an r: R with <R: Read>
2019-10-30 17:32:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-30 17:32:18	wucke13	And the type is known too, via $type (it's for a macro)
2019-10-30 17:34:46	-->	adamgr (~adamgr@c-24-16-28-124.hsd1.wa.comcast.net) has joined ##rust
2019-10-30 17:34:52	<--	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-30 17:37:34	-->	INSANU (~jhonnyvar@51.37.141.135) has joined ##rust
2019-10-30 17:39:21	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-30 17:41:14	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Ping timeout: 240 seconds)
2019-10-30 17:41:36	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-30 17:41:57	<--	INSANU (~jhonnyvar@51.37.141.135) has quit (Ping timeout: 240 seconds)
2019-10-30 17:41:58	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-30 17:42:44	-->	_plasma (~plasma@192.71.233.110) has joined ##rust
2019-10-30 17:42:54	_plasma	Discord can suck it
2019-10-30 17:44:20	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 265 seconds)
2019-10-30 17:47:19	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-30 17:47:43	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-30 17:50:17	<--	ragecryx (~ragecryx@2a02:2149:822f:2b00:1957:d738:d011:6e4c) has quit (Ping timeout: 252 seconds)
2019-10-30 17:50:51	ZirconiumX	So, I've ran clippy in pedantic mode on my code and ran into the filter_map lint
2019-10-30 17:51:29	ZirconiumX	Where it suggests replacing filter(p).flat_map(q) with .flat_map() and returning an empty Iterator
2019-10-30 17:51:54	ZirconiumX	But my flat_map returns a Map iterator, so to do this I would have to map over nothing
2019-10-31 09:16:12	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-31 09:16:12	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-31 09:16:12	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-31 09:16:12	--	Channel ##rust: 569 nicks (2 ops, 0 voices, 567 normals)
2019-10-31 09:16:22	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-10-31 09:16:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-31 09:17:09	<--	josteink (~jostein@cm-84.211.32.128.getinternet.no) has quit (Quit: BIOS update, yay)
2019-10-31 09:24:50	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Ping timeout: 276 seconds)
2019-10-31 09:24:56	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Read error: Connection reset by peer)
2019-10-31 09:25:12	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Ping timeout: 246 seconds)
2019-10-31 09:25:12	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Ping timeout: 246 seconds)
2019-10-31 09:25:17	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-31 09:32:16	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-31 09:32:54	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-31 09:34:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-31 09:34:48	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Read error: Connection reset by peer)
2019-10-31 09:37:59	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-31 09:39:41	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-10-31 09:45:31	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 09:48:05	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-10-31 09:51:05	-->	tsaka_ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has joined ##rust
2019-10-31 10:02:28	<--	libertyprime (~libertypr@client-172-202.guest.otago.ac.nz) has quit (Ping timeout: 240 seconds)
2019-10-31 10:02:38	yrp	anyone know anything that plugs cargo bench into linux perf and profiles my benchmarks
2019-10-31 10:05:56	<--	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has quit (Quit: Ta ta)
2019-10-31 10:07:15	-->	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has joined ##rust
2019-10-31 10:08:26	wucke13	Is the size of a struct always just the sum of its members (if all members are primitives)?
2019-10-31 10:09:00	Remosi	there can be alignment padding
2019-10-31 10:10:03	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-10-31 10:12:15	<--	avu (~jan@unaffiliated/avu) has left ##rust
2019-10-31 10:13:14	-->	ytain (~ghfg@2607:f2c0:948e:4000:1aa:1d8:c827:67a2) has joined ##rust
2019-10-31 10:13:35	-->	Singmyr (~Singmyr@c83-253-123-62.bredband.comhem.se) has joined ##rust
2019-10-31 10:14:14	faern	evalr: struct A(u8,u16); std::mem::size_of::<A>()
2019-10-31 10:14:16	--	Notice(evalr): 4
2019-10-31 10:14:43	faern	wucke13: See ^ There is padding. So it occupies the same space as 2 x u16
2019-10-31 10:14:44	-->	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has joined ##rust
2019-10-31 10:18:39	<--	Singmyr (~Singmyr@c83-253-123-62.bredband.comhem.se) has quit (Ping timeout: 268 seconds)
2019-10-31 10:19:32	wucke13	Ah ok
2019-10-31 10:19:46	-->	libertyprime (~libertypr@118.149.212.14) has joined ##rust
2019-10-31 10:21:57	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-31 10:24:24	wucke13	Is there a way to convert a slice of an array to an actual array?
2019-10-31 10:24:42	j`ey	copy it
2019-10-31 10:25:05	wucke13	Hmmh
2019-10-31 10:25:11	yrp	dont use arrays
2019-10-31 10:25:41	wucke13	<primitive>.from_be_bytes() unfortunately expects to get arrays :D
2019-10-31 10:26:42	j`ey	oh then really just copy it
2019-10-31 10:27:39	-->	baali (~baali@59.98.237.91) has joined ##rust
2019-10-31 10:28:36	yrp	embrace u64::from_le_bytes(b[0..8].try_into().unwrap() into your heart
2019-10-31 10:28:38	j`ey	you could also use TryFrom
2019-10-31 10:28:42	j`ey	^
2019-10-31 10:28:51	yrp	e r g o n o m i x x x
2019-10-31 10:28:57	yrp	u s a b i l i t y
2019-10-31 10:29:16	jellie	It's probably frowned upon but how can I do something like x.std::io::prelude::read()
2019-10-31 10:29:40	jellie	calling a method without fully importing it, not sure that fully importing is the name
2019-10-31 10:29:55	wucke13	That try_into should never fail, right?
2019-10-31 10:30:04	Kinnison	(&mut x as &mut dyn std::io::Read).read(...) perhaps?
2019-10-31 10:30:10	j`ey	assuming the slice is big enough
2019-10-31 10:30:17	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-10-31 10:30:41	wucke13	Good then, thank you
2019-10-31 10:30:58	Lumpio-	No need to do dyn
2019-10-31 10:31:09	Kinnison	true'nuff
2019-10-31 10:31:37	Lumpio-	std::io::Read::read(&mut x, ...)
2019-10-31 10:31:40	Lumpio-	That should work, right?
2019-10-31 10:32:30	Kinnison	Good point, I keep forgetting methods can be called as plain functions too
2019-10-31 10:32:48	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-31 10:34:02	jellie	Ah I see :)
2019-10-31 10:34:08	jellie	I didn't know that Kinnison
2019-10-31 10:35:42	Lumpio-	jellie: You might also be interested in the "use as _" syntax
2019-10-31 10:35:45	Lumpio-	use std::io::Read as _;
2019-10-31 10:35:59	Lumpio-	It doesn't import the trait name but you can still use its methods.
2019-10-31 10:36:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-31 10:47:09	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 10:50:33	jellie	What was that online Rust REPL again? The one that can compile Rust code?
2019-10-31 10:50:58	yrp	play.rust-lang
2019-10-31 10:51:00	yrp	or godbolt
2019-10-31 10:51:01	-->	masonl (~masonl@194-193-202-239.tpgi.com.au) has joined ##rust
2019-10-31 10:54:08	jellie	Do I need smart pointers to do this? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9aea17e4b99d5c97d53445734ecea897
2019-10-31 10:54:19	jellie	I'm trying to read some text into a buffer
2019-10-31 10:55:46	j`ey	well you need to pass in a &mut Vec<u8> if you want to push like that
2019-10-31 10:56:08	j`ey	oh right, this is the Read trait, so you can't
2019-10-31 10:57:21	jellie	Yeah
2019-10-31 10:57:31	jellie	Wondering how I can update a slice
2019-10-31 10:57:37	jellie	or how it's even done
2019-10-31 10:57:47	jellie	I'm not even sure how this actually workd
2019-10-31 10:57:50	jellie	*works
2019-10-31 10:58:05	j`ey	you have to index it
2019-10-31 10:58:07	<--	baali (~baali@59.98.237.91) has quit (Ping timeout: 268 seconds)
2019-10-31 10:58:08	j`ey	buf[i] = foo;
2019-10-31 10:58:09	jellie	So I read from a file and write chunks of it to a buffer, right?
2019-10-31 10:58:38	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 245 seconds)
2019-10-31 10:59:04	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-31 11:01:22	jellie	j`ey: Yeah that worked
2019-10-31 11:01:37	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-31 11:06:32	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-10-31 11:07:20	-->	dexterlb (~dexterlb@qtrp.org) has joined ##rust
2019-10-31 11:09:57	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 240 seconds)
2019-10-31 11:12:17	dexterlb	hello,
2019-10-31 11:12:17	dexterlb	I'm trying to install rustup on an arm-unknown-linux-gnueabihf based debian stretch.
2019-10-31 11:12:17	dexterlb	This is what I'm getting:
2019-10-31 11:12:17	dexterlb	error: could not download file from 'https://static.rust-lang.org/dist/channel-rust-stable.toml.sha256' to '/home/human/.rustup/tmp/nk5z6vrt9etcd3ve_file'
2019-10-31 11:12:17	dexterlb	error: caused by: failed to make network request
2019-10-31 11:12:17	dexterlb	error: caused by: https://static.rust-lang.org/dist/channel-rust-stable.toml.sha256: timed out
2019-10-31 11:12:19	dexterlb	The url is accessible with curl. What might be causing this?
2019-10-31 11:17:50	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-31 11:19:12	wucke13	How can one circumvent the associated type bounds are unstable error?
2019-10-31 11:19:33	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-31 11:23:38	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-10-31 11:33:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-31 11:44:27	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 11:51:56	-->	Mateon2 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-10-31 11:52:49	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-31 11:53:14	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 240 seconds)
2019-10-31 11:53:14	--	Mateon2 is now known as Mateon1
2019-10-31 11:53:50	-->	t7 (~tommo@2a00:23c5:1284:fc00:5083:50b6:744e:412d) has joined ##rust
2019-10-31 12:01:14	<--	libertyprime (~libertypr@118.149.212.14) has quit (Ping timeout: 240 seconds)
2019-10-31 12:02:14	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Remote host closed the connection)
2019-10-31 12:02:23	-->	voidwalker (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-10-31 12:02:46	--	voidwalker is now known as Guest98780
2019-10-31 12:03:35	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-10-31 12:04:11	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-10-31 12:06:38	wucke13	How can I have a trait for Something which takes a generic T with Read and Write?
2019-10-31 12:09:20	steveeJ	wucke13: what do you mean by "having a trait"?
2019-10-31 12:09:37	voker57	impl<T: Read + Write> Something<T>?
2019-10-31 12:11:26	wucke13	No, like this: https://paste.krebsco.de/GMZqrDHG
2019-10-31 12:12:05	steveeJ	wucke13: do you mean like https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=69f79ff24f6e83244479927f616c19b7?
2019-10-31 12:12:10	j`ey	you need: impl<T> X for Y<T>
2019-10-31 12:14:51	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Read error: Connection reset by peer)
2019-10-31 12:14:54	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-31 12:16:24	wucke13	impl MspConnection<T: Read+Write> for MspConn<T: Read+Write>  { ... yields associated type bounds are unstable
2019-10-31 12:16:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-31 12:17:11	j`ey	impl<T> MspConnection for MspConn<T: Read+Write>
2019-10-31 12:17:13	--	__gotcha1 is now known as __gotcha
2019-10-31 12:17:56	steveeJ	wouldn't it be `impl<T: Read+Write> MspConnection for MspConn<T>`?
2019-10-31 12:18:38	wucke13	steveeJ: Ah, that works
2019-10-31 12:18:52	wucke13	However, then the trait always carries arround it's type
2019-10-31 12:19:07	j`ey	steveeJ: yes, I just copied and pasted and didnt change enough D:
2019-10-31 12:19:19	steveeJ	wucke13:  actually the `<T>` should probably go to `MspConnection<T>`
2019-10-31 12:19:39	steveeJ	wucke13: so you're not actually implementing the trait for a concrete type?
2019-10-31 12:19:41	-->	__gotcha1 (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-31 12:19:48	j`ey	wucke13: what do you mean the trait alwasy carries around its type?
2019-10-31 12:19:56	wucke13	Yes?
2019-10-31 12:20:22	wucke13	I want an abstraction layer, where only the trait is part of the type, but not anything related to how the trait is implemented
2019-10-31 12:20:51	steveeJ	wucke13: could you demonstrate the desired usage of it?
2019-10-31 12:21:34	steveeJ	even if there's an error in the definition and/or impl
2019-10-31 12:21:43	wucke13	Yes, sure. Hang on a moment.
2019-10-31 12:22:56	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 276 seconds)
2019-10-31 12:23:06	--	__gotcha1 is now known as __gotcha
2019-10-31 12:23:52	steveeJ	I also have a vague memory of the `new` method you defined won't work, because `-> Self` doesn't have a known size
2019-10-31 12:24:06	steveeJ	so you won't actually be able to use it
2019-10-31 12:24:15	wucke13	https://paste.krebsco.de/juxchasQ
2019-10-31 12:24:24	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 12:24:56	wucke13	I want an abstraction layer for a communication stub. And I don't want to pass arround the concrete type, on which the stub is implemented.
2019-10-31 12:25:18	wucke13	Does the paste make any sense for you?
2019-10-31 12:25:26	<--	karoofish (karoofish@gateway/shell/suchznc/x-dsaytcfdrujmoafa) has quit (Remote host closed the connection)
2019-10-31 12:26:07	j`ey	MspConnect::new() doesnt make sense there
2019-10-31 12:27:32	<--	masonl (~masonl@194-193-202-239.tpgi.com.au) has quit (Ping timeout: 268 seconds)
2019-10-31 12:27:50	j`ey	wucke13: im not sure if you really want new to have a type param in the trait
2019-10-31 12:28:07	wucke13	Ok, I guess I understand
2019-10-31 12:28:21	j`ey	hm lemme try something
2019-10-31 12:28:50	-->	baali (~baali@59.98.237.215) has joined ##rust
2019-10-31 12:29:37	j`ey	new seems to be a bit of a problem, cos I cant see a way to match the T of new with the T of MspConn
2019-10-31 12:30:13	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=aaa9104a3cb6971c8ce9e493c9174f38
2019-10-31 12:32:42	wucke13	So far that looks promising
2019-10-31 12:34:29	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-31 12:36:42	j`ey	this is the problem: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3a93b8d9783ae0c65bbccfed231ef81d
2019-10-31 12:38:23	<--	ytain (~ghfg@2607:f2c0:948e:4000:1aa:1d8:c827:67a2) has quit (Ping timeout: 246 seconds)
2019-10-31 12:44:05	<--	pedro4 (sid145515@gateway/web/irccloud.com/x-wdcxwzkexjjzepph) has quit
2019-10-31 12:45:00	-->	pedro4 (~pedro4@109.202.107.147) has joined ##rust
2019-10-31 12:45:16	<--	baali (~baali@59.98.237.215) has quit (Ping timeout: 240 seconds)
2019-10-31 12:47:34	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-10-31 12:47:45	-->	ytain (~ghfg@2607:f2c0:9292:e000:d8b1:3bc8:62e4:b083) has joined ##rust
2019-10-31 12:49:44	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-31 12:55:16	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-10-31 12:57:10	-->	baali (~baali@59.98.237.215) has joined ##rust
2019-10-31 12:57:14	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-31 12:59:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 13:01:55	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-31 13:04:07	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-10-31 13:06:01	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-10-31 13:12:59	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 276 seconds)
2019-10-31 13:14:15	-->	Singmyr (~Singmyr@c83-253-123-62.bredband.comhem.se) has joined ##rust
2019-10-31 13:17:00	-->	Xatenev (~Xatenev@2a02:8108:9640:4455:843:5395:8d8:75b9) has joined ##rust
2019-10-31 13:19:29	<--	Singmyr (~Singmyr@c83-253-123-62.bredband.comhem.se) has quit (Ping timeout: 276 seconds)
2019-10-31 13:22:12	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-31 13:22:48	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2019-10-31 13:25:37	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 240 seconds)
2019-10-31 13:26:07	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-10-31 13:30:48	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-31 13:31:48	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-10-31 13:33:20	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-10-31 13:36:52	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-10-31 13:37:08	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-10-31 13:39:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 245 seconds)
2019-10-31 13:42:05	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 246 seconds)
2019-10-31 13:43:52	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-31 13:44:35	<--	stux|RC-only (stux@endurance.xzibition.com) has quit (Read error: Connection reset by peer)
2019-10-31 13:46:26	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-10-31 13:46:47	<--	tsaka_ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has quit (Ping timeout: 276 seconds)
2019-10-31 13:46:50	-->	stux|RC-only (stux@endurance.xzibition.com) has joined ##rust
2019-10-31 13:48:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 13:48:37	-->	Ichorio (~Ichorio@2001:16b8:57c6:cf00:e1f5:4894:8159:694a) has joined ##rust
2019-10-31 13:58:22	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-10-31 13:59:16	-->	iq (~iq@2600:100e:bf18:3031:617e:8ef5:d7f8:3780) has joined ##rust
2019-10-31 14:15:23	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-31 14:16:07	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-10-31 14:17:10	--	fotato is now known as bootato
2019-10-31 14:22:57	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-10-31 14:25:14	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-31 14:27:00	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 260 seconds)
2019-10-31 14:27:28	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-31 14:31:48	-->	Singmyr (~Singmyr@c83-253-123-62.bredband.comhem.se) has joined ##rust
2019-10-31 14:33:20	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 14:42:14	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-31 14:42:15	<--	ytain (~ghfg@2607:f2c0:9292:e000:d8b1:3bc8:62e4:b083) has quit (Ping timeout: 250 seconds)
2019-10-31 14:42:39	-->	jenny-m (~jdm-@2605:8d80:6c0:eb62:f9fa:f435:bd47:acb4) has joined ##rust
2019-10-31 14:45:17	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-10-31 14:45:43	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Ping timeout: 250 seconds)
2019-10-31 14:46:29	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-10-31 14:48:18	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-10-31 14:49:56	<--	pknull (~pooky@184.103.126.184) has quit (Remote host closed the connection)
2019-10-31 14:50:36	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-10-31 14:50:59	georgemp	Hi. I'm trying to follow this tutorial here to create C bindings for sqlite3 (http://temp.michaelfbryan.com.s3-website-us-east-1.amazonaws.com/wrap-libmagic/index.html). A gist of my files are here (https://gist.github.com/georgemp/1287e53dde3222bca2ea3ef56527db83). bindgen seems to be generating the C mappings fine (binding.rs in teh OUT_DIR seems to be ok). In this lib.rs, I seem to be able access
2019-10-31 14:51:01	georgemp	the C types as well. But, when I try to use this -sys crate, I don't seem to be able to access the C bound structs (example gist here - https://gist.github.com/georgemp/814d80d6787ae37fe4f9b83e9558db25). would appreciate some pointers..thanks :)
2019-10-31 14:53:38	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Ping timeout: 245 seconds)
2019-10-31 14:54:03	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Ping timeout: 245 seconds)
2019-10-31 14:57:36	-->	mwa (~mwa@unaffiliated/mwa) has joined ##rust
2019-10-31 14:58:59	<--	AbedB__ (~AbedBhuty@bzq-79-176-28-84.red.bezeqint.net) has quit (Remote host closed the connection)
2019-10-31 14:59:27	-->	AbedB__ (~AbedBhuty@bzq-79-176-28-84.red.bezeqint.net) has joined ##rust
2019-10-31 15:00:36	<--	baali (~baali@59.98.237.215) has quit (Ping timeout: 240 seconds)
2019-10-31 15:02:11	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-31 15:06:19	georgemp	hmm..looks like it is finding it. It's just YouCompleteMe in vim not seeing the symbols. 'cargo check/build' works fine
2019-10-31 15:06:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-31 15:09:35	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-31 15:11:53	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-31 15:15:03	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Read error: Connection reset by peer)
2019-10-31 15:15:10	paradoxspiral	Is it intended that the deprecation note is not shown? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0540988714ff477e7dc233f80eea8ef0
2019-10-31 15:15:38	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 15:22:20	<--	pjs902 (~quassel@140.184.2.20) has quit (Ping timeout: 276 seconds)
2019-10-31 15:24:44	<--	Xatenev (~Xatenev@2a02:8108:9640:4455:843:5395:8d8:75b9) has quit (Quit: Leaving.)
2019-10-31 15:27:00	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-31 15:38:30	-->	mindCrime (~mindCrime@216.85.170.145) has joined ##rust
2019-10-31 15:39:32	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-31 15:45:11	georgemp	if anybody is using vim + youcompleteme, any idea on how to get autocomplete to work for external crates?
2019-10-31 15:46:19	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-31 15:52:36	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-10-31 15:52:41	-->	alex-helfet (~alex@cpc68330-cdif16-2-0-cust38.5-1.cable.virginm.net) has joined ##rust
2019-10-31 15:52:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-31 15:53:58	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-31 15:59:03	<--	Windfisc1 (~flo@windfisch.org) has quit (Ping timeout: 268 seconds)
2019-10-31 15:59:27	<--	AbedB__ (~AbedBhuty@bzq-79-176-28-84.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-10-31 16:03:35	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 16:06:51	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-10-31 16:10:02	<--	pedro4 (~pedro4@109.202.107.147) has quit (Quit: Leaving)
2019-10-31 16:12:00	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-10-31 16:19:08	-->	b5509cd (6d9b4522@gateway/web/cgi-irc/kiwiirc.com/ip.109.155.69.34) has joined ##rust
2019-10-31 16:19:13	-->	drewr (~drew@elastic/staff/drewr) has joined ##rust
2019-10-31 16:19:46	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-31 16:26:38	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-10-31 16:29:58	<--	iq (~iq@2600:100e:bf18:3031:617e:8ef5:d7f8:3780) has quit (Quit: Leaving)
2019-10-31 16:33:03	-->	iq (~iq@2600:100e:bf18:3031:617e:8ef5:d7f8:3780) has joined ##rust
2019-10-31 16:37:14	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-31 16:38:56	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-31 16:45:39	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Ping timeout: 264 seconds)
2019-10-31 16:47:59	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 16:55:00	-->	AbedB (~AbedBhuty@bzq-79-176-28-84.red.bezeqint.net) has joined ##rust
2019-10-31 16:58:08	<--	b5509cd (6d9b4522@gateway/web/cgi-irc/kiwiirc.com/ip.109.155.69.34) has quit (Remote host closed the connection)
2019-10-31 16:58:12	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-31 16:58:45	<--	treeshateorcs (~tho@46-198-128-218.static.cyta.gr) has quit (Ping timeout: 250 seconds)
2019-10-31 17:00:09	-->	baali (~baali@59.98.237.215) has joined ##rust
2019-10-31 17:06:39	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Remote host closed the connection)
2019-10-31 17:06:48	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-31 17:12:33	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Remote host closed the connection)
2019-10-31 17:12:52	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-31 17:15:31	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-31 17:16:17	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-10-31 17:17:54	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Remote host closed the connection)
2019-10-31 17:18:41	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-10-31 17:25:50	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-31 17:28:50	<--	alex-helfet (~alex@cpc68330-cdif16-2-0-cust38.5-1.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2019-10-31 17:34:59	<--	scain (~scain@2607:5300:60:233b::1) has quit (Quit: Konversation terminated!)
2019-10-31 17:35:30	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-31 17:35:57	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-10-31 17:36:52	-->	css (~css@unaffiliated/css) has joined ##rust
2019-10-31 17:43:42	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Ping timeout: 265 seconds)
2019-10-31 17:46:27	-->	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has joined ##rust
2019-11-04 11:06:53	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-04 11:06:53	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-04 11:06:53	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-04 11:06:53	--	Channel ##rust: 584 nicks (2 ops, 0 voices, 582 normals)
2019-11-04 11:07:09	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-04 11:08:47	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-04 11:10:47	Flonk	Kinnison, so uh. `mod complex;` inside main.rs works fine. `mod complex;` inside transform.rs does not, it wants me to create a file `transform/complex.rs`. Leaving out `mod complex;` and just `use crate::complex::Complex;` inside transform.rs errors with "unresolved import".
2019-11-04 11:11:40	Kinnison	Flonk: Oh they might need to be `pub mod xxx;` in main.rs, so sibling modules can see them
2019-11-04 11:11:54	Kinnison	Flonk: You definitely don't want the `mod` statements in the other files because that'd imply creating even more modules
2019-11-04 11:16:14	-->	avitex (~avitex@202-153-212-232.ca99d4.syd.nbn.aussiebb.net) has joined ##rust
2019-11-04 11:16:46	avitex	doc.rs seems to be down
2019-11-04 11:18:32	osa1	did you mean docs.rs? it works here
2019-11-04 11:19:20	elichai2	rust doesn't support targets like `mach-davinci` right? http://processors.wiki.ti.com/index.php/DaVinci_GIT_Linux_Kernel#mach-davinci
2019-11-04 11:19:24	elichai2	(it's a subset of arm)
2019-11-04 11:19:25	avitex	Yeah, my bad
2019-11-04 11:19:26	avitex	https://downforeveryoneorjustme.com/docs.rs
2019-11-04 11:19:27	Kinnison	avitex: It was giving errors, but seems to be back now.
2019-11-04 11:19:41	avitex	Just went back up for me :)
2019-11-04 11:19:46	-->	baali (~baali@106.207.182.152) has joined ##rust
2019-11-04 11:20:12	Flonk	Kinnison, ah, that makes sense. I'll try that
2019-11-04 11:20:29	Kinnison	Flonk: Basically you have to think of the crate as the compilation unit, not the individual .rs files
2019-11-04 11:20:59	Kinnison	Flonk: So you only want one way to reach every .rs file via `mod` statements, and then you reach the content of them via `use` statements elsewhere
2019-11-04 11:22:40	<--	avitex (~avitex@202-153-212-232.ca99d4.syd.nbn.aussiebb.net) has quit (Quit: Leaving)
2019-11-04 11:22:50	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-04 11:27:08	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-04 11:28:03	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-04 11:28:05	-->	druidofluhn (~druidoflu@unaffiliated/druid-of-luhn/x-9319639) has joined ##rust
2019-11-04 11:28:47	Flonk	Kinnison, well if you do it right it all works :D thanks!
2019-11-04 11:28:56	Flonk	Now to fix these 1000 other compiler errors.
2019-11-04 11:29:16	-->	avitex (~avitex@202-153-212-232.ca99d4.syd.nbn.aussiebb.net) has joined ##rust
2019-11-04 11:30:07	-->	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has joined ##rust
2019-11-04 11:30:14	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-11-04 11:30:27	 *	Kinnison grins, good luck :D
2019-11-04 11:32:02	tjis	so last week I was at the rust london meetup
2019-11-04 11:32:04	tjis	it was great fun!
2019-11-04 11:32:12	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-04 11:32:28	tjis	one thing though, it was mostly guys. and when I say mostly, I mean that at most 4 people out of like a hundred weren't
2019-11-04 11:32:33	<--	masonl (~masonl@194-193-202-239.tpgi.com.au) has quit (Ping timeout: 246 seconds)
2019-11-04 11:32:44	tjis	is this gender imbalance normal for rust?
2019-11-04 11:33:49	Xatenev	tjis, welcome to IT
2019-11-04 11:34:06	tjis	sure, IT in general has male overrepresentation. but still it's not this bad everywhere
2019-11-04 11:34:19	<--	AbedB_ (~AbedBhuty@173.239.197.23) has quit (Ping timeout: 265 seconds)
2019-11-04 11:34:24	Xatenev	where not?
2019-11-04 11:34:53	tjis	So we talked about it a bit over there, and anecdotally at least, things seem more balanced the closer you get to frontend
2019-11-04 11:35:21	Xatenev	which is fairly obvious isn't it?
2019-11-04 11:35:25	tjis	howso?
2019-11-04 11:35:57	Xatenev	meh its ot for ##rust, I can explain in PM if you like.
2019-11-04 11:36:30	j`ey	elichai2: targetting arm might just work, depends what of a subset it is
2019-11-04 11:36:31	 *	Kinnison generally finds that early meetups which aren't actively trying to rebalance end up skewed toward CHWM but Rust as a community tries to be as inclusive as possible, so here's hoping as Rust London continues, it'll rebalance naturally
2019-11-04 11:36:35	-->	delYsid (~user@debian/developer/mlang) has joined ##rust
2019-11-04 11:36:41	tjis	CHWM?
2019-11-04 11:36:46	<--	delYsid (~user@debian/developer/mlang) has left ##rust
2019-11-04 11:36:52	j`ey	cis het white males
2019-11-04 11:37:08	-->	delYsid (~user@debian/developer/mlang) has joined ##rust
2019-11-04 11:37:09	j`ey	Kinnison: youre in the UK right?
2019-11-04 11:37:18	 *	Kinnison is
2019-11-04 11:37:28	felix34	yrp: Kinnison hmm, ok. I tried to simplify things and now the JSON won't even decode. Can you see anything wrong with this? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=32ddc2340fb1086097d3f2023b55722a
2019-11-04 11:37:46	delYsid	anyone using termion?
2019-11-04 11:38:02	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Remote host closed the connection)
2019-11-04 11:38:40	elichai2	j`ey: linux kernel has it's own dir of declaration for it but even glibc has nothing with that name. so i'm not even sure glibc supports it lol
2019-11-04 11:39:06	j`ey	oh :-)
2019-11-04 11:39:16	Kinnison	felix34: Your enum variant (Message::Data) won't serialise to [1]
2019-11-04 11:40:04	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-04 11:40:05	felix34	Kinnison: Making it Data(Vec<u32>) doesn't help ...
2019-11-04 11:40:15	j`ey	it has to have a type field
2019-11-04 11:40:26	j`ey	felix34: why dont you serialise it first and look at the output
2019-11-04 11:40:33	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-04 11:40:53	j`ey	(or maybe it doesnt need a type field, but see what it serialises too!)
2019-11-04 11:40:58	Kinnison	That variant serializes as: {"Data":1}
2019-11-04 11:41:14	Kinnison	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f540da2fe3a10d3fcdb24d06ada37e85
2019-11-04 11:41:42	felix34	Kinnison: hit the "share" button toi refresh the link, that's same as mine
2019-11-04 11:41:57	felix34	wait no, lol
2019-11-04 11:42:04	Kinnison	I did :D
2019-11-04 11:42:12	felix34	visually simimlar hashes :/
2019-11-04 11:42:42	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-04 11:43:03	Lumpio-	I feel very unwelcome being described by acronyms such as "CHWM"
2019-11-04 11:43:03	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-11-04 11:43:25	Kinnison	Lumpio-: that was not my intention, sorry.
2019-11-04 11:43:36	j`ey	Lumpio-: CHWM & Lumps
2019-11-04 11:43:49	j`ey	(bad joke)
2019-11-04 11:43:52	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-04 11:45:04	felix34	Kinnison: whoa, but I though tthe whole point was to handle different message types? https://serde.rs/enum-representations.html
2019-11-04 11:45:43	 *	Kinnison isn't a serde expert sorry :(
2019-11-04 11:45:56	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Remote host closed the connection)
2019-11-04 11:46:10	Lumpio-	felix34 you're probably looking for #[serde(untagged)]
2019-11-04 11:46:10	j`ey	what do you mean?
2019-11-04 11:46:17	Lumpio-	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4a3a134aa29827ca0353f2a6749b2d46
2019-11-04 11:46:35	felix34	Lumpio-: woops, I was indeed
2019-11-04 11:47:14	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-04 11:48:21	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-11-04 11:48:47	<--	narispo (~narispo@2a01:e0a:2a2:1590:c0bf:8236:17f3:2dfb) has quit (Ping timeout: 276 seconds)
2019-11-04 11:50:27	felix34	Lumpio-: is there any way to make this version work, where the data is deserialized from an array into a named struct? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7268dddb9bf5599bc82d09a8b9a295e7
2019-11-04 11:51:26	-->	narispo (~narispo@37.165.27.199) has joined ##rust
2019-11-04 11:51:54	Lumpio-	Data(u32, u32) would work directly
2019-11-04 11:52:34	Lumpio-	If you really want the named values but an array in JSON you would implement Serialize/Deserialize manually
2019-11-04 11:52:43	Lumpio-	Or use this https://crates.io/crates/serde_tuple
2019-11-04 11:52:45	<--	baali (~baali@106.207.182.152) has quit (Read error: Connection reset by peer)
2019-11-04 11:52:54	<--	narispo (~narispo@37.165.27.199) has quit (Client Quit)
2019-11-04 11:57:15	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-11-04 11:58:18	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-04 12:03:18	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 12:03:46	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-11-04 12:04:49	-->	con3|2 (~kvirc@154.119.40.183) has joined ##rust
2019-11-04 12:05:08	<--	avitex (~avitex@202-153-212-232.ca99d4.syd.nbn.aussiebb.net) has quit (Quit: Leaving)
2019-11-04 12:06:07	-->	AbedB_ (~AbedBhuty@173.239.197.23) has joined ##rust
2019-11-04 12:07:29	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 264 seconds)
2019-11-04 12:10:16	<--	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has quit (Ping timeout: 264 seconds)
2019-11-04 12:10:49	-->	ravenousmoose (~ravenousm@ptr-cud5aqft7kmyxenjv2m.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-04 12:15:29	-->	baali (~baali@59.98.234.98) has joined ##rust
2019-11-04 12:16:05	<--	ravenousmoose (~ravenousm@ptr-cud5aqft7kmyxenjv2m.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 276 seconds)
2019-11-04 12:25:33	<--	rrooij (~rrooij@terminusdb/developer/rrooij) has quit (Ping timeout: 265 seconds)
2019-11-04 12:29:52	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-04 12:30:17	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-04 12:31:38	--	urbanslug is now known as jellie
2019-11-04 12:32:34	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-04 12:35:15	<--	rrooij (~rrooij@terminusdb/developer/rrooij) has quit (Ping timeout: 240 seconds)
2019-11-04 12:37:25	-->	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has joined ##rust
2019-11-04 12:42:05	<--	bytedude (~user@2a02:c7d:4850:1500:2997:8e5e:c3d9:952) has quit (Ping timeout: 276 seconds)
2019-11-04 12:44:53	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-04 12:45:16	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-04 12:47:34	-->	bytedude (~user@2.222.74.142) has joined ##rust
2019-11-04 12:48:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-04 12:48:50	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-04 12:49:24	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-11-04 12:53:16	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-04 12:55:52	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-04 12:59:31	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-11-04 13:02:50	felix34	Lumpio-: hmm, but hwo do I access the internal values of an enum tuple? .0 doesn't work either: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=039d74691a6ef9345c2b834e1d9d0ace
2019-11-04 13:03:13	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 13:03:41	j`ey	I dont think you can do it like that
2019-11-04 13:03:45	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-04 13:03:55	j`ey	felix34: there m: Message, not m: MEssage::Data
2019-11-04 13:04:06	felix34	j`ey: yeah, I figured as much
2019-11-04 13:04:19	felix34	is there no way to access what's stored in the enum?
2019-11-04 13:04:25	j`ey	there is
2019-11-04 13:04:29	felix34	without destructuring the enum in the match arms, I mean
2019-11-04 13:04:44	j`ey	why dont you want to desugar in the match arms?
2019-11-04 13:04:56	felix34	it seems silly to have the internal structure in 2 different places of the codebase, what if things change?
2019-11-04 13:05:19	j`ey	youure still calling it with .0
2019-11-04 13:05:40	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-04 13:05:40	felix34	ideally I would do something like Data(DataStruct) so I can do Message::Data(d) => d.0
2019-11-04 13:05:55	j`ey	yes, do that :)
2019-11-04 13:06:01	felix34	j`ey: well eventually m would get passed to some other function that does .0
2019-11-04 13:06:08	j`ey	Message::Data(m0, ..) also works
2019-11-04 13:06:34	felix34	j`ey: so serde will automatically deserialize into the internal DataStruct?
2019-11-04 13:07:18	j`ey	assuming it has a Deserialiser for it, it should do
2019-11-04 13:07:46	j`ey	but im not a pro@serde, and I dunno how it works with untagged
2019-11-04 13:08:40	felix34	j`ey: ah yeah, that worked brilliantly: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=00e226c597b3d33af5d991b792a74de3
2019-11-04 13:08:49	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=43e47864b0af4f7c747cd1bb9bfe0288
2019-11-04 13:08:52	j`ey	heh
2019-11-04 13:15:05	felix34	Lumpio-: it looks like serde_tuple has been included in base, as doing it with a named struct works too: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7b0feba2f58ebecace4a501f434d1f2b
2019-11-04 13:15:23	felix34	which is really nice
2019-11-04 13:17:11	-->	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has joined ##rust
2019-11-04 13:17:33	j`ey	it seems like it uses the order of the enum, in case of ambiguity
2019-11-04 13:21:08	<--	AbedB_ (~AbedBhuty@173.239.197.23) has quit (Ping timeout: 265 seconds)
2019-11-04 13:22:50	<--	KeyJoo (~KeyJoo@83.220.181.139) has quit (Quit: KeyJoo)
2019-11-04 13:23:05	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-11-04 13:23:51	-->	netopso (~user@cloud608804.fastpipe.io) has joined ##rust
2019-11-04 13:26:20	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-04 13:30:49	<--	cdown (~cdown@89.32.122.5) has quit (Remote host closed the connection)
2019-11-04 13:34:23	-->	cdown (~cdown@89.32.122.5) has joined ##rust
2019-11-04 13:34:30	<--	con3|2 (~kvirc@154.119.40.183) has quit (Read error: Connection reset by peer)
2019-11-04 13:44:15	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-04 13:47:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-04 13:47:43	<--	jacob (~jacobirc@unaffiliated/jacob) has quit (Ping timeout: 265 seconds)
2019-11-04 13:49:43	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-04 13:50:22	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-04 13:51:14	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 240 seconds)
2019-11-04 13:51:35	--	Coldblackice is now known as Guest59428
2019-11-04 13:51:36	<--	Guest59428 (~c@unaffiliated/coldblackice) has quit (Killed (tolkien.freenode.net (Nickname regained by services)))
2019-11-04 13:51:36	--	Coldblackice_ is now known as Coldblackice
2019-11-04 13:54:36	-->	rustacean (~whateverg@122.11.163.197) has joined ##rust
2019-11-04 14:02:51	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 14:03:40	<--	bytedude (~user@2.222.74.142) has quit (Ping timeout: 265 seconds)
2019-11-04 14:05:22	-->	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has joined ##rust
2019-11-04 14:10:35	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-04 14:10:55	<--	baali (~baali@59.98.234.98) has quit (Ping timeout: 265 seconds)
2019-11-04 14:12:44	-->	bytedude (~user@2a02:c7d:4850:1500:5436:4cc:126c:3a22) has joined ##rust
2019-11-04 14:15:56	-->	jacob (~jacobirc@unaffiliated/jacob) has joined ##rust
2019-11-04 14:16:03	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-04 14:17:10	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-11-04 14:17:20	<--	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has quit (Remote host closed the connection)
2019-11-04 14:17:48	-->	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has joined ##rust
2019-11-04 14:18:27	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-04 14:18:29	--	cdown_ is now known as cdown
2019-11-04 14:21:04	-->	lauromoura (~lauromour@2804:7f5:f380:c290:397c:8d7f:929:b5c8) has joined ##rust
2019-11-04 14:26:30	<--	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has quit (Ping timeout: 246 seconds)
2019-11-04 14:28:04	<--	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has quit (Ping timeout: 268 seconds)
2019-11-04 14:34:55	-->	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has joined ##rust
2019-11-04 14:36:13	-->	iq (~iq@2600:1000:be08:1f1b:ee80:303c:7434:c10e) has joined ##rust
2019-11-04 14:44:16	<--	rustacean (~whateverg@122.11.163.197) has quit (Ping timeout: 265 seconds)
2019-11-04 14:49:03	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-11-04 14:49:17	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-04 14:50:54	<--	bytedude (~user@2a02:c7d:4850:1500:5436:4cc:126c:3a22) has quit (Remote host closed the connection)
2019-11-04 14:51:24	-->	bytedude (~user@2a02:c7d:4850:1500:5436:4cc:126c:3a22) has joined ##rust
2019-11-04 14:51:40	-->	ytain (~ghfg@2607:f2c0:95af:4500:4585:4101:a78a:1659) has joined ##rust
2019-11-04 14:53:26	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-11-04 14:53:45	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-04 14:56:21	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 265 seconds)
2019-11-04 14:59:09	-->	aljama (~quassel@unaffiliated/aljama) has joined ##rust
2019-11-04 15:04:53	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 15:07:17	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-04 15:10:00	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Ping timeout: 268 seconds)
2019-11-04 15:10:18	-->	mxco86_ (~mxco86@cpc151835-shef17-2-0-cust77.17-1.cable.virginm.net) has joined ##rust
2019-11-04 15:10:37	-->	AbedB_ (~AbedBhuty@45.135.184.14) has joined ##rust
2019-11-04 15:11:28	<--	Ichorio_ (~Ichorio@2001:16b8:57c9:4700:2059:2c55:dad7:53fa) has quit (Ping timeout: 264 seconds)
2019-11-04 15:14:28	<--	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has quit (Ping timeout: 264 seconds)
2019-11-04 15:14:50	-->	AbedB__ (~AbedBhuty@46.244.29.51) has joined ##rust
2019-11-04 15:16:37	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-04 15:17:08	<--	AbedB_ (~AbedBhuty@45.135.184.14) has quit (Ping timeout: 265 seconds)
2019-11-04 15:17:37	-->	AbedB_ (~AbedBhuty@45.135.184.14) has joined ##rust
2019-11-04 15:17:38	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Ping timeout: 252 seconds)
2019-11-04 15:18:07	<--	AbedB__ (~AbedBhuty@46.244.29.51) has quit (Read error: Connection reset by peer)
2019-11-04 15:20:12	-->	AbedB__ (~AbedBhuty@85.203.22.38) has joined ##rust
2019-11-04 15:20:40	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-04 15:21:01	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-04 15:24:23	<--	AbedB_ (~AbedBhuty@45.135.184.14) has quit (Ping timeout: 265 seconds)
2019-11-04 15:24:51	-->	AbedB_ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has joined ##rust
2019-11-04 15:25:51	-->	KeyJoo (~KeyJoo@83.220.181.139) has joined ##rust
2019-11-04 15:26:32	<--	AbedB__ (~AbedBhuty@85.203.22.38) has quit (Ping timeout: 276 seconds)
2019-11-04 15:27:02	-->	AbedB__ (~AbedBhuty@176.53.118.93) has joined ##rust
2019-11-04 15:29:47	<--	AbedB_ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has quit (Ping timeout: 276 seconds)
2019-11-04 15:30:49	-->	AbedB_ (~AbedBhuty@154.70.153.190) has joined ##rust
2019-11-04 15:34:20	<--	AbedB__ (~AbedBhuty@176.53.118.93) has quit (Ping timeout: 276 seconds)
2019-11-04 15:34:25	<--	AbedB_ (~AbedBhuty@154.70.153.190) has quit (Read error: Connection reset by peer)
2019-11-04 15:34:48	-->	AbedB_ (~AbedBhuty@85.203.22.38) has joined ##rust
2019-11-04 15:37:29	-->	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has joined ##rust
2019-11-04 15:39:32	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 276 seconds)
2019-11-04 15:41:45	<--	AbedB_ (~AbedBhuty@85.203.22.38) has quit (Read error: Connection reset by peer)
2019-11-04 15:42:33	-->	AbedB_ (~AbedBhuty@185.212.171.61) has joined ##rust
2019-11-04 15:45:47	<--	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has quit (Ping timeout: 268 seconds)
2019-11-04 15:45:52	-->	smurfendrek123 (~smurfendr@193.190.253.144) has joined ##rust
2019-11-04 15:46:44	-->	AbedB__ (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has joined ##rust
2019-11-04 15:47:17	elichai2	For somereason I can't find a reference that says that rust *doesn't* support platforms with non IEEE-754 floating points
2019-11-04 15:47:30	elichai2	I know it's UB. but can't find it in any of the official docs
2019-11-04 15:47:53	Yaniel	do the avr targets support floats at all?
2019-11-04 15:47:59	<--	AbedB_ (~AbedBhuty@185.212.171.61) has quit (Ping timeout: 250 seconds)
2019-11-04 15:52:49	-->	david2_ (~david2@212-186-25-215.cable.dynamic.surfer.at) has joined ##rust
2019-11-04 15:53:12	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-11-04 15:53:38	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-04 15:54:00	elichai2	Yaniel: there is soft-float support
2019-11-04 15:56:05	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-04 16:00:04	<--	bytedude (~user@2a02:c7d:4850:1500:5436:4cc:126c:3a22) has left ##rust ("ERC (IRC client for Emacs 26.1)")
2019-11-04 16:02:57	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Ping timeout: 240 seconds)
2019-11-04 16:04:21	-->	baali (~baali@59.98.234.98) has joined ##rust
2019-11-04 16:07:25	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-04 16:09:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 16:09:49	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-04 16:09:57	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 240 seconds)
2019-11-04 16:12:01	-->	rubdos (~rubdos@2a02:578:859d:700:8b44:5716:382d:a7da) has joined ##rust
2019-11-04 16:12:09	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-04 16:14:45	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 268 seconds)
2019-11-04 16:20:24	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-04 16:21:27	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-04 16:25:51	-->	smurfendrek123 (~smurfendr@193.190.253.144) has joined ##rust
2019-11-04 16:29:50	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-04 16:35:56	-->	pedro4 (sid145515@gateway/web/irccloud.com/x-nkdwwgzactkrpkop) has joined ##rust
2019-11-04 16:41:17	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 268 seconds)
2019-11-04 16:49:16	<--	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has quit (Ping timeout: 264 seconds)
2019-11-04 16:51:23	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 265 seconds)
2019-11-04 16:55:52	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 264 seconds)
2019-11-04 16:56:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-11-04 16:56:41	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-04 16:58:59	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-04 17:01:01	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 268 seconds)
2019-11-04 17:02:53	<--	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has quit (Quit: バイバイ！ (^_^)/~)
2019-11-04 17:03:17	<--	Baughn (~Baughn@2a01:4f9:2b:808:1::1) has quit (Ping timeout: 245 seconds)
2019-11-04 17:04:38	-->	Baughn (~Baughn@madoka.brage.info) has joined ##rust
2019-11-04 17:08:27	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-11-04 17:08:53	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-04 17:10:18	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 246 seconds)
2019-11-04 17:11:18	<--	dan2wik (dan2wik@unaffiliated/dan2wik) has quit (Quit: quit has dan2wik!)
2019-11-04 17:11:19	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-04 17:15:08	-->	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has joined ##rust
2019-11-04 17:17:20	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-04 17:22:22	<--	druidofluhn (~druidoflu@unaffiliated/druid-of-luhn/x-9319639) has quit (Quit: WeeChat 1.9.1)
2019-11-04 17:23:48	-->	dan2wik (dan2wik@unaffiliated/dan2wik) has joined ##rust
2019-11-04 17:25:04	madprops	how can i slice a string even if it's not long enough like s[..10] on a 5 char string?
2019-11-04 17:25:41	j`ey	something with max(len, 10)
2019-11-04 17:25:46	j`ey	or min rather
2019-11-04 17:27:05	Lumpio-	Note: string slicing is by bytes, not chars
2019-11-04 17:28:11	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-11-04 17:29:35	<--	matthias_bgg (~mbgg@37.223.137.234) has quit (Quit: Leaving)
2019-11-04 17:30:04	<--	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has quit (Remote host closed the connection)
2019-11-04 17:30:23	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-11-04 17:38:38	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-04 17:38:38	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-04 17:38:38	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-04 17:38:38	--	Channel ##rust: 586 nicks (2 ops, 0 voices, 584 normals)
2019-11-04 17:38:53	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-04 17:43:43	<--	jenny-m (~jdm-@167.100.78.229) has quit (Quit: Leaving...)
2019-11-04 17:48:04	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-11-04 17:51:39	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Quit: Leaving)
2019-11-04 17:52:25	-->	sfink (~chatzilla@107-207-38-202.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-11-04 17:53:43	<--	jinie (~jimmy@188.114.159.27) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-11-04 17:53:44	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-11-05 09:04:51	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-05 09:04:51	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-05 09:04:51	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-05 09:04:51	--	Channel ##rust: 594 nicks (2 ops, 0 voices, 592 normals)
2019-11-05 09:05:07	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-05 09:10:59	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-11-05 09:11:56	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-05 09:15:36	<--	lauromoura (~lauromour@2804:7f5:f380:c290:397c:8d7f:929:b5c8) has quit (Ping timeout: 246 seconds)
2019-11-05 09:21:37	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 240 seconds)
2019-11-05 09:22:22	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-11-05 09:34:44	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-05 09:38:57	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-05 09:42:36	-->	maelcum (~horst@2001:16b8:5c87:6300:ba:af4a:2ecc:799f) has joined ##rust
2019-11-05 09:44:27	<--	baali (~baali@59.98.234.98) has quit (Ping timeout: 240 seconds)
2019-11-05 09:49:04	<--	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has quit (Ping timeout: 260 seconds)
2019-11-05 09:53:17	<--	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 09:54:10	-->	baali (~baali@59.98.233.150) has joined ##rust
2019-11-05 09:54:51	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 09:56:05	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 276 seconds)
2019-11-05 10:00:57	<--	hexfive (~hexfive@50.35.80.237) has quit (Ping timeout: 240 seconds)
2019-11-05 10:01:57	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Ping timeout: 240 seconds)
2019-11-05 10:03:41	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-05 10:07:29	Flonk	Moongoodgirl, I'd need a Rust for Haskellers
2019-11-05 10:07:33	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-11-05 10:07:49	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-11-05 10:10:16	Flonk	Moongoodgirl, typically a monad is a type wrapped in another type, like Option<T> in rust. Being a monads means having a way of turning an Option<Option<T>> into a single Option<T>. More or less.
2019-11-05 10:11:20	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Quit: https://i.imgur.com/xacQ09F.mp4)
2019-11-05 10:13:31	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-05 10:13:35	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-05 10:13:49	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-05 10:15:37	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-05 10:15:39	Flonk	Monads also know composition, so a function `Option<A> -> Option<B>` and a `Option<B> -> Option<C>` can be made into a `Option<A> -> Option<C>`
2019-11-05 10:16:00	Flonk	Anyway if you substitute T for Vec and M for Option in the sequence function above, you'd get a Vec<Option<T>> -> Option<Vec<T>> that type pretty much tells you what the function does
2019-11-05 10:16:16	Flonk	*and that type..
2019-11-05 10:16:35	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Quit: leaving)
2019-11-05 10:17:56	Kinnison	IIRC we don't have sufficient HKT to do that kind of thing with ease, though you'll find a lot of useful transformations occur in things like .collect() on iterators
2019-11-05 10:18:08	Flonk	Sorry I got the composition wrong. A -> Option<B> and B -> Option<C> can be composed to A -> Option<C>.
2019-11-05 10:18:11	Kinnison	e.g. you can collect an interator of Option<T> into an Option<Vec<T>
2019-11-05 10:19:27	Kinnison	While we don't have function composition per-se, if you have an Option<B> and a FnOnce(B) -> Option<C>, then you can .and_then() with it
2019-11-05 10:19:44	Kinnison	There are a lot of things *close* to what you're talking about, just not exactly it :D
2019-11-05 10:19:55	Flonk	Ah, and_then is basically monadic composition :P
2019-11-05 10:20:15	Kinnison	Remember, there's a lot of FP influence in Rust :D
2019-11-05 10:20:59	Flonk	I've noticed and I love it :D
2019-11-05 10:21:09	Kinnison	yay :D
2019-11-05 10:30:36	netopso	Is there a Rust equivalent of Python's threading.Event, where multiple threads can wait on the Event until some thread triggers the Event by calling .set()?
2019-11-05 10:30:54	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-11-05 10:31:43	netopso	The closest I see is std::sync::Condvar, but that incorporates a mutex and a boolean as well, I just want to .wait_until() and .notify_all()
2019-11-05 10:32:21	netopso	Are the Rust crabs going to eat me if I just use the wait_until and notify_all methods and ignore the rest?
2019-11-05 10:35:00	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-05 10:36:10	<--	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has quit (Ping timeout: 265 seconds)
2019-11-05 10:37:55	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-05 10:37:55	vorner	You might want a channel with () as the payload.
2019-11-05 10:38:24	netopso	vorner: mpsc channels only permit one consumer, I want multiple consumers
2019-11-05 10:38:31	netopso	but yes, that would do nicely
2019-11-05 10:42:11	faern	There are multi consumer channels in crossbeam-channel if that's what you are actually after.
2019-11-05 10:42:27	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-05 10:42:36	faern	Do you want all threads waiting on the event to react to the event, or just one?
2019-11-05 10:43:07	netopso	faern: yes, all waiters should react simultaneously
2019-11-05 10:43:55	netopso	faern: crossbeam looks like a pretty big dependency to add if all I want is a channel :/
2019-11-05 10:44:59	netopso	but looks like it will get the job done, so thanks!
2019-11-05 10:45:36	faern	netopso: tokio::sync::watch from the tokio 0.2 branch seems to do exactly what you want as well.
2019-11-05 10:45:43	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 245 seconds)
2019-11-05 10:45:51	faern	But you probably don't want to pull that in unless the rest of your application is also tokio 0.2 based
2019-11-05 10:46:04	netopso	faern: no, no tokio in it yet
2019-11-05 10:46:45	faern	netopso: I think the crossbeam-channel channels are just handing the value out to one consumer though? It's a race between all threads blocking on the recv call
2019-11-05 10:47:11	netopso	faern: good call, yes, looks like tokio::sync::watch is necessary
2019-11-05 10:47:24	netopso	I see it's also in tolio 0.1.2?
2019-11-05 10:47:27	Kinnison	While it's a smidge ugly, construct an RWLock, have the sync thread take a write lock, then hand it out, have all the waiter threads try and take a read lock, they'll block until the sync thread unlocks, at which point they'll all take a read lock and get going (they can drop the read lock immediately if they want)
2019-11-05 10:47:40	-->	KeyJoo (~KeyJoo@83.220.181.139) has joined ##rust
2019-11-05 10:48:00	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-05 10:49:35	netopso	Kinnison: hmm, that might actually work in this particular case, since it's about ensuring that one thread can block other threads while the first thread is waiting to update some shared data
2019-11-05 10:50:04	 *	Kinnison <- Abusing RWLock for fun and profit
2019-11-05 10:52:44	<--	guardian (~guardian@planet-d.net) has quit (Remote host closed the connection)
2019-11-05 10:53:06	netopso	irocnically it ends up being *less* ugly than the original solution
2019-11-05 10:53:49	 *	Kinnison uses RWLock to protect the `rustup` test suite from problems where FDs are held open by sibling tests causing other tests to fail :D
2019-11-05 10:59:14	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 10:59:34	j`ey	Kinnison: a 'global' rwlock?
2019-11-05 11:00:52	<--	hussam (uid193284@gateway/web/irccloud.com/x-hzkvrodzjpssfncl) has quit (Quit: Connection closed for inactivity)
2019-11-05 11:01:25	Kinnison	j`ey: It's disgusting but it works: https://github.com/rust-lang/rustup.rs/blob/master/tests/mock/clitools.rs#L404
2019-11-05 11:02:28	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 264 seconds)
2019-11-05 11:03:24	j`ey	what files do the tests have in common?
2019-11-05 11:04:51	<--	jamm (~jamm@unaffiliated/jamm) has quit (Remote host closed the connection)
2019-11-05 11:05:02	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-05 11:05:06	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-05 11:05:22	Kinnison	The problem is the FDs associated with the copies of the `rustup-init` binary they make
2019-11-05 11:06:36	<--	jamm (~jamm@unaffiliated/jamm) has quit (Remote host closed the connection)
2019-11-05 11:06:53	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-05 11:12:08	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-11-05 11:12:43	-->	AbedB_ (~AbedBhuty@45.56.154.162) has joined ##rust
2019-11-05 11:13:10	-->	hussam (uid193284@gateway/web/irccloud.com/x-qbrttqxbboaqorcw) has joined ##rust
2019-11-05 11:16:15	<--	AbedB (~AbedBhuty@bzq-79-182-6-9.red.bezeqint.net) has quit (Ping timeout: 250 seconds)
2019-11-05 11:16:44	<--	KeyJoo (~KeyJoo@83.220.181.139) has quit (Quit: KeyJoo)
2019-11-05 11:21:03	<--	the_ment (~thement@ibawizard.net) has quit (Quit: eof)
2019-11-05 11:22:59	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-05 11:26:19	netopso	Kinnison: after further study I will probably end up using a crossbeam-channel, and treating the RecvError condition on channel destruction as the globally-broadcast event :/
2019-11-05 11:27:55	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 268 seconds)
2019-11-05 11:29:57	-->	the_ment (~thement@ibawizard.net) has joined ##rust
2019-11-05 11:30:28	Kinnison	:D
2019-11-05 11:30:57	<--	Moyst (~moyst@212-149-213-144.bb.dnainternet.fi) has quit (Ping timeout: 240 seconds)
2019-11-05 11:32:38	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-11-05 11:33:48	-->	Moyst (~moyst@212-149-213-144.bb.dnainternet.fi) has joined ##rust
2019-11-05 11:34:14	<--	mpereira (~mpereira@2a02:8108:4640:5518:35c6:93b2:450:f01a) has quit (Ping timeout: 276 seconds)
2019-11-05 11:34:20	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-11-05 11:43:07	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-11-05 11:44:04	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-05 11:48:57	<--	rustacean (~whateverg@111.65.44.146) has quit (Ping timeout: 240 seconds)
2019-11-05 11:49:03	-->	fanta1 (~fanta1@p200300F76BC3360039F9B0488A4C2BA5.dip0.t-ipconnect.de) has joined ##rust
2019-11-05 11:51:47	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 276 seconds)
2019-11-05 11:52:32	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-11-05 11:55:17	-->	ragecryx (~ragecryx@ppp-94-66-145-187.home.otenet.gr) has joined ##rust
2019-11-05 11:56:12	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-05 11:56:23	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-05 11:59:07	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-05 11:59:21	Flonk	Is there a reason why for example `struct Tagged<T>(i32);` errors and I have to use PhantomData? It seems a bit hacky, I dunno.
2019-11-05 11:59:22	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 11:59:54	vorner	netopso, Wouldn't this one also work for you? If you knew the number of the receivers up-front https://doc.rust-lang.org/stable/std/sync/struct.Barrier.html
2019-11-05 12:00:32	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-05 12:01:36	j`ey	Flonk: http://troubles.md/posts/why-phantomdata/ although that example is basically identical to the first one in this blog
2019-11-05 12:01:41	j`ey	so wondering if you have read it already?
2019-11-05 12:03:37	Flonk	No I haven't
2019-11-05 12:03:39	Flonk	Lemme give it a read!
2019-11-05 12:04:00	Flonk	Common pattern I guess :)
2019-11-05 12:06:19	<--	Jezza__ (~Ichorio@2001:16b8:578e:3f00:f052:4961:efd9:115f) has quit (Read error: Connection reset by peer)
2019-11-05 12:06:38	-->	Jezza__ (~Ichorio@2001:16b8:578e:3f00:f052:4961:efd9:115f) has joined ##rust
2019-11-05 12:07:01	-->	masonl (~masonl@203-219-16-22.tpgi.com.au) has joined ##rust
2019-11-05 12:08:43	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 12:10:05	ivan	is 'goto definition' for things outside the current crate supposed to work in rust-analyzer?
2019-11-05 12:12:50	ivan	(I am using Sublime Text 3 / LSP and it doesn't seem to)
2019-11-05 12:14:51	Flonk	j`ey, hmmm
2019-11-05 12:15:54	<--	sonar235 (~sonar235@193.148.18.251) has quit (Quit: leaving)
2019-11-05 12:16:17	Flonk	couldn't we have `Tagged<T: Covariant>(i32)` and `Tagged<T: Contravariant>(i32)` or something.
2019-11-05 12:16:34	Flonk	I dunno. I guess the way rust did it makes sense but it's still a bit odd.
2019-11-05 12:17:02	j`ey	would need some compiler stuff for that, but ye
2019-11-05 12:18:17	<--	ragecryx (~ragecryx@ppp-94-66-145-187.home.otenet.gr) has quit (Ping timeout: 240 seconds)
2019-11-05 12:18:28	osa1	how do I implement unions when writing FFI bindings to a C library?
2019-11-05 12:18:59	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-05 12:19:07	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-05 12:20:18	Lumpio-	By using unions I guess
2019-11-05 12:25:19	-->	asocha (~asocha@public-gprs370195.centertel.pl) has joined ##rust
2019-11-05 12:33:21	osa1	I have `links = "tinfo"` in my Cargo.toml but cargo still doesn't pass a -ltinfo when building examples, any ideas?
2019-11-05 12:35:05	j`ey	"This manifest states that the package links to the libfoo native library, and it also has a build script for locating and/or building the library."
2019-11-05 12:35:14	j`ey	it sounds like links is metadata, and not a directive
2019-11-05 12:36:07	faern	Yup. In Cargo.toml it's only for pointing out to cargo that it will link there.
2019-11-05 12:36:18	faern	You have to emit the proper linking args from build.rs to actually make it link.
2019-11-05 12:36:20	faern	It's a bit messy
2019-11-05 12:36:30	osa1	OK, how do I actually pass `-ltinfo` to the c compiler then?
2019-11-05 12:36:34	osa1	I'm using the cc crate
2019-11-05 12:36:52	osa1	ah hmm
2019-11-05 12:36:59	faern	osa1: Like this: https://github.com/mullvad/mnl-rs/blob/master/mnl-sys/build.rs#L22-L23
2019-11-05 12:36:59	osa1	it doesn't make sense to do this in build.rs
2019-11-05 12:37:03	osa1	not sure where to do it though
2019-11-05 12:37:26	faern	osa1: You just need to make build.rs print "cargo:rustc-link-lib=<name of lib>" basically.
2019-11-05 12:37:37	faern	For the `-l<lib>` part
2019-11-05 12:37:58	osa1	that worked, thanks
2019-11-05 12:39:27	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 268 seconds)
2019-11-05 12:39:34	osa1	segfault, nice
2019-11-05 12:40:28	j`ey	C :P
2019-11-05 12:41:19	osa1	makes me feel alive
2019-11-05 12:45:03	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-05 12:47:08	-->	ragecryx (~ragecryx@2a02:2149:822f:2b00:7d1e:da0d:eb8:2ea) has joined ##rust
2019-11-05 12:47:55	<--	ragecryx (~ragecryx@2a02:2149:822f:2b00:7d1e:da0d:eb8:2ea) has quit (Remote host closed the connection)
2019-11-05 12:52:14	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 12:54:03	<--	masonl (~masonl@203-219-16-22.tpgi.com.au) has quit (Ping timeout: 240 seconds)
2019-11-05 12:54:11	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-05 12:55:12	-->	qyliss (~qyliss@NixOS/user/qyliss) has joined ##rust
2019-11-05 12:59:54	la_mettrie	I'm trying to figure out the syntax for having a HashMap (with both types being Strings) in a struct and then getting a value out of that HashMap by using a pre-declared variable.  https://pastebin.com/raw/hsnPAanZ
2019-11-05 13:00:07	<--	qyliss (~qyliss@NixOS/user/qyliss) has left ##rust ("WeeChat 2.6")
2019-11-05 13:00:08	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-05 13:00:41	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-05 13:01:18	la_mettrie	(correction to the paste: interfaceobj & iface are the same var)
2019-11-05 13:01:20	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-11-05 13:02:35	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Read error: Connection reset by peer)
2019-11-05 13:05:22	j`ey	la_mettrie: because get returns an Option
2019-11-05 13:05:36	j`ey	but actioncode isnt an option
2019-11-05 13:06:35	la_mettrie	some other function can get String from the HashMap instead of Option?
2019-11-05 13:06:43	j`ey	no
2019-11-05 13:06:56	j`ey	you could unwrap it?
2019-11-05 13:09:19	la_mettrie	let's see
2019-11-05 13:09:50	j`ey	hashmap cant return String because what would happen if there wasnt a value (all it could do is panic)
2019-11-05 13:17:01	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 13:25:24	j`ey	to use stdsimd with wasm, do you need to use wasm-bindgen?
2019-11-05 13:27:25	-->	t7 (~tommo@2a00:23c5:1284:fc00:ad40:109c:7414:d06b) has joined ##rust
2019-11-05 13:28:42	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-05 13:28:50	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-05 13:33:12	georgemp	Hi...I'm trying to read through this code here - https://github.com/jgallagher/rusqlite/blob/master/src/error.rs . Would anyone know where ffi::Error on line 15 is defined? On line 3, I see use crate::{errmsg_to_string, ffi}, but, don't see dependecies for either of this in Cargo.toml, nor am I able to find a Error type is rust std::ffi...
2019-11-05 13:33:37	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Ping timeout: 240 seconds)
2019-11-05 13:34:41	j`ey	are you sure it compiles?
2019-11-05 13:35:06	j`ey	pub use libsqlite3_sys as ffi;
2019-11-05 13:35:15	oherrala	georgemp: "pub use libsqlite3_sys as ffi;"
2019-11-05 13:35:24	oherrala	georgemp: https://github.com/jgallagher/rusqlite/blob/master/src/lib.rs#L58
2019-11-05 13:35:44	oherrala	georgemp: which points to here probably: https://github.com/jgallagher/rusqlite/blob/master/libsqlite3-sys/src/error.rs
2019-11-05 13:36:37	georgemp	oherrala: ah..thanks. So, any imports in the main lib.rs are seen in submodules (i'm assuming error.rs here is one?).
2019-11-05 13:37:10	j`ey	error.rs imports it
2019-11-05 13:37:11	oherrala	georgemp: nope, the import in lib.rs is made public
2019-11-05 13:37:28	oherrala	georgemp: and then it's visible on submodules
2019-11-05 13:38:08	georgemp	got it..thanks
2019-11-05 13:43:55	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-05 13:47:07	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-05 13:50:08	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-05 13:54:04	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 268 seconds)
2019-11-05 13:55:38	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 14:10:06	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-11-05 14:13:46	tempate	I have a couple of constants I would like to use all over my project (build.rs, tests/, and src/). What is the best way of doing it?
2019-11-05 14:18:09	--	toure|gone is now known as toure
2019-11-05 14:24:19	<--	baali (~baali@59.98.233.150) has quit (Quit: Leaving.)
2019-11-05 14:25:18	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-05 14:25:38	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 14:25:50	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-05 14:26:24	-->	lauromoura (~lauromour@2804:7f5:f380:c290:2d60:ac70:5695:80fd) has joined ##rust
2019-11-05 14:28:03	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-11-05 14:30:52	<--	hussam (uid193284@gateway/web/irccloud.com/x-qbrttqxbboaqorcw) has quit (Quit: Connection closed for inactivity)
2019-11-05 14:36:53	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-05 14:45:41	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-05 14:47:13	-->	pedro4 (~pedro4@213.152.161.69) has joined ##rust
2019-11-05 14:49:51	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 246 seconds)
2019-11-05 14:50:26	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 240 seconds)
2019-11-05 14:53:07	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-05 15:00:07	tempate	anyone?
2019-11-05 15:01:08	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-05 15:01:40	j`ey	did you try the separate crate approach?
2019-11-05 15:01:46	<--	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-05 15:05:24	tempate	I am trying without much success
2019-11-05 15:05:43	tempate	The idea is to have a constants.rs file outside of src/, right?
2019-11-05 15:07:01	j`ey	a separate cargo project
2019-11-05 15:12:56	tempate	Isn't there a simpler way?
2019-11-05 15:13:22	tempate	I'm currently just importing the file build.rs generates all around the place.
2019-11-05 15:14:21	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-11-05 15:14:43	j`ey	im confused, build.rs is generating the constants?
2019-11-05 15:15:04	Yaniel	if build.rs generates files, they are usually put in the build directory
2019-11-05 15:15:14	Yaniel	and then you include them in some suitable place in src
2019-11-05 15:15:41	Yaniel	most of the time they will be only fragments of rust code, not entire modules
2019-11-05 15:17:10	Yaniel	an idiomatic solution AFAICT would be to just include the generated file in src/main.rs and refer to crate::myconstant wherever you need it
2019-11-05 15:17:54	Yaniel	or wrap it in an extra module so you get crate::constants::FOO, if you don't want to pollute your crate root namespace
2019-11-05 15:17:57	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 240 seconds)
2019-11-05 15:19:09	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-05 15:20:02	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-05 15:22:00	-->	bluezone (uid104970@gateway/web/irccloud.com/x-gnuosptaaqigyard) has joined ##rust
2019-11-05 15:26:24	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-05 15:29:47	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 15:31:37	<--	asocha (~asocha@public-gprs370195.centertel.pl) has quit (Remote host closed the connection)
2019-11-05 15:32:47	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-05 15:33:25	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 265 seconds)
2019-11-05 15:35:21	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-05 15:37:33	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-05 15:39:39	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2019-11-05 15:41:54	-->	ytain (~ghfg@2607:f2c0:9408:2400:6802:c13b:b1fd:b0f4) has joined ##rust
2019-11-05 15:45:03	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-05 15:46:21	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-05 15:47:22	tempate	Alright, thank you very much
2019-11-05 15:47:29	<--	clarete (~user@pool-108-46-36-53.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2019-11-05 15:47:52	Yaniel	include_file! just copies & pastes the contents so you are quite free to do whatever makes most sense
2019-11-05 15:49:27	<--	fanta1 (~fanta1@p200300F76BC3360039F9B0488A4C2BA5.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-11-05 15:53:41	<--	meandi_2 (~meandi@dyndsl-178-142-254-215.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-11-05 15:57:18	-->	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has joined ##rust
2019-11-05 16:00:56	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-05 16:01:38	-->	iq (~iq@2600:1000:bf00:1e3e:5216:860c:c25b:58e2) has joined ##rust
2019-11-05 16:02:02	-->	meandi (~meandi@dyndsl-178-142-254-215.ewe-ip-backbone.de) has joined ##rust
2019-11-05 16:02:16	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-11-05 16:04:57	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-05 16:06:33	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-05 16:07:47	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:c189:e589:cbbb:5c84) has joined ##rust
2019-11-05 16:11:18	-->	baali (~baali@59.98.233.150) has joined ##rust
2019-11-05 16:14:49	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 252 seconds)
2019-11-05 16:15:29	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-05 16:15:59	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-11-05 16:17:22	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-05 16:18:14	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-05 16:21:22	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 252 seconds)
2019-11-05 16:25:43	Moongoodgirl	Flonk: hmm, okay! ^.^
2019-11-05 16:30:50	Moongoodgirl	Flonk: instead of `struct Tagged<T>(i32, PhantomData<fn() -> T>);` and `struct Tagged<T>(i32, PhantomData<fn() -> T>);`? I guess.
2019-11-05 16:31:19	Moongoodgirl	I'd make those not look like traits though. Maybe `struct Tagged<covariant T>(i32);`.
2019-11-05 16:37:09	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 16:39:51	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-05 16:40:07	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-05 16:44:43	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-05 16:46:25	<--	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has quit (Remote host closed the connection)
2019-11-05 16:46:38	-->	enobufs (ENOBUF@gateway/vpn/privateinternetaccess/enobuf) has joined ##rust
2019-11-05 16:47:51	<--	cdown (~cdown@199.201.66.0) has quit (Remote host closed the connection)
2019-11-05 16:48:09	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-05 16:48:43	<--	gbmor (ben@tilde.team/users/ahriman) has quit (Ping timeout: 264 seconds)
2019-11-05 16:49:10	-->	gbmor (ben@tilde.team/users/ahriman) has joined ##rust
2019-11-05 16:50:23	<--	meandi (~meandi@dyndsl-178-142-254-215.ewe-ip-backbone.de) has quit (Ping timeout: 250 seconds)
2019-11-05 16:52:03	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-11-05 16:53:21	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-05 16:53:44	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-05 16:54:02	<--	o01eg (~o01eg@2a02:2698:82b:12de:9c96:1328:2b22:794d) has quit (Read error: Connection reset by peer)
2019-11-05 16:58:24	-->	hussam (uid193284@gateway/web/irccloud.com/x-ffefrypqthwxndfq) has joined ##rust
2019-11-05 17:00:19	-->	o01eg (~o01eg@2a02:2698:82b:12de:9c96:1328:2b22:794d) has joined ##rust
2019-11-05 17:01:03	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-05 17:02:28	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 240 seconds)
2019-11-05 17:06:18	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-05 17:07:16	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-05 17:09:51	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-11-05 17:12:27	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-05 17:12:43	<--	jellie (~zipper@unaffiliated/zipper) has quit (Read error: Connection reset by peer)
2019-11-05 17:14:53	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-05 17:17:21	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-05 17:17:23	-->	m1m0 (~m1m0@p54AC863B.dip0.t-ipconnect.de) has joined ##rust
2019-11-05 17:17:49	<--	fengshaun (~fengshaun@unaffiliated/fengshaun) has quit (Quit: bibi!)
2019-11-05 17:19:59	<--	evocatus (~evocatus@135-23-100-112.cpe.pppoe.ca) has quit (Quit: WeeChat 2.6)
2019-11-05 17:21:19	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-05 17:22:15	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-05 17:24:28	-->	fengshaun (~fengshaun@unaffiliated/fengshaun) has joined ##rust
2019-11-05 17:26:32	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-11-05 17:29:23	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-05 17:29:50	-->	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has joined ##rust
2019-11-05 17:29:55	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-11-05 17:37:12	esotericnonsense	is anyone running a local rustup mirror? I see https://github.com/jiegec/rustup-mirror but it looks kind of barebones
2019-11-05 17:37:35	esotericnonsense	I'd like to say rsync once a week or something to save having to download toolchains multiple times
2019-11-05 17:37:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-05 17:39:32	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 17:39:34	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-05 17:42:03	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 240 seconds)
2019-11-05 17:44:49	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-05 17:49:06	<--	sheelp (~textual@d104-157-15-48.abhsia.telus.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-05 17:50:13	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 265 seconds)
2019-11-05 17:50:20	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-11-06 09:03:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-06 09:03:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-06 09:03:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-06 09:03:18	--	Channel ##rust: 590 nicks (2 ops, 0 voices, 588 normals)
2019-11-06 09:03:33	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-06 09:03:46	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-06 09:04:31	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-06 09:05:25	-->	dftxbs3e (~dftxbs3e@unaffiliated/dftxbs3e) has joined ##rust
2019-11-06 09:05:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-06 09:09:01	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 265 seconds)
2019-11-06 09:10:47	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-11-06 09:13:02	-->	maelcum (~horst@2001:16b8:5c24:7500:1585:9658:fd64:f147) has joined ##rust
2019-11-06 09:13:50	wucke13	What does it take to compile statically using rust? Is it sufficient to pass `--target x86_64-unknown-linux-musl`?
2019-11-06 09:23:36	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:5cd7:79e1:a718:3080) has quit (Ping timeout: 252 seconds)
2019-11-06 09:23:51	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-06 09:26:00	oherrala	wucke13: yes
2019-11-06 09:28:37	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-06 09:29:30	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-06 09:31:41	wucke13	Somehow rust tries to link against glibc and fails then, though
2019-11-06 09:33:39	-->	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has joined ##rust
2019-11-06 09:34:56	-->	AbedB_ (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has joined ##rust
2019-11-06 09:35:07	oherrala	do you have musl installed?
2019-11-06 09:35:14	wucke13	Yep
2019-11-06 09:36:05	wucke13	Well, other way round: how can I point cargo to my musl installation folder?
2019-11-06 09:36:13	oherrala	and you are using musl-gcc or musl-clang as linker?
2019-11-06 09:36:14	wucke13	$LD already points to the musl ld
2019-11-06 09:36:27	oherrala	point CC to musl-gcc or musl-clang
2019-11-06 09:37:01	oherrala	We are using "CC_x86_64_unknown_linux_musl=musl-clang" in our build environment
2019-11-06 09:37:37	j`ey	oh, musl in rust doesnt use lld?
2019-11-06 09:37:45	oherrala	and in cargo.conf we have in [target.x86_64-unknown-linux-musl]  section "linker = "musl-clang""
2019-11-06 09:37:53	oherrala	s/cargo.conf/cargo.config
2019-11-06 09:38:16	<--	AbedB__ (~AbedBhuty@104.194.218.228) has quit (Ping timeout: 240 seconds)
2019-11-06 09:39:43	vorner	Do you have some dependency that builds its own C code that could be linking to glibc instead?
2019-11-06 09:40:19	<--	maelcum (~horst@2001:16b8:5c24:7500:1585:9658:fd64:f147) has quit (Quit: Konversation terminated!)
2019-11-06 09:40:21	wucke13	vorner: Maybe, I will check that in a few minutes. Is there a way to tell cargo which compiler to use, or do I have to set CC environment variable?
2019-11-06 09:41:27	oherrala	wucke13: cargo itself doesn't compile C code, but many Rust crates with C dependencies build them themselves using cc crate's help
2019-11-06 09:41:54	oherrala	wucke13: https://crates.io/crates/cc
2019-11-06 09:42:11	oherrala	wucke13: see section "External configuration via environment variables"
2019-11-06 09:45:02	wucke13	oherrala: Thanks
2019-11-06 09:45:30	-->	localhorse (uid18992@gateway/web/irccloud.com/x-bezennmacwfvvdet) has joined ##rust
2019-11-06 09:48:17	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-06 09:48:51	<--	baali (~baali@59.98.233.150) has quit (Ping timeout: 240 seconds)
2019-11-06 09:49:36	--	sral is now known as violator
2019-11-06 09:52:53	-->	tsaka_ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-06 09:53:03	wucke13	So, apparently libc, arrayvec and byteorder don't seem to compile
2019-11-06 09:55:32	j`ey	how so/
2019-11-06 09:57:39	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-06 09:57:58	wucke13	https://paste.krebsco.de/w4AUDDoz Somehow glibc is picked up
2019-11-06 09:58:25	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-06 09:59:17	<--	narispo (~narispo@37.171.135.141) has quit (Ping timeout: 265 seconds)
2019-11-06 09:59:18	j`ey	wucke13: oh this is for stuff that is running on the host
2019-11-06 09:59:30	j`ey	what rustc target is for your host
2019-11-06 10:00:05	j`ey	Im guessing stable-x86_64-unknown-linux-gnu
2019-11-06 10:00:15	wucke13	target = "x86_64-unknown-linux-musl"
2019-11-06 10:00:25	wucke13	from .config/cargo.config
2019-11-06 10:00:26	j`ey	thats target, not host
2019-11-06 10:00:34	wucke13	How would I find out then?
2019-11-06 10:01:01	j`ey	I dont know about nix, but I think you want glibc available when youre building
2019-11-06 10:01:21	<--	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has quit (Quit: This computer has gone to sleep)
2019-11-06 10:01:22	j`ey	even though youre targeting musl, your host is still glibc
2019-11-06 10:01:31	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-06 10:01:43	-->	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has joined ##rust
2019-11-06 10:04:09	<--	ravenousmoose (~ravenousm@ptr-cud5aqg6fng7b11552m.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-11-06 10:16:52	osa1	is there a way to make sure a package will be linked with only one version of a library, other than eyeballing the Cargo.lock?
2019-11-06 10:17:13	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-06 10:19:37	oherrala	osa1: cargo deny had something for that
2019-11-06 10:19:53	oherrala	osa1: https://crates.io/crates/cargo-deny
2019-11-06 10:23:17	osa1	oherrala: which command exactly? I can't see it in the README
2019-11-06 10:24:18	j`ey	ban
2019-11-06 10:24:33	j`ey	there's a section "The multiple-versions field
2019-11-06 10:24:34	j`ey	"
2019-11-06 10:24:35	oherrala	osa1: Crate bans
2019-11-06 10:24:56	osa1	I don't want to ban anything, I want to make sure there will be one version of a library linked in the final executable
2019-11-06 10:25:22	osa1	ahhh
2019-11-06 10:25:28	osa1	yes, OK, thanks
2019-11-06 10:28:37	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-06 10:34:41	-->	narispo (~narispo@37.173.2.155) has joined ##rust
2019-11-06 10:37:13	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-06 10:37:22	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 10:39:39	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-06 10:41:08	<--	tinga (~tinga@host86-164-180-234.range86-164.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2019-11-06 10:43:14	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-06 10:47:09	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-06 10:47:20	--	carado_ is now known as carado
2019-11-06 10:47:24	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Quit: Leaving)
2019-11-06 10:47:42	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-06 10:48:18	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-11-06 10:51:29	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-06 10:54:31	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 252 seconds)
2019-11-06 11:04:57	-->	t7 (~tommo@host86-131-226-196.range86-131.btcentralplus.com) has joined ##rust
2019-11-06 11:07:54	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-06 11:12:18	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 250 seconds)
2019-11-06 11:13:43	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 265 seconds)
2019-11-06 11:20:35	-->	rpgwaiter (sid108352@gateway/web/irccloud.com/x-atgxpeeqrvcpuqpj) has joined ##rust
2019-11-06 11:21:38	<--	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has quit (Quit: This computer has gone to sleep)
2019-11-06 11:21:52	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-06 11:24:29	-->	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has joined ##rust
2019-11-06 11:25:34	-->	ev4rist3 (~phoenix@x4e368dd1.dyn.telefonica.de) has joined ##rust
2019-11-06 11:26:48	<--	nostoi (~nostoi@55.red-83-50-221.dynamicip.rima-tde.net) has quit (Client Quit)
2019-11-06 11:28:34	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-06 11:29:37	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-06 11:44:51	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-06 11:45:26	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 11:48:11	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 11:51:32	j`ey	anyone know how to do the equivalent of _mm_store_pd in packed_simd?
2019-11-06 11:53:27	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-06 11:56:46	j`ey	ah, write_to_slice
2019-11-06 12:03:11	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-06 12:04:42	-->	sainnhe (~Sainnhe_P@113.140.11.4) has joined ##rust
2019-11-06 12:06:18	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-06 12:08:26	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-11-06 12:11:01	<--	AbedB_ (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-06 12:12:23	<--	rk4 (~r@ec2-13-237-166-197.ap-southeast-2.compute.amazonaws.com) has quit (Remote host closed the connection)
2019-11-06 12:12:43	-->	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has joined ##rust
2019-11-06 12:15:56	<--	zipper (~zipper@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-06 12:17:35	elichai2	does rust have an equivilant to `noexcept` but for panicing?
2019-11-06 12:25:20	Kinnison	elichai2: Something like: https://github.com/dtolnay/no-panic ?
2019-11-06 12:25:38	gchristensen	wowowowowow
2019-11-06 12:25:52	elichai2	yeah, but something that will also hint the compiler that it's free to optimize things *because* they can not panic
2019-11-06 12:25:58	 *	j`ey having trouble cross compiling to aarch64 :<
2019-11-06 12:26:21	Kinnison	elichai2: Hmm, I heard about some thinking around that, but I don't think it's in a position to do that yet, no.
2019-11-06 12:26:56	elichai2	j`ey: https://github.com/rust-embedded/cross
2019-11-06 12:27:11	j`ey	i forgot about that
2019-11-06 12:27:20	j`ey	but I'd need docker
2019-11-06 12:27:36	elichai2	Kinnison: that's do but. C++17 has a lot of power when combining `constexpr noexcept`
2019-11-06 12:27:39	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 12:27:45	-->	talin (~unknown@unaffiliated/talin) has joined ##rust
2019-11-06 12:28:06	j`ey	what does that give you over constexpr?
2019-11-06 12:28:06	 *	Kinnison nods, I can imagine
2019-11-06 12:28:51	<--	sainnhe (~Sainnhe_P@113.140.11.4) has quit (Quit: WeeChat 2.6)
2019-11-06 12:28:54	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-11-06 12:29:02	oherrala	j`ey: I'm using this with Rust's docker image: https://toolchains.bootlin.com/
2019-11-06 12:29:29	oherrala	j`ey: extract tarball, point environment variables to correct places, .., profit
2019-11-06 12:29:50	elichai2	j`ey: I think constexpr disallows throwing only in C++20+
2019-11-06 12:29:57	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 12:30:01	elichai2	j`ey: and I love `cross` it's so great heh
2019-11-06 12:30:44	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 12:30:44	j`ey	i was trying to get musl working, but apparently that needs some symbols that you need to link to gcc for
2019-11-06 12:30:49	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-06 12:31:04	-->	sainnhe (~Sainnhe_P@113.140.11.4) has joined ##rust
2019-11-06 12:31:50	-->	ytain (~ghfg@2607:f2c0:940b:9800:3962:6fab:fb49:7b49) has joined ##rust
2019-11-06 12:32:30	oherrala	j`ey: https://gist.github.com/oherrala/a2f8f8d7af1ba30ccd784c7dc62a22b6
2019-11-06 12:32:59	oherrala	j`ey: that's specific to our build needs, but you'd probably get some pointers to right direction
2019-11-06 12:34:28	j`ey	oherrala: nice, i'll take a look
2019-11-06 12:35:59	j`ey	oherrala: so you didnt hit issues like https://github.com/rust-vmm/vmm-sys-util/commit/cb33925bfd1eb314e5384c58c78874d2c98d6182 ?
2019-11-06 12:37:16	<--	zipper (~zipper@unaffiliated/zipper) has quit (Ping timeout: 264 seconds)
2019-11-06 12:37:54	oherrala	j`ey: that's worked around with: https://gist.github.com/oherrala/a2f8f8d7af1ba30ccd784c7dc62a22b6#gistcomment-3075597
2019-11-06 12:37:55	j`ey	hm I have rustc-link-search=["foo"] in my .cargo/config, but it complains it's expecting a table and it's getting an array :/
2019-11-06 12:38:14	j`ey	oherrala: oh, did I just not scroll down far enough :)
2019-11-06 12:38:29	oherrala	j`ey: maybe you opened the page before I added that
2019-11-06 12:38:47	<--	sainnhe (~Sainnhe_P@113.140.11.4) has quit (Quit: WeeChat 2.6)
2019-11-06 12:39:15	j`ey	was really hoping musl+lld would just work :)
2019-11-06 12:40:08	oherrala	there's still things to improve. It feels really messy when there's gcc and clang and libs (from both) involved in the build processes
2019-11-06 12:44:28	<--	ytain (~ghfg@2607:f2c0:940b:9800:3962:6fab:fb49:7b49) has quit (Ping timeout: 264 seconds)
2019-11-06 12:44:28	j`ey	well I got it working with the -lgcc, lets see if it actually runs
2019-11-06 12:46:47	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-11-06 12:47:24	j`ey	sweet, it does work!
2019-11-06 12:48:40	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-06 12:48:52	oherrala	\o/
2019-11-06 12:51:47	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Quit: Mom decided I had to go to bed.)
2019-11-06 12:52:59	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-06 12:53:30	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Client Quit)
2019-11-06 12:56:54	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-06 13:05:12	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-06 13:06:30	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 268 seconds)
2019-11-06 13:10:19	<--	OmniMancer (~Paul@101.100.137.239) has quit (Read error: Connection reset by peer)
2019-11-06 13:11:56	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-06 13:13:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 13:14:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 13:15:41	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 13:21:15	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 240 seconds)
2019-11-06 13:22:18	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 13:22:48	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 13:24:59	-->	fanta1 (~fanta1@p200300F76BC6D400D52CA5B415FA13F9.dip0.t-ipconnect.de) has joined ##rust
2019-11-06 13:29:14	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-11-06 13:32:16	<--	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has quit (Ping timeout: 240 seconds)
2019-11-06 13:33:27	-->	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has joined ##rust
2019-11-06 13:33:36	-->	kleschenko (~kleschenk@80.93.124.102) has joined ##rust
2019-11-06 13:33:47	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-06 13:35:43	<--	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-06 13:36:35	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-06 13:36:59	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 13:37:27	-->	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has joined ##rust
2019-11-06 13:38:45	<--	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-06 13:38:48	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 13:39:46	-->	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has joined ##rust
2019-11-06 13:47:49	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-11-06 13:50:39	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-06 13:52:29	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-06 13:56:02	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-11-06 13:56:17	<--	averell (~averell@unaffiliated/averell) has quit (Remote host closed the connection)
2019-11-06 13:56:23	<--	zeden (~user@unaffiliated/zeden) has left ##rust ("WeeChat 2.6")
2019-11-06 13:58:07	<--	zipper (~zipper@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-06 14:05:30	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 14:07:03	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-06 14:08:28	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Client Quit)
2019-11-06 14:08:59	-->	dfin (~dsd@178-83-72-15.dynamic.hispeed.ch) has joined ##rust
2019-11-06 14:09:58	-->	dmgk (~dg@lucille.syrec.org) has joined ##rust
2019-11-06 14:10:04	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-06 14:10:16	dfin	hi. Can somebody _please_ help me with this: This [1] works. However, for some reason, using an Option in the struct fails [2]. [1] https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c834db69468a2cdbc232431bcd674ea6 [2] https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=607da1a43c3752e5f193ed0401336e90
2019-11-06 14:13:34	-->	lauromoura_ (~lauromour@2804:7f5:f380:7ff4:2d60:ac70:5695:80fd) has joined ##rust
2019-11-06 14:14:00	-->	averell (~averell@unaffiliated/averell) has joined ##rust
2019-11-06 14:14:53	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-11-06 14:15:11	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-11-06 14:16:12	<--	lauromoura (~lauromour@2804:7f5:f380:c290:2d60:ac70:5695:80fd) has quit (Ping timeout: 252 seconds)
2019-11-06 14:18:31	-->	mhi^ (~mhi^@unaffiliated/mhi/x-9993184) has joined ##rust
2019-11-06 14:21:41	elichai2	I'm looking for an example where a struct and it's field don't have the same alignment/size i.e. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2437311a24449b7bff72378e4f99a67e
2019-11-06 14:25:05	Alexendoo	With only one field?
2019-11-06 14:26:38	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-06 14:27:46	Lumpio-	It says align: 1 size: 9 for both
2019-11-06 14:27:54	Lumpio-	oh you want a counterexample heh
2019-11-06 14:29:59	j`ey	without adding align attributes i guess!
2019-11-06 14:30:13	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-06 14:30:15	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-06 14:30:38	Alexendoo	elichai2: The repr transparent RFC mentions a case for ARM64 that could be of interest https://github.com/rust-lang/rfcs/blob/master/text/1758-repr-transparent.md#motivation
2019-11-06 14:30:38	sfackler	the only way to see that is to use a #[repr(align(N))] afaik
2019-11-06 14:31:25	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-06 14:31:48	Alexendoo	Though it probably would report the same alignment still
2019-11-06 14:31:49	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-06 14:36:39	elichai2	thanks
2019-11-06 14:36:55	elichai2	another question :) is it possible to have a null fat pointer?
2019-11-06 14:37:12	elichai2	evalr: std::ptr::null::<[u8]>()
2019-11-06 14:37:15	--	Notice(evalr): error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
2019-11-06 14:37:17	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=28ae967d8f92bbd299bc35f47e03c02f&version=stable&mode=debug
2019-11-06 14:38:27	<--	jenny-m (~jdm-@167.100.78.229) has quit (Quit: Leaving...)
2019-11-06 14:38:31	elichai2	evalr: 0usize as *const [u8;0] as *const [u8]
2019-11-06 14:38:33	--	Notice(evalr): 0x0
2019-11-06 14:38:39	elichai2	ha :)
2019-11-06 14:38:54	elichai2	evalr: std::ptr::null::<u8>() as *const [u8;0] as *const [u8]
2019-11-06 14:38:56	--	Notice(evalr): 0x0
2019-11-06 14:39:20	elichai2	evalr: (std::ptr::null::<u8>() as *const [u8;0] as *const [u8]).is_null()
2019-11-06 14:39:21	dfin	any ideas?
2019-11-06 14:39:23	--	Notice(evalr): true
2019-11-06 14:39:38	j`ey	evalr: std::mem::size_of_val(std::ptr::null::<u8>() as *const [u8;0] as *const [u8])
2019-11-06 14:39:40	--	Notice(evalr): error[E0308]: mismatched types
2019-11-06 14:39:42	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=2a3ce9a156dcf1105ec45b144aff6ca5&version=stable&mode=debug
2019-11-06 14:40:18	<--	zipper (~zipper@unaffiliated/zipper) has quit (Ping timeout: 246 seconds)
2019-11-06 14:40:39	elichai2	evalr: unsafe {std::mem::transmute::<_, (usize, usize)>(std::ptr::null::<u8>() as *const [u8;0] as *const [u8])}
2019-11-06 14:40:41	--	Notice(evalr): (0, 0)
2019-11-06 14:40:43	j`ey	is that definitely a fat pointer
2019-11-06 14:40:48	elichai2	j`ey: seems so
2019-11-06 14:41:00	j`ey	evalr: https://play.rust-lang.org/?gist=2a3ce9a156dcf1105ec45b144aff6ca5&version=stable&mode=debug
2019-11-06 14:41:03	--	Notice(evalr): error: expected type, found `}`
2019-11-06 14:41:03	j`ey	err
2019-11-06 14:41:04	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=97a5abaa5cd37039fc1e832f2704d8d7&version=stable&mode=debug
2019-11-06 14:41:09	elichai2	evalr: &*(std::ptr::null::<u8>() as *const [u8;0] as *const [u8]).len()
2019-11-06 14:41:09	j`ey	evalr: std::mem::size_of::<*const [u8]>()
2019-11-06 14:41:11	--	Notice(evalr): error[E0599]: no method named `len` found for type `*const [u8]` in the current scope
2019-11-06 14:41:13	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=342e02037eaaad844c3dada6fc897eb0&version=stable&mode=debug
2019-11-06 14:41:16	--	Notice(evalr): 16
2019-11-06 14:41:23	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-06 14:41:24	<--	libertyprime (~libertypr@124.197.60.232) has quit (Quit: leaving)
2019-11-06 14:41:26	elichai2	evalr: &*((std::ptr::null::<u8>() as *const [u8;0] as *const [u8])).len()
2019-11-06 14:41:28	--	Notice(evalr): error[E0599]: no method named `len` found for type `*const [u8]` in the current scope
2019-11-06 14:41:30	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=a3011f1ed59c8494bea2fc656d315726&version=stable&mode=debug
2019-11-06 14:41:43	elichai2	j`ey: didn't know you can give it a lnk
2019-11-06 14:42:21	elichai2	evalr: unsafe {(&*(std::ptr::null::<u8>() as *const [u8;0] as *const [u8])).len()}
2019-11-06 14:42:23	--	Notice(evalr): 0
2019-11-06 14:42:25	elichai2	evalr: unsafe {(&*(std::ptr::null::<u8>() as *const [u8;5] as *const [u8])).len()}
2019-11-06 14:42:28	--	Notice(evalr): 5
2019-11-06 14:42:40	elichai2	looks like a fat pointer :)
2019-11-06 14:42:41	<--	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-06 14:43:07	j`ey	elichai2: you cant, that was a copy/paste acident :)
2019-11-06 14:43:15	elichai2	oh lol :/
2019-11-06 14:47:33	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-06 15:01:24	-->	learning1 (~pi@121.122.92.2) has joined ##rust
2019-11-06 15:04:17	<--	learningc (~pi@121.122.92.70) has quit (Ping timeout: 268 seconds)
2019-11-06 15:09:49	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Quit: Leaving)
2019-11-06 15:10:44	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-06 15:11:04	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 15:13:55	--	toure|gone is now known as toure
2019-11-06 15:16:01	<--	zipper (~zipper@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-06 15:17:09	<--	fanta1 (~fanta1@p200300F76BC6D400D52CA5B415FA13F9.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-11-06 15:17:18	-->	klemm (~klemm@klemm.7un.net) has joined ##rust
2019-11-06 15:19:25	-->	zipper (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-06 15:24:41	elichai2	What's the best way to "freeze" something from freeing? (i.e. if I have something like a Vec<T>, and I'm using it's pointer. is there a way to make sure it doesn't drop before I finish?)
2019-11-06 15:25:21	elichai2	i.e. after lex lifetimes it seems like the borrow checker can kinda "drop" things before the end of scope. (that could also happenn if you reuse the same name)
2019-11-06 15:25:22	j`ey	mem::forget
2019-11-06 15:25:58	elichai2	j`ey: but then how I make sure *it will* drop when i'm done? :)
2019-11-06 15:26:04	j`ey	drop() :P
2019-11-06 15:26:06	elichai2	(is there a `mem::remember` :P)
2019-11-06 15:26:16	j`ey	(I assume you can drop like that)
2019-11-06 15:26:18	vorner	elichai2: Note that non-lexical lifetimes will not move a place where it drops if it has a destructor.
2019-11-06 15:26:26	vorner	Destructor counts as a „use“ for the borrow checker.
2019-11-06 15:26:27	j`ey	ohbwait, forget doesnt do that
2019-11-06 15:26:32	j`ey	forget consumes
2019-11-06 15:26:36	elichai2	yeah
2019-11-06 15:26:37	noonien	is there a function to copy a slice into another?
2019-11-06 15:26:40	vorner	And that one runs at the end of the scope.
2019-11-06 15:26:43	j`ey	copy_from_slice
2019-11-06 15:27:01	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-06 15:27:01	vorner	But if you really want to turn it into the allocation itself, then into_raw_parts
2019-11-06 15:27:10	vorner	and then from_raw_parts
2019-11-06 15:27:25	noonien	ah, dope, thanks
2019-11-06 15:27:35	<--	ev4rist3 (~phoenix@x4e368dd1.dyn.telefonica.de) has quit (Quit: Lost terminal)
2019-11-06 15:27:35	elichai2	vorner: i'm pretty sure `into_raw_parts` isn't a function
2019-11-06 15:28:04	elichai2	but there is a `from_raw_parts` https://doc.rust-lang.org/std/vec/struct.Vec.html#method.from_raw_parts
2019-11-06 15:28:19	elichai2	but that's just a Vec, it was an example for a general allocation based types
2019-11-06 15:28:19	-->	r1ch (~r1ch@2604:2000:e384:6f00:cc8a:471:4b29:669a) has joined ##rust
2019-11-06 15:29:48	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-06 15:31:31	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-06 15:34:05	netopso	Can I implement the same method on multiple structs at the same time?
2019-11-06 15:34:58	bronsen	How do I match unit to, say, "f" after `io::stdin().read_line(&mut unit).expect("fail...");`? Trying `match unit.as_ref() {"f" => whatever(), _ => panic!("!!")}; always panics
2019-11-06 15:35:18	j`ey	netopso: with a macro
2019-11-06 15:35:41	<--	zipper (~zipper@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-06 15:35:45	j`ey	bronsen: it's probably a newline?
2019-11-06 15:36:06	bronsen	so I should trim() it first?
2019-11-06 15:36:25	netopso	j`ey: I can't do something with a default trait implementation and then empty-implementing that trait for all the structs?
2019-11-06 15:36:39	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 265 seconds)
2019-11-06 15:36:42	j`ey	bronsen: that's likely the issue
2019-11-06 15:36:52	j`ey	netopso: that should work too
2019-11-06 15:38:18	bronsen	thank yoy j`ey :)
2019-11-06 15:38:20	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-06 15:38:21	bronsen	you*
2019-11-06 15:39:34	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-06 15:39:41	<--	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has quit (Ping timeout: 250 seconds)
2019-11-06 15:41:37	-->	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has joined ##rust
2019-11-06 15:41:48	j`ey	wasm-opt did nothing to my .wasm file, any suggestion of other tools to run?
2019-11-06 15:42:05	j`ey	the wasm code generated by rust is 1.8M, 25K for a similar C program
2019-11-06 15:42:26	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 240 seconds)
2019-11-06 15:43:11	j`ey	(annoying that the wasm group is on discord, which i cant go on from work)
2019-11-06 15:44:45	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-11-06 15:50:18	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-06 15:53:19	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-11-06 15:56:30	j`ey	anyone know how to build without debug info?
2019-11-06 15:56:40	j`ey	building with --release and -C debuginfo=0
2019-11-06 15:57:20	carado	try adding debug = false; under [profile.dev] in your Cargo.toml
2019-11-06 15:57:26	j`ey	I did that too
2019-11-06 15:57:32	j`ey	well under .release
2019-11-06 15:57:32	-->	gioyik (~gioyik@186.116.245.145) has joined ##rust
2019-11-06 15:57:43	carado	i'm pretty sure .release is already without debug info
2019-11-06 15:57:52	<--	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has quit (Ping timeout: 260 seconds)
2019-11-06 15:58:01	j`ey	yet over 60% of the .wasm is debug info :)
2019-11-06 15:58:57	carado	weird
2019-11-06 16:00:03	sfackler	it's pulled in from std which is shipped with debuginfo
2019-11-06 16:00:11	j`ey	frustrating that rust's wasm is so much worse than emscripten :/
2019-11-06 16:00:36	carado	have you tried to call wasm-strip on the resulting .wasm ?
2019-11-06 16:00:38	sfackler	you can pass -Zstrip-debuginfo-if-disabled=true to rustc or just strip the wasm module
2019-11-06 16:01:15	j`ey	ok, it turns out wasm-opt *doesnt* strip by default
2019-11-06 16:01:22	j`ey	you need to pass --strip-debug
2019-11-06 16:01:39	-->	shinka (~phdp@node-1w7jra91x6wnagplj38ttf956.ipv6.telus.net) has joined ##rust
2019-11-06 16:01:59	carado	oh
2019-11-06 16:02:00	j`ey	I think I misunderstood this comment
2019-11-06 16:02:08	carado	out of curiosity, what's the filesize after doing that ?
2019-11-06 16:02:28	j`ey	from 1.8M to 56K
2019-11-06 16:02:55	carado	that seems pretty good
2019-11-06 16:03:11	j`ey	I'll see if it affects run time, i dont see why it would, but still
2019-11-06 16:03:14	carado	i think you can also change the allocator to a more lightweight one to reduce filesize further
2019-11-06 16:03:32	j`ey	this code doesnt use std/do anything allocations
2019-11-06 16:03:45	j`ey	(let me verify that!)
2019-11-06 16:05:10	j`ey	I'm mostly just unsure why the wasm produced by Rust is way slower than one produced by C
2019-11-06 16:06:09	shinka	Say I have an enum "pub enum X { A { lhs: String, rhs: String }, B, C }". I want to do pattern matching on a tuple (X, X), but if I write "match (*x0, *x1) { (X::A{ref lhs, res rhs}, X::A{ref lhs, ref rhs}) => ..." it'll fail because there are two references to lhs and rhs, but I cannot use an arbitrary name, so how I can use pattern matching on a tuple of X?
2019-11-06 16:07:11	<--	kleschenko (~kleschenk@80.93.124.102) has quit (Ping timeout: 268 seconds)
2019-11-06 16:07:28	-->	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has joined ##rust
2019-11-06 16:07:48	-->	kleschenko (~kleschenk@80.93.124.102) has joined ##rust
2019-11-06 16:07:55	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-06 16:08:12	carado	"ref lhs" seems like old stuff, i'd just remove the "ref"
2019-11-06 16:08:29	carado	and to answer your question, you can do "lhs: lhs_a, rhs: rhs_a" on one hand, and the same but with other names on the other
2019-11-06 16:08:31	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-06 16:08:52	carado	and then the references will be bound to lhs_a, rhs_a, etc
2019-11-06 16:09:06	carado	(i'm not sure about the "ref" part, forget what i said about it)
2019-11-06 16:09:49	-->	baali (~baali@59.98.186.142) has joined ##rust
2019-11-06 16:10:12	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 16:10:45	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-06 16:10:57	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 16:13:02	shinka	@carado, OK thanks!
2019-11-06 16:13:07	<--	shinka (~phdp@node-1w7jra91x6wnagplj38ttf956.ipv6.telus.net) has quit (Quit: Leaving)
2019-11-06 16:14:10	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-06 16:14:58	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 16:16:37	<--	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has quit (Ping timeout: 240 seconds)
2019-11-06 16:18:53	<--	bromind (~bromind@pas38-2-82-224-180-63.fbx.proxad.net) has quit (Quit: leaving)
2019-11-06 16:20:30	-->	bromind (~bromind@pas38-2-82-224-180-63.fbx.proxad.net) has joined ##rust
2019-11-06 16:20:42	<--	r1ch (~r1ch@2604:2000:e384:6f00:cc8a:471:4b29:669a) has quit (Remote host closed the connection)
2019-11-06 16:25:59	<--	narispo (~narispo@37.173.2.155) has quit (Remote host closed the connection)
2019-11-06 16:26:17	-->	narispo (~narispo@37.173.2.155) has joined ##rust
2019-11-06 16:27:36	<--	Choscura (~Choscurar@75-128-113-129.dhcp.aldl.mi.charter.com) has quit (Ping timeout: 240 seconds)
2019-11-06 16:30:13	-->	smurfendrek123 (~smurfendr@193.190.253.144) has joined ##rust
2019-11-06 16:31:23	-->	r1ch (~r1ch@2604:2000:e384:6f00:f8b7:1cb2:6d45:7933) has joined ##rust
2019-11-06 16:33:10	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-11-06 16:33:29	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-11-06 16:34:13	-->	dmilith (~dmilith@verknowsys.com) has joined ##rust
2019-11-06 16:37:33	<--	the_bugyi_man (~bryan@pool-173-71-68-161.cmdnnj.fios.verizon.net) has quit (Ping timeout: 265 seconds)
2019-11-06 16:37:37	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-06 16:37:56	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Ping timeout: 240 seconds)
2019-11-06 16:38:06	halfbit	where do the rust embedded folks usually hang out and chat
2019-11-06 16:38:17	halfbit	tired of C ruining all my fun
2019-11-06 16:38:57	belst	halfbit: probably on discord in the embedded channel
2019-11-06 16:39:15	halfbit	discord, whats discord
2019-11-06 16:39:48	belst	some proprietary communication platform. it's in the title
2019-11-06 16:40:01	halfbit	sigh, right on, thanks
2019-11-06 16:40:16	halfbit	so another electron 1gb memory sucking hole app
2019-11-06 16:40:31	belst	discord is suprisingly efficient for an electron app tbh
2019-11-06 16:40:45	halfbit	like, weechat < 1mb efficient?
2019-11-06 16:40:50	belst	not even close
2019-11-06 16:40:51	<--	matheusmoreira (~matheusmo@177.205.197.40.dynamic.adsl.gvt.net.br) has quit (Ping timeout: 240 seconds)
2019-11-06 16:40:54	halfbit	of course not
2019-11-06 16:40:54	belst	but much better than slack for example
2019-11-06 16:41:17	j`ey	there is a matrix channel for rust embedded
2019-11-06 16:41:22	halfbit	yes, I'm very familiar with slackhole
2019-11-06 16:41:57	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-06 16:42:13	halfbit	cool, I saw the matrix channel for rtfm, didn't know there was one for embedded
2019-11-06 16:42:15	halfbit	will check that out
2019-11-06 16:42:26	halfbit	I did see weechat will support matrix, so... very cool
2019-11-06 16:42:41	belst	it already does with a lua script i think
2019-11-06 16:43:00	belst	Used it for a while but it's a bit buggy and doesnt remove voice channels correctly or so. maybe it's fixed now
2019-11-06 16:43:07	belst	haven't used matrix in a while
2019-11-06 16:47:58	-->	matheusmoreira (~matheusmo@191.35.186.182) has joined ##rust
2019-11-06 16:48:00	halfbit	thanks!
2019-11-06 16:49:56	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2019-11-06 16:50:11	-->	Choscura (~Choscurar@75-128-113-129.dhcp.aldl.mi.charter.com) has joined ##rust
2019-11-06 16:51:57	<--	pedro4 (~pedro4@213.152.161.69) has quit (Quit: Leaving)
2019-11-06 16:53:21	j`ey	C+emscripten: 40s, rust+wasm: 2min50
2019-11-06 16:53:22	j`ey	:|
2019-11-06 16:56:09	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-06 16:56:59	-->	ionelmc (uid20175@python/site-packages/ionelmc) has joined ##rust
2019-11-06 17:00:58	<--	_xor (~xor@74.215.46.133) has quit (Remote host closed the connection)
2019-11-06 17:01:13	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-06 17:04:43	-->	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has joined ##rust
2019-11-06 17:05:56	halfbit	Has there been any progress on support of integer constants as type params
2019-11-06 17:06:07	halfbit	like say struct Page<Size> { buf: u8[Size] };
2019-11-06 17:06:22	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-06 17:07:25	j`ey	not sure what you meant by that example, but yes
2019-11-06 17:07:28	j`ey	the std uses some now
2019-11-06 17:08:44	<--	dozn (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Ping timeout: 276 seconds)
2019-11-06 17:09:20	halfbit	ah right, [u8; Size] there, I
2019-11-06 17:09:37	halfbit	I use array so infrequently in rust, the syntax isn't there at the top of my head :-)
2019-11-06 17:09:55	j`ey	hehe
2019-11-06 17:10:00	jebrosen	Yes, a lot of things with const generics work (and are used now in std to implement traits on arrays)
2019-11-06 17:10:16	jebrosen	But I believe there's still a lot that's unfinished too
2019-11-06 17:10:19	 *	j`ey replacing all [] with get_unchecked
2019-11-06 17:10:24	 *	j`ey wishes there was a flag
2019-11-06 17:10:26	halfbit	very very cool
2019-11-06 17:10:43	halfbit	ah, because of the length check cost in using []'s?
2019-11-06 17:10:52	j`ey	yeah
2019-11-06 17:11:05	j`ey	Im trying to figure out if that's what's causing rust to be slower than C
2019-11-06 17:11:10	<--	matthias_bgg (~mbgg@37.223.137.234) has quit (Quit: Leaving)
2019-11-06 17:11:39	halfbit	does valgrind's callgrind tool work with rust I wonder? I've used it in the past to profile code to great success
2019-11-06 17:12:00	j`ey	yep, should do
2019-11-06 17:13:44	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Quit: Leaving)
2019-11-06 17:19:07	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 265 seconds)
2019-11-06 17:20:18	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-06 17:21:38	-->	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has joined ##rust
2019-11-06 17:24:40	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-06 17:26:12	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-11-06 17:26:40	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-11-06 17:28:08	j`ey	heh, this 962 byte wasm file takes 2mins45 to run. I have a 784 byte wasm file produced by C that takes 6s
2019-11-06 17:33:16	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-06 17:35:08	<--	o01eg (~o01eg@2a02:2698:82b:12de:9c96:1328:2b22:794d) has quit (Read error: Connection reset by peer)
2019-11-06 17:38:03	<--	kleschenko (~kleschenk@80.93.124.102) has quit (Ping timeout: 240 seconds)
2019-11-06 17:38:27	<--	smurfendrek123 (~smurfendr@193.190.253.144) has quit (Ping timeout: 265 seconds)
2019-11-06 17:39:06	-->	kleschenko (~kleschenk@80.93.124.102) has joined ##rust
2019-11-06 17:42:20	-->	o01eg (~o01eg@2a02:2698:82b:12de:9c96:1328:2b22:794d) has joined ##rust
2019-11-06 17:46:56	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-11-06 17:47:22	-->	KeyJoo (~KeyJoo@83.220.181.139) has joined ##rust
2019-11-06 17:50:25	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-06 17:51:02	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-06 17:54:16	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 240 seconds)
2019-11-07 09:11:40	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-07 09:11:40	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-07 09:11:40	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-07 09:11:40	--	Channel ##rust: 585 nicks (2 ops, 0 voices, 583 normals)
2019-11-07 09:11:55	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-07 09:23:18	yrp	i think crossbeam was workign on these, there are also things like evmap?
2019-11-07 09:25:37	netopso	evmap looks pretty wild
2019-11-07 09:32:16	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-07 09:32:16	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-07 09:32:16	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-07 09:32:16	--	Channel ##rust: 587 nicks (2 ops, 0 voices, 585 normals)
2019-11-07 09:32:32	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-07 09:33:47	netopso	yrp: interesting
2019-11-07 09:33:57	netopso	very low level, wish it had more examples
2019-11-07 09:35:45	vorner	Do you want to modify just the items but not add/remove, or even add/remove from multiple threads?
2019-11-07 09:36:14	-->	machinly-tmp (~machinly@106.38.40.98) has joined ##rust
2019-11-07 09:36:14	netopso	vorner: just modify is ok
2019-11-07 09:36:56	guzzlefry	what the heck is this? fn greet(req: HttpRequest) -> impl Responder {...}
2019-11-07 09:37:11	j`ey	guzzlefry: a function!
2019-11-07 09:37:31	j`ey	that returns something that impplements the Responder trait
2019-11-07 09:37:51	Kinnison	guzzlefry: What about that is confusing you?  It's a function which takes (consumes?) an HttpRequest, and returns some unnamed type which implements the Responder trait.
2019-11-07 09:37:53	guzzlefry	oh, are those the trait objects I haven't gotten to in the book?
2019-11-07 09:38:58	guzzlefry	The return type was confusing me.
2019-11-07 09:39:43	j`ey	not trait objects
2019-11-07 09:39:53	Kinnison	It's not a trait object per-se, but rather simply a way to say to the consumer of the return type "The only thing you're allowed to know is that it's an implementation of Responder"
2019-11-07 09:39:57	j`ey	trait objects are &dyn T
2019-11-07 09:39:57	Kinnison	it will, in fact, be a concrete type
2019-11-07 09:39:59	-->	maelcum (~horst@2001:16b8:5cc3:6400:49b3:a16c:5215:9644) has joined ##rust
2019-11-07 09:41:18	guzzlefry	gotcha
2019-11-07 09:41:51	Moongoodgirl	netopso: that sound like `HashMap<_, Mutex<_>>`
2019-11-07 09:47:06	vorner	netopso, Then you can set the values to Mutex<T> and you don't need to get mutable reference to the mutex to modify the the stuff inside it.
2019-11-07 09:47:57	<--	machinly-tmp (~machinly@106.38.40.98) has quit (Ping timeout: 246 seconds)
2019-11-07 09:48:30	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-07 09:49:48	<--	baali (~baali@59.98.186.142) has quit (Ping timeout: 268 seconds)
2019-11-07 09:59:55	guzzlefry	Is actix a good web framework to go with?
2019-11-07 10:02:08	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-07 10:04:04	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 10:17:12	-->	kleschenko (~kleschenk@188.163.114.126) has joined ##rust
2019-11-07 10:17:28	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-07 10:21:01	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 10:21:37	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-07 10:22:03	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-07 10:25:19	<--	Ichorio_ (~Ichorio@2001:16b8:5711:e500:7975:598f:fe3e:4333) has quit (Ping timeout: 264 seconds)
2019-11-07 10:26:48	<--	kaze404 (~quassel@162.55.198.35.bc.googleusercontent.com) has quit (Read error: Connection reset by peer)
2019-11-07 10:27:37	-->	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has joined ##rust
2019-11-07 10:31:41	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-07 10:36:00	<--	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has quit (Remote host closed the connection)
2019-11-07 10:36:19	-->	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has joined ##rust
2019-11-07 10:39:06	<--	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has quit (Remote host closed the connection)
2019-11-07 10:39:28	-->	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has joined ##rust
2019-11-07 10:44:20	<--	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has quit (Ping timeout: 276 seconds)
2019-11-07 10:47:23	-->	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has joined ##rust
2019-11-07 10:51:51	<--	smurfendrek123 (~smurfendr@nat-56.kulnet.kuleuven.be) has quit (Ping timeout: 252 seconds)
2019-11-07 10:53:52	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-07 10:55:38	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-07 10:59:39	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-07 10:59:48	-->	Xatenev (~Xatenev@2a02:8108:9640:4455:a09c:f744:62a7:68d1) has joined ##rust
2019-11-07 11:00:44	-->	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has joined ##rust
2019-11-07 11:00:49	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-07 11:06:11	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-07 11:06:11	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-07 11:06:11	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-07 11:06:12	--	Channel ##rust: 589 nicks (2 ops, 0 voices, 587 normals)
2019-11-07 11:06:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-07 11:06:55	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-07 11:13:16	<--	tsal (~tsal@i59F4AF99.versanet.de) has quit (Ping timeout: 264 seconds)
2019-11-07 11:14:21	-->	tsal (~tsal@i59F4A46E.versanet.de) has joined ##rust
2019-11-07 11:14:53	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 245 seconds)
2019-11-07 11:27:28	-->	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has joined ##rust
2019-11-07 11:30:24	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-07 11:30:28	<--	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Read error: Connection reset by peer)
2019-11-07 11:31:36	-->	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-07 11:36:27	<--	smurfendrek123 (~smurfendr@2a02:2c40:200:b001::1:2c7a) has quit (Ping timeout: 246 seconds)
2019-11-07 11:43:12	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 252 seconds)
2019-11-07 11:47:39	<--	kleschenko (~kleschenk@188.163.114.126) has quit (Ping timeout: 246 seconds)
2019-11-07 11:53:49	-->	con3|2 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 11:54:23	noonien	i'm having some difficulties with liftimes, why does this example not compile? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5168c72e8a6ccaf23f4ea6f1f301dbef
2019-11-07 11:56:53	noonien	i see the lifetimes mismatch, however, they're not printed in the way i put them there. am i missing something?
2019-11-07 11:57:31	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 252 seconds)
2019-11-07 12:00:23	noonien	oh, it seems i had to add a lifetime to the trait
2019-11-07 12:01:55	--	con3|2 is now known as con3
2019-11-07 12:03:15	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-07 12:03:44	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 12:04:22	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-07 12:05:31	-->	ytain (~ghfg@2607:f2c0:93f0:ca00:993e:9529:68fa:86a) has joined ##rust
2019-11-07 12:11:49	Moongoodgirl	noonien: It seems to me that dropping the 'a parameter on Foo::bar() and using `&mut self` (lifetime elided) instead would make more sense
2019-11-07 12:11:55	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-07 12:12:36	Moongoodgirl	fn bar<'b>(&mut self, buf: &'b mut [u8]) -> &'b mut [u8]
2019-11-07 12:12:59	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-11-07 12:13:06	cart_man	Hi everyone
2019-11-07 12:13:37	Moongoodgirl	as written, it seems to impose restrictions that aren't necessary and could lead to difficulties in usage
2019-11-07 12:13:56	cart_man	Why do I get this error ? -> https://hastebin.com/epopakupum.cpp
2019-11-07 12:15:02	j`ey	does the file already exist?
2019-11-07 12:15:39	Moongoodgirl	I would say it already exists, given that the error being reported here says that it already exists
2019-11-07 12:15:49	j`ey	Moongoodgirl: that was my guess too :P
2019-11-07 12:15:55	Moongoodgirl	:P
2019-11-07 12:16:45	j`ey	although not sure why the bad file number error happens
2019-11-07 12:17:06	Moongoodgirl	I think File::open() opens read-only
2019-11-07 12:17:26	j`ey	"Attempts to open a file in read-only mode."
2019-11-07 12:17:27	j`ey	yup
2019-11-07 12:17:46	Moongoodgirl	that explains all that then
2019-11-07 12:18:10	Moongoodgirl	cart_man: any particular reason you're using `unistd::write()` instead of `File::write()`?
2019-11-07 12:18:26	j`ey	https://doc.rust-lang.org/std/fs/struct.OpenOptions.html lame that you have to use this, kinda
2019-11-07 12:19:27	Moongoodgirl	I bet there's a crate that provides convenience methods
2019-11-07 12:19:33	Moongoodgirl	functions *
2019-11-07 12:21:07	cart_man	Moongoodgirl: Yes I am trying to have a file PIPE in RAM or just a piped file I want to write to
2019-11-07 12:22:03	cart_man	@Moongoodgirl I am basically just tryong to make a Pipe I can write into into using the fastest methods. I was working on this about a month ago and now I need to pick it up again
2019-11-07 12:22:50	Moongoodgirl	cart_man: `<File as Write>::write()` should work even if the file is actually a named pipe
2019-11-07 12:24:23	cart_man	@Moongoodgirl SHould but I read somewhere that using unistd is fastest although a bit harder to do...which is fine
2019-11-07 12:24:36	Moongoodgirl	O.o .
2019-11-07 12:24:42	j`ey	sounds like youre optimising way too early
2019-11-07 12:24:56	Moongoodgirl	That doesn't sound right.
2019-11-07 12:26:22	cart_man	Moongoodgirl: Really?
2019-11-07 12:26:36	cart_man	j`ey: I just have an idea in mind
2019-11-07 12:26:52	cart_man	and this small part when done right makes allot of the rest easier
2019-11-07 12:26:59	Moongoodgirl	I don't see why it would be slower.
2019-11-07 12:27:08	j`ey	I would suggest to use the File APIs,if theyre easier
2019-11-07 12:27:14	j`ey	to make it easier to get right
2019-11-07 12:32:48	cart_man	But I am so close ghezlike... like I am getting a RAW_FD ?
2019-11-07 12:32:59	cart_man	Ok j`ey I will consider it
2019-11-07 12:33:31	jellie	Hello, is a str the type for a string literal? and when I pass a string literal to a fn that takes a &str is the compiler implicitly passing the reference?
2019-11-07 12:33:52	j`ey	jellie: &str
2019-11-07 12:33:55	jellie	e.g let b = "abcd"; fn_that_takes_&str(b);
2019-11-07 12:34:21	jellie	j`ey: So it's always a reference? yet its stored on the stack?
2019-11-07 12:34:22	j`ey	cart_man: have you read the comments we made?
2019-11-07 12:34:32	j`ey	jellie: it's nost stored on the stack
2019-11-07 12:34:39	jellie	I read about it somewhere in the book. I just can't find it.
2019-11-07 12:34:45	j`ey	jellie: b is stored on the stack, but it's a reference so points elsewhere
2019-11-07 12:34:53	jellie	j`ey: String literals aren't stored on the stack?
2019-11-07 12:35:04	j`ey	jellie: no
2019-11-07 12:35:04	jellie	I didn't know that
2019-11-07 12:35:11	j`ey	jellie: theyre stored in .rodata section
2019-11-07 12:35:24	jellie	new word
2019-11-07 12:35:51	j`ey	section or rodata?
2019-11-07 12:35:52	jellie	Does Rust take time to write non trivial programs or am I umm not as good a programmer as I thought I was.
2019-11-07 12:36:04	jellie	rodata
2019-11-07 12:36:09	j`ey	jellie: what's your background/other languages
2019-11-07 12:36:13	j`ey	rodata = read-only data
2019-11-07 12:39:23	jellie	hmm tbh I've written a lot of languages. umm professionally I've wirten JavaScript, Python, Clojure, ClojureScript
2019-11-07 12:39:28	cart_man	j`ey: Ahm sorry I am lost.. what do you mean comments? THe ones about premature optimizing ?
2019-11-07 12:39:31	jellie	Did some Haskell at a point
2019-11-07 12:39:47	jellie	But I've never really written C/C++ outside of an algorithms class
2019-11-07 12:39:59	j`ey	cart_man: no, about the fact that the file already exists, and that File::open doesnt open for writing
2019-11-07 12:40:10	jellie	I'd be more of what people call full stack web
2019-11-07 12:40:15	cart_man	j`ey: Ohhhh
2019-11-07 12:40:15	j`ey	jellie: fair
2019-11-07 12:40:29	jellie	I've also done a fair amount of LISPS
2019-11-07 12:40:42	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-07 12:40:52	j`ey	jellie: I cant really say, because I have different experience. but Rust probably has a steeper learning curve than js/python
2019-11-07 12:41:09	cart_man	j`ey: Moongoodgirl Ohh shit sorry I must have missed that somewhow ....soz
2019-11-07 12:41:13	jellie	I've been looking at the ToC of Programming Rust by Jim and Jason
2019-11-07 12:41:21	<--	afidegnum (~isodec@41.210.59.121) has quit (Quit: leaving)
2019-11-07 12:41:35	jellie	and it looks like it'll be a better book to really build something non trivial
2019-11-07 12:41:49	jellie	j`ey: Ha! Yes, feels a lot like Haskell.
2019-11-07 12:42:05	jellie	Writing it requires a good amount of upfront thought.
2019-11-07 12:42:36	jellie	This is my 3rd week of Rust. I spent about 2 weeks getting through the Rust book.
2019-11-07 12:42:38	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-07 12:43:40	j`ey	jellie: stick with it!
2019-11-07 12:44:57	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-07 12:45:00	--	cdown_ is now known as cdown
2019-11-07 12:48:15	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-07 12:48:54	Moongoodgirl	jellie: compiled programs (and libraries) have a few different sections. There's a section for code, of course, and there's a separate section for constants like strings and arrays, plus a few more sections.
2019-11-07 12:49:21	j`ey	code is called .text, writable data is .data, read-only data is .rodata
2019-11-07 12:49:34	j`ey	(this is ELF, but Im sure it's similar on other platforms)
2019-11-07 12:49:58	Moongoodgirl	(tiny constants are probably baked into the instructions rather than loaded from .rodata)
2019-11-07 12:51:43	noonien	Moongoodgirl: thanks!
2019-11-07 12:52:43	Moongoodgirl	noonien :)
2019-11-07 12:53:09	j`ey	Moongoodgirl: or 'constant pools' which are small bits of data between instructions
2019-11-07 12:53:30	Moongoodgirl	wut
2019-11-07 12:53:32	Moongoodgirl	that's a thing?
2019-11-07 12:53:57	j`ey	yep
2019-11-07 12:54:09	-->	kleschenko (~kleschenk@80.93.124.102) has joined ##rust
2019-11-07 12:54:11	j`ey	for example, on arm
2019-11-07 12:54:26	j`ey	Im assuming x86 does it too, for constants that arent encodable
2019-11-07 12:54:45	Moongoodgirl	…oh, I guess on some arches for some constants it would be fewer instructions to load from a nearby address
2019-11-07 12:54:56	Moongoodgirl	I mean, every constant is encodable, given enough instructions :P
2019-11-07 12:55:40	j`ey	hah
2019-11-07 12:57:04	jellie	j`ey: Moongoodgirl: Thanks :)
2019-11-07 12:57:14	Moongoodgirl	:)
2019-11-07 12:57:28	jellie	j`ey: I do want to stick with it. I will stick with it. Hopefully even find work writing Rust.
2019-11-07 13:06:02	j`ey	some people at my work are starting to get interested in rust
2019-11-07 13:06:08	j`ey	currently Im just using it to write benchmarks
2019-11-07 13:07:03	jellie	What would you say is an owned type and I don't think it has to do with ToOwned trait.
2019-11-07 13:07:13	j`ey	String is Owned
2019-11-07 13:07:51	jellie	Owned by what? Values stored on the heap are owned?
2019-11-07 13:08:08	jellie	By a variable or fn or struct?
2019-11-07 13:10:24	-->	dozn (~dozn@S01069050ca3c43c3.vs.shawcable.net) has joined ##rust
2019-11-07 13:10:37	j`ey	uh
2019-11-07 13:10:40	j`ey	owned by the struct
2019-11-07 13:10:52	j`ey	a String 'Owns' the character data
2019-11-07 13:11:11	j`ey	basically &reference = borrowed, value = owned
2019-11-07 13:13:55	Moongoodgirl	But there are types besides &_ that are borrowed as well.
2019-11-07 13:14:07	Moongoodgirl	like std::cell::Ref
2019-11-07 13:15:55	j`ey	that contains a &ref
2019-11-07 13:15:55	<--	matthias_bgg (~mbgg@37.223.137.234) has quit (Read error: Connection reset by peer)
2019-11-07 13:16:20	Moongoodgirl	/owned/ is perhaps a bit ambiguous? A useful distinction is the one between types that are self-contained (e.g. u64, String, Box<T>, and Vec<T>, assuming that T is self-contained) and types that borrow something (e.g. &T, Ref<T>, Cow<..> sort of, for any T)
2019-11-07 13:16:31	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-11-07 13:16:34	Moongoodgirl	well, yes :P
2019-11-07 13:16:53	Moongoodgirl	but you can't always tell whether something transitively contains a reference
2019-11-07 13:17:05	Moongoodgirl	…well. You can use the presence of lifetime params as an indicator.
2019-11-07 13:17:52	j`ey	&'static?
2019-11-07 13:38:28	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-07 13:40:00	<--	carado_ (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Ping timeout: 246 seconds)
2019-11-07 13:46:39	elichai2	hi, does anyone knows if there's a way to extend something from llvm to rust experimentally *without* modiyfing the compiler?
2019-11-07 13:47:07	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-07 13:47:25	j`ey	like what?
2019-11-07 13:47:41	j`ey	you can call intrinsics, but Im not sure if that's a std only thing
2019-11-07 13:47:54	j`ey	(oh nvm, packed_simd does it, so it's not std only)
2019-11-07 13:48:33	j`ey	https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/aarch64/neon.rs#L66 for example
2019-11-07 13:48:37	-->	t7 (~tommo@2a00:23c5:1284:fc00:2086:2805:d663:1046) has joined ##rust
2019-11-07 13:48:47	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-07 13:49:21	-->	INSANU (~jhonnyvar@51.37.239.169) has joined ##rust
2019-11-07 13:49:35	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 268 seconds)
2019-11-07 13:52:54	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-07 13:53:39	<--	INSANU (~jhonnyvar@51.37.239.169) has quit (Ping timeout: 240 seconds)
2019-11-07 13:54:19	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 13:55:29	<--	cdown (~cdown@199.201.66.0) has quit (Remote host closed the connection)
2019-11-07 13:57:03	-->	cdown (~cdown@89.32.122.5) has joined ##rust
2019-11-07 13:57:04	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-07 13:57:22	<--	kurashu89 (~kurashu89@2601:c6:c100:b840:157a:d838:effe:6bdd) has quit (Remote host closed the connection)
2019-11-07 13:57:49	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 14:01:52	-->	kurashu89 (~kurashu89@c-76-97-225-14.hsd1.ga.comcast.net) has joined ##rust
2019-11-07 14:03:07	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-07 14:03:44	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Remote host closed the connection)
2019-11-07 14:04:06	-->	vindard (~vindard@190.83.165.233) has joined ##rust
2019-11-07 14:04:06	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-07 14:12:55	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-07 14:13:14	<--	lauromoura_ (~lauromour@2804:7f5:f380:7ff4:2d60:ac70:5695:80fd) has quit (Remote host closed the connection)
2019-11-07 14:13:33	-->	lauromoura_ (~lauromour@2804:7f5:f380:7ff4:3d42:cf2a:d88a:92a2) has joined ##rust
2019-11-07 14:17:49	-->	iq (~iq@2600:100e:bf10:1089:d00a:41ae:d994:5a7b) has joined ##rust
2019-11-07 14:22:03	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-07 14:22:50	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 14:23:24	elichai2	j`ey: like arbitrary precision integers
2019-11-07 14:24:22	elichai2	in llvm you can easily do `i1024` and `u1024` and even way bigger. (i.e. `u65536` hehe)
2019-11-07 14:25:21	elichai2	,crate llvm-sys
2019-11-07 14:28:14	Moongoodgirl	j`ey: not a perfect indicator
2019-11-07 14:28:18	Moongoodgirl	but an indicator nonetheless
2019-11-07 14:28:32	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-07 14:31:50	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Ping timeout: 276 seconds)
2019-11-07 14:32:24	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-07 14:36:04	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-07 14:41:00	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-07 14:42:23	-->	shakahl (uid57932@gateway/web/irccloud.com/x-fuwmijkxoevwvthk) has joined ##rust
2019-11-07 14:51:51	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-07 14:57:51	j`ey	elichai2: I doubt you could do that with it integrated into rust syntax
2019-11-07 15:00:42	-->	hashworks (~hashworks@unaffiliated/hashworks) has joined ##rust
2019-11-07 15:01:27	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-11-07 15:02:19	hashworks	Hi! I have a function that returns the available position for a chess knight from a given position on a chessboard. https://fb.hash.works/Ao6zIgmC/rust However after my core::iter::Iterator::fold call I get "- expected one of `.`, `?`, `{`, or an operator here" at line 23, any idea?
2019-11-07 15:02:47	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-07 15:02:59	hashworks	I expected it to return am (in the expression)
2019-11-07 15:03:06	j`ey	did you mean to have 'for m in..'
2019-11-07 15:03:09	j`ey	at the start?
2019-11-07 15:03:30	hashworks	Yes. I expected the whole thing to return am
2019-11-07 15:03:39	hashworks	As an expression
2019-11-07 15:03:44	-->	aljama (~quassel@unaffiliated/aljama) has joined ##rust
2019-11-07 15:03:45	j`ey	but why the 'for m in'?
2019-11-07 15:03:45	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Remote host closed the connection)
2019-11-07 15:03:46	<--	andreas31 (~andreas@gateway/tor-sasl/andreas303) has quit (Remote host closed the connection)
2019-11-07 15:03:56	Lumpio-	"for m in" can only be part of a for loop expression
2019-11-07 15:03:57	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-11-07 15:04:00	Lumpio-	"for m in foo { ... }"
2019-11-07 15:04:13	hashworks	Ah. That makes no sense
2019-11-07 15:04:15	hashworks	Right
2019-11-07 15:04:17	hashworks	Sorry :D
2019-11-07 15:04:30	j`ey	lemme fix it
2019-11-07 15:04:52	j`ey	or rather, once you get rid of that, there's a few other errors
2019-11-07 15:04:54	Lumpio-	Also can't you "collect" instead of "fold"?
2019-11-07 15:05:33	j`ey	yah that would look better
2019-11-07 15:06:16	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e1e3d37717660da02d96575ed80b1633 this is the final version that compiles
2019-11-07 15:06:23	-->	andreas31 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-11-07 15:06:35	-->	npmccallum (~npmccallu@2602:30a:2e5b:2551:6a57:106:4af1:6f66) has joined ##rust
2019-11-07 15:06:56	Lumpio-	I would put the map before the filter
2019-11-07 15:06:59	Lumpio-	Then you don't have to do the addition twice
2019-11-07 15:07:39	j`ey	oh right, I didnt even look at the filter
2019-11-07 15:08:20	hashworks	Ah that's better, thanks!
2019-11-07 15:08:32	Lumpio-	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8ee5a31f72afc91819849b7e6750a550
2019-11-07 15:08:43	j`ey	hashworks: You cant do Vec::<>(), you need ::new()
2019-11-07 15:08:43	Lumpio-	Gets rid of most of the anoying casts too
2019-11-07 15:09:14	Lumpio-	Additionally if I had to deal with a lot of points I would use a Point/Rect structs and some handy methods for them
2019-11-07 15:09:20	Lumpio-	Like Rect::contains(Point)
2019-11-07 15:09:34	Lumpio-	And implement Add etc
2019-11-07 15:10:13	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Remote host closed the connection)
2019-11-07 15:10:32	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-07 15:11:27	<--	simlay1 (~simlay@gateway/tor-sasl/simlay) has quit (Remote host closed the connection)
2019-11-07 15:11:38	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-07 15:11:56	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-11-07 15:16:08	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-07 15:16:32	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-07 15:16:52	elichai2	I'll try to directly use some of llvm functions/types. If I can find the right headers and run bindgen on them hehe
2019-11-07 15:17:44	j`ey	but that wont let you output stuff into your rust binary
2019-11-07 15:18:06	j`ey	only output stuff from your binary
2019-11-07 15:18:25	-->	lauromoura (~lauromour@2804:7f5:f380:4ef7:3d42:cf2a:d88a:92a2) has joined ##rust
2019-11-07 15:19:56	<--	lauromoura_ (~lauromour@2804:7f5:f380:7ff4:3d42:cf2a:d88a:92a2) has quit (Ping timeout: 276 seconds)
2019-11-07 15:20:39	hashworks	j`ey: I had a function body right below that before I changed it and totally forgot about the for m in …, which of course resulted in RLS giving me "wrong" error messages
2019-11-07 15:21:56	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-07 15:22:31	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Read error: Connection reset by peer)
2019-11-07 15:24:41	hashworks	And AFAIK you can't put the map before the filter since it then won't filter out positions outside of the board (usize cast would give 0 for negative i32?)
2019-11-07 15:25:14	hashworks	The compiler actually warns about line 15 and 16 (comparison is useless due to type limits)
2019-11-07 15:26:47	Lumpio-	oh oops
2019-11-07 15:27:11	hashworks	I guess you could do two maps? Like one for the calculation in i32 and one for the usize casting
2019-11-07 15:27:13	Lumpio-	Personally I'd just make everything isize so avoid dupliation
2019-11-07 15:27:21	Lumpio-	to*
2019-11-07 15:27:27	hashworks	I'm using that for the vector indexes
2019-11-07 15:27:31	<--	SpaceManiac (~SpaceMani@2601:200:4400:f::1043) has quit (Ping timeout: 250 seconds)
2019-11-07 15:27:32	hashworks	So I guess I need usize?
2019-11-07 15:29:58	Lumpio-	Well you need to cast to usize
2019-11-07 15:30:01	Lumpio-	For that part
2019-11-07 15:30:01	-->	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has joined ##rust
2019-11-07 15:30:17	Lumpio-	Or even better make the chessboard a struct with bespoke access methods
2019-11-07 15:30:20	<--	leaves (~leaves@unaffiliated/leaves) has quit (Ping timeout: 276 seconds)
2019-11-07 15:30:22	Lumpio-	You could even handle the bounds check in there.
2019-11-07 15:30:59	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-11-07 15:32:47	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-07 15:33:11	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-11-07 15:38:03	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-07 15:42:45	<--	AbedB (~AbedBhuty@bzq-109-64-95-117.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-07 15:44:24	-->	AbedB (~AbedBhuty@109.64.95.117) has joined ##rust
2019-11-07 15:45:02	statusfailed	can I explicitly supply a lifetime parameter when I call a function?
2019-11-07 15:45:13	statusfailed	like if I have fn foo<'a>( ... , can I call foo<'a>(); ?
2019-11-07 15:46:10	statusfailed	(I tried this, and got a syntax error)
2019-11-07 15:46:22	Kinnison	the 'a belongs to one of the arguments to that function
2019-11-07 15:46:34	Kinnison	What are you trying to achieve exactly?
2019-11-07 15:48:04	jebrosen	I believe the syntax would be foo::<'a>(), but most of the time you can't actually name the lifetime you would want to put there anyway
2019-11-07 15:49:12	statusfailed	jebrosen: why do you say that?
2019-11-07 15:50:16	jebrosen	In `let x = 3; let y = &3; foo::<'?>(y)`, you cannot name the lifetime that y has
2019-11-07 15:50:21	statusfailed	Kinnison: It's a little hard to give a minimal example, but basically i'm using Vulkano, and I want to return an "Instance" and a "PhysicalDevice" from the same function, but when you ask Vulkano to create you a PhysicalDevice it contains a reference to the Instance
2019-11-07 15:50:25	statusfailed	so I'm having lifetime problems
2019-11-07 15:50:35	statusfailed	(which, being a nub, I don't fully grok anyway)
2019-11-07 15:50:52	statusfailed	jebrosen: ah I see- in this case, i'm calling foo from within a function with an explicit lifetime anyway
2019-11-07 15:51:25	jebrosen	It sounds like what you actually want is a self-referential struct, which isn't supported directly by the language and requires tricks and lies
2019-11-07 15:51:42	statusfailed	Ah I was hoping this wasn't the case :D
2019-11-07 15:51:46	statusfailed	Yeah could be
2019-11-07 15:52:22	statusfailed	There's a not-too-awful workaround anyway, which is just split the creation of "instance" and "everything else" into two functions instead of one
2019-11-07 15:52:29	statusfailed	it just seemed like I should be able to do it in one
2019-11-07 15:52:34	Yaniel	arguably you should split it anyway
2019-11-07 15:52:39	statusfailed	Yaniel: why's that?
2019-11-07 15:52:46	Yaniel	because they are logically separate enough
2019-11-07 15:53:13	Yaniel	and both have a bunch of stuff that you may or may not need to take care of
2019-11-07 15:53:20	Yaniel	which is not shared
2019-11-07 15:53:35	Yaniel	(extensions, feature checks, layers)
2019-11-07 15:53:45	statusfailed	Yaniel: Ultimately I was trying to make a library to get rid of some boilerplate when setting up vulkan, so the idea being you have a struct of functions which you can add in as needed
2019-11-07 15:54:00	statusfailed	e.g., one callback to say which extensions you want
2019-11-07 15:54:51	Yaniel	that does not sound very rusty to me
2019-11-07 15:55:33	statusfailed	well if you have a better idea i'm all ears
2019-11-07 15:56:24	Yaniel	I mean if you have to write a function that enables layers you aren't exactly reducing boilerplate
2019-11-07 15:57:17	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-07 15:57:22	statusfailed	not sure what you mean by "enables layers" ?
2019-11-07 15:57:48	statusfailed	I mean you may be right but I have to sort out this lifetimes thing before I'll find out for sure :)
2019-11-07 15:58:06	Yaniel	I'd probably go for something builder-like for layers and features
2019-11-07 15:59:24	statusfailed	oh iswym
2019-11-07 15:59:40	statusfailed	still would need to build instance / other stuff separately
2019-11-07 15:59:55	Yaniel	like my_layers = InstanceLayers::new().required("VK_KHR_debug").optional("FOO_my_custom_layer")
2019-11-07 15:59:56	statusfailed	but I know Rust about as well as I know Vulkan, i.e., not much, so I'll see how it goes :D
2019-11-07 16:00:21	Yaniel	same with features
2019-11-07 16:01:38	Yaniel	and in the end you'd get a struct which just contains fields of type enum {Required(thing), Optional(thing), Disabled}
2019-11-07 16:02:34	Yaniel	for features you can do without the 'thing' parameter, for layers you'll just want to put all the required and optional values into a vec or something
2019-11-07 16:03:04	Yaniel	actually the layers part might be fine even without a builder
2019-11-07 16:03:41	statusfailed	I'm more talking about not having to write the boilerplate to get the physical device, queue family, queues, etc.
2019-11-07 16:03:51	statusfailed	by providing some defaults
2019-11-07 16:03:59	statusfailed	but letting you plug in some 'decision making' code when needed
2019-11-07 16:04:10	statusfailed	I don't really know what layers are to be honest :)
2019-11-07 16:04:29	Yaniel	they are external libs that can hook vulkan api calls & stuff
2019-11-07 16:04:56	Yaniel	sometimes forced from outside of your app, sometimes loaded from within it
2019-11-07 16:05:20	Yaniel	for example renderdoc does its vulkan capture with a custom layer that it just force-enables for applications launched through it
2019-11-07 16:06:19	Yaniel	steam has a layer that caches your pipeline objects and possibly other stuff
2019-11-07 16:06:27	statusfailed	oh, steam overlay uses this right?
2019-11-07 16:07:09	Yaniel	not sure about that one
2019-11-07 16:07:30	Yaniel	it does not really care about your vulkan calls so vulkan layers are a bit besides the point for it
2019-11-07 16:07:57	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-11-07 16:09:46	<--	pjs902 (~quassel@140.184.2.20) has quit (Client Quit)
2019-11-07 16:10:28	-->	baali (~baali@59.98.232.86) has joined ##rust
2019-11-07 16:11:40	Yaniel	in steam's case it is more about building pipeline descriptors (somewhat slow but necessary)
2019-11-07 16:11:50	Yaniel	in opengl there is also compiling shaders
2019-11-07 16:12:27	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-07 16:12:30	Yaniel	so the layer hooks the pipeline creation call and tries to just fetch the prebuilt object from its cache
2019-11-07 16:12:38	Yaniel	instead of taking the time to build a new one
2019-11-07 16:12:57	Yaniel	-> less stutter, faster loading times
2019-11-07 16:14:02	Yaniel	or the validation layer, which hooks every call and yells at you if it does not like what you are doing at every step; in gl the driver would do this always in the background, in vulkan it is an optional layer that you can disable in release builds
2019-11-07 16:16:16	<--	ytain (~ghfg@2607:f2c0:93f0:ca00:993e:9529:68fa:86a) has quit (Ping timeout: 264 seconds)
2019-11-07 16:17:55	elichai2	j`ey: really? hmm. I thought I could use llvm bindings to generate a new type and use is as a native type. but I guess that's not what the llvm headers are for, they're for generating IR hmmm
2019-11-07 16:18:06	elichai2	I guess I *must* hack on the compiler? :/
2019-11-07 16:18:42	j`ey	elichai2: yeah theyre for generating IR from a rust program
2019-11-07 16:19:06	j`ey	elichai2: or use zig, that has arbitrary integers :P
2019-11-07 16:21:08	elichai2	j`ey: you're trying to get me off rust :O
2019-11-07 16:21:38	j`ey	elichai2: hah nah, but it's just something you cant do natively in rust :(
2019-11-07 16:22:26	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:dcc0:b27c:e861:d5b0) has joined ##rust
2019-11-07 16:23:26	elichai2	j`ey: well, if i'll have time and i'll succeed hacking the compiler, i'll benchmark llvm's codegen against `num-bigint`, `rug` etc.
2019-11-07 16:23:39	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-11-07 16:23:41	elichai2	if it will be faster/as fast i'll propose an RFC
2019-11-07 16:24:03	elichai2	especially with const generics
2019-11-07 16:24:03	j`ey	look for RFCs there probably is one for it already
2019-11-07 16:24:17	elichai2	we can have `Integet<const N>`
2019-11-07 16:24:18	j`ey	im sure people have talked about it before
2019-11-07 16:32:20	elichai2	somewhat related: https://github.com/rust-lang/rfcs/pull/2581
2019-11-07 16:35:33	j`ey	anyone familiar with x86-64 intrinsics? is this really the simplest way to get 2 f64s into a 128-bit register: https://paste.rs/K9E.rs
2019-11-07 16:36:22	elichai2	couldn't find
2019-11-07 16:38:39	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined ##rust
2019-11-07 16:39:18	elichai2	evalr: sts::mem::size_of::<f64>()
2019-11-07 16:39:20	--	Notice(evalr): error[E0433]: failed to resolve: use of undeclared type or module `sts`
2019-11-07 16:39:22	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=335cdc21af242b856f59db96cea5156b&version=stable&mode=debug
2019-11-07 16:39:26	elichai2	evalr: std::mem::size_of::<f64>()
2019-11-07 16:39:29	--	Notice(evalr): 8
2019-11-07 16:39:32	elichai2	evalr: std::mem::size_of::<u128>()
2019-11-07 16:39:35	--	Notice(evalr): 16
2019-11-07 16:42:54	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-07 16:43:20	elichai2	j`ey: you can use an array + `_mm_load_pd`
2019-11-07 16:43:24	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-11-07 16:43:53	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 16:43:54	-->	rbrady (~rbrady@redhat/rbrady) has joined ##rust
2019-11-07 16:46:51	elichai2	j`ey: i.e.: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8766ade75fca77019083e345618845e8
2019-11-07 16:47:04	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Ping timeout: 265 seconds)
2019-11-07 16:47:38	elichai2	generally this is a very useful site: https://software.intel.com/sites/landingpage/IntrinsicsGuide/ you can select the exact extensions, and then what are you looking for (load/convert/arithmetics etc.)
2019-11-07 16:48:00	j`ey	I was wondering if there was something like: combine_f64s(a, b)
2019-11-07 16:48:10	j`ey	in this case the data isn't consecutive
2019-11-07 16:48:33	j`ey	but it's fine really, I was jsut curious. Im converting this code away from these intrinsics
2019-11-07 16:49:26	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-07 16:49:31	elichai2	well, it's pretty cheap to copy them into an array, but I dont think so
2019-11-07 16:49:51	elichai2	I think it costs the same for the intrinsics, so the would rather have you explictly do the copy
2019-11-07 16:50:27	elichai2	j`ey: especially because it's a "fake" intrinsic :) https://doc.rust-lang.org/src/core/up/stdarch/crates/core_arch/src/x86/sse2.rs.html#2533-2535
2019-11-07 16:53:24	elichai2	this makes me wonder. can we make a sane rust safe API for these intrinsics? (don't see a reason why not)
2019-11-07 16:53:43	elichai2	do we want that though? or do we hope they'll be redundant because of llvm?
2019-11-07 16:54:04	j`ey	well I think packed_simd is trying to make a sane api?
2019-11-07 16:55:26	nerdypepper	so thrilled for async/.await!
2019-11-07 16:55:28	-->	sfink (~chatzilla@107-207-38-202.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-11-07 16:55:32	nerdypepper	gj rust team
2019-11-07 16:55:37	--	est31 is now known as est
2019-11-07 16:59:12	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-07 17:05:44	<--	evalr (~evalr@85.25.44.176) has quit (Remote host closed the connection)
2019-11-07 17:05:54	-->	evalr (~evalr@85.25.44.176) has joined ##rust
2019-11-07 17:08:48	<--	Fairy (~Fairy@unaffiliated/fairy) has quit (Ping timeout: 252 seconds)
2019-11-07 17:08:49	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-07 17:09:10	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-11-07 17:10:01	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-07 17:11:30	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 17:12:14	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-07 17:12:27	<--	con3 (~kvirc@154.119.40.183) has quit (Excess Flood)
2019-11-07 17:13:17	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-07 17:13:42	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-07 17:14:23	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 17:14:52	<--	con3 (~kvirc@154.119.40.183) has quit (Max SendQ exceeded)
2019-11-07 17:15:43	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 17:18:49	-->	ldiamond (~ldiamond@unaffiliated/ldiamond) has joined ##rust
2019-11-07 17:20:23	ldiamond	Regarding async/await. The post by Niko Matsakis states: `they don't do anything until you await them`. Am I correct to assume that's only the case if you have no async runtime?
2019-11-07 17:20:25	j`ey	rust nightly dates are confusing
2019-11-07 17:20:27	<--	kleschenko (~kleschenk@80.93.124.102) has quit (Ping timeout: 240 seconds)
2019-11-07 17:21:17	-->	kleschenko (~kleschenk@80.93.124.102) has joined ##rust
2019-11-07 17:21:36	jebrosen	j`ey: rustup behind a day? I think they tried to fix it a few times and something always went wrong
2019-11-07 17:21:45	j`ey	https://paste.rs/qmL
2019-11-07 17:21:54	Kinnison	ldiamond: No, an async function when called *constructs* the future, it does no work to progress that future until you .await it
2019-11-07 17:22:37	j`ey	Kinnison: am I wrong in thinking this is weird, ^
2019-11-07 17:22:59	jebrosen	j`ey: I can't seem to bypass the expired cert on my phone
2019-11-07 17:23:04	Kinnison	It kinda makes sense to me, but I've worked in async models since the late 90s
2019-11-07 17:23:35	j`ey	Kinnison: sorry I was talking about my paste
2019-11-07 17:23:41	jebrosen	j`ey: Oh, got it. Yeah it's been that way as long as I can remember
2019-11-07 17:23:43	Kinnison	oh, lemme look
2019-11-07 17:24:05	Kinnison	hmm, the certificate on paste.rs is broken
2019-11-07 17:24:09	ldiamond	Kinnison: Then I fail to see the usefulness of it. If you have to `.await` it, what's the point in constructing the `Future` in the first place?
2019-11-07 17:24:12	j`ey	 https://paste.ubuntu.com/p/fXnfm8W3MM/
2019-11-07 17:24:26	j`ey	jebrosen: Im not sure what to put in the rust-toolchain then
2019-11-07 17:24:40	Kinnison	ldiamond: because the future cna then be handed off to an executor, or used in part of a compound future
2019-11-07 17:24:53	ldiamond	Generally you'd use async/await to start the execution such that it already made progress when you really need it
2019-11-07 17:25:20	Kinnison	j`ey: Aah, yeah, so the date stamps in rustc vs. the stamps on the channels are not the same
2019-11-07 17:25:40	ldiamond	Kinnison: so then what I said was correct?
2019-11-07 17:25:47	j`ey	so do I just guess another date? :P
2019-11-07 17:25:58	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-07 17:25:59	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-11-07 17:26:18	Kinnison	If there's a particular dated compiler you need, then generally it'll be the channel dated the next day, but it's not guaranteed, nightly is not 100% on this kind of thing
2019-11-07 17:26:23	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-11-07 17:26:29	jebrosen	ldiamond: Where is "generally"? One major difference between rust and say JS or C# is that rust does not have anywhere to "start the execution"
2019-11-07 17:27:01	ldiamond	jebrosen: Which is what async-std/tokio does no?
2019-11-07 17:27:02	Kinnison	ldiamond: Unlike JS promises, futures are *lazy*
2019-11-07 17:27:09	j`ey	not particularily, just would be nice to pin it to the one I tested with
2019-11-07 17:27:45	Kinnison	ldiamond: there are pros and cons of both eager and lazy approaches.  Rust chose the lazy approach, JS chose the eager approach
2019-11-07 17:27:46	jebrosen	At one point I think it was proposed that async fn should run synchronously to the first await when called, but it was seen as undesirable
2019-11-07 17:28:06	j`ey	Kinnison: can i specify nightly with a hash?
2019-11-07 17:28:24	j`ey	nope, that would be nice
2019-11-07 17:28:26	Kinnison	ldiamond: 99% of the time, if you call a future-returning function, you're likely to be doing something like: let foo = myfunc().await?; anyway
2019-11-07 17:28:37	Kinnison	j`ey: Sorry, hash-based toolchain fetching is not in rustup right now -- we're considering it
2019-11-07 17:29:08	j`ey	Kinnison: just gets me a bit 'worried' when you specify a date and get a different date
2019-11-07 17:29:14	j`ey	people might (will) get confused
2019-11-07 17:29:22	ldiamond	Kinnison: then what is the point of async/await at all? Just make everything synchronous.
2019-11-07 17:29:43	Yaniel	it supposedly makes the web people happy
2019-11-07 17:30:03	ldiamond	Most of the time, I do `let x = myfunc(); ... do something else ...; use(x.await?);`
2019-11-07 17:30:16	 *	Kinnison is not going to explain the async vs. sync argument.  There's lots of documentation out there about it
2019-11-07 17:31:22	Kinnison	If you actually want the future returned by myfunc() to run in parallel to the rest of your code, why not spawn it off, and join it later?
2019-11-07 17:32:16	j`ey	i thought that futures with some fancy executor could do that
2019-11-07 17:33:00	ldiamond	My assumption was that async-std was exactly that. An executor that runs the async functions automatically
2019-11-07 17:35:25	Yaniel	I just don't see how this sort of lazy async will magically solve all the perfs for webservers
2019-11-07 17:35:44	Yaniel	which has been the most vocal crowd asking for async from what I've seen
2019-11-07 17:35:50	ldiamond	well, if it's really fully "lazy" then `async` is really synchronous.
2019-11-07 17:36:25	ldiamond	Surely there has to be something more to it.
2019-11-07 17:37:02	<--	dozn (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Read error: Connection reset by peer)
2019-11-07 17:37:02	<--	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Read error: Connection reset by peer)
2019-11-07 17:37:06	-->	ytain (~ghfg@2607:f2c0:93f2:1300:518d:6f46:ce8b:4dae) has joined ##rust
2019-11-07 17:45:14	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-07 17:49:31	<--	rrooij (~rrooij@terminusdb/developer/rrooij) has quit (Quit: WeeChat 2.6)
2019-11-07 17:56:38	-->	urbanslug (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-07 18:01:42	Arnavion	j`ey: cargo's date can be multiple days behind the toolchain date / rustc date. Cargo is not revved as often as rustc (since it's a submodule)
2019-11-07 18:01:48	<--	narispo (~narispo@2a01:e35:2fbc:8b90:d53c:1f80:e2f9:cf41) has quit (Ping timeout: 246 seconds)
2019-11-07 18:02:25	<--	urbanslug (~zipper@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-07 18:02:32	j`ey	I understand, just not sure how you're meant to get it right!
2019-11-07 18:02:38	Arnavion	j`ey: If you're looking for a specific version of cargo, you have to guess the toolchain date. There's no easy way to find out ahead of time which toolchain has which version of cargo you want
2019-11-08 09:09:17	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-08 09:09:17	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-08 09:09:17	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-08 09:09:17	--	Channel ##rust: 598 nicks (2 ops, 0 voices, 596 normals)
2019-11-08 09:09:34	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-08 09:09:37	<--	baali (~baali@117.241.128.204) has quit (Ping timeout: 250 seconds)
2019-11-08 09:20:14	<--	matheusmoreira (~matheusmo@191.35.186.182) has quit (Ping timeout: 276 seconds)
2019-11-08 09:21:15	-->	yazz (~Thunderbi@83-144-77-210.static.chello.pl) has joined ##rust
2019-11-08 09:23:13	-->	baali (~baali@106.207.128.172) has joined ##rust
2019-11-08 09:25:39	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 09:25:40	-->	localhorse (uid18992@gateway/web/irccloud.com/x-eqvvugiqjblwlwml) has joined ##rust
2019-11-08 09:26:29	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 09:29:36	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-08 09:30:00	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 09:31:00	-->	kleschenko (~kleschenk@188.163.114.126) has joined ##rust
2019-11-08 09:32:18	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-11-08 09:33:04	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-08 09:35:41	-->	maelcum (~horst@2001:16b8:5c5e:d300:882e:fa16:73f6:a806) has joined ##rust
2019-11-08 09:38:42	-->	royal_screwup21 (05947e55@gateway/web/cgi-irc/kiwiirc.com/ip.5.148.126.85) has joined ##rust
2019-11-08 09:39:32	<--	infinee (~infinee@061093245022.static.ctinets.com) has quit (Quit: WeeChat 2.3)
2019-11-08 09:45:25	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-11-08 09:47:14	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-08 09:56:21	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 09:57:02	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 09:57:03	<--	royal_screwup21 (05947e55@gateway/web/cgi-irc/kiwiirc.com/ip.5.148.126.85) has quit (Remote host closed the connection)
2019-11-08 09:59:17	<--	wolfshappen (~waff@irc.furworks.de) has quit (Ping timeout: 240 seconds)
2019-11-08 10:02:17	-->	wolfshappen (~waff@irc.furworks.de) has joined ##rust
2019-11-08 10:06:08	<--	tsaka__ (~torstein@200116b84677c7003d1075dd28e0c44d.dip.versatel-1u1.de) has quit (Ping timeout: 245 seconds)
2019-11-08 10:06:37	<--	chowmeined (~chowmeine@unaffiliated/chowmeined) has quit (Ping timeout: 240 seconds)
2019-11-08 10:11:50	-->	chowmeined (~chowmeine@unaffiliated/chowmeined) has joined ##rust
2019-11-08 10:19:51	<--	the_nozzle (~the_nozzl@c-73-231-84-87.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2019-11-08 10:23:22	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 10:24:03	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 10:31:35	<--	nickmass (~nickmass@nickmass.com) has quit (Quit: Quitting)
2019-11-08 10:31:35	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-08 10:32:02	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-08 10:32:14	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-08 10:33:04	-->	nickmass (~nickmass@nickmass.com) has joined ##rust
2019-11-08 10:35:08	<--	hussam (uid193284@gateway/web/irccloud.com/x-ffefrypqthwxndfq) has quit (Quit: Connection closed for inactivity)
2019-11-08 10:36:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 10:37:04	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 10:45:54	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-08 10:49:23	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 10:50:06	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 10:53:16	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-08 10:54:05	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 10:56:30	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-08 11:00:50	<--	Pyrus (~pyrus@unaffiliated/pyrus) has quit (Quit: ZNC - http://znc.in)
2019-11-08 11:00:51	<--	kleschenko (~kleschenk@188.163.114.126) has quit (Ping timeout: 265 seconds)
2019-11-08 11:02:40	-->	kleschenko (~kleschenk@188.163.114.126) has joined ##rust
2019-11-08 11:03:39	-->	Pyrus (~pyrus@unaffiliated/pyrus) has joined ##rust
2019-11-08 11:11:33	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 245 seconds)
2019-11-08 11:12:02	<--	baali (~baali@106.207.128.172) has quit (Read error: Connection reset by peer)
2019-11-08 11:14:18	<--	npmccallum (~npmccallu@107-200-241-210.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2019-11-08 11:34:15	-->	baali (~baali@59.98.187.187) has joined ##rust
2019-11-08 11:34:59	-->	Xatenev (~Xatenev@2a02:8108:9640:4455:1c9b:f064:d4e7:15be) has joined ##rust
2019-11-08 11:35:56	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-08 11:38:07	<--	Xatenev (~Xatenev@2a02:8108:9640:4455:1c9b:f064:d4e7:15be) has quit (Client Quit)
2019-11-08 11:38:20	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-11-08 11:38:21	-->	Xatenev (~Xatenev@2a02:8108:9640:4455:1c9b:f064:d4e7:15be) has joined ##rust
2019-11-08 11:44:13	<--	maelcum (~horst@2001:16b8:5c5e:d300:882e:fa16:73f6:a806) has quit (Quit: Konversation terminated!)
2019-11-08 11:51:40	-->	maelcum (~horst@2001:16b8:5c5e:d300:3d00:7610:8891:c206) has joined ##rust
2019-11-08 12:01:14	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-08 12:07:04	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 265 seconds)
2019-11-08 12:09:04	-->	matthias_bgg (~mbgg@37.223.137.234) has joined ##rust
2019-11-08 12:23:17	netopso	f I instantiate a struct for test A, is there any way to share the instantiated structs with tests B..Z? I know they run in different threads, can I use an Arc<Mutex<>>?
2019-11-08 12:23:34	j`ey	do you need to share it?
2019-11-08 12:23:41	j`ey	is it expensive to instantiate?
2019-11-08 12:24:03	netopso	j`ey: yes
2019-11-08 12:24:16	j`ey	you could use lazy_static / once_cell
2019-11-08 12:25:15	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 12:26:00	netopso	j`ey: sure, but my question is how to share the context since tests are by default totally independent functions
2019-11-08 12:26:24	netopso	could I make tests a method of a struct somehow? how to instantiate the struct-of-tests?
2019-11-08 12:26:39	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 12:26:44	j`ey	lazy_static should just work
2019-11-08 12:27:32	netopso	j`ey: oh, I see
2019-11-08 12:31:44	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-08 12:32:42	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 12:34:10	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 12:34:24	<--	andytoshi (~apoelstra@unaffiliated/andytoshi) has quit (Read error: Connection reset by peer)
2019-11-08 12:44:37	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-08 12:48:09	-->	hussam (uid193284@gateway/web/irccloud.com/x-myuskuastfecymxs) has joined ##rust
2019-11-08 12:51:32	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 268 seconds)
2019-11-08 13:00:59	-->	Acru (4e6811aa@eduroam-078-104-017-170.wlan.univie.ac.at) has joined ##rust
2019-11-08 13:01:36	Acru	Hey, could someone tell me why this function definition is incorrect? `fn create_job_info<'a>(job_predecessors: &'a str, jobs_infos_temp: &'a Vec<JobInfo>) -> Option<Vec<&'a JobInfo>> {`
2019-11-08 13:02:34	Acru	Basically, I in this function I want to return a option of a vector which contains refrences to `JobInfo`s in `jobs_infos_temp` selected by the `job_predecessors` string
2019-11-08 13:03:19	carado_	i'm not sure you want 'a on job_predecessors
2019-11-08 13:04:34	-->	ytain (~ghfg@2607:f2c0:92c1:7800:12a:1ade:5d1f:bd6) has joined ##rust
2019-11-08 13:04:41	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-08 13:04:42	Acru	It tells me that the `JobInfo` in the return value misses a lifetime specifier
2019-11-08 13:04:45	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-08 13:05:08	Acru	Ah, I fixed it finally, sorry
2019-11-08 13:10:05	jellie	I'm trying to create a Cow around a String. Then passing that Cow to a function that returns a slice of the string borrowed by the cow.
2019-11-08 13:10:07	jellie	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4dc608f79a1fe077611e7deee19e2255
2019-11-08 13:10:48	jellie	My understanding of `String`, `str` and their references has clearly broken down
2019-11-08 13:11:55	j`ey	jellie: lemme take a look!
2019-11-08 13:12:07	jellie	Cool.
2019-11-08 13:12:17	j`ey	hm
2019-11-08 13:12:31	jellie	Let's start from here j`ey
2019-11-08 13:12:47	j`ey	jellie: whats the goal?
2019-11-08 13:13:23	jellie	let s: String = String::from("I am a string"); let c: Cow<str> = Cow::Borrowed(&str);
2019-11-08 13:13:38	jellie	Is a str a reference to a String?
2019-11-08 13:14:01	j`ey	&str is a reference to some data
2019-11-08 13:14:07	j`ey	but it doesnt have to be from a String
2019-11-08 13:14:23	j`ey	reemmber that string literals have a type of &str, but there isnt a String backing it
2019-11-08 13:14:29	jellie	But that there goes through the typechecker despite me passing a ref
2019-11-08 13:14:56	jellie	hmm
2019-11-08 13:15:18	j`ey	if you do &SomeString you can get a type of &str from it
2019-11-08 13:15:40	jellie	but the type of C is Cow<str> not Cow<&str>
2019-11-08 13:15:48	<--	Althorion (~althorion@188.146.101.127.nat.umts.dynamic.t-mobile.pl) has quit (Quit: Leaving)
2019-11-08 13:16:00	jellie	type of c
2019-11-08 13:16:10	jellie	This https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1b90f56a391d41e70f676644b03a7416
2019-11-08 13:16:50	j`ey	that's cos Cow<str> is a borrow, so it will be &str internally
2019-11-08 13:17:41	jellie	but having it like this fails: `let cow_seq: Cow<&str> = Cow::Borrowed(&seq);`
2019-11-08 13:17:56	j`ey	right, because that's internally &&str
2019-11-08 13:19:05	<--	yazz (~Thunderbi@83-144-77-210.static.chello.pl) has quit (Ping timeout: 265 seconds)
2019-11-08 13:19:38	jellie	Interesting
2019-11-08 13:19:44	jellie	I think I see what you mean
2019-11-08 13:20:18	jellie	So now to your question
2019-11-08 13:20:37	jellie	I'd like to create a slice of the first 10 chars of this borrowed str
2019-11-08 13:20:45	jellie	Inside splitter
2019-11-08 13:21:09	j`ey	well youre not borrowing the Cow<str> there, youre moving it
2019-11-08 13:21:15	j`ey	jellie: can you first say why you want Cow?
2019-11-08 13:22:08	jellie	I am trying to understand Cow because the lib I want to use uses Cow
2019-11-08 13:22:19	jellie	Most bioinformatics libs use Cow
2019-11-08 13:22:31	jellie	Because genomic data is composed of large strings
2019-11-08 13:22:39	jellie	So I want to break this string into substrings
2019-11-08 13:23:12	jellie	So I'll create many slices, and some could be be overlapping but I'm not sure about the overlaps.
2019-11-08 13:23:15	j`ey	in spliiter, you move the Cow into the function
2019-11-08 13:23:18	jellie	I'd also like not to borrow
2019-11-08 13:23:25	j`ey	a slice is a borrow
2019-11-08 13:24:10	j`ey	you cant move a Cow into a function and then return a slice/borrow/&str from it
2019-11-08 13:24:25	jellie	Ah so I'm moving it then returning a slice of something that's already deallocated
2019-11-08 13:24:31	jellie	I see what you mean :)
2019-11-08 13:24:39	j`ey	yep
2019-11-08 13:24:48	jellie	For now I'm just trying to figure Cow out
2019-11-08 13:24:56	jellie	Seems all the parsers are using it.
2019-11-08 13:25:11	jellie	Plus I like the lazy reading of files.
2019-11-08 13:25:17	j`ey	you would have gotten this error if you had tried &seq[0..10]
2019-11-08 13:25:22	j`ey	error[E0515]: cannot return value referencing function parameter `seq
2019-11-08 13:25:32	j`ey	jellie: so you need to look at passing &Cow
2019-11-08 13:25:47	jellie	j`ey: One second
2019-11-08 13:28:38	jellie	hmm I guess it worked. Let me now try build a hashmap out of the slice positions and references.
2019-11-08 13:28:43	jellie	One question though
2019-11-08 13:29:14	j`ey	another option, if youre slicing all from the same data is to just use index+len
2019-11-08 13:29:55	jellie	How come on line 21 I have to pass the reference/slice (first_ten) to println! instead of *first_ten ?
2019-11-08 13:30:10	jellie	Ah!
2019-11-08 13:30:22	j`ey	i feel like you were meant to link me to something :D
2019-11-08 13:30:26	jellie	Index+len sounds exactly what I need
2019-11-08 13:30:32	jellie	j`ey: Oh sorry lol
2019-11-08 13:30:39	jellie	j`ey: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6232ff0111e4d0dc2636dce5337241cd
2019-11-08 13:30:42	j`ey	slice is basically index+len
2019-11-08 13:36:47	-->	eremitah_ (~int@unaffiliated/eremitah) has joined ##rust
2019-11-08 13:37:37	<--	eremitah (~int@unaffiliated/eremitah) has quit (Ping timeout: 240 seconds)
2019-11-08 13:37:46	--	eremitah_ is now known as eremitah
2019-11-08 13:38:35	-->	t7 (~tommo@2a00:23c5:1284:fc00:e587:1902:7a39:553b) has joined ##rust
2019-11-08 13:39:53	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-08 13:39:59	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Client Quit)
2019-11-08 13:43:06	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-08 13:46:30	jellie	j`ey: Did you see the code? Why does println! on L21 not "accept" a dereferenced first_ten?
2019-11-08 13:46:43	jellie	Is it because it always does implicit deref?
2019-11-08 13:48:03	Lumpio-	Do you get an error about size not known at compilation time?
2019-11-08 13:50:04	j`ey	Lumpio-: yes
2019-11-08 13:50:18	Lumpio-	What do you even call [T]
2019-11-08 13:50:22	Lumpio-	If &[T] is slice
2019-11-08 13:50:27	j`ey	unsized.. slice? :|
2019-11-08 13:50:39	Lumpio-	Anyways slices can only live behind some kind of reference, jellie
2019-11-08 13:50:39	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-08 13:50:42	j`ey	jellie: it's because `str` is unsized
2019-11-08 13:51:06	Lumpio-	If you try to dereference it you get an unsized type and you can't have that unless it's behind a reference (that's why &[T] is ok as well as Box<[T]>)
2019-11-08 13:52:18	Acru	Hey, does someone know why this: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b4cbf4be84a531d117569ddb8ea14e3c will not compile? It tells me a variable with a different lifetime is returned, but I only use it for array access?
2019-11-08 13:53:44	Lumpio-	-> Option<Vec<&'a JobInfo<'b>>> {
2019-11-08 13:53:50	Lumpio-	I changed the &'b into &'a
2019-11-08 13:54:04	Lumpio-	Since the JobInfos are originally behind the 'a lifetime the return value has to also use that
2019-11-08 13:54:54	Acru	But why?
2019-11-08 13:55:27	Acru	I collect the `JobInfo`s into a new Vector, and this vector has the same lifetime as the elements in it
2019-11-08 13:55:42	Acru	the old vector might be cleaned up later
2019-11-08 13:56:13	Lumpio-	Well it can't if you want to have borrows to it
2019-11-08 13:56:30	Lumpio-	That job_infos_temp vector owns the JobInfos
2019-11-08 13:56:50	Lumpio-	If you changed it the references in the newly returned vector would become invalid, and the compiler won't allow that
2019-11-08 13:56:55	Acru	how can I move the ownership to the new vector?
2019-11-08 13:57:10	Lumpio-	By not putting references into the new vector but rather the actual objects
2019-11-08 13:57:50	Lumpio-	However you also have that predecessors thing
2019-11-08 13:57:52	Acru	Wouldn't this mean copying all of the values from vector a to vector b?
2019-11-08 13:57:56	Lumpio-	Yes, it would
2019-11-08 13:58:22	Lumpio-	Given that you also have that predecessors thing, unless you want to clone your JobInfos, you might need to put them behind Rc
2019-11-08 13:58:32	Acru	Ahh
2019-11-08 13:58:37	Acru	This sounds logical
2019-11-08 13:58:47	Acru	*good
2019-11-08 13:59:13	Acru	so it would be a vector of rcs to `JobInfo`s?
2019-11-08 13:59:21	Lumpio-	Yes
2019-11-08 13:59:30	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-08 13:59:30	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 13:59:35	Lumpio-	Then you can have multiple things reference the same JobINfo etc
2019-11-08 13:59:42	Acru	Ty
2019-11-08 13:59:45	Lumpio-	Remember to also look into Weak if you might have circular references
2019-11-08 13:59:46	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 14:00:05	Acru	But in the end, this would not be very idiomatic, am I right?
2019-11-08 14:00:33	Acru	It feels like I am trying to do C programming with Rust 😅
2019-11-08 14:01:11	Lumpio-	C doesn't do automatic reference counting for you though
2019-11-08 14:01:34	Lumpio-	If you want to keep using references you'll have to arrange for something to own the JobInfos for as long as you need them
2019-11-08 14:01:46	Lumpio-	And then just work with references.
2019-11-08 14:01:50	Lumpio-	This may or may not be feasible
2019-11-08 14:02:04	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:852a:7dba:a894:b407) has joined ##rust
2019-11-08 14:02:19	Acru	Thank you!
2019-11-08 14:07:52	<--	kleschenko (~kleschenk@188.163.114.126) has quit (Ping timeout: 264 seconds)
2019-11-08 14:08:19	<--	Acru (4e6811aa@eduroam-078-104-017-170.wlan.univie.ac.at) has quit (Ping timeout: 260 seconds)
2019-11-08 14:10:28	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Read error: Connection reset by peer)
2019-11-08 14:14:15	--	lineus_ is now known as lineus
2019-11-08 14:16:27	-->	iq (~iq@2600:100e:be18:936:8507:fd57:70f6:7226) has joined ##rust
2019-11-08 14:20:03	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-11-08 14:20:19	<--	baali (~baali@59.98.187.187) has quit (Quit: Leaving.)
2019-11-08 14:23:40	-->	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has joined ##rust
2019-11-08 14:24:47	<--	localhorse (uid18992@gateway/web/irccloud.com/x-eqvvugiqjblwlwml) has quit (Quit: Connection closed for inactivity)
2019-11-08 14:26:14	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-08 14:26:57	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-08 14:27:41	<--	carado_ (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Ping timeout: 276 seconds)
2019-11-08 14:28:42	-->	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has joined ##rust
2019-11-08 14:28:54	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-08 14:29:29	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-08 14:30:01	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-08 14:31:17	jellie	Lumpio-: j`ey Thanks guys
2019-11-08 14:31:25	-->	yazz (~Thunderbi@rybnik.alan-systems.com) has joined ##rust
2019-11-08 14:31:26	jellie	Rust is slowly getting easier.
2019-11-08 14:32:05	jellie	LOL I also feel as though my current way of writing Rust is just typesafe C
2019-11-08 14:32:21	jellie	Very imprative and ugly
2019-11-08 14:32:36	jellie	Anyway small steps
2019-11-08 14:33:07	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-08 14:34:27	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 240 seconds)
2019-11-08 14:35:16	Lumpio-	Well even if it resembles C it should about 5 times safer
2019-11-08 14:35:28	Lumpio-	Unless you unsafe all over the place heh
2019-11-08 14:36:38	<--	yazz (~Thunderbi@rybnik.alan-systems.com) has quit (Quit: yazz)
2019-11-08 14:37:08	<--	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has quit (Remote host closed the connection)
2019-11-08 14:39:22	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-08 14:44:38	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2019-11-08 14:47:36	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-08 14:49:24	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-08 14:49:47	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-08 14:55:08	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-11-08 14:58:06	-->	npmccallum (~npmccallu@2602:30a:2e5b:2551:6a57:106:4af1:6f66) has joined ##rust
2019-11-08 15:01:30	jellie	Me again: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fb5ce856337a67b57308382dfba01846
2019-11-08 15:01:44	jellie	I'm trying to return a reference to a HashMap
2019-11-08 15:01:57	jellie	but I'm getting a pretty weird error.
2019-11-08 15:02:19	-->	currybullen (~currybull@h-128-138.A258.priv.bahnhof.se) has joined ##rust
2019-11-08 15:02:40	jellie	That it expects a : but I can't see where to add a type in a return value
2019-11-08 15:06:24	-->	Vek17 (~Vek17@76.72.90.62) has joined ##rust
2019-11-08 15:06:51	the_ment	is there a way to annotate some point in code as "shouldn't be reachable"?
2019-11-08 15:08:39	carado	unreachable!()
2019-11-08 15:09:13	the_ment	cool! thanks
2019-11-08 15:09:29	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 246 seconds)
2019-11-08 15:10:00	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-08 15:14:44	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-08 15:14:53	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-08 15:16:08	ZirconiumX	the_ment: unreachable!() panics if it executes. If you want the compiler to blindly trust you there is std::hint::unreachable_unchecked
2019-11-08 15:16:28	-->	kleschenko (~kleschenk@37.73.80.142) has joined ##rust
2019-11-08 15:21:15	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 252 seconds)
2019-11-08 15:21:27	-->	viny (~rg@2a02:908:1083:2a60:4423:c6b1:702:c559) has joined ##rust
2019-11-08 15:23:07	the_ment	ZirconiumX: I want the opposite: for the compiler to error when it can reach the annotated place
2019-11-08 15:23:56	j`ey	so you want it to statically prove it?
2019-11-08 15:24:36	<--	jenny-m (~jdm-@167.100.78.229) has quit (Quit: Leaving...)
2019-11-08 15:25:40	the_ment	yes, I had an `if` with big `match` statement inside (with match substatements and other ifs) and I wanted to make sure that if the first if branch is taken, there's no way it will continue
2019-11-08 15:26:14	j`ey	I dont think there's anything like that
2019-11-08 15:26:16	ZirconiumX	Isn't this trying to solve the halting problem?
2019-11-08 15:26:18	the_ment	I instead solved it by just splitting it into functions and doing `if (cond) { return match_func(); }`
2019-11-08 15:26:46	the_ment	it's more of a static assert
2019-11-08 15:27:00	Yaniel	well there is a static assert crate
2019-11-08 15:27:18	Yaniel	so I suppose you could do static_assert!(false); there
2019-11-08 15:28:49	j`ey	hm
2019-11-08 15:30:19	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-08 15:30:33	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-11-08 15:32:33	ZirconiumX	If it's within a macro or whatever, you could consider compile_error!()
2019-11-08 15:34:33	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-08 15:40:57	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Quit: Leaving)
2019-11-08 15:42:19	<--	Vek17 (~Vek17@76.72.90.62) has quit (Read error: Connection reset by peer)
2019-11-08 15:44:19	-->	baali (~baali@59.98.187.187) has joined ##rust
2019-11-08 15:47:04	Yaniel	huh, that's a thing too?
2019-11-08 15:50:39	-->	jenny-m (~jdm-@2605:8d80:6e0:814d:7182:8e45:5466:47ed) has joined ##rust
2019-11-08 15:54:38	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (Read error: Connection reset by peer)
2019-11-08 15:55:06	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-08 15:56:01	-->	r3s1stanc3 (~r3s1stanc@212.237.60.91) has joined ##rust
2019-11-08 15:56:08	<--	mizu_no_oto (~textual@2604:6000:1012:40ee:852a:7dba:a894:b407) has quit (Ping timeout: 245 seconds)
2019-11-08 15:57:07	r3s1stanc3	hi there
2019-11-08 16:01:16	r3s1stanc3	is it possibe to have multiple versions of the same crate in a workspace? i have two binary projects, one that uses `openssl = { git = "https://github.com/sfackler/rust-openssl.git", features = [ "v102" ] }` and the second one uses reqwest, which depends on openssl-sys 0.9.52, so i've got two conflicting dependencies on openssl-sys down the line and cargo build fails with the following error:
2019-11-08 16:01:18	r3s1stanc3	https://pastebin.com/BWaACwm0
2019-11-08 16:01:24	-->	Vek17 (~Vek17@76.72.90.62) has joined ##rust
2019-11-08 16:01:34	r3s1stanc3	how can i have both versions of openssl-sys im my workspace?
2019-11-08 16:03:32	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 16:04:18	-->	KeyJoo (~KeyJoo@83.220.181.139) has joined ##rust
2019-11-08 16:04:21	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 16:04:49	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-08 16:08:41	jebrosen	It's usually possible, openssl-sys is an exception. If splitting the binaries into separate workspaces is acceptable that's probably the easiest fix
2019-11-08 16:10:56	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Quit: Leaving)
2019-11-08 16:12:50	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 240 seconds)
2019-11-08 16:12:55	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 16:13:51	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 16:16:10	r3s1stanc3	ty jebrosen. i will look if splitting the workspaces works for me. what would be the other solution?
2019-11-08 16:17:19	sfackler	r3s1stanc3: rather than just using openssl as a git dependency, use cargo's patch functionality to change reqwest over to the git dependency as well: https://doc.rust-lang.org/cargo/reference/manifest.html#the-patch-section
2019-11-08 16:17:28	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-08 16:18:21	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 16:21:04	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-08 16:21:39	r3s1stanc3	sfackler: patching openssl and openssl-sys in my root Cargo.toml did the trick. ty
2019-11-08 16:23:38	<--	currybullen (~currybull@h-128-138.A258.priv.bahnhof.se) has quit (Quit: WeeChat 2.6)
2019-11-08 16:26:16	<--	kleschenko (~kleschenk@37.73.80.142) has quit (Remote host closed the connection)
2019-11-08 16:26:36	-->	kleschenko (~kleschenk@37.73.80.142) has joined ##rust
2019-11-08 16:27:29	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-08 16:27:50	<--	htd (~htd@095129203062.t4.akis.net) has quit (Read error: Connection reset by peer)
2019-11-08 16:27:52	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-08 16:32:22	-->	htd (~htd@095129203062.t4.akis.net) has joined ##rust
2019-11-08 16:35:22	<--	kleschenko (~kleschenk@37.73.80.142) has quit (Read error: Connection reset by peer)
2019-11-08 16:39:43	-->	kleschenko (~kleschenk@37.73.80.142) has joined ##rust
2019-11-08 16:44:30	<--	segy (~segfault@pdpc/supporter/active/segy) has quit (Ping timeout: 265 seconds)
2019-11-08 16:48:39	-->	segy (~segfault@pdpc/supporter/active/segy) has joined ##rust
2019-11-08 16:51:42	-->	LunarJetman (LunarJetma@5ec1bc5a.skybroadband.com) has joined ##rust
2019-11-08 16:55:43	<--	npmccallum (~npmccallu@2602:30a:2e5b:2551:6a57:106:4af1:6f66) has quit (Ping timeout: 245 seconds)
2019-11-08 17:01:57	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-08 17:06:17	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 264 seconds)
2019-11-08 17:06:27	-->	current_user (~zeroed@unaffiliated/zeroed) has joined ##rust
2019-11-08 17:12:52	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-11-08 17:17:56	<--	kleschenko (~kleschenk@37.73.80.142) has quit (Ping timeout: 268 seconds)
2019-11-08 17:18:13	-->	Isn0gud (~Isn0gud@2a02:810d:1a80:7c8:f137:7c21:80f0:17e4) has joined ##rust
2019-11-08 17:18:41	<--	current_user (~zeroed@unaffiliated/zeroed) has quit (Quit: done)
2019-11-08 17:19:51	<--	AbedB (~AbedBhuty@109.64.95.117) has quit (Read error: Connection reset by peer)
2019-11-08 17:20:19	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-08 17:23:33	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Read error: Connection reset by peer)
2019-11-08 17:34:53	-->	kleschenko (~kleschenk@37.73.154.239) has joined ##rust
2019-11-08 17:47:19	<--	baali (~baali@59.98.187.187) has quit (Quit: Leaving.)
2019-11-08 17:48:43	-->	murarth (murarth@gateway/vpn/privateinternetaccess/murarth) has joined ##rust
2019-11-08 17:52:28	<--	gkh (~gkh@thor.kevinhill.nl) has quit (Quit: The Lounge - https://thelounge.chat)
2019-11-11 09:32:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-11 09:32:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-11 09:32:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-11 09:32:18	--	Channel ##rust: 586 nicks (2 ops, 0 voices, 584 normals)
2019-11-11 09:32:33	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-11 09:34:09	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-11 09:34:20	-->	sgift (~sgift@2001:a61:3567:a401:a137:e436:3d94:7876) has joined ##rust
2019-11-11 09:35:14	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has left ##rust
2019-11-11 09:35:50	IaMnEwHeRe	I think I go mental.... what am I seeing or assuming falsely here? yaml-rust, serde, I am looking to input a file-handler or the content(string) into a parser but somehow yaml-rust is not ment for arbitrary structues and serde seems to be lacking examples or how to best do this, and trying to look into it     println!("{:?}", serde_yaml::from_reader(config_file_handle)) does not compile
2019-11-11 09:36:09	 *	IaMnEwHeRe so used to inspecting DataTypes on the go
2019-11-11 09:38:49	Moongoodgirl	IaMnEwHeRe: from_reader() can return any deserializable type; you need to specify which type somehow, e.g. `let foo: Result<Foo, _> = serde_yaml::from_reader(config_file); println!("{:?}", foo);`
2019-11-11 09:38:53	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 268 seconds)
2019-11-11 09:40:08	IaMnEwHeRe	hmm, thx ok so no more saving unneeded variables, because I will need them to specify types now..... will do thx
2019-11-11 09:40:23	IaMnEwHeRe	oh wait in that case I will do unwrap()
2019-11-11 09:43:43	IaMnEwHeRe	nope.... oh well thx for the input Moongoodgirl, will think about this for a while, but ATM gotta go, but it appears that serde will put the data from yaml directly into a struct if the attribute matches a key...
2019-11-11 09:44:14	Moongoodgirl	Yeah.
2019-11-11 09:44:31	Moongoodgirl	So the idea is that you make a struct that matches the way your file is structured.
2019-11-11 09:44:58	IaMnEwHeRe	YES!!! at least I learned s.th. today..... one step at a time... havn't been scholar for such a long time, feels like a drag again ?D
2019-11-11 09:44:59	IaMnEwHeRe	:D
2019-11-11 09:45:02	Moongoodgirl	And then serde handles the legwork of mapping every value into the appropriate field, so you don't have to.
2019-11-11 09:46:22	IaMnEwHeRe	cheers
2019-11-11 09:47:41	<--	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has quit (Quit: off to the batcave for new misdeeds)
2019-11-11 10:01:37	-->	Quetzal2 (~Quetzal2@unaffiliated/quetzal2) has joined ##rust
2019-11-11 10:09:18	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 10:09:49	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 10:14:23	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-11 10:14:49	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 10:20:49	-->	JadeJitsu68 (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 10:22:25	<--	JadeJitsu68 (~JadeJitsu@89.165.130.67) has quit (Client Quit)
2019-11-11 10:23:55	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 10:32:22	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Ping timeout: 265 seconds)
2019-11-11 10:37:20	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-11 10:40:00	-->	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has joined ##rust
2019-11-11 10:44:25	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-11 10:53:58	netopso	any suggestions how to write closures that *don't* move values in from their environment? I've tried `&env_struct.field.clone()` and `(&env_struct).field.clone()` and `(&env_stuct.field).clone() and `&env_struct.field` and in all cases I am unable to use `env_struct` after the closure
2019-11-11 10:54:41	voker57	netopso: testcase would be helpful
2019-11-11 10:55:31	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-11 10:55:35	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-11 10:58:57	<--	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has quit (Ping timeout: 265 seconds)
2019-11-11 10:59:20	Moongoodgirl	is it because it's /moved/, or /borrowed?/
2019-11-11 11:01:03	netopso	Moongoodgirl: compiler says "use of moved value"
2019-11-11 11:01:18	netopso	voker57: working on it, but I can't get the test case to demonstrate the behavior!
2019-11-11 11:01:44	netopso	when I do it in the playground, it works exactly as I thought it should. only the original code doesn't work
2019-11-11 11:01:59	voker57	that's how making testcase helps you :)
2019-11-11 11:03:19	netopso	voker57: is this maybe becaus ethe original-code closure is being passed to a function whcih specifies the FnOnce trait?
2019-11-11 11:03:48	netopso	(that the closure is somehow being turned into a `move` closure as a result?
2019-11-11 11:03:52	netopso	)
2019-11-11 11:04:01	voker57	It's hard to say what goes wrong in your case without seein the code
2019-11-11 11:04:41	netopso	voker57: unfortunately it's not possible to duplicate exactly in the playgroud because it uses an external crate
2019-11-11 11:06:08	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 252 seconds)
2019-11-11 11:06:31	voker57	implement stubs with similar types of functions from the crate
2019-11-11 11:07:24	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-11 11:10:36	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 240 seconds)
2019-11-11 11:12:00	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-11 11:14:14	<--	JadeJitsu (~JadeJitsu@89.165.130.67) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-11 11:14:43	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 11:17:35	-->	aLeSD (~aLeSD@139.47.115.0) has joined ##rust
2019-11-11 11:21:10	-->	francisv-local (~user@147.83.201.128) has joined ##rust
2019-11-11 11:21:11	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 11:21:37	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-11 11:22:23	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 11:24:48	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-11 11:25:01	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-11 11:26:14	<--	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has quit (Ping timeout: 276 seconds)
2019-11-11 11:27:23	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 11:27:38	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-11 11:27:53	royal_screwup21	could somoene help me solve this? https://codeforces.com/contest/982/problem/C :)
2019-11-11 11:28:14	netopso	voker57: I just implemented the code with stubs, and... it still refuses to break
2019-11-11 11:28:21	netopso	stop working dammit!
2019-11-11 11:30:32	-->	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has joined ##rust
2019-11-11 11:31:46	netopso	voker57: here's a playground of the closest I can get to the error in my code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6e49b0464d24e3fe7e9bbc2aced11d86
2019-11-11 11:32:02	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-11 11:32:04	netopso	voker57: see line 27 comment
2019-11-11 11:32:16	j`ey	is there a way to do a build without using the cached crates in ~/.cargo
2019-11-11 11:32:23	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 11:33:20	j`ey	essentially I want to double check that --offline is working
2019-11-11 11:34:13	netopso	j`ey: just unplug the network cable? :)
2019-11-11 11:34:36	j`ey	netopso: yeah but it has cached files already downloaded :P
2019-11-11 11:34:41	j`ey	maybe I can just delete them
2019-11-11 11:34:54	voker57	netopso: what is the error in your code, same as in playground?
2019-11-11 11:35:20	netopso	voker57: yes, same as in playground, except that in playgroud I can fix it by adding .clone() on line 27, in my code adding .clone() doesn't fix it
2019-11-11 11:35:53	j`ey	I just deleted it from registry/cache, and it works, great!
2019-11-11 11:36:32	netopso	hmm, looks like in the original, the value is a u32 instead of  a String
2019-11-11 11:36:57	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 11:38:22	netopso	...that just makes it work without .clone() in the playground
2019-11-11 11:39:47	voker57	something else must be different in original
2019-11-11 11:40:05	voker57	you can paste it even if it doesn't work
2019-11-11 11:40:12	-->	Deide (~Deide@90.249.102.37) has joined ##rust
2019-11-11 11:40:20	voker57	also, playground actually includes some crates, like serde
2019-11-11 11:40:35	netopso	voker57: it's chashmap, specifically the .upsert() functoin
2019-11-11 11:41:22	<--	AbedB__ (~AbedBhuty@bzq-79-181-90-98.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-11 11:42:56	-->	AbedB (~AbedBhuty@bzq-79-181-90-98.red.bezeqint.net) has joined ##rust
2019-11-11 11:43:39	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-11 11:44:01	netopso	voker57: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e994d9358ea4a9f349c8e7bbd17c5b02
2019-11-11 11:44:34	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 11:45:24	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Read error: Connection reset by peer)
2019-11-11 11:45:51	Moongoodgirl	royal_screwup21: if you have a specific, focused question, yes :P
2019-11-11 11:47:54	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 11:48:25	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 11:48:26	royal_screwup21	Moongoodgirl ok guess I'll spend some more time thinking about it...I'm  just looking for insights on how to solve the problem :)
2019-11-11 11:48:56	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-11 11:49:18	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 11:50:31	voker57	netopso: try .pair.clone() instead
2019-11-11 11:50:35	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-11 11:51:04	netopso	voker57: I have, but I tried it again and it didn't work again
2019-11-11 11:52:09	netopso	voker57: anyway since `pair` is u32 it shouldn't need .clone(), and it's not `pair` that the compiler complains about, it's `pending`, which contains a String so I can't implement Copy on it
2019-11-11 11:53:04	netopso	the compiler says taht the value is moved into the closure on line 6 of the playground non-working example
2019-11-11 11:53:26	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-11 11:53:28	netopso	and it's the use of `pending` on line 8 that causes the move
2019-11-11 11:54:02	netopso	then the use on line 12 produces a 2nd move
2019-11-11 11:54:22	netopso	(which is said to take place on line 10)
2019-11-11 11:54:48	voker57	is oid Copy?
2019-11-11 11:55:16	netopso	voker57: oid is u32 so yes
2019-11-11 11:55:57	netopso	voker57: it's also being used as a param to a function, so is not moving anything into the closure
2019-11-11 11:57:09	netopso	how upsert works is you give it 2 closures, the result of the first one is stored in the map if there is no entry, but if there is an entry it passes the existing entry into the 2nd closure, to be updated in place
2019-11-11 11:59:11	voker57	I further cut it down to only chashmap as external dep and it works https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bd915bbfe5fed9448f17eae11590ce40
2019-11-11 12:01:17	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-11 12:01:28	netopso	voker57: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bd915bbfe5fed9448f17eae11590ce40
2019-11-11 12:01:42	netopso	err, I mean, error[E0433]: failed to resolve: use of undeclared type or module `chashmap`
2019-11-11 12:02:03	voker57	yeah you can't run it on playground
2019-11-11 12:02:15	netopso	ah, I see
2019-11-11 12:03:04	voker57	I fail to see what can be different in your code... what's your rust version?
2019-11-11 12:04:40	netopso	voker57: ok, your version works for me too
2019-11-11 12:05:06	netopso	$ rustc --version
2019-11-11 12:05:06	netopso	rustc 1.38.0 (625451e37 2019-09-23)
2019-11-11 12:05:56	voker57	well, try to adapt it to your code and see at which point it breaks
2019-11-11 12:06:19	<--	JadeJitsu (~JadeJitsu@89.165.130.67) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-11 12:07:16	netopso	adapt what haha, this is already adapted *from* my code
2019-11-11 12:08:33	zipper	I want to use serde to serialize a hashmap and store it to disk. However, I don't know which of the data formats to use.
2019-11-11 12:08:47	zipper	It does say that it does have hashmap implemented out of the box
2019-11-11 12:09:31	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-11 12:10:41	voker57	depends on your use case
2019-11-11 12:10:51	voker57	do you want it to be human readable, fast seekable, etc
2019-11-11 12:11:22	voker57	serde itself indeed 'implements' hasmap but does not do any actual serialization, you need to use one of serde_ crates
2019-11-11 12:12:06	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-11 12:13:06	netopso	voker57: turns out I can make the String fields also be types that implement Copy, so I solved it by making the whole struct Copy
2019-11-11 12:13:43	voker57	not really a solution
2019-11-11 12:13:55	zipper	voker57: Which one would you recommend. No need for it to be human readable.
2019-11-11 12:13:57	netopso	not really no, but I'm out of ideas
2019-11-11 12:14:02	zipper	I'd like it to be as small as possible.
2019-11-11 12:14:09	zipper	Bincode?
2019-11-11 12:14:20	voker57	zipper: i personally prefer cbor
2019-11-11 12:14:32	voker57	it's well standardized and efficient
2019-11-11 12:15:41	zipper	What exactly is version negotiation?
2019-11-11 12:15:50	zipper	Yeah seems attractive
2019-11-11 12:16:17	zipper	I'm not creating any network stuff.
2019-11-11 12:16:31	zipper	Just need to save some hash maps to disk and read them back.
2019-11-11 12:16:40	Yaniel	but your files can be written by a different version of your program than is used to read them?
2019-11-11 12:17:25	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Remote host closed the connection)
2019-11-11 12:17:35	zipper	Yaniel: I'd love that a lot
2019-11-11 12:17:37	zipper	Yeah
2019-11-11 12:17:55	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-11 12:18:00	zipper	I don't plan on breaking the fields in my structs
2019-11-11 12:18:09	zipper	So I guess it's the one that I want.
2019-11-11 12:18:39	voker57	no version negotiation probably means it's supposed to be extensible without breaking compatibility
2019-11-11 12:18:54	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Read error: Connection reset by peer)
2019-11-11 12:19:27	zipper	voker57: hmm? so I can add some fields to my struct and nothing will break as long as the program reading knows what to expect, right?
2019-11-11 12:20:20	Yaniel	the file may have stuff the program does not expect, but it should still be readable
2019-11-11 12:20:29	Yaniel	without extra file format version checks
2019-11-11 12:20:34	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Quit: -.-)
2019-11-11 12:30:09	-->	lopsided98_ (~quassel@2601:18a:0:ff60::566a) has joined ##rust
2019-11-11 12:31:06	-->	masonl (~masonl@203-219-16-22.tpgi.com.au) has joined ##rust
2019-11-11 12:31:08	<--	lopsided98 (~quassel@2601:18a:0:ff60::da0a) has quit (Ping timeout: 245 seconds)
2019-11-11 12:36:00	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 12:39:04	-->	matthias_bgg (~mbgg@95.169.226.39) has joined ##rust
2019-11-11 12:39:48	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 12:40:35	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-11 12:41:02	<--	crockwork (~crockwork@208.98.186.217) has quit (Quit: crockwork)
2019-11-11 12:41:11	<--	heftig (heftig@archlinux/developer/heftig) has quit (Quit: heftig)
2019-11-11 12:43:27	-->	heftig (heftig@archlinux/developer/heftig) has joined ##rust
2019-11-11 12:55:36	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 268 seconds)
2019-11-11 12:56:35	<--	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has quit (Ping timeout: 276 seconds)
2019-11-11 12:57:39	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 12:57:59	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 12:58:14	<--	heftig (heftig@archlinux/developer/heftig) has quit (Quit: heftig)
2019-11-11 12:58:51	-->	heftig (heftig@archlinux/developer/heftig) has joined ##rust
2019-11-11 13:01:44	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-11 13:04:06	<--	aLeSD (~aLeSD@139.47.115.0) has quit (Remote host closed the connection)
2019-11-11 13:10:26	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 13:10:59	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 13:13:44	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-11 13:14:03	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 13:17:01	<--	JadeJitsu (~JadeJitsu@89.165.130.67) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-11 13:21:12	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-11 13:22:44	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 268 seconds)
2019-11-11 13:28:01	-->	ytain (~ghfg@2607:f2c0:92d9:9300:d155:105:c7d6:e1f9) has joined ##rust
2019-11-11 13:30:59	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 13:31:20	<--	ravndal (~weechat@unaffiliated/ravndal) has quit (Quit: WeeChat 2.6)
2019-11-11 13:31:30	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 13:32:53	-->	ravndal (~weechat@unaffiliated/ravndal) has joined ##rust
2019-11-11 13:34:28	<--	ytain (~ghfg@2607:f2c0:92d9:9300:d155:105:c7d6:e1f9) has quit (Ping timeout: 245 seconds)
2019-11-11 13:34:42	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-11 13:36:30	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 13:36:47	-->	ytain (~ghfg@2607:f2c0:92d9:9c00:a099:f61a:fcae:7259) has joined ##rust
2019-11-11 13:39:37	<--	matthias_bgg (~mbgg@95.169.226.39) has quit (Quit: Leaving)
2019-11-11 13:41:32	-->	daimonos (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 13:43:05	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-11 13:43:12	daimonos	voker57: Have you used serde cbor with packing?
2019-11-11 13:43:20	--	daimonos is now known as jellie
2019-11-11 13:43:31	jellie	oops super secret name revealed
2019-11-11 13:44:02	jellie	Looking at this commit I can't really get what the commiter is trying to say https://github.com/pyfisch/cbor/commit/e3eb497cf52a4e3805e69653eafc11c2eee2a52a
2019-11-11 13:44:37	jellie	I can't even find a serde::Serializer::new associted fn
2019-11-11 13:47:26	Xatenev	what is the way to generate a random sequence of ascii chars now?
2019-11-11 13:47:36	Xatenev	years ago i used gen_ascii_chars().take(x)
2019-11-11 13:47:43	Xatenev	but rand:: doesnt contain gen_ascii_chars anymore
2019-11-11 13:48:36	jellie	Xatenev: How about generate a certain range or ints and convert to ascii?
2019-11-11 13:48:44	jellie	or am I too roundabout?
2019-11-11 13:49:35	Xatenev	dunno i guess i can do that
2019-11-11 13:49:38	Xatenev	i hoped there was a better way
2019-11-11 13:49:39	Xatenev	:P
2019-11-11 13:51:10	Xatenev	theres rng.sample
2019-11-11 13:51:19	Xatenev	maybe i can use that
2019-11-11 13:51:30	jellie	I didn't know that gen_ascii_chars() exists
2019-11-11 13:51:52	-->	learningc (~pi@121.122.85.105) has joined ##rust
2019-11-11 13:52:38	Xatenev	well i think it was very long ago
2019-11-11 13:52:44	Xatenev	maybe 4 years
2019-11-11 13:54:25	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (Remote host closed the connection)
2019-11-11 13:54:35	<--	learningc (~pi@121.122.85.105) has quit (Client Quit)
2019-11-11 13:55:30	-->	learningc (~pi@121.122.85.105) has joined ##rust
2019-11-11 13:56:22	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-11-11 13:56:34	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-11 13:56:37	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-11 13:59:15	Moongoodgirl	Xatenev: https://docs.rs/rand_distr/0.2.2/rand_distr/struct.Alphanumeric.html ?
2019-11-11 13:59:54	Xatenev	Moongoodgirl, yeah i have something like https://bpaste.net/show/VREKE now
2019-11-11 13:59:59	Moongoodgirl	or, if that's not what you need, you could roll a random u8 in 0..=127 and reroll if it doesn't pass is_ascii_*()
2019-11-11 14:00:57	Moongoodgirl	Xatenev: https://docs.rs/rand_distr/0.2.2/rand_distr/trait.Distribution.html#method.sample_iter
2019-11-11 14:01:48	Xatenev	ty :)
2019-11-11 14:01:55	Moongoodgirl	(if sample_iter() wasn't a thing, std::iter::repeat_with())
2019-11-11 14:01:59	Moongoodgirl	^.^
2019-11-11 14:03:06	-->	Mateon2 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-11-11 14:04:11	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 276 seconds)
2019-11-11 14:04:11	--	Mateon2 is now known as Mateon1
2019-11-11 14:04:16	<--	nykma (~nykma@103.140.137.44) has quit (Remote host closed the connection)
2019-11-11 14:04:37	-->	nykma (~nykma@161.129.40.8) has joined ##rust
2019-11-11 14:04:40	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-11 14:05:20	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-11 14:06:19	<--	hussam (uid193284@gateway/web/irccloud.com/x-myuskuastfecymxs) has quit (Quit: Connection closed for inactivity)
2019-11-11 14:07:42	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-11 14:08:24	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-11-11 14:13:45	elichai2	I can't believe I just joined the fourth rust channel
2019-11-11 14:13:50	 *	elichai2 🤦
2019-11-11 14:14:17	Moongoodgirl	I'm already in four.
2019-11-11 14:14:23	elichai2	wait, fifth
2019-11-11 14:14:26	Moongoodgirl	Mozilla, OFTC, Freenode, and Matrix
2019-11-11 14:14:38	elichai2	Mozilla, Freenode, Discord, Zulip, Matrix
2019-11-11 14:14:58	Moongoodgirl	ugh, why are we on Zulip??
2019-11-11 14:15:10	elichai2	Not joining OFTC. I also think we should kill freenode/Mozilla
2019-11-11 14:15:31	elichai2	Moongoodgirl: Because apparently a lof of WG discussions are happening there
2019-11-11 14:15:41	Moongoodgirl	ughh
2019-11-11 14:15:49	elichai2	and lately i'm getting more and more responses on github like "After talking with X on Zulip...."
2019-11-11 14:15:56	elichai2	I hate this so much
2019-11-11 14:16:04	elichai2	we should just invent our own system lol
2019-11-11 14:16:18	Moongoodgirl	no, we should kill Discord first, followed by Zulip
2019-11-11 14:16:18	elichai2	we're just missing gitter and that's it
2019-11-11 14:16:30	Moongoodgirl	/then/ we kill all but one of the IRC channel trees
2019-11-11 14:16:35	elichai2	Moongoodgirl: don't care which we kill. just killll.
2019-11-11 14:16:39	Moongoodgirl	and then kill either the remaining one or Matrix
2019-11-11 14:16:59	elichai2	but two channels on the same protocol in different servers is stupid (freenode+Mozilla+OFTC)
2019-11-11 14:17:09	elichai2	generally someone should kill OFTC :)
2019-11-11 14:17:26	elichai2	I thought mozilla officially moved to discord. wtf.
2019-11-11 14:18:09	Moongoodgirl	Mozilla decided not to use Discord, /thankfully/
2019-11-11 14:18:17	Moongoodgirl	unfortunately, Rust has officially moved there
2019-11-11 14:18:20	Moongoodgirl	fuck that though
2019-11-11 14:18:26	the_ment	what's discord
2019-11-11 14:18:28	j`ey	Moongoodgirl: Zulip is used by the compiler teams
2019-11-11 14:18:59	la_mettrie	Moongoodgirl: so what did mozilla decide?
2019-11-11 14:19:00	Moongoodgirl	the_ment: a draconequus voiced by John de Lancie
2019-11-11 14:19:18	Moongoodgirl	the_ment: there's also a terrible, single-centralized, walled-garden IM platform with the same name
2019-11-11 14:19:38	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-11 14:19:45	the_ment	Moongoodgirl: I googled it, but it says it's a freeware VoIP application
2019-11-11 14:20:00	Moongoodgirl	““application””
2019-11-11 14:20:13	Moongoodgirl	resource-eating webapp, you mean
2019-11-11 14:20:32	Moongoodgirl	as a service
2019-11-11 14:20:56	the_ment	I guess it doesn't have a terminal client
2019-11-11 14:21:02	j`ey	nope
2019-11-11 14:21:10	j`ey	and third party clients are against TOS
2019-11-11 14:21:11	liiwi	irssi can talk to discord via libpurple
2019-11-11 14:21:29	Moongoodgirl	…but that's also against the ToS and liable to get you banned
2019-11-11 14:21:36	<--	AbedB (~AbedBhuty@bzq-79-181-90-98.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-11 14:22:52	liiwi	half tempted to test how fast they update TOS for running the client in resource-constrained container..
2019-11-11 14:25:05	<--	murarth (murarth@gateway/vpn/privateinternetaccess/murarth) has quit (Ping timeout: 276 seconds)
2019-11-11 14:25:10	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-11 14:26:35	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-11 14:26:54	-->	lauromoura (~lauromour@2804:7f5:f380:55c2:9979:533b:1448:e97b) has joined ##rust
2019-11-11 14:26:58	-->	shakahl (uid57932@gateway/web/irccloud.com/x-vjejasmrueqabvtd) has joined ##rust
2019-11-11 14:27:30	netopso	"resource-eating webapp as a service"
2019-11-11 14:29:47	Moongoodgirl	…and so's your dad.
2019-11-11 14:31:04	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 14:33:16	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-11-11 14:34:58	-->	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has joined ##rust
2019-11-11 14:36:26	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 14:39:37	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-11 14:40:34	-->	kai_w (~kai@213.152.255.34) has joined ##rust
2019-11-11 14:41:28	-->	hussam (uid193284@gateway/web/irccloud.com/x-zlopswcfzyfawxhv) has joined ##rust
2019-11-11 14:42:28	elichai2	j`ey: what I don't get is why the rust-lang and the compiler team went to seperate apps
2019-11-11 14:43:16	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-11 14:44:50	j`ey	*shrug*
2019-11-11 14:46:36	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-11 14:47:22	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 14:53:08	-->	matthias_bgg (~mbgg@95.169.226.39) has joined ##rust
2019-11-11 14:55:14	-->	Oddity (~Oddity@unaffiliated/oddity) has joined ##rust
2019-11-11 14:58:01	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-11 15:01:13	-->	npmccallum (npmccallum@nat/redhat/x-amwyrkuitzlhpywv) has joined ##rust
2019-11-11 15:01:19	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-11 15:01:56	-->	npmccallum_ (npmccallum@nat/redhat/x-kwbdgxncwyllyjjl) has joined ##rust
2019-11-11 15:01:59	-->	mgrech__ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-11 15:03:34	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-11 15:04:19	<--	naiveaiguy (~root@106.201.74.32) has quit (Client Quit)
2019-11-11 15:04:40	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-11-11 15:05:28	<--	cseder (~cseder@62.141-0-116.customer.lyse.net) has quit (Quit: $ echo "Nice To Know Ya!" && sudo rm -rf /)
2019-11-11 15:05:39	<--	npmccallum (npmccallum@nat/redhat/x-amwyrkuitzlhpywv) has quit (Ping timeout: 240 seconds)
2019-11-11 15:05:39	--	npmccallum_ is now known as npmccallum
2019-11-11 15:06:25	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 265 seconds)
2019-11-11 15:09:43	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-11 15:11:05	<--	cdown (~cdown@89.32.122.5) has quit (Remote host closed the connection)
2019-11-11 15:12:01	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 15:12:42	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-11 15:14:10	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-11 15:14:11	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-11 15:14:26	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-11 15:14:32	naiveaiguy	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d217605df2e3cff5824cb1c3084dad34
2019-11-11 15:14:47	naiveaiguy	Why does one of these methods work and the other not despite seeming almost identical?
2019-11-11 15:15:01	naiveaiguy	Does assigning the result to a variable as opposed to using it directly really do much?
2019-11-11 15:17:38	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Ping timeout: 276 seconds)
2019-11-11 15:17:47	--	cdown_ is now known as cdown
2019-11-11 15:18:45	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 15:18:52	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-11 15:23:59	the_ment	naiveaiguy: in "doesn't work
2019-11-11 15:24:04	the_ment	you mean "doesn't compile"?
2019-11-11 15:24:29	-->	heday (~heday@dhcp0DB2.kent.ac.uk) has joined ##rust
2019-11-11 15:27:32	Moongoodgirl	naiveaiguy: in the first one, the current_unit borrow is released in the middle of line 21, after copying the attack_power
2019-11-11 15:27:38	the_ment	naiveaiguy: oh, I see where's the problem: first you evaluate the right side (fetch current_unit.attack_power), then you drop the immutable reference to current_unit
2019-11-11 15:27:53	<--	npmccallum (npmccallum@nat/redhat/x-kwbdgxncwyllyjjl) has quit (Read error: Connection reset by peer)
2019-11-11 15:28:29	Moongoodgirl	if you add something that uses current_unit afterward, it'll stop working
2019-11-11 15:28:35	j`ey	Moongoodgirl: borrowcheck visualiser when
2019-11-11 15:29:33	naiveaiguy	Ok, I feel real dumb right now, but what?
2019-11-11 15:30:17	naiveaiguy	the_ment: why would which one you evaluate first change anything?
2019-11-11 15:31:47	Moongoodgirl	naiveaiguy: since you don't use current_unit again, that borrow is released, so it doesn't conflict with the get_mut() call
2019-11-11 15:32:03	naiveaiguy	why would it conflict with the get_mut call?
2019-11-11 15:32:08	naiveaiguy	oh wait of course it does, I'm an idiot
2019-11-11 15:32:27	naiveaiguy	so there's no way to fix that, actually, given these conditions... I'll have to reorganize the data structure somehow
2019-11-11 15:32:30	Moongoodgirl	in the second one, you make two conflicting borrows which are both used
2019-11-11 15:32:51	Moongoodgirl	well, the first one works :P
2019-11-11 15:32:58	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-11 15:33:05	Moongoodgirl	you can copy the necessary information like in the first one
2019-11-11 15:33:05	naiveaiguy	well yes, but I need to use attacked_unit afterwards to check if it's dead
2019-11-11 15:33:30	Moongoodgirl	or you can clone the entire unit if it's not expensive (as is, it's pretty cheap)
2019-11-11 15:33:56	j`ey	or reborrow it
2019-11-11 15:34:05	naiveaiguy	re... borrow?
2019-11-11 15:34:26	the_ment	drop the reference, then borrow the unit again later
2019-11-11 15:34:49	naiveaiguy	yep, I'll never understand this language
2019-11-11 15:34:59	naiveaiguy	lol jk but seriously this is hurting my brain
2019-11-11 15:35:37	naiveaiguy	thanks for the help, I'll look into that the_ment and Moongoodgirl
2019-11-11 15:36:01	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-11 15:36:28	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-11 15:36:55	Moongoodgirl	naiveaiguy: it's got a steep learning curve, but you can do it!
2019-11-11 15:37:06	naiveaiguy	Moongoodgirl: isn't cloning technically cheating in this language?
2019-11-11 15:37:15	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f7d87e197cebf556f91eeae36f38c490 helps in understanding
2019-11-11 15:37:17	naiveaiguy	I know this is a question I will regret asking
2019-11-11 15:37:21	j`ey	naiveaiguy: cheating?
2019-11-11 15:37:29	naiveaiguy	like, it's not idiomatic, more like
2019-11-11 15:37:39	Xatenev	its idiomatic if you want to actually clone your value
2019-11-11 15:37:39	Xatenev	:O
2019-11-11 15:37:49	Moongoodgirl	don't break out Just Clone It blindly in every case to get rid of borrowck errors
2019-11-11 15:38:06	ZirconiumX	^ or do, and then come back to it so nobody has to witness it
2019-11-11 15:38:35	naiveaiguy	Wait, I can't clone this value anyway.
2019-11-11 15:38:41	naiveaiguy	Rust still doesn't like it if I do that
2019-11-11 15:38:45	Moongoodgirl	but, in this case, with this particular struct which is cheap, when the thing being referenced isn't going to change within this method call…it's okay
2019-11-11 15:39:17	naiveaiguy	Moongoodgirl: well the thing being referenced is changing in this call, isn't it? I'm reducing its hp
2019-11-11 15:39:23	naiveaiguy	Unless you mean something else
2019-11-11 15:39:52	Moongoodgirl	current_unit
2019-11-11 15:40:21	j`ey	let current_unit = self.units[current_unit_location].clone(); // <-- that
2019-11-11 15:40:24	naiveaiguy	Oh that, yeah, that's not gonna change. And if I clone that it works
2019-11-11 15:40:31	naiveaiguy	Yeah I completely misunderstood this whole thing
2019-11-11 15:40:34	naiveaiguy	Yeah I get it now.
2019-11-11 15:41:03	naiveaiguy	Basically Rust doesn't like it if it's not cloned because it's a reference to a value inside of a map, which I am then using alongside another reference to a different part of that map
2019-11-11 15:41:25	naiveaiguy	If it's not cloned and not dropped halfway like in the first one, it survives too long and conflicts with the other one.
2019-11-11 15:41:55	naiveaiguy	wow, I said it out loud to convince myself that I know what I'm saying and I still don't
2019-11-11 15:42:03	naiveaiguy	Guess it's time to re-read the whole Rust Book :D
2019-11-11 15:46:15	Moongoodgirl	The analysis is pretty shallow, at least in this respect.
2019-11-11 15:46:52	Moongoodgirl	You index the map, which borrows the whole map(!), and hang onto the result.
2019-11-11 15:47:06	naiveaiguy	Wait holy shit why does indexing the map borrow the whole map
2019-11-11 15:47:17	Moongoodgirl	<Moongoodgirl> The analysis is pretty shallow, at least in this respect.
2019-11-11 15:47:19	naiveaiguy	If I just used get() instead would I not borrow the whole map
2019-11-11 15:47:28	Moongoodgirl	nope, that's a method call
2019-11-11 15:47:31	naiveaiguy	ofo
2019-11-11 15:47:52	Moongoodgirl	for slices, you can kinda get around this by splitting the slice instead
2019-11-11 15:48:01	Moongoodgirl	for maps…there's not much you can do
2019-11-11 15:48:17	j`ey	naiveaiguy: [] is just a normal-ish method call too
2019-11-11 15:48:38	naiveaiguy	Out of interest, and I'm sorry if I'm taking your time up, from a memory safety perspective, why is it bad to access two different parts of a map at the same time?
2019-11-11 15:48:51	Moongoodgirl	it's not
2019-11-11 15:48:54	Moongoodgirl	but
2019-11-11 15:49:02	Moongoodgirl	the analysis is very shallow
2019-11-11 15:49:05	naiveaiguy	OHHH
2019-11-11 15:49:11	Moongoodgirl	it only looks at the function signatures
2019-11-11 15:49:15	naiveaiguy	I thought you meant MY analysis, not the rust compiler's analysis
2019-11-11 15:49:17	Lumpio-	The compiler just sees a method call and considers the entire map borrowed
2019-11-11 15:49:30	Lumpio-	tbh it would require some rather interesting trickery to fix that
2019-11-11 15:49:32	j`ey	naiveaiguy: Moongoodgirl isnt that mean :P
2019-11-11 15:49:32	naiveaiguy	Ah, well that's fair I suppose
2019-11-11 15:49:34	Lumpio-	Not even sure how
2019-11-11 15:49:36	Moongoodgirl	index() returns a value borrowed from the map
2019-11-11 15:49:43	Moongoodgirl	so the map is borrowed
2019-11-11 15:49:55	Moongoodgirl	so you can't call a mutating method until you release that borrow
2019-11-11 15:49:57	naiveaiguy	makes snese
2019-11-11 15:50:01	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-11 15:50:55	Moongoodgirl	it /is/ conceivable that you could make an API that takes multiple keys and returns references to multiple values (panicking or something if you pass the same key multiple times)
2019-11-11 15:51:12	Lumpio-	There's a crate for that
2019-11-11 15:51:18	Moongoodgirl	there are probably even crates that provide maps with such—yeah
2019-11-11 15:51:26	naiveaiguy	but that would actually be somewhat more annoying to reason about... at least in this case the problem is sort of easy to think through if you know what you're doing (ie you aren't me)
2019-11-11 15:51:30	-->	Labu (~mik@2a01:e0a:257:44c0:6e13:c27f:532b:e532) has joined ##rust
2019-11-11 15:51:30	Moongoodgirl	but the std collections don't
2019-11-11 15:51:41	naiveaiguy	that's fair
2019-11-11 15:52:12	naiveaiguy	thanks a lot for explaining all of that to me!
2019-11-11 15:52:24	Lumpio-	https://docs.rs/multi_mut/0.1.3/multi_mut/ this one implements it for standard maps
2019-11-11 15:52:31	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-11 15:52:36	naiveaiguy	I now understand the rust compiler isn't a god that I have to fight against, it's an idiot who I have to deal with
2019-11-11 15:53:31	Moongoodgirl	Once const generics lands, `impl<K: Hash + Eq, V, Q: Borrow<K>, const N: usize> Index<[Q; N]> for HashMap<K, V>` might be nice
2019-11-11 15:54:00	Moongoodgirl	…wait, that wouldn't work because of the Output type :(
2019-11-11 15:54:09	Moongoodgirl	it could be an inherent method though
2019-11-11 15:54:56	Moongoodgirl	pub fn get_multi<Q: Borrow<K>, const N: usize>(&self, keys: [Q; N]) -> [&V; N]
2019-11-11 15:54:59	Lumpio-	>Once const generics land
2019-11-11 15:55:06	Lumpio-	Maybe in edition = "2091"
2019-11-11 15:55:07	Moongoodgirl	<:3
2019-11-11 15:55:48	jebrosen	"I now understand the rust compiler isn't a god that I have to fight against, it's an idiot who I have to deal with" that's quote of the week material right there
2019-11-11 15:56:27	Lumpio-	(´・ω・｀)
2019-11-11 15:57:00	<--	heday (~heday@dhcp0DB2.kent.ac.uk) has quit (Read error: Connection reset by peer)
2019-11-11 15:58:36	<--	Labu (~mik@2a01:e0a:257:44c0:6e13:c27f:532b:e532) has left ##rust
2019-11-11 16:00:20	wucke13	Is there a way to have a block of bitwise operations like shift and so on without having to put every statement which may overflow into a Wrapping?
2019-11-11 16:01:05	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-11 16:01:27	Lumpio-	Rust doesn't allow you to left shift off the end of a number...? TIL
2019-11-11 16:02:18	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-11 16:04:47	-->	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has joined ##rust
2019-11-11 16:04:48	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Quit: Leaving)
2019-11-11 16:06:17	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-11 16:09:35	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-11 16:10:03	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-11 16:12:39	<--	kai_w (~kai@213.152.255.34) has quit (Quit: Konversation terminated!)
2019-11-11 16:21:42	-->	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-11 16:24:53	<--	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Ping timeout: 245 seconds)
2019-11-11 16:25:40	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-11 16:26:19	-->	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-11 16:27:08	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-11-11 16:27:37	<--	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Ping timeout: 250 seconds)
2019-11-11 16:33:17	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 268 seconds)
2019-11-11 16:35:09	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-11 16:35:13	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-11-11 16:36:26	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-11 16:37:28	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-11 16:40:04	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 268 seconds)
2019-11-11 16:41:30	-->	tsaka_ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-11 16:42:02	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-11 16:42:47	<--	tsaka__ (~torstein@2a02:8109:9a80:7030:9742:1e2b:392d:ec69) has quit (Ping timeout: 276 seconds)
2019-11-11 16:43:27	-->	AbedB (~AbedBhuty@bzq-109-66-27-147.red.bezeqint.net) has joined ##rust
2019-11-11 16:43:50	<--	JadeJitsu (~JadeJitsu@89.165.130.67) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-11 16:45:33	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 16:46:14	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 16:48:24	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 16:50:12	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-11 16:53:19	-->	asthasr (~asthasr@142.134.100.201) has joined ##rust
2019-11-11 16:53:38	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Ping timeout: 268 seconds)
2019-11-11 16:58:30	<--	JadeJitsu (~JadeJitsu@89.165.130.67) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-11 17:01:45	-->	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-11 17:04:53	<--	naiveaiguy (~root@106.201.74.32) has quit (Ping timeout: 276 seconds)
2019-11-11 17:05:19	<--	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Ping timeout: 250 seconds)
2019-11-11 17:06:14	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-11 17:08:06	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 17:08:33	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-11 17:08:45	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 17:11:18	-->	shynoob (75d0391d@117.208.57.29) has joined ##rust
2019-11-11 17:11:52	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-11 17:12:23	shynoob	how's experience of coding in rust on windows platform so far?
2019-11-11 17:13:13	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-11 17:13:57	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-11-11 17:15:51	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 17:16:25	<--	hussam (uid193284@gateway/web/irccloud.com/x-zlopswcfzyfawxhv) has quit (Quit: Connection closed for inactivity)
2019-11-11 17:18:26	Xatenev	shynoob, depends I guess?
2019-11-11 17:18:28	Xatenev	what do you wanna do?
2019-11-11 17:19:04	shynoob	just collecting info.. wondering should I stick with windows or linux
2019-11-11 17:19:10	Xatenev	dunno windows worked just fine for me
2019-11-11 17:19:36	shynoob	oh do you perhaps have more experience with winapi stuff ? Xatenev?
2019-11-11 17:19:40	-->	porky11 (~porky11@p200300F843C4CBC2068D38FFFEA832A5.dip0.t-ipconnect.de) has joined ##rust
2019-11-11 17:20:03	Xatenev	i did something with winapi once but i wouldnt call myself "more experienced" tbh
2019-11-11 17:20:10	Xatenev	i was just following docs :p
2019-11-11 17:21:04	shynoob	I've heard rust is great for gamedev according to many.. it's taking leaps.. but since windows is gonna be my platform.. I wasn't sure
2019-11-11 17:21:08	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Ping timeout: 276 seconds)
2019-11-11 17:21:36	shynoob	wouldn't C, C++ or C# be better to deal with windows stuff:- winapi and directx
2019-11-11 17:21:44	Xatenev	I think at this point its very hard to do gamedev in rust because of the lack of resources
2019-11-11 17:21:52	shynoob	hm
2019-11-11 17:22:05	Xatenev	you'll have to be a more experienced developer to not get too stuck in the process
2019-11-11 17:22:24	shynoob	makes sense
2019-11-11 17:22:33	Xatenev	its definetly possible to do gamedev, people have already made good games in it
2019-11-11 17:22:38	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-11 17:22:39	Xatenev	but yeah, its harder to get into than with e.g. C++
2019-11-11 17:23:19	danieldg	rust can call C functions directly, but you won't have the header files (without generating bindings yourself) and you can't use C++ directly, you'll have to make a C API on top of the C++ API
2019-11-11 17:23:54	danieldg	it's all possible, but nicer when someone has done it for you already
2019-11-11 17:23:55	Xatenev	danieldg, there are wrapper crates for e.g. winapi already though
2019-11-11 17:24:02	Xatenev	the type juggling is a bit annoying though
2019-11-11 17:25:12	shynoob	I'd see if I can stick with C..
2019-11-11 17:26:26	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-11 17:26:33	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-11 17:27:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-11 17:29:36	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 17:35:28	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-11 17:35:28	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-11 17:35:28	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-11 17:35:28	--	Channel ##rust: 604 nicks (2 ops, 0 voices, 602 normals)
2019-11-11 17:35:43	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-11 17:36:19	<--	L29Ah (~L29Ah@unaffiliated/l29ah) has left ##rust ("Disconnected: closed")
2019-11-11 17:36:45	-->	L29Ah (~L29Ah@unaffiliated/l29ah) has joined ##rust
2019-11-11 17:37:14	<--	francisv-local (~user@147.83.201.128) has quit (Ping timeout: 246 seconds)
2019-11-11 17:40:51	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-11 17:43:13	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-11 17:43:14	-->	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has joined ##rust
2019-11-11 17:45:34	<--	Xatenev (~I@87.190.19.178) has quit (Remote host closed the connection)
2019-11-11 17:47:22	elichai2	I want to vent on why the heck every small change I do to the compiler takes ages to compile :/ (and that's *with* sscache)
2019-11-11 17:48:20	<--	julesj (~jules000@wlan-145-94-214-207.wlan.tudelft.nl) has quit (Ping timeout: 265 seconds)
2019-11-11 17:48:27	j`ey	elichai2: vent away
2019-11-11 17:48:41	j`ey	I tried to do some rustc stuff, but it took too long to build, so i gave up
2019-11-11 17:51:05	elichai2	I finished creating a new lint
2019-11-11 17:51:14	elichai2	but just running the tests takes foreverr
2019-11-11 17:51:22	elichai2	*compiling the tests
2019-11-11 17:54:50	-->	tuxxy (~tuxxy@159.89.82.42) has joined ##rust
2019-11-11 17:56:35	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-12 09:16:51	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-12 09:16:51	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-12 09:16:51	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-12 09:16:51	--	Channel ##rust: 593 nicks (2 ops, 0 voices, 591 normals)
2019-11-12 09:17:07	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-12 09:19:06	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-12 09:19:35	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-12 09:19:43	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 265 seconds)
2019-11-12 09:19:43	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-12 09:20:00	-->	matthias_bgg (~mbgg@37.223.138.214) has joined ##rust
2019-11-12 09:20:55	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-12 09:21:26	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-12 09:22:57	<--	_xor (~xor@74.215.46.133) has quit (Ping timeout: 246 seconds)
2019-11-12 09:23:46	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-12 09:24:24	-->	iron_houzi (~iron_houz@159.89.29.46) has joined ##rust
2019-11-12 09:31:39	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 240 seconds)
2019-11-12 09:35:11	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-12 09:40:59	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (Ping timeout: 265 seconds)
2019-11-12 09:41:31	netopso	is there an easy way to find the maximum of several values, e.g `let c = max(a, b)`? (max() doesn't work)
2019-11-12 09:41:33	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-12 09:41:53	j`ey	max(max(max
2019-11-12 09:42:40	netopso	j`ey: nvm, found it in std::cmp::max
2019-11-12 09:43:30	j`ey	oh, I misread and thought you mean more than 2 values
2019-11-12 09:43:41	Moongoodgirl	evalr: [184, 82, 115, 72, 243, 206, 184, 239, 54, 12, 230, 87, 106, 159, 126, 110].iter().max()
2019-11-12 09:43:44	--	Notice(evalr): Some(243)
2019-11-12 09:44:12	<--	_xor (~xor@74.215.46.133) has quit (Read error: Connection reset by peer)
2019-11-12 09:44:48	netopso	j`ey: yeah that would be nice too
2019-11-12 09:45:04	netopso	but have to either `cons` it the way you did, or hav ea macro
2019-11-12 09:45:38	j`ey	or what Moongoodgirl said
2019-11-12 09:45:39	Moongoodgirl	netopso: <Moongoodgirl> evalr: [184, 82, 115, 72, 243, 206, 184, 239, 54, 12, 230, 87, 106, 159, 126, 110].iter().max()
2019-11-12 09:45:39	Remosi	netopso: Moongoodgirl's solution appears to cover your requirements quite elegantly.
2019-11-12 09:45:53	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 250 seconds)
2019-11-12 09:45:55	netopso	Moongoodgirl: that's clever
2019-11-12 09:46:10	netopso	thought you were talking to someone named evalr :/
2019-11-12 09:46:40	j`ey	its a bot!
2019-11-12 09:46:54	netopso	I see!
2019-11-12 09:46:56	Remosi	that shows the result of evaluating the expression!
2019-11-12 09:47:01	netopso	very clever!
2019-11-12 09:54:16	zipper	Arnavion: Hey, can you help with actually writing the value into the writer here?
2019-11-12 09:55:04	<--	t7 (~tommo@2a00:23c5:1284:fc00:a459:6304:a311:5e5a) has quit (Quit: Konversation terminated!)
2019-11-12 09:55:28	zipper	Arnavion: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2551897244f8cdba4d3013bb2371f73e
2019-11-12 09:55:39	zipper	I keep forgetting to post links
2019-11-12 10:12:19	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-11-12 10:13:51	iron_houzi	I might be stepping on the ab problem trap, but can I create two PEG files and have one parser derive RuleA:: objects and the other parser produce RuleB:: objects? (https://docs.rs/pest/2.1.2/pest/index.html)
2019-11-12 10:14:18	iron_houzi	s/derive/produce
2019-11-12 10:28:43	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-12 10:31:50	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (Ping timeout: 268 seconds)
2019-11-12 10:38:00	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Remote host closed the connection)
2019-11-12 10:38:00	<--	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-11-12 10:38:00	<--	harai (~harai@gateway/tor-sasl/harai) has quit (Write error: Broken pipe)
2019-11-12 10:38:00	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Remote host closed the connection)
2019-11-12 10:38:00	<--	mcoffin (~mcoffin@gateway/tor-sasl/mcoffin) has quit (Remote host closed the connection)
2019-11-12 10:38:00	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Remote host closed the connection)
2019-11-12 10:38:00	<--	sklv (~sklv@gateway/tor-sasl/sklv) has quit (Write error: Connection reset by peer)
2019-11-12 10:38:29	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-11-12 10:38:49	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-12 10:39:13	-->	harai (~harai@gateway/tor-sasl/harai) has joined ##rust
2019-11-12 10:39:24	-->	tsaka_ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-12 10:39:33	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-11-12 10:40:03	<--	treeshateorcs (~tho@46-198-128-218.static.cyta.gr) has quit (Ping timeout: 240 seconds)
2019-11-12 10:40:03	<--	pastly (pastly@192.3.162.137) has quit (Ping timeout: 240 seconds)
2019-11-12 10:40:17	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-12 10:40:51	<--	XVar (~XVar@unaffiliated/xvar) has quit (Ping timeout: 240 seconds)
2019-11-12 10:41:11	-->	sklv (~sklv@gateway/tor-sasl/sklv) has joined ##rust
2019-11-12 10:41:39	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 240 seconds)
2019-11-12 10:41:43	-->	pastly (pastly@192.3.162.137) has joined ##rust
2019-11-12 10:41:56	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-12 10:42:19	<--	Proximyst (~Proximyst@148.251.50.76) has quit (Read error: Connection reset by peer)
2019-11-12 10:42:52	-->	XVar (~XVar@unaffiliated/xvar) has joined ##rust
2019-11-12 10:43:32	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-12 10:43:38	-->	Proximyst (~Proximyst@148.251.50.76) has joined ##rust
2019-11-12 10:46:50	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-11-12 10:47:16	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-12 10:49:44	<--	AbedB_ (~AbedBhuty@bzq-109-66-57-204.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-12 10:49:56	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-12 10:53:12	-->	mcoffin (~mcoffin@gateway/tor-sasl/mcoffin) has joined ##rust
2019-11-12 11:05:11	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (Ping timeout: 276 seconds)
2019-11-12 11:05:40	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 252 seconds)
2019-11-12 11:07:38	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-12 11:08:00	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 11:11:18	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-11-12 11:11:37	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-12 11:12:15	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-12 11:13:00	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 11:16:01	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-12 11:16:30	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 11:19:31	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-12 11:20:01	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 11:21:43	-->	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has joined ##rust
2019-11-12 11:27:37	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-12 11:30:03	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-12 11:31:44	-->	jat-kitty (~jat-kitty@2001:16b8:a09f:1400:718b:7b2e:749c:a1d5) has joined ##rust
2019-11-12 11:33:01	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-12 11:38:35	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-12 11:40:51	<--	tsaka_ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has quit (Ping timeout: 265 seconds)
2019-11-12 11:42:56	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-12 11:43:32	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 11:46:36	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-12 11:49:59	-->	johnward (~johnward@167.98.27.226) has joined ##rust
2019-11-12 11:55:35	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-12 11:56:47	<--	jat-kitty (~jat-kitty@2001:16b8:a09f:1400:718b:7b2e:749c:a1d5) has quit (Remote host closed the connection)
2019-11-12 12:04:07	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-12 12:17:47	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-12 12:25:01	naiveaiguy	Can you return an Err from inside of a match?
2019-11-12 12:25:16	<--	GivenToCode (~GivenToCo@ext.mathworks.com) has quit (Read error: Connection reset by peer)
2019-11-12 12:25:18	j`ey	yes
2019-11-12 12:25:31	naiveaiguy	Like if I'm doing vec.push(match something { x => Err("whatever") }), inside of a function which returns a Result, will it work?
2019-11-12 12:25:53	j`ey	with a 'return Err', yes
2019-11-12 12:26:09	naiveaiguy	If no return, then that's presumed to be the result of the match instead, isn't it?
2019-11-12 12:26:21	j`ey	yep
2019-11-12 12:26:34	naiveaiguy	K, makes a lot of sense, thanks j`ey
2019-11-12 12:38:10	-->	jinie_ (~jimmy@188.114.159.27) has joined ##rust
2019-11-12 12:38:51	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 240 seconds)
2019-11-12 12:40:40	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-11-12 12:41:09	-->	uncool (~discordia@winterhold.org) has joined ##rust
2019-11-12 12:42:26	<--	jinie_ (~jimmy@188.114.159.27) has quit (Ping timeout: 240 seconds)
2019-11-12 12:50:04	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-12 12:50:33	-->	smvoss (~smvoss@207.191.220.92) has joined ##rust
2019-11-12 12:52:19	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-12 12:57:39	zipper	j`ey: Hello
2019-11-12 12:57:49	zipper	You have any serde experience?
2019-11-12 12:57:50	j`ey	zipper: olleh
2019-11-12 12:58:06	zipper	That's one way to respond?
2019-11-12 12:58:10	zipper	:D
2019-11-12 12:58:19	zipper	Anyway let me just ask.
2019-11-12 12:58:29	j`ey	not enough to answer your question about the writer
2019-11-12 12:59:23	zipper	j`ey: Well screw the writer. Can one use serde on its own?
2019-11-12 12:59:40	zipper	I somehow can't just simply serialize a HashMap
2019-11-12 13:00:02	zipper	*serialize and deserialize
2019-11-12 13:00:28	j`ey	what do you want to serialize it to?
2019-11-12 13:00:53	<--	smvoss (~smvoss@207.191.220.92) has quit (Ping timeout: 276 seconds)
2019-11-12 13:01:38	j`ey	https://docs.rs/serde_cbor/0.10.2/serde_cbor/fn.to_vec.html
2019-11-12 13:06:57	zipper	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=81644b07505e62964020c97d3b9f8a3e
2019-11-12 13:07:09	zipper	I'm using to writer so that I can write it to disk
2019-11-12 13:08:34	-->	exprosic (c2fe3d2c@roam-nat-fw-prg-194-254-61-44.net.univ-paris-diderot.fr) has joined ##rust
2019-11-12 13:09:05	-->	smvoss (~smvoss@207.191.220.92) has joined ##rust
2019-11-12 13:10:53	j`ey	zipper: ok, so you get an error: error: implementation of `serde::de::Deserialize` is not general enough
2019-11-12 13:10:56	j`ey	zipper: right?
2019-11-12 13:12:57	<--	crockwork (~crockwork@66.205.193.158) has quit (Quit: crockwork)
2019-11-12 13:13:19	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-12 13:14:42	j`ey	(I know the answer, but lets work towards it!)
2019-11-12 13:20:42	<--	Proximyst (~Proximyst@148.251.50.76) has quit (Quit: Robbing a bank)
2019-11-12 13:21:37	-->	z_fudge (~fudge@62.217.45.26) has joined ##rust
2019-11-12 13:22:32	zipper	j`ey: Sorry I was away for a bit
2019-11-12 13:22:33	zipper	Yeah
2019-11-12 13:22:51	j`ey	zipper: it's because you can't deserialise (afaik, you probably can with some othe crate) the &str
2019-11-12 13:23:07	j`ey	zipper: since &str is a reference, it can't deserialise it anywhere
2019-11-12 13:23:12	-->	Proximyst (~Proximyst@148.251.50.76) has joined ##rust
2019-11-12 13:23:15	j`ey	if you change &str to String, it works
2019-11-12 13:26:08	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Read error: Connection reset by peer)
2019-11-12 13:26:54	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-12 13:27:28	-->	t7 (~tommo@2a00:23c5:1284:fc00:20f7:a63f:4d97:f46b) has joined ##rust
2019-11-12 13:28:08	<--	exprosic (c2fe3d2c@roam-nat-fw-prg-194-254-61-44.net.univ-paris-diderot.fr) has quit (Remote host closed the connection)
2019-11-12 13:28:38	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-12 13:28:47	jellie	j`ey: Sorry
2019-11-12 13:28:58	j`ey	oh youre zipper
2019-11-12 13:29:03	jellie	Not sure what happened to my internet
2019-11-12 13:29:04	j`ey	jellie: did you see what I said?
2019-11-12 13:29:13	jellie	I didn't see what you said
2019-11-12 13:29:22	j`ey	jellie:  it's because you can't deserialise (afaik, you probably can with some othe crate) the &str
2019-11-12 13:29:47	j`ey	jellie: &str is a reference, so the string has to live somewhere in memory, and there's nowhere for it to live when deserialising to a hashmap
2019-11-12 13:29:54	jellie	hmm I can use a [u8[ instead
2019-11-12 13:29:59	j`ey	no
2019-11-12 13:30:02	jellie	Makes sense
2019-11-12 13:30:04	j`ey	if you change that to a String, you can
2019-11-12 13:30:07	jellie	j`ey: Why not?
2019-11-12 13:30:23	jellie	A String will work?
2019-11-12 13:30:26	j`ey	[u8] is 'unsized', and has to be behind a reference
2019-11-12 13:30:30	j`ey	String will work yes
2019-11-12 13:30:31	jellie	Ah
2019-11-12 13:30:35	jellie	Makes sense
2019-11-12 13:30:46	Lumpio-	[u8] is to str what &[u8] is to &str
2019-11-12 13:30:46	<--	johnward (~johnward@167.98.27.226) has quit (Remote host closed the connection)
2019-11-12 13:30:53	jellie	but isn't String also stored on the heap and a reference behind scenes?
2019-11-12 13:31:25	j`ey	internally, yes
2019-11-12 13:31:29	jellie	I've seen some serilization of [u8] somewhere in serde
2019-11-12 13:31:30	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-12 13:31:39	j`ey	but when you deserialise it, you create some new data for it
2019-11-12 13:32:04	jellie	So what does general enough usually mean?
2019-11-12 13:32:26	j`ey	in what context?
2019-11-12 13:34:05	jellie	j`ey: In the context of me trying to deserialize &str
2019-11-12 13:35:05	j`ey	who said 'general enough'
2019-11-12 13:35:24	j`ey	ohh
2019-11-12 13:35:27	j`ey	it's the error message
2019-11-12 13:36:11	jellie	Yes :)
2019-11-12 13:36:22	jellie	Plus you "j`ey | zipper: ok, so you get an error: error: implementation of `serde::de::Deserialize` is not general enough"
2019-11-12 13:37:05	Moongoodgirl	Depending on the data format, can't you deserialize a borrowed type, borrowing it from the serialized blob?
2019-11-12 13:37:16	Moongoodgirl	especially if it's &[u8] or &str
2019-11-12 13:37:46	j`ey	jellie: kinda me, I was just copying the error :P
2019-11-12 13:38:07	j`ey	Moongoodgirl: yeah, probably. does cbor allow that?
2019-11-12 13:38:47	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-vgjjboasteewgpvp) has quit (Write error: Connection reset by peer)
2019-11-12 13:38:48	<--	siraben (sirabenmat@gateway/shell/matrix.org/x-nxvkmbyqpazcxplp) has quit (Remote host closed the connection)
2019-11-12 13:38:50	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-fobddhzndsqiaeki) has quit (Write error: Connection reset by peer)
2019-11-12 13:39:04	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (Write error: Connection reset by peer)
2019-11-12 13:39:09	<--	Ericson2314 (ericson231@gateway/shell/matrix.org/x-zikrtcvpfdqnvskv) has quit (Write error: Connection reset by peer)
2019-11-12 13:39:19	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (Write error: Connection reset by peer)
2019-11-12 13:39:22	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-sseowzznwqenmtgn) has quit (Write error: Broken pipe)
2019-11-12 13:39:22	j`ey	I dont know enough about serde to say if it can do that or not, for some formats or not
2019-11-12 13:39:23	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-gzgljmwwaujhxkgn) has quit (Remote host closed the connection)
2019-11-12 13:39:26	Moongoodgirl	serializing a string in CBOR is just writing a prefix and then copying the entire string
2019-11-12 13:39:31	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-qwrohwmxidmfyxco) has quit (Write error: Broken pipe)
2019-11-12 13:39:46	Moongoodgirl	seems to me you should be able to
2019-11-12 13:40:01	Moongoodgirl	serde has all these mechanisms for deserializing owned vs deserializing borrowed
2019-11-12 13:40:49	j`ey	maybe it's just my lack of serde knowledge :)
2019-11-12 13:40:51	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Ping timeout: 240 seconds)
2019-11-12 13:40:51	Moongoodgirl	>>https://docs.rs/serde/1.0.102/serde/de/trait.Visitor.html#method.visit_borrowed_str
2019-11-12 13:42:34	j`ey	but can you use that from something like: let tux: HashMap<&str, u32> = serde_cbor::from_reader(tux_file)?;
2019-11-12 13:42:40	j`ey	or rather, should that automatically just work?
2019-11-12 13:45:33	Moongoodgirl	not from a reader
2019-11-12 13:45:50	Moongoodgirl	but if you read the whole serialized blob into a Vec<u8> first…
2019-11-12 13:47:59	naiveaiguy	Does rust have list comprehensions of any sort? I.e to simplify for a in list { if something { other_list.push(a) } }
2019-11-12 13:48:03	-->	neferty (~andor@typhoon.neferty.me) has joined ##rust
2019-11-12 13:48:06	Lumpio-	naiveaiguy: It has Iterator::map
2019-11-12 13:48:14	Lumpio-	I mean ::filter
2019-11-12 13:48:20	<--	mniip (mniip@freenode/staff/mniip) has quit (Ping timeout: 612 seconds)
2019-11-12 13:48:32	Lumpio-	let other_list: Vec<_> = list.iter().filter(|a| something).collect();
2019-11-12 13:48:47	Lumpio-	into_iter if you want to consume the other list and not get references
2019-11-12 13:54:13	netopso	Cargo seems not to have noticed that my source has changed, it's just using the cached binary. Is there any way to tell it to recompile *just* my code, instead of wiping everything with `cargo clean`?
2019-11-12 13:54:48	<--	ishw0r (~ishw0r@45.32.100.19) has quit (Remote host closed the connection)
2019-11-12 13:55:31	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-12 13:56:56	Moongoodgirl	normally I'd say to bump the timestamp on the source files, but, uh…
2019-11-12 13:57:03	Moongoodgirl	hmm
2019-11-12 13:58:16	jellie	Moongoodgirl: May you have packed HashMaps with CBOR before?
2019-11-12 13:59:46	-->	zeroed (~zeroed@unaffiliated/zeroed) has joined ##rust
2019-11-12 14:00:36	netopso	Moongoodgirl: cargo clean it is, then
2019-11-12 14:01:29	Moongoodgirl	netopso: well, you could also try deleting just the stuff from your crate
2019-11-12 14:01:34	Moongoodgirl	rather than dropping the whole ./target
2019-11-12 14:01:56	netopso	Moongoodgirl: I'm not familiar enough with the structure of ./target
2019-11-12 14:02:35	j`ey	cargo shouldnt get that wrong..
2019-11-12 14:02:47	netopso	if I just delete `mycrate` then that would force a recompile?
2019-11-12 14:03:00	netopso	err, `./target/mycrate`
2019-11-12 14:03:16	Moongoodgirl	I'm not either. I would just poke around in ./target and delete all the files with your crate's name in them :p
2019-11-12 14:03:21	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-12 14:03:28	netopso	j`ey: it appears to be. maybe I messed up something, but gotta be sure
2019-11-12 14:03:38	-->	sigwinch28 (~joe@2a01:4f8:151:9118::2) has joined ##rust
2019-11-12 14:04:25	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-12 14:05:39	naiveaiguy	Lumpio-: In my case, I'm looking to create a BinaryHeap, but BinaryHeap.from(list.filter(|a| condition(a))) complains that From<Filter> isn't implemented for BinaryHeap
2019-11-12 14:05:43	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-12 14:05:56	naiveaiguy	**BinaryHeap::from
2019-11-12 14:06:23	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-12 14:06:29	-->	ishw0r (~ishw0r@45.32.100.19) has joined ##rust
2019-11-12 14:07:08	Lumpio-	naiveaiguy: Generally the way to make a collection from an iterator is the .collect() method
2019-11-12 14:07:19	-->	rardiol (~rardiol@177.52.227.63) has joined ##rust
2019-11-12 14:07:22	Lumpio-	Didn't try it but would the thing I wrote work, except replace Vec<_> with BinaryHeap<_> ?
2019-11-12 14:07:27	naiveaiguy	Lumpio-: But collect also complains that it can't create a BinaryHeap
2019-11-12 14:07:50	Lumpio-	It's probably a problem with ownership
2019-11-12 14:07:55	Lumpio-	Use into_iter() if you can, otherwise .cloned()
2019-11-12 14:08:04	Lumpio-	.iter() by default gives you references to the items and BinaryHeap probably wants to own them
2019-11-12 14:08:10	Lumpio-	Unless you want a BinaryHeap of references
2019-11-12 14:08:18	Lumpio-	At any rate posting more of your code on play.rust-lang.org for instance would help
2019-11-12 14:11:23	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (Quit: leaving)
2019-11-12 14:12:00	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-12 14:13:32	naiveaiguy	Lumpio-: this demonstrates the error https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=9688f4a78d85d4a8aeee93b9e03ca0ed
2019-11-12 14:16:08	Lumpio-	ah
2019-11-12 14:16:31	<--	zeroed (~zeroed@unaffiliated/zeroed) has left ##rust ("done")
2019-11-12 14:16:47	Lumpio-	I think the issue here is that you're using into_iter on an array which derefs to the implementation on slice which returns references
2019-11-12 14:17:29	Lumpio-	I'm not sure if there's even a way to consume an array with into_iter, hmm
2019-11-12 14:17:40	Lumpio-	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e5348036625b6bf106b018571b2c07b7 this would be the obvious solution
2019-11-12 14:18:10	Lumpio-	Note that I'm using .collect as I suggested, but I added a .cloned to clone the items in the array because otherwise the .collect() wants to return a BinaryHeap<&Location> instead of a BinaryHeap<Location>
2019-11-12 14:18:18	Lumpio-	And this shoooould optimize to nothing. Hopefully.
2019-11-12 14:18:44	-->	AbedB (~AbedBhuty@bzq-109-66-57-204.red.bezeqint.net) has joined ##rust
2019-11-12 14:18:53	Moongoodgirl	there's no IntoIterator impl for arrays
2019-11-12 14:18:55	naiveaiguy	Lumpio-: what's the difference between .cloned() and .clone()
2019-11-12 14:19:18	Lumpio-	Yeah the implementation is on slices only
2019-11-12 14:19:20	Moongoodgirl	into_iter() ends up being on a slice ref, so you iterate over references
2019-11-12 14:19:25	Lumpio-	https://github.com/rust-lang/rust/issues/25725 there's an issue about it
2019-11-12 14:19:43	Lumpio-	Weird, somebody apparently asked about this before because my IRC client warned about a duplicate link
2019-11-12 14:20:05	Lumpio-	naiveaiguy: .cloned is a method on iterator which clones each element and then returns a new iterator over them
2019-11-12 14:20:36	naiveaiguy	Lumpio-: ah, whereas .clone() is a method on individual T: Clone instances
2019-11-12 14:20:38	naiveaiguy	Got it
2019-11-12 14:20:51	Lumpio-	To be more exact, Iterator::cloned calls Clone::clone on each element
2019-11-12 14:20:54	Lumpio-	Yes, that's correct
2019-11-12 14:22:32	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-12 14:23:28	-->	ytain (~ghfg@2607:f2c0:954a:b400:c03d:2115:8fc8:857d) has joined ##rust
2019-11-12 14:24:18	netopso	Well, `cargo clean` worked, but then I made another change and the issue is happening again. Cargo just doesn't see the file has changed...
2019-11-12 14:24:31	stephe	i need to do something like println!(s, 1, "foo", 2) where s isn't a string literal but a variable, anyone know of the best rustish way to do it?
2019-11-12 14:24:43	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-12 14:25:06	Moongoodgirl	netopso: oh, are you running RLS or any IDEs or anything?
2019-11-12 14:25:08	netopso	`rm cargo/target/mycrate*` didn't fix it either
2019-11-12 14:25:31	netopso	Moongoodgirl: no, this is a straight rustup install, as standard as it gets
2019-11-12 14:25:52	netopso	Don't even think I haveeditor plugins installed
2019-11-12 14:26:08	Moongoodgirl	well, I mean, rustup installs RLS by default, and many creatures use modern IDEs
2019-11-12 14:27:31	Moongoodgirl	stephe: the fundamental problem with that is that your variable could, at runtime, have more placeholders than you gave values at development time
2019-11-12 14:29:14	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-12 14:29:49	naiveaiguy	Lumpio-: additional thing: why does .collect() refuse to create a BinaryHeap<&Location> precisely? I can't see it documented anywhere that BinaryHeap necessarily needs to own its elements
2019-11-12 14:30:47	-->	mniip (mniip@freenode/staff/mniip) has joined ##rust
2019-11-12 14:31:44	<--	rardiol (~rardiol@177.52.227.63) has quit (Quit: Leaving)
2019-11-12 14:31:56	Moongoodgirl	naiveaiguy: you can collect() that way
2019-11-12 14:32:07	Lumpio-	naiveaiguy: You can but then the next line fails
2019-11-12 14:32:09	Moongoodgirl	naiveaiguy: it's a type mismatch in this case though because you try to push a Location
2019-11-12 14:32:17	Lumpio-	Because it tries to add a non-reference to it
2019-11-12 14:32:31	naiveaiguy	Moongoodgirl: but the error occured even with the reference, unless I did something wrong - lemme check
2019-11-12 14:32:40	Lumpio-	The error can be confusing due to type inference priorities though
2019-11-12 14:33:01	Lumpio-	If you specify the full type and not BinaryHead<_> it's clearer
2019-11-12 14:34:18	naiveaiguy	Lumpio-: Well it's not the same error, but if I use .adjacent().iter().filter().collect() in that order, and then try to push a reference, it complains that the temporary value has been dropped while borrowed but later used
2019-11-12 14:34:29	naiveaiguy	I think it's referring to self.location.adjacent(), but that doesn't make sense to me
2019-11-12 14:34:34	-->	Acru (8082edce@e237-206.eduroam.tuwien.ac.at) has joined ##rust
2019-11-12 14:35:12	netopso	Moongoodgirl: export CARGO_INCREMENTAL=0 did the trick
2019-11-12 14:35:20	<--	guardian (~guardian@planet-d.net) has quit (Ping timeout: 265 seconds)
2019-11-12 14:35:36	Moongoodgirl	netopso: hmmmmm, that's really weird
2019-11-12 14:36:41	Moongoodgirl	netopso: if you did `.push(&Location { .. })`, that's probably that
2019-11-12 14:36:47	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 265 seconds)
2019-11-12 14:37:29	naiveaiguy	netopso: Yes I did do frontier.puhs(&Location {..}), but why would that be an issue?
2019-11-12 14:37:39	naiveaiguy	Is that the temporary value it's referring to?
2019-11-12 14:37:45	naiveaiguy	Wait wrong mention Moongoodgirl
2019-11-12 14:38:40	Twey	stephe: https://docs.rs/runtime-fmt/
2019-11-12 14:39:27	<--	fry (~quassel@unaffiliated/fry) has quit (Remote host closed the connection)
2019-11-12 14:40:04	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-12 14:40:08	Moongoodgirl	evalr: struct Foo(); let mut vec = Vec::new(); vec.push(&Foo());
2019-11-12 14:40:12	--	Notice(evalr): ()
2019-11-12 14:40:18	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-11-12 14:40:20	-->	jinie_ (~jimmy@188.114.159.27) has joined ##rust
2019-11-12 14:40:24	Moongoodgirl	okay, /maybe/ not
2019-11-12 14:40:27	Moongoodgirl	naiveaiguy: post code
2019-11-12 14:41:35	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 268 seconds)
2019-11-12 14:42:13	<--	crodjer (~crodjer@unaffiliated/crodjer) has quit (Quit: leaving)
2019-11-12 14:42:15	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-11-12 14:42:28	naiveaiguy	Moongoodgirl: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=afd5c79143be8f27a84489b3bfc6854e
2019-11-12 14:42:36	naiveaiguy	These links need to be shorter lol
2019-11-12 14:43:19	Moongoodgirl	you can drop the version= and mode= if you want
2019-11-12 14:43:27	Moongoodgirl	edition=2018 is probably significant in this case
2019-11-12 14:44:00	Moongoodgirl	oh right
2019-11-12 14:44:06	-->	JadeJitsu (~JadeJitsu@185.163.46.141) has joined ##rust
2019-11-12 14:44:53	<--	jinie_ (~jimmy@188.114.159.27) has quit (Ping timeout: 250 seconds)
2019-11-12 14:44:58	Moongoodgirl	adjacent() returns an array, which is borrowed, and the borrows are put into the BinaryHeap, but the array they're borrowed from is a temporary and gets dropped too early
2019-11-12 14:45:33	Moongoodgirl	<Lumpio-> Note that I'm using .collect as I suggested, but I added a .cloned to clone the items in the array because otherwise the .collect() wants to return a BinaryHeap<&Location> instead of a BinaryHeap<Location>
2019-11-12 14:47:18	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-12 14:48:47	naiveaiguy	Moongoodgirl: Ah, so in this case, it's actually not possible to create a BinaryHeap<&Location> becuase those references point to a slice that's dropped too early
2019-11-12 14:49:21	Moongoodgirl	well, you could bind the array to a variable
2019-11-12 14:49:40	Moongoodgirl	let adjacent = self.location.adjacent(); adjacent.iter() ..
2019-11-12 14:49:47	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-12 14:50:20	Moongoodgirl	this should work as long as you don't need the BinaryHeap past the end of the function
2019-11-12 14:55:56	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-12 14:56:54	-->	fry (~quassel@unaffiliated/fry) has joined ##rust
2019-11-12 14:57:20	-->	rardiol (~quassel@177.52.227.63) has joined ##rust
2019-11-12 14:57:26	<--	rardiol (~quassel@177.52.227.63) has quit (Client Quit)
2019-11-12 14:58:45	-->	rardiol (~quassel@177.52.227.63) has joined ##rust
2019-11-12 15:00:37	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-12 15:01:08	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-12 15:02:29	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-12 15:03:44	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 276 seconds)
2019-11-12 15:03:54	--	cdown_ is now known as cdown
2019-11-12 15:04:43	jellie	Am I not allowed to import a module like this: `use std::fs::{Self, File};`
2019-11-12 15:04:55	jellie	then call it like fs::remove_file(fp)
2019-11-12 15:05:48	jellie	Oh the self is small s
2019-11-12 15:06:36	j`ey	Self is the type
2019-11-12 15:08:27	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2019-11-12 15:09:07	-->	federico_ (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-12 15:10:45	<--	ytain (~ghfg@2607:f2c0:954a:b400:c03d:2115:8fc8:857d) has quit (Quit: ...)
2019-11-12 15:11:02	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-nwbsyyouuzuvsyvb) has joined ##rust
2019-11-12 15:11:02	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-cdjpmyumvimspcsu) has joined ##rust
2019-11-12 15:11:03	-->	Ericson2314 (ericson231@gateway/shell/matrix.org/x-swaljhoccubovsyw) has joined ##rust
2019-11-12 15:11:03	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-ngfrnbwoucftyatd) has joined ##rust
2019-11-12 15:11:03	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-ztslywijgqclvaqv) has joined ##rust
2019-11-12 15:11:03	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-xwwkdhbebnbaycpp) has joined ##rust
2019-11-12 15:11:04	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-11-12 15:11:04	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-11-12 15:11:04	-->	siraben (sirabenmat@gateway/shell/matrix.org/x-vxmeozbodhjtvhel) has joined ##rust
2019-11-12 15:11:06	-->	ytain (~ghfg@2607:f2c0:954a:b400:c03d:2115:8fc8:857d) has joined ##rust
2019-11-12 15:14:13	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-12 15:15:31	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-11-12 15:16:01	-->	m1cl (~m1cl@2a02:8109:b6c0:9afc::19c1) has joined ##rust
2019-11-12 15:18:48	<--	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2019-11-12 15:19:22	<--	b5509cd (4d679bb8@gateway/web/cgi-irc/kiwiirc.com/ip.77.103.155.184) has quit (Remote host closed the connection)
2019-11-12 15:25:13	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-12 15:27:04	Flonk	vec[i] += 1 is atomic, right?
2019-11-12 15:27:21	<--	AbedB (~AbedBhuty@bzq-109-66-57-204.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-12 15:27:35	j`ey	in what sense?
2019-11-12 15:28:11	sfackler	it is definitely not atomic in the concurrency sense of the word
2019-11-12 15:28:32	sfackler	but it requires &mut self so you can't race against it in safe code
2019-11-12 15:28:34	Flonk	^ that's what I meant, like two threads incrementing the same index
2019-11-12 15:28:59	Lumpio-	If you want an actual atomic, use AtomicUsize for instance
2019-11-12 15:29:13	Flonk	Does it incur any overhead?
2019-11-12 15:29:25	Lumpio-	It incurs the amount of overhead an atomic increment incurs on your platform
2019-11-12 15:30:07	Flonk	Okay, I will run some tests with that!
2019-11-12 15:30:17	Lumpio-	Intuition tells me that there is some (usually negligeable) performance impact
2019-11-12 15:30:28	Lumpio-	But it should be less than a mutex!
2019-11-12 15:31:01	Flonk	I'm incrementing a million times a second so ideally I'd like 0 performance impact
2019-11-12 15:31:04	Lumpio-	At any rate as people told you you shouldn't be able to have a mutable reference to the same vector in multiple threads anyways, so your vec[i] += 1 in multiple threads shouldn't even compile
2019-11-12 15:31:12	Flonk	But I'm just learning the language so it's worth checking out anyway
2019-11-12 15:31:26	Lumpio-	You might always try to restructure your code so that you don't need atomics or synchronization
2019-11-12 15:31:31	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-12 15:31:54	Flonk	Lumpio- yeah that was going to be my follow up question, if I can unsafely increment in multiple threads or something.
2019-11-12 15:31:55	Lumpio-	For example, by having threads work on their own copies of data, and then sum them all together at the end. But whether that's viable depends entirely on what you're doing.
2019-11-12 15:32:03	Lumpio-	Parallelization sometimes requires you to restructure your program.
2019-11-12 15:32:44	Flonk	That's going to be pretty ram-heavy but I will try that too
2019-11-12 15:33:19	Lumpio-	It's hard to give better suggestions not knowing what it is that you are actually doing.
2019-11-12 15:33:27	Lumpio-	Some tasks might not even be parallelizable feasibly.
2019-11-12 15:34:02	-->	tsaka__ (~torstein@2a02:8109:9a80:7030:27d1:9d6e:14c8:e1fc) has joined ##rust
2019-11-12 15:34:40	Flonk	I'm shooting a complex number through a randomly chosen function in a loop, and I track it's trajectory (it's called an iterated function system)
2019-11-12 15:34:52	-->	naiveaiguy (~root@106.201.74.32) has joined ##rust
2019-11-12 15:34:56	Flonk	So I have a vec of ints that represents an image and I track how often any pixel is hit.
2019-11-12 15:35:32	Flonk	It does very well single-threadedly usually I think, but I'm just trying stuff.
2019-11-12 15:35:36	naiveaiguy	Why can you continue from inside of a match? Syntatically, what happens when you do let x = match something { Some(x) => x, None => continue } inside of a loop, for example
2019-11-12 15:36:05	j`ey	goes to the next iteration of the loop
2019-11-12 15:36:27	naiveaiguy	j`ey: Well yes of course, but how is that parsed? Wouldn't that do something like let x = continue?
2019-11-12 15:36:44	Lumpio-	The "return value" of continue is a special type called ! or the never type
2019-11-12 15:36:54	Twey	Flonk: This is not a safety question, note — incrementing an integer is just generally not atomic on most platforms (usually it's a read, increment, store, and those can race against each other if you're multithreaded).  Regardless of the language you need to use special atomic instructions if you want atomicity, which are generally slightly slower than their non-atomic equivalents because they
2019-11-12 15:36:55	Twey	involve coördination between threads or memory fences or something
2019-11-12 15:36:57	Lumpio-	It can be assigned to anything because the compiler knows it will never happen
2019-11-12 15:37:00	Lumpio-	Because continue jumps elsewhere.
2019-11-12 15:37:06	--	fotato is now known as thotato
2019-11-12 15:37:19	Twey	Flonk: You totally can just mutate a global integer with `unsafe`, but you'll get racy code where some updates are lost
2019-11-12 15:37:21	-->	AbedB (~AbedBhuty@bzq-109-65-111-162.red.bezeqint.net) has joined ##rust
2019-11-12 15:37:29	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-12 15:37:35	Lumpio-	"let x = continue;" is in fact perfectly valid
2019-11-12 15:38:31	naiveaiguy	Lumpio-: interesting, that does seem odd at face value but also allows for simpler flow so I'm not complaining, I suppose
2019-11-12 15:39:52	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-12 15:41:37	--	mgrech__ is now known as mgrech
2019-11-12 15:42:28	-->	dfin (~dsd@178-83-72-15.dynamic.hispeed.ch) has joined ##rust
2019-11-12 15:43:00	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-12 15:43:05	dfin	hi. What is the syntax to statically select a specific function when there are multiple trait implementation with clashing function names?
2019-11-12 15:43:40	Lumpio-	Trait::function(&object)
2019-11-12 15:43:53	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-11-12 15:44:32	-->	AbedB_ (~AbedBhuty@bzq-79-182-76-224.red.bezeqint.net) has joined ##rust
2019-11-12 15:47:23	Flonk	Twey, ah, that makes sense.
2019-11-12 15:47:30	dfin	"trait object without an explicit dyn are deprecated"
2019-11-12 15:47:53	j`ey	add 'dyn' in front, assuming the error is elsewhere?
2019-11-12 15:47:53	Flonk	Twey, to be honest though, since I'm doing a zillion samples and I'm unlikely to hit the same pixel twice that might be fine though
2019-11-12 15:47:57	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-11-12 15:48:02	j`ey	Box<Trait> -> Box<dyn Trait>
2019-11-12 15:48:07	Lumpio-	Using that syntax shouldn't cause a "missing dyn" error though
2019-11-12 15:48:19	<--	AbedB (~AbedBhuty@bzq-109-65-111-162.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-11-12 15:48:30	Flonk	I'll just try all of the above, thanks all.
2019-11-12 15:49:34	dfin	It's not a box though. I seem to be running into weird syntax problem here. My trait is parameterized. So its Trait<Something>::function(&object); But now the syntax checker complains.
2019-11-12 15:50:01	j`ey	Trait::<Something> ?
2019-11-12 15:50:02	dfin	stupid me: Trait::<Something>::
2019-11-12 15:50:09	dfin	;-)
2019-11-12 15:50:09	Twey	Flonk: It depends on your use-case really.  Does missing some updates make your answer useless, or just slightly degrade the quality of it?  Are you guaranteeing a perfectly correct answer to your callers, or is it understood to be an approximation?  If the latter, maybe racing is fine.
2019-11-12 15:50:48	Twey	dfin: Hyperfish!  :)
2019-11-12 15:51:40	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-12 15:54:58	-->	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-lvrleagordxxjbad) has joined ##rust
2019-11-12 15:56:41	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-12 16:01:08	<--	JadeJitsu (~JadeJitsu@185.163.46.141) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-12 16:02:07	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-12 16:05:31	naiveaiguy	Ok, this has a lot of weird context, but the basic problem I have now is this: I have a BTreeMap (self.units), with K and V both Clone-able, which I then do a bunch of manipulation on to make it a new, filtered enemy_units, but then I call I method with &mut self on it, and then I use enemy_units again. So Rust complains that the immutable borrow for self (from self.units) still exists, so I can't
2019-11-12 16:05:33	naiveaiguy	do that.
2019-11-12 16:05:55	naiveaiguy	In order to "detach" it from the borrow and let the borrow expire, I thought I could simply .clone() it, but I can't, Rust still complains
2019-11-12 16:06:04	-->	meandi (~meandi@dyndsl-178-142-248-161.ewe-ip-backbone.de) has joined ##rust
2019-11-12 16:07:07	naiveaiguy	The code is here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1d01f7ec09a24f8cc5be1d6d245faf2d there's a bunch of other context that I can't quite untangle from all of this, but just ignore it, the tick() function is where this is all coming from
2019-11-12 16:08:28	naiveaiguy	TL;DR, I need a way to untangle a derived value of self from the self borrow itself
2019-11-12 16:08:33	j`ey	naiveaiguy: the btreemap is of references
2019-11-12 16:09:12	naiveaiguy	j`ey: I don't think so, it's defined as BTreeMap<Location, Unit>, but I might have done something to make it so
2019-11-12 16:09:44	j`ey	the iter and filter make it references
2019-11-12 16:09:58	j`ey	enemy_units is BTreeMap<&, &>
2019-11-12 16:10:20	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-11-12 16:10:45	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-12 16:10:57	-->	AbedB__ (~AbedBhuty@bzq-109-65-83-5.red.bezeqint.net) has joined ##rust
2019-11-12 16:11:22	naiveaiguy	j`ey: Oh yeah of course, I even put that in the other function sigs
2019-11-12 16:11:55	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-12 16:12:12	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-12 16:12:36	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-12 16:12:58	j`ey	you can add .map(|(a,b)|(a.clone(), b.clone())) before the collect to make it not-references, but a) other stuff breaks, b) im not sure if there is a nicer way to do tha
2019-11-12 16:13:02	j`ey	t
2019-11-12 16:13:56	<--	AbedB_ (~AbedBhuty@bzq-79-182-76-224.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-11-12 16:14:36	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-12 16:17:44	naiveaiguy	j`ey: Turns out if I do .iter().filter().map(|(a, b)| (a.clone(), b.clone())), that works for mysterious reasons. I can't help but feel like I'm fighting with the compiler instead of understanding it
2019-11-12 16:18:35	j`ey	isn't that what I just said?
2019-11-12 16:19:34	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-12 16:19:54	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 16:19:55	naiveaiguy	j`ey: Yeah it is, I was doing into_iter instead
2019-11-12 16:20:28	j`ey	not in the playground you linked, it had iter
2019-11-12 16:20:51	<--	asocha (~asocha@public-gprs179483.centertel.pl) has quit (Remote host closed the connection)
2019-11-12 16:21:04	j`ey	anywyy, the problem is that you had BTreeMap::<&_, &_> and if you clone() that.. you still get a BTreeMap::<&_, &_>
2019-11-12 16:21:05	naiveaiguy	j`ey: Ah yeah, I must've changed it trying to mess around in between messages. thanks anyway, sorry for the huge playground :P
2019-11-12 16:21:51	<--	Acru (8082edce@e237-206.eduroam.tuwien.ac.at) has quit (Ping timeout: 260 seconds)
2019-11-12 16:22:19	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-12 16:25:21	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-12 16:25:54	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 16:27:54	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-12 16:28:29	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 264 seconds)
2019-11-12 16:31:58	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 268 seconds)
2019-11-12 16:46:00	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-12 16:50:16	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-12 16:50:16	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-12 16:50:16	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-12 16:50:16	--	Channel ##rust: 613 nicks (2 ops, 0 voices, 611 normals)
2019-11-12 16:50:33	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-12 16:53:59	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-12 16:55:39	j`ey	this is UB, right? let mut mpz = uninitialized(); __gmpz_init_set_ui(&mut mpz, i);
2019-11-12 16:55:55	-->	sfink (~chatzilla@107-207-38-202.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-11-12 16:56:02	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-11-12 16:59:37	sfackler	it is if mpz's type has any trap values
2019-11-12 16:59:47	sfackler	otherwise it's probably okay but better expressed through MaybeUninit
2019-11-12 17:03:15	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-11-12 17:04:29	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-11-12 17:07:06	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 265 seconds)
2019-11-12 17:07:32	naiveaiguy	Is there an easy way to wait for any user input? I don't want to check it for anything, I just want to wait until something's pressed
2019-11-12 17:18:40	Arnavion	j`ey:   https://docs.rs/gmp-sys/0.1.0/gmp_sys/struct.Struct_Unnamed1.html   has some ints inside, and I saw a comment by RalfJung recently that uninitialized() integers are UB. So on that basis, yes
2019-11-12 17:18:56	<--	dfin (~dsd@178-83-72-15.dynamic.hispeed.ch) has quit (Ping timeout: 276 seconds)
2019-11-12 17:19:31	Arnavion	j`ey: (   https://github.com/seanmonstar/num_cpus/pull/90#issue-338107489   is the comment)
2019-11-12 17:21:18	Xatenev	hm
2019-11-12 17:21:27	j`ey	Arnavion: cool thanks
2019-11-12 17:24:04	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-12 17:25:33	-->	triste (~triste@185.215.60.2) has joined ##rust
2019-11-12 17:25:46	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-12 17:29:03	--	thotato is now known as fotato
2019-11-12 17:29:13	<--	naiveaiguy (~root@106.201.74.32) has quit (Quit: WeeChat 2.6)
2019-11-12 17:39:15	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-12 17:39:48	<--	AkhILman (~AkhIL@host-94-251-61-202.bbcustomer.zsttk.net) has quit (Ping timeout: 268 seconds)
2019-11-12 17:41:51	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-12 17:42:29	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-12 17:50:50	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-12 17:55:50	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Ping timeout: 268 seconds)
2019-11-12 17:57:12	-->	meandi_2 (~meandi@dyndsl-178-142-248-161.ewe-ip-backbone.de) has joined ##rust
2019-11-12 17:57:14	<--	meandi (~meandi@dyndsl-178-142-248-161.ewe-ip-backbone.de) has quit (Ping timeout: 240 seconds)
2019-11-12 17:57:15	<--	triste (~triste@185.215.60.2) has quit (Quit: triste)
2019-11-12 17:58:05	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-11-13 09:10:10	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-13 09:10:10	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-13 09:10:10	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-13 09:10:10	--	Channel ##rust: 609 nicks (2 ops, 0 voices, 607 normals)
2019-11-13 09:10:12	cart_man	Yaniel: I want one "Portal" type object/thing that I can pass all my errors to so it can record and handle them. Is there a good way to do this? I have no idea how to do that or best way at least?
2019-11-13 09:10:25	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-13 09:10:48	Yaniel	don't do object-oriented programming in rust
2019-11-13 09:11:42	Yaniel	for logging, there is a bunch of crates that do a reasonably good job
2019-11-13 09:11:47	Yaniel	such as log, env_logger and slog
2019-11-13 09:14:37	cart_man	Yaniel: Ok but its about the concept and how I can do it myself
2019-11-13 09:14:55	cart_man	SO I would like to attempt it myself and exclude helper creates
2019-11-13 09:15:06	cart_man	Its really more for my understanding
2019-11-13 09:15:16	Yaniel	static variables
2019-11-13 09:15:36	Yaniel	(global)
2019-11-13 09:17:00	cart_man	Yaniel: That is essentially what the crates would also do right?
2019-11-13 09:17:36	-->	tsaka__ (~torstein@i577BC113.versanet.de) has joined ##rust
2019-11-13 09:17:53	-->	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-dkvksfhjtltapesf) has joined ##rust
2019-11-13 09:19:16	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-13 09:22:27	<--	jacob (~jacobirc@unaffiliated/jacob) has quit (Ping timeout: 250 seconds)
2019-11-13 09:23:13	-->	jacob (~jacobirc@unaffiliated/jacob) has joined ##rust
2019-11-13 09:24:41	Yaniel	yes
2019-11-13 09:25:21	-->	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has joined ##rust
2019-11-13 09:27:09	-->	eythian (~quassel@fsf/member/eythian) has joined ##rust
2019-11-13 09:27:28	Yaniel	and also what effectively happens in other languages
2019-11-13 09:28:44	<--	smvoss (~smvoss@207.191.220.92) has quit (Ping timeout: 276 seconds)
2019-11-13 09:31:50	<--	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has quit (Quit: WeeChat 2.6)
2019-11-13 09:35:00	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-13 09:36:04	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-13 09:36:36	-->	BeerLover (~BeerBuddy@103.203.254.245) has joined ##rust
2019-11-13 09:39:30	<--	BeerLover (~BeerBuddy@103.203.254.245) has quit (Client Quit)
2019-11-13 09:40:26	<--	tsaka__ (~torstein@i577BC113.versanet.de) has quit (Ping timeout: 276 seconds)
2019-11-13 09:41:50	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-13 09:42:03	-->	xeno_ (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-13 09:43:41	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (Ping timeout: 276 seconds)
2019-11-13 09:43:47	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-13 09:44:03	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 240 seconds)
2019-11-13 09:45:41	-->	smvoss (~smvoss@207.191.220.92) has joined ##rust
2019-11-13 09:46:27	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-13 09:47:17	-->	Coldblackice_ (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-13 09:48:34	<--	Coldblackice (~c@unaffiliated/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-13 09:51:00	<--	_xor (~xor@74.215.46.133) has quit (Remote host closed the connection)
2019-11-13 09:51:12	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-13 09:51:24	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-13 09:51:36	<--	smvoss (~smvoss@207.191.220.92) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-11-13 09:52:08	<--	liiwi (liiwi@idle.fi) has quit (Ping timeout: 245 seconds)
2019-11-13 09:52:11	-->	smvoss (~smvoss@207.191.220.92) has joined ##rust
2019-11-13 09:52:54	-->	liiwi (liiwi@idle.fi) has joined ##rust
2019-11-13 09:53:08	cart_man	Yaniel: Yea I use to write this sort of thing in C++
2019-11-13 09:55:11	jellie	If an unstable feature (in nightly) is used in core areas of my code is there a way to specify in Cargo.toml to always use +nightly to avoid the trouble of always running cargo +nightly?
2019-11-13 09:55:36	<--	Coldblackice_ (~c@unaffiliated/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-13 09:55:39	j`ey	jellie: you can make a rust-toolchain file
2019-11-13 09:55:57	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-13 09:57:03	<--	smvoss (~smvoss@207.191.220.92) has quit (Read error: Connection reset by peer)
2019-11-13 09:58:12	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-13 10:00:21	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-13 10:01:32	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-11-13 10:01:33	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-11-13 10:01:40	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-11-13 10:02:09	jellie	j`ey: That's a .rustup in my project root?
2019-11-13 10:02:24	jellie	I can't really find an example or easy way to find it what to put in it
2019-11-13 10:02:51	jellie	I've looked at the docs here but it's not very clear https://github.com/rust-lang/rustup#the-toolchain-file
2019-11-13 10:03:12	-->	tsaka__ (~torstein@ip5b403b7b.dynamic.kabel-deutschland.de) has joined ##rust
2019-11-13 10:03:21	j`ey	run: rustc --version
2019-11-13 10:03:38	j`ey	and then put: nightly-that-date
2019-11-13 10:04:05	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-11-13 10:04:10	j`ey	I dont think 'nightly' by itself works, but that'd be nice
2019-11-13 10:04:12	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-11-13 10:04:35	jellie	Okay I don't quite get what you're saying
2019-11-13 10:04:37	<--	Coldblackice (~c@unaffiliated/coldblackice) has quit (Ping timeout: 268 seconds)
2019-11-13 10:04:44	jellie	Should this be in a .rustup ?
2019-11-13 10:04:53	j`ey	no, rust-toolchain
2019-11-13 10:05:31	cart_man	j`ey:  Do you have additional input into my Error dilemma ?
2019-11-13 10:05:45	jellie	Do you mean:
2019-11-13 10:05:46	j`ey	cart_man: no cos I havent read it :P
2019-11-13 10:05:48	jellie	echo "$(rustc --version) nightly-that-date" > .rustup ?
2019-11-13 10:05:55	cart_man	j`ey: oh lol ok
2019-11-13 10:06:03	j`ey	jellie: no, nothing to do with .rustup
2019-11-13 10:06:15	j`ey	a file 'rust-toolchain'
2019-11-13 10:06:28	jellie	echo "$(rustc --version) nightly-that-date" > rust-toolchain ?
2019-11-13 10:06:35	j`ey	and put something like 'nightly-2019-11-06' in it
2019-11-13 10:07:06	cart_man	j`ey: I am trying to get as much input as possible from everyone. I want to implement some fort of Portal right accross my Rust app that will receive and handle all the error messages generated by my App. Without usings creates of course
2019-11-13 10:07:59	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-11-13 10:08:17	cart_man	crates not creates ` ugh ...
2019-11-13 10:09:36	j`ey	it sounds like you need some kinda global object
2019-11-13 10:10:48	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-13 10:10:51	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-13 10:12:13	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-13 10:12:39	jellie	j`ey: If I may ask, so this seems to be downloading a whole new nightly build of rust. Will this conflict with whichever nightly I already have on my computer?
2019-11-13 10:13:13	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-13 10:13:14	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Ping timeout: 240 seconds)
2019-11-13 10:13:45	j`ey	jellie: nope
2019-11-13 10:15:23	j`ey	you could try with just 'nightly' in the toolchain file, but im not sure i fthat works
2019-11-13 10:15:37	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-13 10:15:55	jellie	This is very much unlike what I'm used to. I keep changing stuff and umm everything doesn't just crash and burn, from deps to code.
2019-11-13 10:16:08	<--	goncalor (~goncalor@unaffiliated/goncalor) has quit (Quit: ZNC - https://znc.in)
2019-11-13 10:16:25	jellie	I would also say that I'm getting better at Rust.
2019-11-13 10:16:55	-->	goncalor (~goncalor@unaffiliated/goncalor) has joined ##rust
2019-11-13 10:17:03	jellie	j`ey: I'll go with the safer option for now
2019-11-13 10:17:51	<--	vmeson (~rmacleod@S0106ac202ece3eb3.vc.shawcable.net) has quit (Ping timeout: 240 seconds)
2019-11-13 10:22:21	<--	Coldblackice (~c@unaffiliated/coldblackice) has quit (Ping timeout: 246 seconds)
2019-11-13 10:22:36	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-13 10:23:59	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:896f:4e72:ea07:574f) has quit (Ping timeout: 250 seconds)
2019-11-13 10:26:07	yrp	is there a tl;dr anywhere on why tokio and async-std are fighting?
2019-11-13 10:27:58	-->	jello_pudding (~jello_pud@2601:600:9f80:7780::6dd8) has joined ##rust
2019-11-13 10:28:41	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-13 10:49:49	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-13 10:49:59	cart_man	j`ey: Yes in C++ id be using a singleton
2019-11-13 10:50:28	cart_man	j`ey: But I am looking for a nice way to do it. Static has been mentioend
2019-11-13 10:50:33	cart_man	mentioned`
2019-11-13 10:51:11	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-11-13 10:52:09	carado	hi, anyone know what exactly is meant by "usize**4" in https://docs.rs/specs/0.15.1/specs/struct.BitSet.html ? i assume it's some number to the power of four, but is it the size_of::<usize>(), the number of bits in an usize, or something else ?
2019-11-13 10:52:51	carado	actually nevermind, reading the actual source it's clear it's the number of bits, nevermind
2019-11-13 10:55:03	-->	Coldblackice (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-13 10:56:10	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-13 10:56:48	<--	jello_pudding (~jello_pud@2601:600:9f80:7780::6dd8) has quit (Quit: Quit Client)
2019-11-13 10:57:19	-->	Coldblackice_ (~c@unaffiliated/coldblackice) has joined ##rust
2019-11-13 10:59:37	<--	Coldblackice (~c@unaffiliated/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-13 11:00:16	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-13 11:02:26	j`ey	cart_man: it has to be a global, unless you want to pass it to every function
2019-11-13 11:06:23	<--	Coldblackice_ (~c@unaffiliated/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-13 11:15:50	exDM69	cart_man: the equivalent of a singleton (which is usually bad design) is using a global variable with lazy initialization... you can take a look at the lazy_static crate which does exactly what you want
2019-11-13 11:16:21	exDM69	if you don't want to use the crate, feel free to reimplement it
2019-11-13 11:17:18	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-13 11:17:22	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-13 11:21:14	<--	KeyJoo (~KeyJoo@83.220.188.47) has quit (Quit: KeyJoo)
2019-11-13 11:23:32	-->	hussam (uid193284@gateway/web/irccloud.com/x-qpepyipfxeuvbver) has joined ##rust
2019-11-13 11:25:04	-->	matthias_bgg (~mbgg@95.169.226.39) has joined ##rust
2019-11-13 11:27:07	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-13 11:27:33	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-13 11:29:21	cart_man	exDM69: Yea I am mainly doing this for experience. But experience with hard things. Crates tend to take all the hard core stuff and make it easy.
2019-11-13 11:29:34	cart_man	j`ey: So where does on define a Global in Rust?
2019-11-13 11:29:38	<--	naiveaiguy (~root@110.227.217.103) has quit (Ping timeout: 240 seconds)
2019-11-13 11:30:29	cart_man	exDM69: Singletong is usually a bad design thats true but I have seen it being used elegantly in C++.
2019-11-13 11:31:57	j`ey	cart_man: I dont really know what youre trying to do.. is it something that has to store state?
2019-11-13 11:32:39	cart_man	j`ey: Its like a buffer basically getting codes pushed onto it for some info containing the code fo an error that happened anywhere in the Rust APp
2019-11-13 11:32:50	j`ey	and then it outputs it somewhere?
2019-11-13 11:33:25	cart_man	j`ey: It goes to a DB and gets the translated value IF necessary ... im still thinking of that as an extra for it
2019-11-13 11:33:36	cart_man	since I am going to have to give user feedback
2019-11-13 11:33:57	cart_man	j`ey: But I guess we can for now treat it as something that is written out to a file
2019-11-13 11:34:02	cart_man	just to start
2019-11-13 11:34:22	j`ey	and you dont want to pass this object around?
2019-11-13 11:34:54	cart_man	j`ey: No cause I have Error Handling all over the place ... it would be ugly and hairy
2019-11-13 11:35:44	j`ey	then you can make a 'static mut', but you have to use unsafe / make a safe abstraction
2019-11-13 11:37:39	<--	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-dkvksfhjtltapesf) has quit (Quit: Connection closed for inactivity)
2019-11-13 11:43:17	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 268 seconds)
2019-11-13 11:44:54	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-13 11:51:53	yrp	newtype UnsafeCell and unsafe impl Sync and Send on it
2019-11-13 12:07:17	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-13 12:09:45	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-13 12:11:08	<--	rrooij (~rrooij@terminusdb/developer/rrooij) has quit (Ping timeout: 245 seconds)
2019-11-13 12:12:09	-->	philipp__ (~philipp@mail.sonovum.de) has joined ##rust
2019-11-13 12:12:41	cart_man	j`ey: Shit so there is no way I can dodge this without using UNSAFE?
2019-11-13 12:15:18	j`ey	maybe you can with a Mutx or Arc or something, I've never tried it
2019-11-13 12:19:31	Xatenev	can I somehow use the keyword `type` in a struct field?
2019-11-13 12:20:08	Xatenev	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=71d0eeb48fa49646c5518510a567acd2
2019-11-13 12:20:17	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-13 12:20:22	Xatenev	oh
2019-11-13 12:20:24	Xatenev	the compiler tells me there
2019-11-13 12:20:25	Xatenev	heh
2019-11-13 12:20:35	Xatenev	good that I made a playground :D
2019-11-13 12:20:37	Xatenev	nvm :)
2019-11-13 12:20:59	-->	t7 (~tommo@2a00:23c5:1284:fc00:708a:996b:38dc:a427) has joined ##rust
2019-11-13 12:24:09	<--	mgocobachi (~m@fsf/member/mgocobachi) has quit (Quit: Winter is coming)
2019-11-13 12:24:46	-->	mgocobachi (~m@fsf/member/mgocobachi) has joined ##rust
2019-11-13 12:28:06	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-11-13 12:28:22	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-13 12:28:36	<--	panicbit (~panicbit@p5B09E1D2.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-11-13 12:29:48	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-13 12:30:48	-->	panicbit (~panicbit@p5B09E1D2.dip0.t-ipconnect.de) has joined ##rust
2019-11-13 12:31:28	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-13 12:31:41	exDM69	cart_man: did you take a look at lazy_static yet... it uses std::sync::Once for the initialization
2019-11-13 12:32:01	exDM69	and then you'd need to use a Mutex if you want mutable access from many threads
2019-11-13 12:32:32	exDM69	I /think/ this can be done without unsafe
2019-11-13 12:35:04	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-13 12:35:23	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-13 12:37:21	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-13 12:39:07	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-13 12:41:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-13 12:42:43	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Client Quit)
2019-11-13 12:52:06	--	fotato is now known as unignoremeasshol
2019-11-13 12:52:13	-->	ytain (~ghfg@2607:f2c0:92e3:a700:815a:25a4:1eb1:883c) has joined ##rust
2019-11-13 12:52:13	--	unignoremeasshol is now known as fotato
2019-11-13 12:54:16	-->	dXP (uid404260@gateway/web/irccloud.com/x-bgbmszwqmcedwnqb) has joined ##rust
2019-11-13 12:55:19	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-13 12:59:27	-->	lauromoura_ (~lauromour@2804:7f5:f380:2739:ac5c:95a9:ea8b:74b4) has joined ##rust
2019-11-13 13:00:18	cart_man	exDM69: Ok will in a sec... just had a meeting
2019-11-13 13:01:16	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-11-13 13:01:33	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-13 13:01:36	<--	lauromoura (~lauromour@2804:7f5:f380:55c2:9979:533b:1448:e97b) has quit (Ping timeout: 246 seconds)
2019-11-13 13:04:22	<--	rardiol (~quassel@177.52.227.63) has quit (Ping timeout: 252 seconds)
2019-11-13 13:06:28	-->	rrooij (~rrooij@terminusdb/developer/rrooij) has joined ##rust
2019-11-13 13:09:29	<--	pipqs (~pqzx@unaffiliated/pqzx) has quit (Quit: Leaving)
2019-11-13 13:12:48	<--	xeno_ (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-13 13:13:12	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-13 13:24:52	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Read error: Connection reset by peer)
2019-11-13 13:25:28	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-13 13:29:48	<--	crockwork (~crockwork@66.205.193.158) has quit (Quit: crockwork)
2019-11-13 13:30:06	-->	ghost64 (~ghost64@corrigan.xyz) has joined ##rust
2019-11-13 13:32:09	stephe	any macro experts here? having a problem with a macro that matches either a tuple like ($a:expr, $b:expr) or just a plain expr, but different macro bodies for each case, seems like it's due to tuples being exprs themselves?
2019-11-13 13:33:13	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-13 13:34:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-13 13:37:17	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-13 13:37:54	netopso	is there any way to call a "teardown" function after unit tests are complete?
2019-11-13 13:38:11	j`ey	teardown(); :P
2019-11-13 13:38:31	netopso	j`ey: I mean after *all* tests are done
2019-11-13 13:38:35	netopso	and only call it once
2019-11-13 13:39:14	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-13 13:39:15	gchristensen	in my definitely humble opinion, generally the need for a teardown implies other problems which might come up, like around concurrency and running all your tests at once. what do you want it to do?
2019-11-13 13:40:01	netopso	this looks promising: https://medium.com/@ericdreichert/test-setup-and-teardown-in-rust-without-a-framework-ba32d97aa5ab
2019-11-13 13:40:33	netopso	gchristensen: I'm calling into external code where the teardown is very expensive and I can't have it running after every test, much better to have it run once
2019-11-13 13:41:05	j`ey	what kinda teardown?
2019-11-13 13:41:30	netopso	j`ey: resetting state that the test may have messed up
2019-11-13 13:41:49	Yaniel	and how is not running that after every test a good idea
2019-11-13 13:41:53	gchristensen	yikes
2019-11-13 13:42:52	netopso	it's very important to call reset() else the external system may be left in a Bad State, but due to external limitations the reset can't be done too often (having it in 2 tests that run sequentially at rust speeds is too much)
2019-11-13 13:43:08	gchristensen	ouch
2019-11-13 13:43:16	gchristensen	what, uh, is this system?
2019-11-13 13:43:20	netopso	Yaniel: because running it twice or more times in quick succession breaks things
2019-11-13 13:43:30	netopso	gchristensen: a poorly designed one :/
2019-11-13 13:43:45	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-13 13:43:49	gchristensen	it sounds like these tests probably should't be part of the standard test suite, and a separate thing which is executed
2019-11-13 13:44:00	gchristensen	keep cargo tests fast and parallelized and stable, and then brittle tests like this ... later
2019-11-13 13:44:06	j`ey	or have all the tests in one function
2019-11-13 13:44:07	Yaniel	if the system is in bad state after the first test the next test is likely to fail as a result
2019-11-13 13:44:16	Yaniel	and good luck finding that out by looking only at one test
2019-11-13 13:44:50	Yaniel	bonus points if you run the tests in a random or undefined order
2019-11-13 13:44:54	netopso	Yaniel: no, not in this case, the tests are dealing with separate things, it's about leaving the state "the way we found it"
2019-11-13 13:45:12	netopso	j`ey: that... is the current solution
2019-11-13 13:45:23	gchristensen	what if twodevelopers are running the tests at the same time, and one cleans up while the other is running, and then the second starts?
2019-11-13 13:45:37	netopso	the tests can run in any order they like
2019-11-13 13:45:37	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-13 13:45:57	gchristensen	I like j`ey's idea best :P
2019-11-13 13:46:12	netopso	gchristensen: that would be very unlikely given the situation but ok, sure ,that would cause issues
2019-11-13 13:46:55	netopso	gchristensen: yes, I will probably just do that for the sake of simplicity.
2019-11-13 13:59:13	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-13 14:03:09	-->	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-13 14:05:26	-->	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has joined ##rust
2019-11-13 14:06:08	<--	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Ping timeout: 245 seconds)
2019-11-13 14:07:39	-->	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-13 14:07:44	jellie	Is there a way to have a program look up the contents of its own Cargo.toml at compile time and bake them into the binary?
2019-11-13 14:08:01	jellie	This is for CLI args such as version and help for the program name
2019-11-13 14:10:43	<--	PeterRabbit (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has quit (Ping timeout: 245 seconds)
2019-11-13 14:10:52	j`ey	there are some environment variables that cargo exports I think..
2019-11-13 14:12:28	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 265 seconds)
2019-11-13 14:12:30	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-13 14:13:00	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-13 14:17:09	-->	meandi (~meandi@dyndsl-178-142-252-078.ewe-ip-backbone.de) has joined ##rust
2019-11-13 14:17:27	philipp__	You could always use include_bytes!("Cargo.toml") and use some crate to parse the file.
2019-11-13 14:19:10	jellie	philipp__: Yeah I could and I just looked at how it's implemented in Rust and seems super rounabout.
2019-11-13 14:19:26	jellie	I'm super tempted to ask why they did it that way
2019-11-13 14:19:54	jellie	This: https://github.com/rust-lang/cargo/blob/da4fadf6be3ef5030e411d3360244cf685617a58/src/cargo/lib.rs#L230-L270
2019-11-13 14:19:57	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-11-13 14:20:09	jellie	https://github.com/rust-lang/rust/issues/41197
2019-11-13 14:20:28	jellie	and the fix for https://github.com/rust-lang/rls/issues/304
2019-11-13 14:20:48	jellie	Could someone explain why it's implemented this way? Seems awefully rounabout to me
2019-11-13 14:22:27	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-13 14:22:40	j`ey	where are the including the cargo.toml?
2019-11-13 14:23:01	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-13 14:23:02	j`ey	looks like they have env_str!("CARGO_PKG_VERSION_MAJOR")
2019-11-13 14:23:38	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Quit: Leaving)
2019-11-13 14:23:52	j`ey	https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates
2019-11-13 14:24:23	jellie	j`ey: Yeah they're using env vars which I don't have
2019-11-13 14:24:35	jellie	they're not checking the cargo.toml
2019-11-13 14:24:41	j`ey	they are available to yoy
2019-11-13 14:24:43	j`ey	you
2019-11-13 14:24:52	jellie	for rls they even dump a commit info
2019-11-13 14:29:08	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-13 14:29:08	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Client Quit)
2019-11-13 14:31:39	-->	iq (~iq@2600:100e:be1c:166:2a63:9ec7:8ebf:2fc4) has joined ##rust
2019-11-13 14:36:04	-->	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-blllhizietiefohc) has joined ##rust
2019-11-13 14:39:51	<--	belst (~belst@unaffiliated/belst) has quit (Quit: bb)
2019-11-13 14:40:03	-->	belst (~belst@unaffiliated/belst) has joined ##rust
2019-11-13 14:41:03	<--	belst (~belst@unaffiliated/belst) has quit (Client Quit)
2019-11-13 14:41:14	-->	belst (~belst@unaffiliated/belst) has joined ##rust
2019-11-13 14:41:44	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-13 14:44:08	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Remote host closed the connection)
2019-11-13 14:49:30	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-13 14:51:59	<--	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2019-11-13 14:52:41	-->	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has joined ##rust
2019-11-13 14:52:41	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-13 14:53:27	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-13 14:56:15	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-13 14:56:58	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-11-13 15:02:09	-->	JadeJitsu (~jadejitsu@213.233.88.152) has joined ##rust
2019-11-13 15:04:26	<--	JadeJitsu (~jadejitsu@213.233.88.152) has left ##rust
2019-11-13 15:12:50	-->	LunarJetman (LunarJetma@5ec1bc5a.skybroadband.com) has joined ##rust
2019-11-13 15:14:08	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-13 15:15:21	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-11-13 15:16:06	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-11-13 15:21:31	-->	naiveaiguy (~root@110.227.217.103) has joined ##rust
2019-11-13 15:21:53	naiveaiguy	How did I manage to write a Rust program that's slower than an equivalent Python one
2019-11-13 15:22:07	<--	philipp__ (~philipp@mail.sonovum.de) has quit (Quit: Lost terminal)
2019-11-13 15:22:12	<--	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2019-11-13 15:22:17	gchristensen	your rust program does more work
2019-11-13 15:22:20	naiveaiguy	what's the general advice on where to look for performance optimization
2019-11-13 15:22:29	-->	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has joined ##rust
2019-11-13 15:22:37	naiveaiguy	gchristensen: Yeah, in all likelihood, I'm not blaming Rust, I'm blaming myself lol
2019-11-13 15:23:03	gchristensen	for sure :) although some Python libraries are extremely well optimised and do a great job, and it'd be a challenge to get a good result in equivalent effort in Rust
2019-11-13 15:23:06	gchristensen	anyway, `perf` is really nice for finding expensive parts of your program
2019-11-13 15:23:26	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 268 seconds)
2019-11-13 15:24:03	<--	guardian (~guardian@planet-d.net) has quit (Ping timeout: 246 seconds)
2019-11-13 15:24:31	naiveaiguy	gchristensen: And not to mention, it's only faster using PyPy, so I suppose that's a little unfair of a comparision
2019-11-13 15:24:59	Yaniel	naiveaiguy: a common mistake would be allocating strings all over the place
2019-11-13 15:25:06	Yaniel	especially in hot loops
2019-11-13 15:25:32	-->	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has joined ##rust
2019-11-13 15:26:15	naiveaiguy	Yaniel: No strings, but I am doing a lot of cloning and copying, which may also be a factor. I'll find out using perf, as they say, don't speculate about performance improvements until you have benchmarks
2019-11-13 15:27:08	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-13 15:28:59	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-13 15:30:18	<--	mxco86_ (~mxco86@cpc151835-shef17-2-0-cust77.17-1.cable.virginm.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-13 15:31:11	j`ey	naiveaiguy: and you build with --release, right?
2019-11-13 15:31:38	naiveaiguy	j`ey: well of course I forgot about that, now I'm embarassed
2019-11-13 15:32:02	naiveaiguy	j`ey: holy shit you're goddamn right it just completed in milliseconds flat with --release vs 3s on PyPy
2019-11-13 15:32:08	naiveaiguy	how did I forget
2019-11-13 15:32:24	j`ey	naiveaiguy: happens to the best of us
2019-11-13 15:35:32	-->	JadeJitsu68 (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-13 15:42:46	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Quit: Igloo IRC: https://iglooirc.com)
2019-11-13 15:43:24	-->	JadeJitsu (~jadejitsu@213.233.88.152) has joined ##rust
2019-11-13 15:43:30	the_ment	yes, the difference between --release and debug is huge
2019-11-13 15:47:41	<--	JadeJitsu (~jadejitsu@213.233.88.152) has quit (Client Quit)
2019-11-13 15:48:07	-->	JadeJitsu (~jadejitsu@213.233.88.152) has joined ##rust
2019-11-13 15:48:37	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-13 15:48:45	<--	JadeJitsu (~jadejitsu@213.233.88.152) has quit (Client Quit)
2019-11-13 15:48:59	naiveaiguy	Why is it that deriving PartialOrd with a custom Ord results in different behaviour than a PartialOrd manually written to simply return Some(self.cmp(&other)), thereby deferring to Ord? Does the default derived implementation not do this for some reason?
2019-11-13 15:49:38	naiveaiguy	The Ord docs recommend implementing PartialEq and PartialOrd yourself as the same boilerplate, becuase deriving some traits and implementing others can lead to disagreements, but I'm not sure why this is
2019-11-13 15:50:12	j`ey	partialord can be derived without ord being implemented
2019-11-13 15:50:17	j`ey	so it couldnt default to that
2019-11-13 15:51:35	<--	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2019-11-13 15:53:46	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 252 seconds)
2019-11-13 15:55:18	jellie	naiveaiguy: :)
2019-11-13 15:55:44	jellie	Rust keeps getting easier at least. Phew!
2019-11-13 15:56:22	naiveaiguy	j`ey: Ah, ok, that does make sense. If you just derive everything you can't delegate to Ord
2019-11-13 16:00:09	<--	meandi (~meandi@dyndsl-178-142-252-078.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-11-13 16:03:10	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-13 16:03:24	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-13 16:06:15	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-13 16:10:39	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-13 16:18:13	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-11-13 16:21:50	-->	harai (~harai@gateway/tor-sasl/harai) has joined ##rust
2019-11-13 16:27:03	<--	OmniMancer (~Paul@101.100.137.239) has quit (Read error: Connection reset by peer)
2019-11-13 16:33:04	--	irc: disconnected from server
2019-11-13 16:33:40	-->	Syrinxos (~syrinxos@93-34-1-82.ip47.fastwebnet.it) has joined ##rust
2019-11-13 16:33:40	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-13 16:33:40	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-13 16:33:40	--	Channel ##rust: 619 nicks (2 ops, 0 voices, 617 normals)
2019-11-13 16:34:00	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-13 16:34:49	-->	phildawson (~phildawso@167.98.27.226) has joined ##rust
2019-11-13 16:36:40	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-13 16:37:06	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-13 16:41:49	<--	JadeJitsu68 (~JadeJitsu@213.233.88.152) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-13 16:44:59	-->	urbanslug (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-13 16:45:51	<--	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-blllhizietiefohc) has quit (Quit: Connection closed for inactivity)
2019-11-13 16:46:45	<--	urbanslug (~zipper@unaffiliated/zipper) has quit (Client Quit)
2019-11-13 16:48:28	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Remote host closed the connection)
2019-11-13 16:48:51	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-13 16:50:24	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-11-13 17:03:33	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Remote host closed the connection)
2019-11-13 17:04:17	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-13 17:06:46	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Remote host closed the connection)
2019-11-13 17:07:11	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-13 17:08:58	naiveaiguy	Welp, I did finish the program, learned a whole lot about Rust along the way, and I'm beginning to genuinely like it! If any of y'all have time, I would greatly appreciate a code review on this: https://codereview.stackexchange.com/questions/232333/advent-of-code-2018-day-15-naive-rust-program
2019-11-13 17:15:25	--	irc: disconnected from server
2019-11-13 17:16:02	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-13 17:16:02	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-13 17:16:02	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-13 17:16:02	--	Channel ##rust: 617 nicks (2 ops, 0 voices, 615 normals)
2019-11-13 17:16:22	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-13 17:17:10	-->	smvoss (~smvoss@207.191.220.92) has joined ##rust
2019-11-13 17:17:45	smvoss	what is the best way to handle splitting a string and taking one (or the other) value every time? if I have a string that is always "x = y" as an example, and I always want the value of y
2019-11-13 17:18:46	smvoss	the initial thing I considered is split on =, but from there I either need to iterate to y or do a collect and use the value at y
2019-11-13 17:19:01	smvoss	but wondering if there is a better way I'm not considering
2019-11-13 17:19:52	j`ey	evalr: "x = y".rsplit("= ").next()
2019-11-13 17:19:55	--	Notice(evalr): Some("y")
2019-11-13 17:20:41	naiveaiguy	evalr: Some(Some(2)).unwrap()
2019-11-13 17:20:47	--	Notice(evalr): Some(2)
2019-11-13 17:20:58	naiveaiguy	Huh. Bit weird but ok
2019-11-13 17:21:05	j`ey	why weird?
2019-11-13 17:21:30	naiveaiguy	I didn't realize unwrap worked like this, it feels like it should unwrap "all the way" so to speak, or not?
2019-11-13 17:21:30	j`ey	it would be weirder to unwrap multiple levels
2019-11-13 17:21:47	j`ey	what if you needed Some(2) from that?
2019-11-13 17:21:55	naiveaiguy	But why would you?
2019-11-13 17:22:13	smvoss	yeah, so just iter and next once to get y
2019-11-13 17:22:15	j`ey	because a fn expected an Option
2019-11-13 17:22:42	j`ey	and unwrap unwrapping all the way would require specialisation, and I think it's just more confusing to unwrap alll the way
2019-11-13 17:22:45	j`ey	than to just unwrap one level
2019-11-13 17:23:15	naiveaiguy	that's fair I suppose
2019-11-13 17:23:40	j`ey	and for example would Option(Ok(2)) unwrap all the way?
2019-11-13 17:23:51	j`ey	would it unwrap everything that had the method 'unwrap'?
2019-11-13 17:23:53	naiveaiguy	j`ey: Yeah I just thought of that, that would be extremely confusing
2019-11-13 17:24:29	naiveaiguy	What if it's like an Some(Some(Err(Some(2))) or something, that doesn't make much sense if you unwrap it all the way
2019-11-13 17:24:50	j`ey	right, that'd panic on the Err
2019-11-13 17:31:24	-->	toure (toure@nat/redhat/x-juckkngcrwyuaeqz) has joined ##rust
2019-11-13 17:33:05	-->	lemonpepper24 (~lemonpepp@dhcp-v030-231.mobile.uci.edu) has joined ##rust
2019-11-13 17:36:53	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 276 seconds)
2019-11-13 17:44:10	<--	learningc (~pi@121.122.85.105) has quit (Ping timeout: 265 seconds)
2019-11-13 17:46:42	<--	naiveaiguy (~root@110.227.217.103) has quit (Quit: WeeChat 2.6)
2019-11-13 17:49:12	-->	scde (~scde@p5B2678C8.dip0.t-ipconnect.de) has joined ##rust
2019-11-13 17:53:25	stephe	Any macro wizards that can help me figure out why this macros not working as intended? I would figure it should print TUPLE, EXPR, EXPR, TUPLE?  https://glot.io/snippets/fhtf90h0eh
2019-11-14 09:34:13	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-14 09:34:13	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-14 09:34:13	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-14 09:34:13	--	Channel ##rust: 601 nicks (2 ops, 0 voices, 599 normals)
2019-11-14 09:34:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-14 09:34:32	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-14 09:35:07	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-14 09:37:06	<--	gnu3ra (~gnu3ra@ip-99-203-143-169.pools.spcsdns.net) has quit (Ping timeout: 252 seconds)
2019-11-14 09:38:16	Arnavion	bsrd: Compare the mode flags for the C open() vs the Rust File::open(). If they're not the same then make the Rust one use the equivalent using OpenOptions (though it would be interesting to know what the difference is, too)
2019-11-14 09:42:40	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-14 09:49:12	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:ac48:5d57:d012:e724) has quit (Quit: WeeChat 2.6)
2019-11-14 09:51:51	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-14 09:54:20	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 252 seconds)
2019-11-14 09:55:26	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-14 09:56:54	bsrd	Arnavion Moongoodgirl: Somehow I needed to use min. 16 bytes when reading.
2019-11-14 09:57:14	bsrd	Thanks so much for the help
2019-11-14 10:01:05	Moongoodgirl	Arnavion: If the file wasn't open for reading, shouldn't they be getting EBADF rather than EINVAL?
2019-11-14 10:01:24	Moongoodgirl	bsrd: that…doesn't sound right
2019-11-14 10:04:53	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-14 10:07:29	<--	SiegeLord (~SiegeLord@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2019-11-14 10:08:26	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 240 seconds)
2019-11-14 10:10:36	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-14 10:10:57	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-14 10:20:48	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 10:20:48	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Client Quit)
2019-11-14 10:21:09	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-14 10:23:18	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-11-14 10:33:35	bsrd	Moongoodgirl: It's super weird, but apparently I've to use at minimum the size of as sample of the iio:device. It's an accelerometer that you can choose to sample x, y, x 16 bits vectors and 64 bits timestamp. With all vectors and timestamp the sample is 128 bits, 16 extra bits for some separation tag, thus the minimum is 16 length 8 bits array. Without timestamp the minimum array that works is 6 length 8 bit
2019-11-14 10:33:36	bsrd	array...
2019-11-14 10:33:57	bsrd	Also tested in C
2019-11-14 10:35:26	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (Ping timeout: 276 seconds)
2019-11-14 10:40:48	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-14 10:40:53	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-14 10:41:17	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 250 seconds)
2019-11-14 10:49:01	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-14 10:52:38	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-14 10:53:15	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2019-11-14 10:54:17	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 10:55:11	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 10:55:38	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-11-14 10:58:15	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-14 11:00:06	-->	epony (epony@unaffiliated/epony) has joined ##rust
2019-11-14 11:02:43	-->	capella-da-star (~capella-d@103.68.10.14) has joined ##rust
2019-11-14 11:03:45	-->	AbedB (~AbedBhuty@bzq-109-65-83-5.red.bezeqint.net) has joined ##rust
2019-11-14 11:09:21	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-14 11:13:38	-->	tsaka__ (~torstein@91.64.59.123) has joined ##rust
2019-11-14 11:16:38	Xatenev	hello
2019-11-14 11:17:03	Xatenev	is anyone using diesel here? I get a very annoying error
2019-11-14 11:17:10	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-14 11:17:24	Xatenev	^^^^^^^^^^ the trait `diesel::deserialize::FromSql<diesel::sql_types::Nullable<diesel::sql_types::Bool>, _>` is not implemented for `bool`
2019-11-14 11:17:44	-->	ign0tus (~mani@p200300E71F151D00E6B318FFFE897010.dip0.t-ipconnect.de) has joined ##rust
2019-11-14 11:17:45	Xatenev	that happens when I try to .get_result::<Game>()
2019-11-14 11:18:23	Xatenev	the type of the column is tinyint(1)
2019-11-14 11:18:29	Xatenev	and its not nullable.
2019-11-14 11:18:38	Xatenev	and my struct field is a bool
2019-11-14 11:24:29	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-14 11:25:23	Xatenev	okay its fixed, I changed the type to bool and then it works - I thought BOOL was just a synonym for tinyint(1)
2019-11-14 11:37:53	<--	naiveaiguy (~root@122.170.135.104) has quit (Quit: WeeChat 2.6)
2019-11-14 11:40:43	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-14 11:41:33	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-11-14 11:42:02	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 11:43:02	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 276 seconds)
2019-11-14 11:44:06	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-14 11:44:28	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-14 11:44:33	<--	ign0tus (~mani@p200300E71F151D00E6B318FFFE897010.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-11-14 11:53:51	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 11:54:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 12:00:16	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 12:00:47	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 12:03:43	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-14 12:04:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 12:05:24	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-11-14 12:07:26	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-14 12:09:55	-->	naiveaiguy (~root@122.170.135.104) has joined ##rust
2019-11-14 12:12:56	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Ping timeout: 265 seconds)
2019-11-14 12:18:51	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-14 12:23:12	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 12:27:33	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-11-14 12:29:28	-->	JadeJitsu (~JadeJitsu@213.233.88.152) has joined ##rust
2019-11-14 12:40:15	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-14 12:40:24	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Read error: Connection reset by peer)
2019-11-14 12:40:43	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-14 12:43:22	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-14 12:49:51	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-11-14 12:50:31	yshui	Why doesn't rust automatically extend the lifetime of temporaries? It seems to have all the information needed to do so.
2019-11-14 12:52:44	<--	capella-da-star (~capella-d@103.68.10.14) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-14 12:55:15	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-14 12:56:41	j`ey	yshui: https://manishearth.github.io/blog/2017/04/13/prolonging-temporaries-in-rust/
2019-11-14 12:58:48	yshui	j`ey: right, i was wondering why can't the compiler do this automatically
2019-11-14 12:59:19	yshui	it has all the information needed to do so
2019-11-14 12:59:33	<--	lauromoura_ (~lauromour@2804:7f5:f380:2739:ac5c:95a9:ea8b:74b4) has quit (Remote host closed the connection)
2019-11-14 12:59:52	-->	lauromoura_ (~lauromour@2804:7f5:f380:2739:a14a:179e:7db4:38b0) has joined ##rust
2019-11-14 13:01:13	<--	bluezone (uid104970@gateway/web/irccloud.com/x-gnuosptaaqigyard) has quit (Quit: Connection closed for inactivity)
2019-11-14 13:02:37	-->	capella-da-star (~capella-d@103.68.10.14) has joined ##rust
2019-11-14 13:03:15	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 240 seconds)
2019-11-14 13:03:22	<--	capella-da-star (~capella-d@103.68.10.14) has quit (Client Quit)
2019-11-14 13:05:13	-->	daimonos (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-14 13:05:36	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-11-14 13:06:16	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-14 13:10:56	-->	grabarz (~janko@user-5-173-249-26.play-internet.pl) has joined ##rust
2019-11-14 13:16:24	-->	ytain (~ghfg@2607:f2c0:92e3:a700:e133:604a:3b2a:308f) has joined ##rust
2019-11-14 13:17:24	-->	capella-da-star (~capella-d@103.68.10.14) has joined ##rust
2019-11-14 13:20:57	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-14 13:21:29	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 13:22:24	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 13:24:50	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-14 13:25:25	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 13:29:04	-->	ign0tus (~mani@p549AD39E.dip0.t-ipconnect.de) has joined ##rust
2019-11-14 13:35:12	Moongoodgirl	j`ey: initck is really cool :3
2019-11-14 13:35:53	j`ey	Moongoodgirl: is that a real name?
2019-11-14 13:36:00	Moongoodgirl	yshui: Probably just not implemented yet. I think there's a feature in the works.
2019-11-14 13:36:05	Moongoodgirl	j`ey: don't think so >.>
2019-11-14 13:39:07	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 13:39:56	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 13:45:42	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-14 13:47:34	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-14 13:48:17	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-14 13:51:10	<--	ign0tus (~mani@p549AD39E.dip0.t-ipconnect.de) has quit (*.net *.split)
2019-11-14 13:51:10	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (*.net *.split)
2019-11-14 13:51:10	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (*.net *.split)
2019-11-14 13:51:10	<--	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has quit (*.net *.split)
2019-11-14 13:51:11	<--	narispo (~narispo@2a01:e0a:2a2:1590:f087:cd0f:862a:1c99) has quit (*.net *.split)
2019-11-14 13:51:11	<--	jriese (~jriese@192.3.139.4) has quit (*.net *.split)
2019-11-14 13:51:11	<--	efm (~efm@vpn.tummy.com) has quit (*.net *.split)
2019-11-14 13:51:11	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (*.net *.split)
2019-11-14 13:51:11	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (*.net *.split)
2019-11-14 13:51:12	<--	rtyler (~rtyler@jenkins/developer/rtyler) has quit (*.net *.split)
2019-11-14 13:51:12	<--	dXP (uid404260@gateway/web/irccloud.com/x-bgbmszwqmcedwnqb) has quit (*.net *.split)
2019-11-14 13:51:12	<--	liiwi (liiwi@idle.fi) has quit (*.net *.split)
2019-11-14 13:51:12	<--	jacob (~jacobirc@unaffiliated/jacob) has quit (*.net *.split)
2019-11-14 13:51:12	<--	eythian (~quassel@fsf/member/eythian) has quit (*.net *.split)
2019-11-14 13:51:12	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (*.net *.split)
2019-11-14 13:51:13	<--	XVar (~XVar@unaffiliated/xvar) has quit (*.net *.split)
2019-11-14 13:51:13	<--	ExoUNX (~ExoUNX@unaffiliated/exounx) has quit (*.net *.split)
2019-11-14 13:51:13	<--	johnw (~johnw@haskell/developer/johnw) has quit (*.net *.split)
2019-11-14 13:51:13	<--	bsdbandit (~bwell@users.757.org) has quit (*.net *.split)
2019-11-14 13:51:13	<--	zmacs (sid402551@gateway/web/irccloud.com/x-ymyddjxeswrivbyw) has quit (*.net *.split)
2019-11-14 13:51:13	<--	heftig (heftig@archlinux/developer/heftig) has quit (*.net *.split)
2019-11-14 13:51:13	<--	wucke13 (~wucke13@mail.wucke13.de) has quit (*.net *.split)
2019-11-14 13:51:13	<--	gkh (~gkh@thor.kevinhill.nl) has quit (*.net *.split)
2019-11-14 13:51:13	<--	Bonstra (~Bonstra@val.bonstra.fr.eu.org) has quit (*.net *.split)
2019-11-14 13:51:14	<--	Remosi (~isomer@windy.lorier.net) has quit (*.net *.split)
2019-11-14 13:51:14	<--	Fairy (~Fairy@unaffiliated/fairy) has quit (*.net *.split)
2019-11-14 13:51:14	<--	Freeaqingme (quassel@gateway/vpn/privateinternetaccess/freeaqingme) has quit (*.net *.split)
2019-11-14 13:51:14	<--	bwe (~bwe@unaffiliated/bwe) has quit (*.net *.split)
2019-11-14 13:51:14	<--	kyren (~kyren@2604:4300:a:316::6) has quit (*.net *.split)
2019-11-14 13:51:14	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (*.net *.split)
2019-11-14 13:51:14	<--	TheWearyGamer (jmerdich@pool-173-76-152-218.bstnma.fios.verizon.net) has quit (*.net *.split)
2019-11-14 13:51:14	<--	tse_ (~tse@static.240.142.216.95.clients.your-server.de) has quit (*.net *.split)
2019-11-14 13:51:15	<--	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has quit (*.net *.split)
2019-11-14 13:51:15	<--	w1gz (~do@159.89.11.133) has quit (*.net *.split)
2019-11-14 13:51:15	<--	tempate (~tempate@unaffiliated/tempate) has quit (*.net *.split)
2019-11-14 13:51:15	<--	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has quit (*.net *.split)
2019-11-14 13:51:15	<--	yrp (~x@unaffiliated/yrp) has quit (*.net *.split)
2019-11-14 13:51:15	<--	paracyst (~paracyst@unaffiliated/paracyst) has quit (*.net *.split)
2019-11-14 13:51:15	<--	doomba (~npc@slipgate.logbook.pw) has quit (*.net *.split)
2019-11-14 13:51:16	<--	Hedgework (HedgeMage@unaffiliated/hedgemage) has quit (*.net *.split)
2019-11-14 13:51:16	<--	RayS (~raysl@sdf1.xen.prgmr.com) has quit (*.net *.split)
2019-11-14 13:51:16	<--	nekron (~nekron@noordsee.de) has quit (*.net *.split)
2019-11-14 13:51:16	<--	tumdedum (~tumdedum@unaffiliated/espiral) has quit (*.net *.split)
2019-11-14 13:51:16	<--	stux|RC (stux@2a01:270:0:ffff:ffff:2050:0:2) has quit (*.net *.split)
2019-11-14 13:51:16	<--	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has quit (*.net *.split)
2019-11-14 13:51:16	<--	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has quit (*.net *.split)
2019-11-14 13:51:16	<--	Lymia (lymia@magical.girl.lyrical.lymia.moe) has quit (*.net *.split)
2019-11-14 13:51:16	<--	delusionallogic (~delusiona@176-23-98-104-cable.dk.customer.tdc.net) has quit (*.net *.split)
2019-11-14 13:51:16	<--	spesk_ (~swatson@47.19.105.250) has quit (*.net *.split)
2019-11-14 13:51:17	<--	bkhl (~bkhl@marsh.hcoop.net) has quit (*.net *.split)
2019-11-14 13:51:17	<--	dormiens (~alanjcfs@192.241.174.78) has quit (*.net *.split)
2019-11-14 13:51:17	<--	jbaublitzzz (~jbaublitz@134.209.88.39) has quit (*.net *.split)
2019-11-14 13:51:17	<--	andi_ (~andi@unaffiliated/andi/x-9058200) has quit (*.net *.split)
2019-11-14 13:51:17	<--	athaudia (athaudia@athaudia.com) has quit (*.net *.split)
2019-11-14 13:51:17	<--	_jack_ (uid396411@gateway/web/irccloud.com/x-rfpyscximquwbcfa) has quit (*.net *.split)
2019-11-14 13:51:17	<--	nerdypepper (~NerdyPepp@139.59.93.193) has quit (*.net *.split)
2019-11-14 13:51:17	<--	tcsc (uid145321@gateway/web/irccloud.com/x-fgkkxgeqedxtkrjz) has quit (*.net *.split)
2019-11-14 13:51:17	<--	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has quit (*.net *.split)
2019-11-14 13:51:17	<--	xxpor (~xxpor@ec2-54-191-92-16.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2019-11-14 13:51:18	<--	northcode (~northcode@vps-29.35.101.185.stwvps.net) has quit (*.net *.split)
2019-11-14 13:51:18	<--	poutine (~freepouti@not.affiliated.with.the.freenode.network) has quit (*.net *.split)
2019-11-14 13:51:18	<--	Guest39455 (~trui@2001:982:feff:1:a19c:662f:dde8:6560) has quit (*.net *.split)
2019-11-14 13:51:18	<--	Kronuz (~Kronuz@unaffiliated/kronuz) has quit (*.net *.split)
2019-11-14 13:51:18	<--	vup (~~~~@46.101.193.235) has quit (*.net *.split)
2019-11-14 13:51:18	<--	dbrgn (~dbrgn@v2201907172493568.quicksrv.de) has quit (*.net *.split)
2019-11-14 13:51:18	<--	justache (justache@gateway/web/irccloud.com/x-noubklhzjomxkpxl) has quit (*.net *.split)
2019-11-14 13:51:18	<--	mp (sid298319@gateway/web/irccloud.com/x-mwiyahcotcudbdau) has quit (*.net *.split)
2019-11-14 13:51:18	<--	bradleymeck (sid292902@gateway/web/irccloud.com/x-tkeawdgrvfoaainp) has quit (*.net *.split)
2019-11-14 13:51:19	<--	saintdev (sid25343@gateway/web/irccloud.com/x-fcbujynbkdpksthq) has quit (*.net *.split)
2019-11-14 13:51:19	<--	cja (sid161498@gateway/web/irccloud.com/x-qqmgjlatlfntawyr) has quit (*.net *.split)
2019-11-14 13:51:19	<--	Nickeeh (~quassel@bulbasaur.sjorsgielen.nl) has quit (*.net *.split)
2019-11-14 13:51:19	<--	Naeblis (~Naeblis@unaffiliated/naeblis) has quit (*.net *.split)
2019-11-14 13:51:19	<--	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-11-14 13:51:19	<--	naftulikay (sid278111@gateway/web/irccloud.com/x-eclrmjfbsxurhkgv) has quit (*.net *.split)
2019-11-14 13:51:20	<--	eddyb[legacy] (sid155877@gateway/web/irccloud.com/x-otgtzelwkmxuzqaf) has quit (*.net *.split)
2019-11-14 13:51:38	--	delusionallogic_ is now known as delusionallogic
2019-11-14 13:53:10	yshui	Moongoodgirl: oh, that would be nice
2019-11-14 13:53:39	<--	JadeJitsu (~JadeJitsu@213.233.88.152) has quit (Ping timeout: 260 seconds)
2019-11-14 13:53:43	--	delusionallogic is now known as 7JTAAFBF4
2019-11-14 13:53:50	-->	ign0tus (~mani@p549AD39E.dip0.t-ipconnect.de) has joined ##rust
2019-11-14 13:53:50	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-14 13:53:50	-->	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has joined ##rust
2019-11-14 13:53:50	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 13:53:50	-->	narispo (~narispo@2a01:e0a:2a2:1590:f087:cd0f:862a:1c99) has joined ##rust
2019-11-14 13:53:50	-->	jriese (~jriese@192.3.139.4) has joined ##rust
2019-11-14 13:53:50	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-14 13:53:50	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-11-14 13:53:50	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-11-14 13:53:50	-->	rtyler (~rtyler@jenkins/developer/rtyler) has joined ##rust
2019-11-14 13:53:50	-->	gkh (~gkh@thor.kevinhill.nl) has joined ##rust
2019-11-14 13:53:50	-->	dXP (uid404260@gateway/web/irccloud.com/x-bgbmszwqmcedwnqb) has joined ##rust
2019-11-14 13:53:50	-->	liiwi (liiwi@idle.fi) has joined ##rust
2019-11-14 13:53:50	-->	eythian (~quassel@fsf/member/eythian) has joined ##rust
2019-11-14 13:53:50	-->	jacob (~jacobirc@unaffiliated/jacob) has joined ##rust
2019-11-14 13:53:50	-->	bsdbandit (~bwell@users.757.org) has joined ##rust
2019-11-14 13:53:50	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-11-14 13:53:50	-->	XVar (~XVar@unaffiliated/xvar) has joined ##rust
2019-11-14 13:53:50	-->	ExoUNX (~ExoUNX@unaffiliated/exounx) has joined ##rust
2019-11-14 13:53:50	-->	johnw (~johnw@haskell/developer/johnw) has joined ##rust
2019-11-14 13:53:50	-->	zmacs (sid402551@gateway/web/irccloud.com/x-ymyddjxeswrivbyw) has joined ##rust
2019-11-14 13:53:50	-->	heftig (heftig@archlinux/developer/heftig) has joined ##rust
2019-11-14 13:53:50	-->	wucke13 (~wucke13@mail.wucke13.de) has joined ##rust
2019-11-14 13:53:50	-->	Bonstra (~Bonstra@val.bonstra.fr.eu.org) has joined ##rust
2019-11-14 13:53:50	-->	Remosi (~isomer@windy.lorier.net) has joined ##rust
2019-11-14 13:53:50	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-11-14 13:53:50	-->	Freeaqingme (quassel@gateway/vpn/privateinternetaccess/freeaqingme) has joined ##rust
2019-11-14 13:53:50	-->	bwe (~bwe@unaffiliated/bwe) has joined ##rust
2019-11-14 13:53:50	-->	kyren (~kyren@2604:4300:a:316::6) has joined ##rust
2019-11-14 13:53:50	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-11-14 13:53:50	-->	TheWearyGamer (jmerdich@pool-173-76-152-218.bstnma.fios.verizon.net) has joined ##rust
2019-11-14 13:53:50	-->	tse_ (~tse@static.240.142.216.95.clients.your-server.de) has joined ##rust
2019-11-14 13:53:50	-->	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has joined ##rust
2019-11-14 13:53:50	-->	w1gz (~do@159.89.11.133) has joined ##rust
2019-11-14 13:53:50	-->	tempate (~tempate@unaffiliated/tempate) has joined ##rust
2019-11-14 13:53:50	-->	cja (sid161498@gateway/web/irccloud.com/x-qqmgjlatlfntawyr) has joined ##rust
2019-11-14 13:53:50	-->	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has joined ##rust
2019-11-14 13:53:50	-->	yrp (~x@unaffiliated/yrp) has joined ##rust
2019-11-14 13:53:50	-->	paracyst (~paracyst@unaffiliated/paracyst) has joined ##rust
2019-11-14 13:53:50	-->	doomba (~npc@slipgate.logbook.pw) has joined ##rust
2019-11-14 13:53:50	-->	Hedgework (HedgeMage@unaffiliated/hedgemage) has joined ##rust
2019-11-14 13:53:50	-->	RayS (~raysl@sdf1.xen.prgmr.com) has joined ##rust
2019-11-14 13:53:50	-->	Nickeeh (~quassel@bulbasaur.sjorsgielen.nl) has joined ##rust
2019-11-14 13:53:50	-->	nekron (~nekron@noordsee.de) has joined ##rust
2019-11-14 13:53:50	-->	tumdedum (~tumdedum@unaffiliated/espiral) has joined ##rust
2019-11-14 13:53:50	-->	stux|RC (stux@2a01:270:0:ffff:ffff:2050:0:2) has joined ##rust
2019-11-14 13:53:50	-->	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has joined ##rust
2019-11-14 13:53:50	-->	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has joined ##rust
2019-11-14 13:53:50	-->	naftulikay (sid278111@gateway/web/irccloud.com/x-eclrmjfbsxurhkgv) has joined ##rust
2019-11-14 13:53:50	-->	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has joined ##rust
2019-11-14 13:53:50	-->	athaudia (athaudia@athaudia.com) has joined ##rust
2019-11-14 13:53:50	-->	Lymia (lymia@magical.girl.lyrical.lymia.moe) has joined ##rust
2019-11-14 13:53:50	-->	delusionallogic (~delusiona@176-23-98-104-cable.dk.customer.tdc.net) has joined ##rust
2019-11-14 13:53:50	-->	spesk_ (~swatson@47.19.105.250) has joined ##rust
2019-11-14 13:53:50	-->	bkhl (~bkhl@marsh.hcoop.net) has joined ##rust
2019-11-14 13:53:50	-->	dormiens (~alanjcfs@192.241.174.78) has joined ##rust
2019-11-14 13:53:50	-->	jbaublitzzz (~jbaublitz@134.209.88.39) has joined ##rust
2019-11-14 13:53:50	-->	andi_ (~andi@unaffiliated/andi/x-9058200) has joined ##rust
2019-11-14 13:53:50	-->	_jack_ (uid396411@gateway/web/irccloud.com/x-rfpyscximquwbcfa) has joined ##rust
2019-11-14 13:53:50	-->	poutine (~freepouti@not.affiliated.with.the.freenode.network) has joined ##rust
2019-11-14 13:53:50	-->	nerdypepper (~NerdyPepp@139.59.93.193) has joined ##rust
2019-11-14 13:53:50	-->	tcsc (uid145321@gateway/web/irccloud.com/x-fgkkxgeqedxtkrjz) has joined ##rust
2019-11-14 13:53:50	-->	xxpor (~xxpor@ec2-54-191-92-16.us-west-2.compute.amazonaws.com) has joined ##rust
2019-11-14 13:53:50	-->	northcode (~northcode@vps-29.35.101.185.stwvps.net) has joined ##rust
2019-11-14 13:53:50	-->	Guest39455 (~trui@2001:982:feff:1:a19c:662f:dde8:6560) has joined ##rust
2019-11-14 13:53:50	-->	dbrgn (~dbrgn@v2201907172493568.quicksrv.de) has joined ##rust
2019-11-14 13:53:50	-->	Kronuz (~Kronuz@unaffiliated/kronuz) has joined ##rust
2019-11-14 13:53:50	-->	vup (~~~~@46.101.193.235) has joined ##rust
2019-11-14 13:53:50	-->	justache (justache@gateway/web/irccloud.com/x-noubklhzjomxkpxl) has joined ##rust
2019-11-14 13:53:50	-->	mp (sid298319@gateway/web/irccloud.com/x-mwiyahcotcudbdau) has joined ##rust
2019-11-14 13:53:50	-->	bradleymeck (sid292902@gateway/web/irccloud.com/x-tkeawdgrvfoaainp) has joined ##rust
2019-11-14 13:53:50	-->	saintdev (sid25343@gateway/web/irccloud.com/x-fcbujynbkdpksthq) has joined ##rust
2019-11-14 13:53:50	-->	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has joined ##rust
2019-11-14 13:53:50	-->	Naeblis (~Naeblis@unaffiliated/naeblis) has joined ##rust
2019-11-14 13:53:50	-->	eddyb[legacy] (sid155877@gateway/web/irccloud.com/x-otgtzelwkmxuzqaf) has joined ##rust
2019-11-14 13:53:59	<--	evalr (~evalr@85.25.44.176) has quit (Remote host closed the connection)
2019-11-14 13:54:09	-->	evalr (~evalr@85.25.44.176) has joined ##rust
2019-11-14 13:54:45	<--	efm (~efm@vpn.tummy.com) has quit (Max SendQ exceeded)
2019-11-14 13:54:45	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Max SendQ exceeded)
2019-11-14 13:54:45	<--	justache (justache@gateway/web/irccloud.com/x-noubklhzjomxkpxl) has quit (Max SendQ exceeded)
2019-11-14 13:54:45	<--	stux|RC (stux@2a01:270:0:ffff:ffff:2050:0:2) has quit (Max SendQ exceeded)
2019-11-14 13:55:07	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-14 13:55:28	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 13:55:39	<--	not_bravo (~bravo@destiny.cat.pdx.edu) has quit (Ping timeout: 240 seconds)
2019-11-14 13:56:00	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-11-14 13:56:16	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-14 13:56:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 13:57:00	-->	stux|RC (stux@cosmo.lunarshells.com) has joined ##rust
2019-11-14 13:58:02	-->	dodobrain_ (~dodobrain@unaffiliated/freakabcd) has joined ##rust
2019-11-14 13:58:14	-->	m0rphism1 (~m0rphism@ufr-132-230-194-116.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-14 13:58:22	<--	dodobrain (~dodobrain@unaffiliated/freakabcd) has quit (Read error: Connection reset by peer)
2019-11-14 13:58:30	-->	justache (justache@gateway/web/irccloud.com/x-giibqjyvgmlufbbn) has joined ##rust
2019-11-14 13:59:27	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-14 13:59:57	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 14:03:15	<--	m0rphism1 (~m0rphism@ufr-132-230-194-116.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-14 14:04:04	j`ey	https://www.ncameron.org/blog/rust-in-2020-one-more-thing/ I really hope there's not more magic/syntax made for Result :(
2019-11-14 14:05:41	<--	daimonos (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-14 14:06:06	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-14 14:10:02	<--	grabarz (~janko@user-5-173-249-26.play-internet.pl) has quit (Read error: Connection reset by peer)
2019-11-14 14:12:32	<--	ign0tus (~mani@p549AD39E.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2019-11-14 14:13:48	-->	grabarz (~janko@user-5-173-249-26.play-internet.pl) has joined ##rust
2019-11-14 14:14:50	<--	capella-da-star (~capella-d@103.68.10.14) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-14 14:15:13	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-14 14:15:17	-->	iq (~iq@2600:100e:bf18:1090:cda6:a18f:c634:fba6) has joined ##rust
2019-11-14 14:21:00	naiveaiguy	j`ey: Why not?
2019-11-14 14:23:04	<--	naiveaiguy (~root@122.170.135.104) has quit (Remote host closed the connection)
2019-11-14 14:23:51	-->	naiveaiguy (~root@122.170.135.104) has joined ##rust
2019-11-14 14:24:56	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-14 14:27:27	<--	naiveaiguy (~root@122.170.135.104) has left ##rust
2019-11-14 14:27:31	-->	naiveaiguy (~root@122.170.135.104) has joined ##rust
2019-11-14 14:27:41	naiveaiguy	Are there any logs for this channel?
2019-11-14 14:30:26	-->	m0rphism1 (~m0rphism@ufr-132-230-194-116.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-14 14:34:06	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-14 14:39:23	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-14 14:42:43	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-14 14:45:59	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 14:49:03	<--	swalladge (~swalladge@unaffiliated/swalladge) has quit (Ping timeout: 265 seconds)
2019-11-14 14:50:01	<--	m0rphism1 (~m0rphism@ufr-132-230-194-116.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 265 seconds)
2019-11-14 14:50:18	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 245 seconds)
2019-11-14 14:51:14	Yaniel	nothing linked in the topic at least
2019-11-14 14:51:19	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-14 14:51:28	j`ey	naiveaiguy: cos syntax is usually bad
2019-11-14 14:51:37	j`ey	and the fact that Result has very little syntax is good
2019-11-14 14:51:50	j`ey	Ok(()) is really not that bad to write, implicit Oks would be a bad thing imo
2019-11-14 14:52:09	dutchie	Ok(()) is fine imo
2019-11-14 14:52:33	dutchie	but Err(foo)? and .map_err(Into::into) can be a little annoying
2019-11-14 14:53:00	j`ey	are they worth more syntax?
2019-11-14 14:54:07	dutchie	probably not
2019-11-14 14:54:29	dutchie	i think just an ubiquitious .err_into() method would be enough
2019-11-14 14:54:50	Yaniel	is Err(foo)? anything but a hipster way to say return Err(foo)
2019-11-14 14:55:05	dutchie	Yaniel: it calls Into::into
2019-11-14 14:55:06	j`ey	? does Into::into too, I think?
2019-11-14 14:55:13	Yaniel	ah, right
2019-11-14 14:55:14	naiveaiguy	Yaniel: Wait a second, why is there any difference between those two things?
2019-11-14 14:55:23	naiveaiguy	Isn't Err(foo) at the end supposed to be implcit return?
2019-11-14 14:55:31	Yaniel	at the end yes
2019-11-14 14:55:51	Yaniel	but ? will return it explicitly from any point in the fn
2019-11-14 14:56:05	naiveaiguy	j`ey: I think Ok(()) should be kept because it just looks really goddamn funny to me for some reason
2019-11-14 14:56:45	naiveaiguy	Yaniel: ah ok, isn't the standard supposed to be to just use return if you want to do it midway through the function? why would you *ever* do Err(foo)? if you can't do that with any other type?
2019-11-14 14:56:53	Yaniel	see what dutchie said
2019-11-14 14:58:05	Yaniel	? desugars into something like `match x { Ok(a) => a, e @ Err(_) => return e.into() }`
2019-11-14 14:58:50	dutchie	right, so `Err(foo)?` is a short way of writing `return Err(foo).into()`
2019-11-14 14:58:51	Yaniel	so essentially you have `return Into::into::<return_type_here>(Err(foo))`
2019-11-14 14:59:27	naiveaiguy	Yaniel: why... would you need to convert an Err into something that's not an err?
2019-11-14 14:59:36	j`ey	naiveaiguy: different error types
2019-11-14 14:59:40	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-14 14:59:42	naiveaiguy	Ohhh
2019-11-14 14:59:51	Yaniel	or rather, different Result types
2019-11-14 15:00:08	naiveaiguy	So not Err -> usize, but just Result<T, Q> -> Result<T, U>
2019-11-14 15:00:10	naiveaiguy	Yeah I get it
2019-11-14 15:00:16	Yaniel	if the Ok type is different it wouldn't typecheck even if the Err types match AFAIK
2019-11-14 15:01:09	dutchie	I think I may even have written `Ok(foo?)` because I decided it looked nicer than `foo.map_err(Into::into)`
2019-11-14 15:02:56	-->	Timelord (~TL@64-252-202-134.lightspeed.jcsnms.sbcglobal.net) has joined ##rust
2019-11-14 15:04:35	-->	ign0tus (~mani@tmo-112-128.customers.d1-online.com) has joined ##rust
2019-11-14 15:04:45	naiveaiguy	dutchie: you mean Ok(function_that_might_fail()?) that seems a little confusing
2019-11-14 15:05:23	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 15:05:45	naiveaiguy	Does function_that_might fail return a Result<T, Q> whereas you a Result<T, U>, thus you have to convert it using ?, thus causing this weird implicit thing
2019-11-14 15:05:52	naiveaiguy	That is actually very weird
2019-11-14 15:06:03	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 15:06:21	dutchie	yeah something like that
2019-11-14 15:06:24	naiveaiguy	That requires you to specifically recall this fact everytime you read that line, which is weird
2019-11-14 15:06:38	naiveaiguy	I'm not sure if this problem's solved with more syntax or less
2019-11-14 15:06:41	j`ey	but it has a '?'
2019-11-14 15:07:19	j`ey	unless you mean recall the fact that ? does the .into()
2019-11-14 15:07:33	Moongoodgirl	(Yaniel: that type param is in the wrong place)
2019-11-14 15:07:51	naiveaiguy	j`ey: Yeah, that's what I mean
2019-11-14 15:10:38	<--	nykma (~nykma@103.140.136.55) has quit (Remote host closed the connection)
2019-11-14 15:12:53	-->	pedro4 (~pedro4@213.152.162.99) has joined ##rust
2019-11-14 15:13:12	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-11-14 15:14:16	-->	triste (~triste@185.215.60.34) has joined ##rust
2019-11-14 15:15:10	-->	swalladge (~swalladge@unaffiliated/swalladge) has joined ##rust
2019-11-14 15:15:51	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 15:16:34	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 15:19:08	murla	Hi, I think I write ugly code while using iterators on a matrix. Should I just use simple for loops instead or I just didn't master iterators-foo enough? Sample code is here - https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c9491eab879946d5da0a0d3fbe86e4dc
2019-11-14 15:20:13	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-14 15:22:48	<--	jenny-m (~jdm-@167.100.78.229) has quit (Quit: Leaving...)
2019-11-14 15:23:49	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has left ##rust
2019-11-14 15:27:45	oherrala	murla: you can also try to split the code into functions, like the one inside filter_map
2019-11-14 15:34:50	murla	oherrala, yes, it can be done
2019-11-14 15:35:13	Lumpio-	I think this can definitely be made more conscise though
2019-11-14 15:35:33	Lumpio-	Your match is just a "map"
2019-11-14 15:35:37	Lumpio-	I think
2019-11-14 15:36:28	Lumpio-	And your max and then filter could be a max_by
2019-11-14 15:37:33	<--	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
2019-11-14 15:38:17	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 15:38:36	Lumpio-	max_by_key even
2019-11-14 15:39:27	murla	let me see how max_by_key can be applied to find all positions of max elements
2019-11-14 15:40:07	murla	usual position() finds the first element only, can it be used until iterator is empty somehow?
2019-11-14 15:40:53	Lumpio-	Oh you need all the maximums..?
2019-11-14 15:42:05	Lumpio-	Your code only returned one maximum for each though
2019-11-14 15:42:26	Lumpio-	So I didn't notice
2019-11-14 15:42:28	jbg	if I have MyTrait: Any and some MyImpl of that trait, what's the right way to get a &MyImpl from a Box<dyn MyTrait>? I tried `use std::any::Any; (my_box.as_ref() as &dyn Any).downcast_ref::<MyImpl>()`
2019-11-14 15:42:31	-->	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has joined ##rust
2019-11-14 15:42:37	Lumpio-	Looks like the data just happened to be like that
2019-11-14 15:42:49	jbg	but the compiler complains about that being a non-primitive cast
2019-11-14 15:43:06	jbg	(the module-level docs for std::any seem to suggest doing that cast...)
2019-11-14 15:44:18	murla	Lumpio-, yep, the data is like that, but the code actually finds indices of all maximum elements in matrix rows
2019-11-14 15:44:32	Lumpio-	Yes I realized
2019-11-14 15:44:51	-->	jenny-m (~jdm-@2605:8d80:6c0:5645:9af:8cac:b741:18da) has joined ##rust
2019-11-14 15:45:30	Lumpio-	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3be92705a7225082e592825a14836fe4 This would at least change the match to a map
2019-11-14 15:45:44	jbg	ah, some additional googling brought me to https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object which explains the issues well
2019-11-14 15:46:43	Lumpio-	But yeah breaking that inner part into a function might be nice even still.
2019-11-14 15:46:52	Lumpio-	get_maximums for an iterator makes sense as a standalone function
2019-11-14 15:47:08	Lumpio-	Oh although since you need the indexes it becomes a bit messy...
2019-11-14 15:49:08	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 15:52:35	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-14 15:55:28	murla	you keep chaining stuff after max(), that's interesting, haven't seen it before. Nice trick!
2019-11-14 15:55:58	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-14 15:56:05	Lumpio-	It's Option::map and it does exactly what your match does
2019-11-14 15:56:15	Lumpio-	That type of match is pretty common so there's a method for that
2019-11-14 16:05:30	murla	I see. I think this code still isn't much readable, is it? Comparing to creating an empty hashset, then using for-for loops for filling it.
2019-11-14 16:06:58	Lumpio-	idk the only thing that made me stop and think for a bit was the naming because of the i and j
2019-11-14 16:07:03	jbg	murla: it's really a matter of style. some people prefer the "functional" way, others prefer a more procedural way
2019-11-14 16:07:04	Lumpio-	Had to look for a while to see what thye meant
2019-11-14 16:07:25	jbg	some languages really push you one way or the other, Rust doesn't really, you can pick your style
2019-11-14 16:09:27	murla	thanks for the feedback, guys, it's much appreciated!
2019-11-14 16:09:29	<--	webstrand (~webstrand@23.94.139.105) has left ##rust
2019-11-14 16:10:24	murla	it this case for -> if let Some -> for is just 4 LOC (+1 for HashSet init), much shorter
2019-11-14 16:11:32	murla	Like this, Lumpio- https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8449a9a4a40badb71e0f1ae69a9d3aee
2019-11-14 16:11:32	Lumpio-	It's a bit more than 4 LOC tbh
2019-11-14 16:11:51	Lumpio-	If you don't put linebreaks within your method chains the enumerator thing is one line :P
2019-11-14 16:12:03	murla	closing brackets are on each line
2019-11-14 16:12:18	murla	haha, of course :)
2019-11-14 16:12:38	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-14 16:13:45	<--	grabarz (~janko@user-5-173-249-26.play-internet.pl) has quit (Read error: Connection reset by peer)
2019-11-14 16:17:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 16:18:11	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 16:18:14	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2019-11-14 16:18:29	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-14 16:19:36	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-14 16:25:39	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-14 16:29:28	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-14 16:32:06	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-14 16:32:16	-->	jules000 (~jules000@145.94.127.50) has joined ##rust
2019-11-14 16:33:35	<--	ign0tus (~mani@tmo-112-128.customers.d1-online.com) has quit (Ping timeout: 276 seconds)
2019-11-14 16:38:20	-->	Tacklebox (~Tacklebox@S0106ac202e1d6da3.gv.shawcable.net) has joined ##rust
2019-11-14 16:38:24	<--	guardian (~guardian@planet-d.net) has quit (Ping timeout: 252 seconds)
2019-11-14 16:43:25	repo	hey there o/
2019-11-14 16:44:37	<--	narispo (~narispo@2a01:e0a:2a2:1590:f087:cd0f:862a:1c99) has quit (Remote host closed the connection)
2019-11-14 16:44:46	-->	narispo (~narispo@2a01:e0a:2a2:1590:f087:cd0f:862a:1c99) has joined ##rust
2019-11-14 16:45:05	-->	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has joined ##rust
2019-11-14 16:45:19	repo	i wrote a tiny rust lib that basically just exposes a few functions globally. I then wrote bindings for this in crystal (yet another llvm based compiled language). When i try linking a project that uses this crystal lib i get the following error: https://p.jokke.space/HHQm2/
2019-11-14 16:45:36	repo	so apparently both crystal and rust define __mulodi4
2019-11-14 16:46:03	-->	Isn0gud (~Isn0gud@2a02:810d:1a80:7c8:112f:1985:d0da:9b23) has joined ##rust
2019-11-14 16:46:05	repo	i should also say that i'm statically linking the rust lib
2019-11-14 16:46:15	repo	everything else is dynamically linked
2019-11-14 16:46:32	repo	any clues on how to fix this?
2019-11-14 16:48:16	<--	Tacklebox (~Tacklebox@S0106ac202e1d6da3.gv.shawcable.net) has quit (Ping timeout: 240 seconds)
2019-11-14 16:48:49	murla	I wonder how (in)efficient is calling vec.iter().max() while iterating over vec itself. Like here https://github.com/exercism/rust/blob/master/exercises/saddle-points/example.rs
2019-11-14 16:49:32	murla	Is it optimized by compiler, cached at runtime, anything else?
2019-11-14 16:51:57	j`ey	possibly could be hoisted into the outer loop
2019-11-14 16:52:06	j`ey	but why not just write it in the outer loop?
2019-11-14 16:54:57	<--	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has quit (Quit: ZNC - https://znc.in)
2019-11-14 16:58:07	<--	triste (~triste@185.215.60.34) has quit (Quit: triste)
2019-11-14 16:58:09	murla	yeah, that's what I'm doing myself
2019-11-14 16:58:30	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 17:02:28	-->	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has joined ##rust
2019-11-14 17:02:48	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 245 seconds)
2019-11-14 17:06:29	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-14 17:08:52	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 17:10:38	<--	narispo (~narispo@2a01:e0a:2a2:1590:f087:cd0f:862a:1c99) has quit (Ping timeout: 276 seconds)
2019-11-14 17:12:59	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-11-14 17:13:01	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 250 seconds)
2019-11-14 17:13:43	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 17:14:45	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 17:17:13	-->	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined ##rust
2019-11-14 17:19:02	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-14 17:19:36	<--	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has quit (Quit: WeeChat 2.4)
2019-11-14 17:20:28	MechanicalError	I was wondering why the rust compiler gives me the following error when I am clearly comparing two enums with the same amount of tuple fields
2019-11-14 17:20:31	MechanicalError	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ed4b1312d909152b06fb51fc1c2024c1
2019-11-14 17:20:36	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-14 17:21:31	MechanicalError	wops
2019-11-14 17:21:32	MechanicalError	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4623e9d14af8427b293b9221c8295616
2019-11-14 17:21:43	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-14 17:21:44	MechanicalError	here, code that actually runs :)
2019-11-14 17:21:45	 *	naiveaiguy wonders why play.rust-lang doesn't shorten its gist hashes to a smaller number so I can actually type them
2019-11-14 17:22:11	Lumpio-	Did you mean to say "if let" or just "if" (in which case you need to derive Eq)
2019-11-14 17:22:21	-->	a_trox (~a_trox@m3.unl.edu) has joined ##rust
2019-11-14 17:22:29	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-14 17:22:30	MechanicalError	no, actually I was on the if let part of the book
2019-11-14 17:22:42	MechanicalError	did I use it wrong?
2019-11-14 17:22:46	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 17:23:07	Lumpio-	if let is used for destructuring, not comparing values
2019-11-14 17:23:14	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 265 seconds)
2019-11-14 17:23:25	MechanicalError	Oh! makes sense
2019-11-14 17:23:25	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 250 seconds)
2019-11-14 17:23:26	MechanicalError	thanks
2019-11-14 17:23:35	Lumpio-	You could use if let to extract the String from the value and then compare that in a separate if, for example (unfortunately you can't do it in the same if yet)
2019-11-14 17:24:12	naiveaiguy	It is really goddamn annoying that Rust doesn't derive Eq for Enums automatically, even with no values attached to them
2019-11-14 17:24:13	MechanicalError	oh that would be more concise
2019-11-14 17:24:20	MechanicalError	I stumbled upon unwrap
2019-11-14 17:24:22	Lumpio-	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6e73555372152a320b85c9a8b87f0201 this should work for instance
2019-11-14 17:24:24	MechanicalError	does it do that?
2019-11-14 17:24:39	naiveaiguy	evalr: enum Test { Something, Else } Test::Something == Test::Else
2019-11-14 17:24:42	--	Notice(evalr): error[E0369]: binary operation `==` cannot be applied to type `main::Test`
2019-11-14 17:24:43	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=029c2710deeb5970532a280dd820308c&version=stable&mode=debug
2019-11-14 17:24:48	Lumpio-	Or you can do it with a single "match" with a guard clause
2019-11-14 17:25:03	Lumpio-	unwrap is just a method that exists on some types in the standard library, it's not automatically added to your types
2019-11-14 17:25:09	Lumpio-	(Mainly on Result and Option)
2019-11-14 17:25:23	MechanicalError	can't I derive it like Debug and Eq?
2019-11-14 17:25:26	Lumpio-	No
2019-11-14 17:25:37	-->	narispo (~narispo@37.170.219.10) has joined ##rust
2019-11-14 17:25:40	Lumpio-	There's no obvious way to derive it automatically anyways
2019-11-14 17:25:45	MechanicalError	I see, so Debug and Eq are impl blocks under the hood right?
2019-11-14 17:25:48	Lumpio-	For example for your enum what type would it return
2019-11-14 17:25:54	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-14 17:25:57	Lumpio-	Sometimes the data is (u8, u8, u8, u8), sometimes it's String
2019-11-14 17:25:58	MechanicalError	well a String
2019-11-14 17:26:03	Lumpio-	But what if it's a V4 value
2019-11-14 17:26:03	MechanicalError	yeah
2019-11-14 17:26:24	Lumpio-	Debug and Eq and anything else you can derive expand to impl blocks under the hood essentially yes
2019-11-14 17:26:24	MechanicalError	A tuple?
2019-11-14 17:26:37	Lumpio-	You can impl them by hand if you want to
2019-11-14 17:26:46	MechanicalError	hmm
2019-11-14 17:26:49	Lumpio-	For example if you want them to work differently than the automatically derived ones
2019-11-14 17:26:52	Lumpio-	A tuple of what?
2019-11-14 17:27:03	MechanicalError	Sry, was talking avout v4
2019-11-14 17:27:07	MechanicalError	of u8s?
2019-11-14 17:27:08	Lumpio-	"let a = tst.unwrap();" <- there is no obvious type for the variable a
2019-11-14 17:27:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 17:27:28	MechanicalError	Ok now I catch your drift
2019-11-14 17:27:53	Lumpio-	The contents can be either, so you'll need to handle both cases separate
2019-11-14 17:27:57	Lumpio-	For example with a match
2019-11-14 17:28:21	MechanicalError	so I can use if let to know what version IpAddr is as long as all variants hold the same type of data?
2019-11-14 17:28:27	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-11-14 17:28:30	MechanicalError	Lumpio-: yeah that makes sense
2019-11-14 17:28:50	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-11-14 17:28:57	-->	t7 (~tommo@2a00:23c5:1284:fc00:a4b5:d54:860f:e4a6) has joined ##rust
2019-11-14 17:29:13	<--	Xatenev (~I@87.190.19.178) has left ##rust ("Leaving")
2019-11-14 17:29:19	<--	naiveaiguy (~root@122.170.135.104) has quit (Quit: WeeChat 2.6)
2019-11-14 17:29:33	Lumpio-	mm no, I don't think if let lets you extract the data from all variants even if all variants contain the same data
2019-11-14 17:29:51	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-14 17:30:13	Lumpio-	It's not that useful because the usual reason to even have an enum with data is to have different data types in different variants
2019-11-14 17:30:32	Lumpio-	If the variants all have the exact same data you might as well have a struct with the data, and a data-less enum field
2019-11-14 17:30:40	Lumpio-	That way you don't even need "if let" anymore so it's more convenient.
2019-11-14 17:31:11	MechanicalError	hmmm so if let is just syntactic sugar for match with _ => and one other arm, nothing else
2019-11-14 17:32:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-14 17:32:29	Yaniel	not exactly, that would also match None
2019-11-14 17:32:51	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 268 seconds)
2019-11-14 17:33:11	Lumpio-	I think they meant the "one other" arm is the pattern in the if let
2019-11-14 17:33:25	MechanicalError	Yea
2019-11-14 17:33:36	MechanicalError	that makes sense, but it matches None too?
2019-11-14 17:33:43	Lumpio-	if let pattern = x { ... }  is pretty much the same as  match x { pattern => { ... }, _ => {} }
2019-11-14 17:33:56	<--	AbedB (~AbedBhuty@bzq-109-65-83-5.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-14 17:33:59	Lumpio-	If you put "else" then it goes in the _ arm
2019-11-14 17:34:10	Yaniel	mm you can do `if let None = x { ... }`?
2019-11-14 17:34:21	Lumpio-	Yes but how is that related
2019-11-14 17:34:25	MechanicalError	Oh I meant if it was None it just ignores it
2019-11-14 17:34:35	MechanicalError	right?
2019-11-14 17:34:44	-->	ign0tus (~mani@p200300E71F151D00E6B318FFFE897010.dip0.t-ipconnect.de) has joined ##rust
2019-11-14 17:34:59	Lumpio-	How is None even related to this conversation
2019-11-14 17:35:07	<--	jules000 (~jules000@145.94.127.50) has quit (Remote host closed the connection)
2019-11-14 17:35:19	MechanicalError	the use case of if let is confusing to me, mb
2019-11-14 17:35:23	Yaniel	nvm I didn't read back enough
2019-11-14 17:35:41	-->	Tacklebox (~Tacklebox@s173-180-44-49.bc.hsia.telus.net) has joined ##rust
2019-11-14 17:35:48	Yaniel	I wouldn't call if let confusing, it's just useful in rather specific situations
2019-11-14 17:35:49	MechanicalError	Ok so all in all, it is the same as a match with one arm and _ => arm
2019-11-14 17:35:52	Lumpio-	yes
2019-11-14 17:35:58	Lumpio-	It's just syntactic sugar
2019-11-14 17:35:59	Yaniel	yes
2019-11-14 17:36:07	Lumpio-	Because a match with just one arm and "_ => {}" to ignore all the rest is pretty common
2019-11-14 17:36:34	Yaniel	note that AFAIK the order of the arms matters (since _ would also match whatever pattern you have)
2019-11-14 17:37:56	MechanicalError	oh ok it is clear to me now
2019-11-14 17:38:13	MechanicalError	thx Lumpio-, Yaniel
2019-11-14 17:38:13	Yaniel	(that is what I got caught up on in my initial response)
2019-11-14 17:38:51	MechanicalError	ye it is a bit confusing at first but when Lumpio- said it was syntatctic sugar for a simple match it made sense
2019-11-14 17:38:55	Yaniel	you need to have the relevant pattern first, else it will never get matched because _ already matches everything
2019-11-14 17:39:05	Yaniel	and if let just hides everything except the relevant pattern
2019-11-14 17:39:17	MechanicalError	ye
2019-11-14 17:39:30	MechanicalError	_ => {} is a superset of all patterns
2019-11-14 17:39:35	MechanicalError	has to be compared last
2019-11-14 17:44:49	-->	EliDupree (~quassel@2604:a880:400:d0::9bb:2001) has joined ##rust
2019-11-14 17:46:26	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 265 seconds)
2019-11-14 17:46:56	<--	k_sze (~k_sze@unaffiliated/kira) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-11-14 17:47:04	-->	jules000 (~jules000@wlan-145-94-213-86.wlan.tudelft.nl) has joined ##rust
2019-11-14 17:47:17	-->	k_sze (~k_sze@unaffiliated/kira) has joined ##rust
2019-11-14 17:47:53	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 265 seconds)
2019-11-14 17:48:08	<--	ign0tus (~mani@p200300E71F151D00E6B318FFFE897010.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-11-14 17:48:58	<--	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has quit (Quit: WeeChat 2.6)
2019-11-14 17:49:52	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-14 17:51:16	<--	jules000 (~jules000@wlan-145-94-213-86.wlan.tudelft.nl) has quit (Ping timeout: 240 seconds)
2019-11-14 17:51:43	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-11-15 09:16:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-15 09:16:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-15 09:16:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-15 09:16:18	--	Channel ##rust: 588 nicks (2 ops, 0 voices, 586 normals)
2019-11-15 09:16:18	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-15 09:16:34	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-15 09:21:00	-->	learning1 (~pi@121.122.85.43) has joined ##rust
2019-11-15 09:22:49	<--	tsaka_ (~torstein@200116b8463fb700f83cfbf8f7217bce.dip.versatel-1u1.de) has quit (Ping timeout: 250 seconds)
2019-11-15 09:23:11	<--	hussam (uid193284@gateway/web/irccloud.com/x-qpepyipfxeuvbver) has quit (Quit: Connection closed for inactivity)
2019-11-15 09:24:50	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-15 09:24:50	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-11-15 09:26:22	-->	cg505_ (~cg505@flood.ocf.berkeley.edu) has joined ##rust
2019-11-15 09:33:13	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 250 seconds)
2019-11-15 09:37:19	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:ac48:5d57:d012:e724) has quit (Quit: WeeChat 2.6)
2019-11-15 09:38:07	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-15 09:38:11	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-15 09:38:51	-->	matthias_bgg (~mbgg@89.red-2-139-173.staticip.rima-tde.net) has joined ##rust
2019-11-15 09:40:39	<--	guardian (~guardian@planet-d.net) has quit (Ping timeout: 252 seconds)
2019-11-15 09:42:50	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-15 09:43:36	-->	sgift (~sgift@2001:a61:3567:a401:38e8:7223:7b8d:5447) has joined ##rust
2019-11-15 09:45:02	hashworks	Hi! Since rust has no c style for loops, how would I do something like this: `for (i = 0; i+3; i<=vec.len()) { let tupel=(i,i+1,i+2); }`?
2019-11-15 09:45:48	hashworks	In my code it can be safely asumed that vec.len() % 3 = 0
2019-11-15 09:47:12	Kinnison	for tupel in vec.chunks_exact(3) { ... }
2019-11-15 09:47:28	yrp	for ii in (0..vec.len()).step_by(3) { let tupel = (ii, ii+1, ii+2); }
2019-11-15 09:47:31	Kinnison	though it'll be a slice, not a tuple, if that matters to you :D
2019-11-15 09:47:59	Kinnison	Oh oops, I missed that your tuple was indices not the values, yrp's answer is better
2019-11-15 09:48:09	hashworks	Ah, step_by! Thanks!
2019-11-15 09:48:16	yrp	np
2019-11-15 09:49:05	yrp	oh, it should be 0..=vec.len() btw
2019-11-15 09:49:10	yrp	i missed the inclusivity on the thing
2019-11-15 09:50:05	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-15 09:53:11	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-11-15 09:53:55	-->	naiveaiguy (~root@122.170.135.104) has joined ##rust
2019-11-15 09:54:24	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-11-15 09:54:57	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-15 09:55:10	naiveaiguy	>tfw the entire mozilla communication moves from IRC, an open protocol with servers they can control, to Discord, a #gamerchat company with their own servers and a propietary protcol who also happen to be invested in by ~~the CCP~~ Tencent.
2019-11-15 09:55:47	hashworks	yrp: Nah = ain't right
2019-11-15 09:56:02	hashworks	yrp: thread 'main' panicked at 'index out of bounds: the len is 5990400 but the index is 5990400
2019-11-15 09:56:18	yrp	hashworks: look at the C code you posted
2019-11-15 09:56:33	hashworks	Ah
2019-11-15 09:56:35	hashworks	You're right
2019-11-15 09:56:37	hashworks	Sorry.
2019-11-15 09:56:39	hashworks	My bad!
2019-11-15 09:56:39	yrp	np
2019-11-15 09:57:15	Kinnison	If all you're doing with those indices is indexing the `vec` object, then chunks() or chunks_exact() may be marginally easier for humans to grok later.
2019-11-15 09:57:21	repo	any ideas about my linking issue?
2019-11-15 09:57:28	Kinnison	If you are using them for other things, then not so much
2019-11-15 09:57:30	repo	i wrote a tiny rust lib that basically just exposes a few functions globally. I then wrote bindings for this in crystal (yet another llvm based compiled language). When i try linking a project that uses this crystal lib i get the following error: https://p.jokke.space/HHQm2/
2019-11-15 09:57:55	repo	i should also say that i'm statically linking the rust lib, everything else is dynamically linked
2019-11-15 09:59:03	Kinnison	 The certificate for p.jokke.space expired on 14/11/2019.
2019-11-15 10:03:04	yrp	repo: if you turn on lto, does that fix it?
2019-11-15 10:04:50	-->	t7 (~tommo@2a00:23c5:1284:fc00:b0b4:a4e4:e28c:24d2) has joined ##rust
2019-11-15 10:07:18	yrp	repo: the other thing you could try is having your staticlib link your crystal dylib, instead of linking it all together at the end
2019-11-15 10:07:25	yrp	less clean, but its at least something to try
2019-11-15 10:07:52	repo	Kinnison: sweet, thanks for the hint. should be fixed
2019-11-15 10:08:12	repo	yrp: lto?
2019-11-15 10:08:19	yrp	link time optimization
2019-11-15 10:08:39	yrp	[profile.release] lto = true
2019-11-15 10:08:49	yrp	or profile.dev, w/e
2019-11-15 10:08:59	repo	so this is an option in cargo?
2019-11-15 10:11:15	repo	yrp: didn't help unfortunately
2019-11-15 10:11:56	<--	the_nozzle (~the_nozzl@c-73-231-84-87.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-11-15 10:12:22	repo	yrp: your second solution isn't really an option because i want this lib to be usable in any project without any configuration by the user
2019-11-15 10:13:34	yrp	as a binary or as a rust project?
2019-11-15 10:13:34	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-11-15 10:14:02	repo	neither
2019-11-15 10:14:06	repo	as a crystal project
2019-11-15 10:14:20	yrp	so it would be distributed as a binary component of a crystal project?
2019-11-15 10:14:23	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-11-15 10:14:28	repo	exactly
2019-11-15 10:15:52	-->	loganfsmyth (sid317246@gateway/web/irccloud.com/x-euzmobobqnlekuvs) has joined ##rust
2019-11-15 10:16:02	repo	i can define linker flags in crystal where i wrote the bindings but i'm not sure that helps (that's how the -Wl,-Bstatic -lxclib -Wl,-Bdynamic got there)
2019-11-15 10:16:37	yrp	yeah, i see. what you want to do is possible, but i dont know the cargo/linker dance to control symbol visibility which is what i think youd need to do to make this work
2019-11-15 10:16:58	repo	mmh
2019-11-15 10:16:59	yrp	cargo + linkers is kinda a sad time in general
2019-11-15 10:17:10	repo	ic
2019-11-15 10:17:24	repo	i think linkers in general is a sad time :D
2019-11-15 10:17:36	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-15 10:18:30	repo	i mean i could also link this dynamically but then i had some issues about it referencing libs in the project directory or something..
2019-11-15 10:18:35	repo	i try that though
2019-11-15 10:18:46	yrp	so you wont find any results on linking rust and crystal together, but the problem is the same as trying to link two static rust libs into one binary
2019-11-15 10:18:55	yrp	which you _will_ find stuff about if you search
2019-11-15 10:19:01	repo	ah good point
2019-11-15 10:19:19	yrp	so its not a solution, but at least youll have stack overflow and github issues to read =p
2019-11-15 10:19:44	yrp	remember that its staticlib and cdylib, not dylib for what you want
2019-11-15 10:21:04	yrp	anyways, i gotta pass out. good luck
2019-11-15 10:21:06	repo	yeah
2019-11-15 10:21:08	repo	thaks
2019-11-15 10:21:10	repo	*thanks
2019-11-15 10:21:20	leaves	Hello! Reading https://kornel.ski/rust-sys-crate and wondering whether this 'build from source' is really necessary. Can't I just state somewhere "please install libbla first"? Do I really have to set up a C build in my bla-sys crate if they haven't installed libbla?
2019-11-15 10:22:23	yrp	leaves: https://rust-lang.github.io/rust-bindgen/
2019-11-15 10:22:50	yrp	that will show you how to do it w/o setting up a C build of libbla by just using whatever headers you have in /usr/include or something
2019-11-15 10:22:54	-->	pmatos (~pmatos@217.83.102.86) has joined ##rust
2019-11-15 10:23:54	leaves	yrp: I know bindgen, not sure how that helps here. My question is more, do people really bundle C source code in their crates and build from source if the library isn't installed on the system?
2019-11-15 10:24:16	yrp	no
2019-11-15 10:24:16	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-15 10:24:17	yrp	they dont
2019-11-15 10:24:26	yrp	but they still use bindgen
2019-11-15 10:25:04	leaves	all right
2019-11-15 10:25:07	j`ey	some crates do that
2019-11-15 10:25:35	yrp	youve got libfoo on your computer which is distributed as a shared object (libfoo.so) and a header (libfoo.h)
2019-11-15 10:25:59	yrp	using bindgen you create foo-sys, which is an autogenerated crate that implements a rust api for the calls in libfoo.h, and links to libfoo.so
2019-11-15 10:26:20	yrp	you write foo-rs which depends on foo-sys
2019-11-15 10:26:56	yrp	at no point did you download or build libfoo from source
2019-11-15 10:27:16	j`ey	yrp: some crates do build from source
2019-11-15 10:27:28	yrp	i mean sure, but idiomatically...
2019-11-15 10:28:22	vorner	Sometimes, I do a little bit of glue code on the C/C++ side, to make it more friendly to bindings. That part needs to be built as part of the crate.
2019-11-15 10:29:26	yrp	yeah, or there have been times where ive wanted to apply a series of patches, obviously that will require recompiling
2019-11-15 10:29:40	yrp	but for just writing rust bindings to an existing lib?
2019-11-15 10:30:52	vorner	Then you probably wouldn't need C compiler. You'd just stick the right #[link = "whatever"] extern { } into your source code.
2019-11-15 10:31:33	yrp	im lazy, i just use bindgen to consume the header and generate the calls for me
2019-11-15 10:37:15	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-15 10:47:01	-->	hussam (uid193284@gateway/web/irccloud.com/x-xdwpikcpsbwyacvd) has joined ##rust
2019-11-15 10:50:44	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Remote host closed the connection)
2019-11-15 10:51:19	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-15 10:53:02	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Remote host closed the connection)
2019-11-15 10:55:24	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-15 10:55:47	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-15 11:00:42	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-15 11:11:30	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-15 11:16:22	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-15 11:17:47	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-15 11:22:16	-->	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-15 11:23:20	<--	naiveaiguy (~root@122.170.135.104) has quit (Ping timeout: 252 seconds)
2019-11-15 11:23:43	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-11-15 11:26:37	<--	ravenousmoose (~ravenousm@ptr-cud5aqg5mwnp5zv7fzk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-15 11:31:58	<--	matthias_bgg (~mbgg@89.red-2-139-173.staticip.rima-tde.net) has quit (Ping timeout: 245 seconds)
2019-11-15 11:34:35	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-15 11:36:08	-->	Ichorio (~Ichorio@2001:16b8:573e:1f00:a191:ae29:7a99:1f5f) has joined ##rust
2019-11-15 11:36:26	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-11-15 11:41:24	-->	localhorse (uid18992@gateway/web/irccloud.com/x-lnjygqohakfxquqz) has joined ##rust
2019-11-15 11:44:34	-->	matthias_bgg (~mbgg@89.red-2-139-173.staticip.rima-tde.net) has joined ##rust
2019-11-15 11:47:53	-->	mgrech (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-15 11:53:25	<--	AbedB (~AbedBhuty@bzq-109-65-83-5.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-15 11:55:02	<--	dutchie (~jholland@unaffiliated/dutchie) has quit (Quit: leaving)
2019-11-15 11:56:58	-->	dutchie (~jholland@unaffiliated/dutchie) has joined ##rust
2019-11-15 12:01:14	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Ping timeout: 240 seconds)
2019-11-15 12:01:18	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-15 12:04:35	<--	Red15 (~red15@unaffiliated/red15) has quit (Quit: WeeChat 1.9.1)
2019-11-15 12:11:05	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-15 12:14:49	Moongoodgirl	bsrd: oh, that kinda makes sense if it's a special device
2019-11-15 12:15:04	Moongoodgirl	the device driver can impose that kind of limitation on access to it
2019-11-15 12:16:07	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-15 12:19:28	<--	narispo (~narispo@37.164.185.73) has quit (Ping timeout: 245 seconds)
2019-11-15 12:20:34	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-15 12:23:05	-->	narispo (~narispo@37.166.11.91) has joined ##rust
2019-11-15 12:23:28	<--	fxrs_ (~fxrs@192.227.212.130) has quit (Ping timeout: 252 seconds)
2019-11-15 12:25:18	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 245 seconds)
2019-11-15 12:26:18	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-15 12:29:42	<--	narispo (~narispo@37.166.11.91) has quit (Ping timeout: 252 seconds)
2019-11-15 12:30:28	-->	narispo (~narispo@37.170.231.244) has joined ##rust
2019-11-15 12:32:53	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-15 12:33:32	-->	JadeJitsu (JadeJitsu@gateway/vpn/protonvpn/jadejitsu) has joined ##rust
2019-11-15 12:40:30	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-15 12:44:02	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2019-11-15 12:45:14	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-15 12:53:55	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-11-15 12:59:26	-->	lauromoura__ (~lauromour@2804:7f5:f380:2840:a158:a7a6:f407:92c) has joined ##rust
2019-11-15 13:00:26	<--	JadeJitsu (JadeJitsu@gateway/vpn/protonvpn/jadejitsu) has quit (Remote host closed the connection)
2019-11-15 13:00:41	-->	JadeJitsu68 (JadeJitsu@gateway/vpn/protonvpn/jadejitsu) has joined ##rust
2019-11-15 13:01:13	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-11-15 13:01:57	<--	lauromoura_ (~lauromour@2804:7f5:f380:2739:a14a:179e:7db4:38b0) has quit (Ping timeout: 252 seconds)
2019-11-15 13:03:58	--	JadeJitsu68 is now known as JadeJitsu
2019-11-15 13:06:05	-->	Choscura (~Choscurar@047-224-056-115.res.spectrum.com) has joined ##rust
2019-11-15 13:08:35	<--	matthias_bgg (~mbgg@89.red-2-139-173.staticip.rima-tde.net) has quit (Ping timeout: 276 seconds)
2019-11-15 14:34:50	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-15 14:34:50	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-15 14:34:50	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-15 14:34:50	--	Channel ##rust: 604 nicks (2 ops, 0 voices, 602 normals)
2019-11-15 14:35:07	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-15 14:35:54	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-15 14:36:26	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-15 14:37:31	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-15 14:38:08	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-15 14:40:15	--	loc_ is now known as loc
2019-11-15 14:41:35	-->	mankur (2d78913a@45.120.145.58) has joined ##rust
2019-11-15 14:43:02	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-15 14:43:14	mankur	Can somebody help me to find the best site to have any practical implementation of the rust. I'm experienced dev looking for the places to learn things like a pro.
2019-11-15 14:43:51	faern	mankur: The official book: https://doc.rust-lang.org/stable/book/
2019-11-15 14:44:09	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-15 14:45:09	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-11-15 14:47:59	-->	kai_w (~kai@2a00:23c5:e105:8800:bea8:a6ff:fe72:e4df) has joined ##rust
2019-11-15 14:49:03	<--	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has quit (Ping timeout: 245 seconds)
2019-11-15 14:50:58	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Remote host closed the connection)
2019-11-15 14:51:24	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-15 14:54:40	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-15 14:55:15	<--	MechanicalError (~Mechanica@d24-57-90-105.home.cgocable.net) has quit (Ping timeout: 240 seconds)
2019-11-15 14:55:52	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-11-15 15:00:31	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-15 15:08:01	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-15 15:08:04	mankur	Ah ok. Thanks faern
2019-11-15 15:15:20	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-11-15 15:17:09	<--	meandi_2 (~meandi@dyndsl-178-142-248-237.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-11-15 15:20:05	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-15 15:20:42	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-15 15:23:56	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-15 15:24:42	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-15 15:27:48	-->	jenny-m (~jdm-@45.72.213.93) has joined ##rust
2019-11-15 15:29:05	-->	meandi (~meandi@dyndsl-178-142-248-237.ewe-ip-backbone.de) has joined ##rust
2019-11-15 15:36:12	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-15 15:36:40	-->	rardiol (~quassel@177.52.227.63) has joined ##rust
2019-11-15 15:38:37	-->	bluezone (uid104970@gateway/web/irccloud.com/x-rohrgxaqqxxoqdyr) has joined ##rust
2019-11-15 15:41:56	-->	Arcaelyx (~Arcaelyx@138.88.94.92) has joined ##rust
2019-11-15 15:47:31	-->	Tacklebox (~Tacklebox@S0106ac202e1d6da3.gv.shawcable.net) has joined ##rust
2019-11-15 15:50:55	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-15 15:52:03	<--	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has quit (Ping timeout: 240 seconds)
2019-11-15 15:52:21	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-15 15:55:23	<--	mankur (2d78913a@45.120.145.58) has quit (Remote host closed the connection)
2019-11-15 15:55:39	<--	Tacklebox (~Tacklebox@S0106ac202e1d6da3.gv.shawcable.net) has quit (Ping timeout: 240 seconds)
2019-11-15 15:56:07	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-11-15 15:59:19	EliDupree	huh, in stdweb, I'm getting a "reference is of a different type" error when I try to convert a Value into a ClickEvent (when the Value is, in fact, a click event)
2019-11-15 15:59:38	EliDupree	(And the conversion code within stdweb is generated by procedural macros, so it's not even convenient for me to examine it)
2019-11-15 16:01:56	EliDupree	oh wait, hang on, my object was actually a jQuery event object
2019-11-15 16:02:10	-->	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has joined ##rust
2019-11-15 16:02:16	-->	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has joined ##rust
2019-11-15 16:02:34	lupine	:-D
2019-11-15 16:04:27	<--	k_sze (~k_sze@unaffiliated/kira) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-11-15 16:06:00	-->	k_sze (~k_sze@unaffiliated/kira) has joined ##rust
2019-11-15 16:06:08	<--	k_sze (~k_sze@unaffiliated/kira) has quit (Remote host closed the connection)
2019-11-15 16:07:08	<--	matthias_bgg (~mbgg@89.red-2-139-173.staticip.rima-tde.net) has quit (Ping timeout: 252 seconds)
2019-11-15 16:08:37	-->	k_sze (~k_sze@unaffiliated/kira) has joined ##rust
2019-11-15 16:10:23	<--	jenny-m (~jdm-@45.72.213.93) has quit (Quit: Leaving...)
2019-11-15 16:13:30	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-15 16:14:18	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-15 16:14:44	<--	Arcaelyx (~Arcaelyx@138.88.94.92) has quit (Quit: Arcaelyx)
2019-11-15 16:15:49	-->	Arcaelyx (~Arcaelyx@138.88.94.92) has joined ##rust
2019-11-15 16:22:37	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-15 16:22:40	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-15 16:22:49	-->	LunarJetman (LunarJetma@5ec1bc5a.skybroadband.com) has joined ##rust
2019-11-15 16:23:13	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-15 16:27:29	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-11-15 16:27:29	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-bnzswvifwhelhxjg) has joined ##rust
2019-11-15 16:27:29	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-11-15 16:27:29	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-hveulazbkpfttvwf) has joined ##rust
2019-11-15 16:27:30	-->	siraben (sirabenmat@gateway/shell/matrix.org/x-grvlstgfchpkyyjk) has joined ##rust
2019-11-15 16:27:30	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-vxvapreopkyjuxoa) has joined ##rust
2019-11-15 16:27:30	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-subqzbkziikdomll) has joined ##rust
2019-11-15 16:27:30	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-pcvyvrovplfybwyf) has joined ##rust
2019-11-15 16:27:30	-->	Ericson2314 (ericson231@gateway/shell/matrix.org/x-cunqxwzrefgupvne) has joined ##rust
2019-11-15 16:30:58	-->	jenny-m (~jdm-@CPE688f2e0836e3-CM688f2e0836e0.cpe.net.cable.rogers.com) has joined ##rust
2019-11-15 16:36:06	<--	narispo (~narispo@37.170.231.244) has quit (Ping timeout: 252 seconds)
2019-11-15 16:36:40	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-15 16:37:12	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Remote host closed the connection)
2019-11-15 16:37:40	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-11-15 16:38:45	-->	Tacklebox (~Tacklebox@s173-180-44-49.bc.hsia.telus.net) has joined ##rust
2019-11-15 16:41:21	-->	narispo (~narispo@37.166.192.233) has joined ##rust
2019-11-15 16:44:03	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-15 16:47:14	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-15 16:57:12	-->	KeyJoo (~KeyJoo@83.220.188.47) has joined ##rust
2019-11-15 17:04:39	<--	narispo (~narispo@37.166.192.233) has quit (Ping timeout: 246 seconds)
2019-11-15 17:08:43	-->	narispo (~narispo@37.165.129.82) has joined ##rust
2019-11-15 17:11:29	<--	Arcaelyx (~Arcaelyx@138.88.94.92) has quit (Quit: Arcaelyx)
2019-11-15 17:16:35	<--	KeyJoo (~KeyJoo@83.220.188.47) has quit (Quit: KeyJoo)
2019-11-15 17:27:01	-->	iq (~iq@2600:1000:bf06:104:c94d:50f1:20ad:1133) has joined ##rust
2019-11-15 17:29:57	<--	ellcs (~mantel@212.12.60.67) has quit (Remote host closed the connection)
2019-11-15 17:30:44	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-15 17:30:58	jbg	sfackler: i'm using tokio-postgres with async/await, and I have one case where I need to build an SQL query and a Vec of params programmatically
2019-11-15 17:31:27	jbg	I'm running into a problem where I need to make a Vec<Box<dyn ToSql + Send + Sync>> as without the Send bound it won't compile with it alive over some await points
2019-11-15 17:31:46	-->	kericsson (~kericsson@81-230-107-44-no2360.tbcn.telia.com) has joined ##rust
2019-11-15 17:31:59	sfackler	sure
2019-11-15 17:32:27	jbg	but then params.map(|b| b.as_ref() as &(dyn ToSql + Sync)).collect().as_slice() gives me a &[&dyn ToSql + Sync] and for some reason passing that to execute() gives me the same error
2019-11-15 17:32:58	sfackler	use query_raw/execute_raw instead to avoid having to collect the slice
2019-11-15 17:33:37	jbg	ah fantastic
2019-11-15 17:33:40	jbg	thanks very much :)
2019-11-15 17:37:11	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-15 17:41:00	<--	narispo (~narispo@37.165.129.82) has quit (Read error: Connection reset by peer)
2019-11-15 17:41:13	-->	narispo (~narispo@2a01:e0a:2a2:1590:5b1:90e:7f88:ed20) has joined ##rust
2019-11-15 17:43:23	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-11-15 17:52:35	<--	jenny-m (~jdm-@CPE688f2e0836e3-CM688f2e0836e0.cpe.net.cable.rogers.com) has quit (Quit: Leaving...)
2019-11-15 17:56:06	jbg	sfackler: hmm, eliminating the collect() and using execute_raw doesn't appear to help. I still have to map the params to &dyn ToSql, and I still get the same error
2019-11-15 17:56:27	jbg	are you aware of any example anywhere with the parameters built programmatically?
2019-11-18 09:27:23	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-18 09:27:23	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-18 09:27:23	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-18 09:27:23	--	Channel ##rust: 610 nicks (2 ops, 0 voices, 608 normals)
2019-11-18 09:27:39	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-18 09:27:48	<--	m0rphism1 (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has quit (Ping timeout: 245 seconds)
2019-11-18 09:29:04	-->	vorner (~vorner@2a02:2b88:2:1::10b3:1) has joined ##rust
2019-11-18 09:29:50	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-18 09:31:18	leaves	What's the best way to pass a Vec<Cow<str>> to a function taking a Vec<&str>?
2019-11-18 09:33:37	leaves	probably have to copy into a new Vec for this, right
2019-11-18 09:33:59	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 09:34:12	Kinnison	You would have to, yes, because the slices are a different shape
2019-11-18 09:34:45	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 09:35:53	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-18 09:35:56	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Remote host closed the connection)
2019-11-18 09:36:40	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-11-18 09:37:19	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-11-18 09:37:25	-->	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has joined ##rust
2019-11-18 09:38:17	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-18 09:40:43	-->	scde_ (~scde@p5B267C9E.dip0.t-ipconnect.de) has joined ##rust
2019-11-18 09:40:49	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-18 09:42:37	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 09:43:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 09:44:20	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-18 09:47:12	<--	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-11-18 09:52:43	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-11-18 09:53:53	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 09:54:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 09:54:32	-->	molan (~michal@185.18.141.145) has joined ##rust
2019-11-18 09:55:24	<--	molan (~michal@185.18.141.145) has left ##rust
2019-11-18 09:58:41	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Ping timeout: 250 seconds)
2019-11-18 10:01:46	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-18 10:03:09	<--	vorner (~vorner@2a02:2b88:2:1::10b3:1) has quit (Quit: Gateway shutdown)
2019-11-18 10:04:09	<--	scde_ (~scde@p5B267C9E.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2019-11-18 10:04:13	-->	vorner (~vorner@vorner.cz) has joined ##rust
2019-11-18 10:05:28	-->	m0rphism1 (~m0rphism@tmo-097-68.customers.d1-online.com) has joined ##rust
2019-11-18 10:10:32	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 265 seconds)
2019-11-18 10:13:16	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-11-18 10:15:00	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-18 10:15:36	<--	m0rphism1 (~m0rphism@tmo-097-68.customers.d1-online.com) has quit (Ping timeout: 240 seconds)
2019-11-18 10:17:53	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 10:18:04	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-11-18 10:22:35	-->	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has joined ##rust
2019-11-18 10:22:48	<--	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has quit (Quit: biab)
2019-11-18 10:22:48	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-18 10:24:23	-->	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has joined ##rust
2019-11-18 10:25:34	-->	m0rphism1 (~m0rphism@tmo-097-68.customers.d1-online.com) has joined ##rust
2019-11-18 10:27:42	-->	OmniMancer1 (~Paul@101.100.137.239) has joined ##rust
2019-11-18 10:29:27	danielparks	What’s the shortest and clearest literal for an empty array, slice, or vector?
2019-11-18 10:29:39	<--	OmniMancer (~Paul@101.100.137.239) has quit (Ping timeout: 240 seconds)
2019-11-18 10:29:39	danielparks	This is for a unit test
2019-11-18 10:30:08	danielparks	Right now I‘ve got <Vec<&str>>::new() which seems fairly clear
2019-11-18 10:30:46	danielparks	&[""][0..0] is shorter, but I think it might be less clear.
2019-11-18 10:31:32	vorner	It's also something completely different. The first is owned vector of stuff, the latter is slice.
2019-11-18 10:31:43	danielparks	I suppose a function call isn’t a literal. I should have said expression.
2019-11-18 10:31:51	danielparks	Right
2019-11-18 10:32:31	danielparks	That’s fine. I just need an empty array-like object. The type of the content is important, though.
2019-11-18 10:32:40	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-18 10:34:23	j`ey	if only we had type ascription, then you could write: &[]: &[&str]
2019-11-18 10:35:29	danielparks	yeah, I was using a fn for a bit, but I was going to have to figure out how scopes work in the testing code I’m working on. :p
2019-11-18 10:36:37	danielparks	The complication is that it runs these tests twice, once with &[u8] values and once with &str values
2019-11-18 10:37:00	danielparks	and the only difference is which file of macros is included
2019-11-18 10:37:49	danielparks	https://github.com/rust-lang/regex/blob/master/tests/api.rs
2019-11-18 10:38:02	danielparks	https://github.com/rust-lang/regex/blob/master/tests/macros_bytes.rs
2019-11-18 10:38:11	danielparks	https://github.com/rust-lang/regex/blob/master/tests/macros_str.rs
2019-11-18 10:47:44	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-11-18 10:49:41	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-18 10:50:27	<--	m0rphism1 (~m0rphism@tmo-097-68.customers.d1-online.com) has quit (Ping timeout: 240 seconds)
2019-11-18 10:51:52	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 252 seconds)
2019-11-18 10:52:38	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 276 seconds)
2019-11-18 10:52:49	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-18 10:54:16	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-11-18 10:56:00	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:488f:56b5:d0f6:f66a) has quit (Quit: WeeChat 2.6)
2019-11-18 10:56:55	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-11-18 10:57:19	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Client Quit)
2019-11-18 10:59:46	-->	matthias_bgg (~mbgg@37.223.144.104) has joined ##rust
2019-11-18 10:59:47	<--	simlay (~simlay@gateway/tor-sasl/simlay) has quit (Remote host closed the connection)
2019-11-18 11:00:02	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-11-18 11:01:05	-->	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has joined ##rust
2019-11-18 11:01:48	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-11-18 11:12:42	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-18 11:13:47	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-18 11:16:16	<--	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has quit (Ping timeout: 265 seconds)
2019-11-18 11:17:40	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-18 11:22:05	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-18 11:23:02	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-18 11:24:28	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 245 seconds)
2019-11-18 11:26:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 11:27:17	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-18 11:28:25	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 11:29:38	<--	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has quit (Quit: danielparks)
2019-11-18 11:30:21	-->	abundantmussel (~quassel@server.shortland.org) has joined ##rust
2019-11-18 11:33:04	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-18 11:33:09	-->	aceeri_ (uid202865@gateway/web/irccloud.com/x-fizrugcceostvemc) has joined ##rust
2019-11-18 11:33:33	BeerLover	Lets say I have a number which is negative. How do I print it with a space between - sign and the number?
2019-11-18 11:34:12	aceeri_	do a custom print like
2019-11-18 11:35:13	aceeri_	if x < 0 { print!("- "); } print!("{}", x.abs());
2019-11-18 11:36:05	BeerLover	aceeri_ https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4a6730032182b445f898491327e2d74d
2019-11-18 11:36:13	BeerLover	Here is the link
2019-11-18 11:37:25	BeerLover	aceeri_ https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a827ea9682c1cd4454c43b3d69d6e5d6
2019-11-18 11:37:27	BeerLover	Done
2019-11-18 11:37:36	BeerLover	is that okay?
2019-11-18 11:38:25	aceeri_	I don't see why not
2019-11-18 11:39:36	aceeri_	Pretty clear on what is wanted, so unless performance issues come up somehow I'd say just roll with it
2019-11-18 11:47:27	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Ping timeout: 250 seconds)
2019-11-18 11:48:53	-->	Ichorio (~Ichorio@2001:16b8:5786:d900:9442:3f26:e7e5:549a) has joined ##rust
2019-11-18 11:53:59	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-18 11:56:24	-->	frostschutz (~frostschu@55d47c51.access.ecotel.net) has joined ##rust
2019-11-18 11:58:51	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-18 12:03:27	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-18 12:04:07	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-18 12:09:59	elichai2	Sometimes I think alignment is just stupid. I have a FFI that depends on the architecture will sometimes contain `[u32; 8]` and sometimes `[u64; 8]` and i'd like to represent that in rust using only 1 struct, this can't be done :/ https://play.rust-lang.org/?gist=3a91f54aeb5c5f393dfa9acfc42229cc
2019-11-18 12:12:29	elichai2	I wonder if this is enough https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=189c103b18401153daa0f85d9fff8e35
2019-11-18 12:12:43	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-18 12:12:48	aceeri_	you can do cfgs on the architecture
2019-11-18 12:12:52	elichai2	probably not? I think the alignment must much
2019-11-18 12:12:59	aceeri_	and name it the same thing
2019-11-18 12:13:05	elichai2	aceeri_: yeah that's easy. i'm trying to see if I can avoid this
2019-11-18 12:13:18	elichai2	because then I need to be 100% sure i'm matching the autotools behavior
2019-11-18 12:13:39	<--	learning1 (~pi@121.122.85.43) has quit (Ping timeout: 240 seconds)
2019-11-18 12:13:50	aceeri_	don't you kind of have to do that either way?
2019-11-18 12:14:09	elichai2	if I can make one struct that fits it all? no
2019-11-18 12:14:10	aceeri_	like how are you going to choose between 2 structs for example
2019-11-18 12:14:34	aceeri_	ah
2019-11-18 12:14:36	aceeri_	I see what you mean
2019-11-18 12:14:41	elichai2	I probably can't do that. but I hoped I won't need to choose anything by using more opaque data structures on the rust side
2019-11-18 12:14:50	elichai2	(like an aligned buffer)
2019-11-18 12:15:31	-->	learning1 (~pi@121.122.85.43) has joined ##rust
2019-11-18 12:16:39	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-18 12:18:51	aceeri_	what does the FFI look like here?
2019-11-18 12:22:04	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 252 seconds)
2019-11-18 12:22:30	-->	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has joined ##rust
2019-11-18 12:23:17	elichai2	something like: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d8f194cd0627fc5b879580de8afb853b
2019-11-18 12:23:47	elichai2	but I can't know if it's A or B in the C-code. I just assume it's always the C struct
2019-11-18 12:26:10	<--	lineus (~lineus@dynamic-acs-24-101-206-59.zoominternet.net) has quit (Quit: leaving)
2019-11-18 12:33:06	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 12:34:15	<--	lopsided98 (~quassel@2601:18a:0:ff60::566a) has quit (Ping timeout: 250 seconds)
2019-11-18 12:40:15	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-18 12:47:08	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 265 seconds)
2019-11-18 12:47:35	-->	lopsided98 (~quassel@2601:18a:0:ff60:ba27:ebff:fe5e:6b6e) has joined ##rust
2019-11-18 12:56:27	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-18 12:56:58	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-18 13:00:10	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 13:01:40	<--	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has quit (Quit: WeeChat 1.9.1)
2019-11-18 13:01:52	-->	cxzxczxcxzc (~cxzxczxcx@unaffiliated/cxzxczxcxzc) has joined ##rust
2019-11-18 13:02:07	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-18 13:02:15	cxzxczxcxzc	hi, how similar is Rust to C/C++ syntax-wise?
2019-11-18 13:03:39	la_mettrie	fundamentals are pretty similar but there is also lots of stuff that doesn't appear on C/C++
2019-11-18 13:04:03	cxzxczxcxzc	la_mettrie: is there any good article on this without reading the whole rust book?
2019-11-18 13:04:23	la_mettrie	can't you get the picture by taking a look of some rust source codes?
2019-11-18 13:05:17	cxzxczxcxzc	I could, but I don't want to be mislead and assume things as they are not
2019-11-18 13:05:18	j`ey	cxzxczxcxzc: pretty similar. uses name: type, instead of type name
2019-11-18 13:05:36	j`ey	one of the more fundamental changes
2019-11-18 13:06:50	la_mettrie	rust adds quite many things so it's probably not easy to understand rust code without knowing the language
2019-11-18 13:09:03	j`ey	rust uses the angle brackets <>, for generics, like C++ uses for templates
2019-11-18 13:11:19	-->	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has joined ##rust
2019-11-18 13:12:01	Yaniel	syntactically it kind of looks similar, but those looks are deceiving
2019-11-18 13:14:12	<--	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has quit (Client Quit)
2019-11-18 13:14:18	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-18 13:15:15	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-18 13:15:37	-->	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has joined ##rust
2019-11-18 13:16:11	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-11-18 13:16:50	danielparks	Yaniel: were you replying to me? I picked that time to close my laptop and move to a different seat. :D
2019-11-18 13:17:35	j`ey	no
2019-11-18 13:17:39	Yaniel	no to cxzxczxcxzc
2019-11-18 13:19:47	guzzlefry	Is there any work on a condensed version of The Book?
2019-11-18 13:19:58	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 13:20:09	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Client Quit)
2019-11-18 13:20:39	Yaniel	no but you might want to check out rust by example
2019-11-18 13:21:42	-->	Red15 (~red15@unaffiliated/red15) has joined ##rust
2019-11-18 13:21:48	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 13:23:07	presiden	https://doc.rust-lang.org/stable/rust-by-example/
2019-11-18 13:24:19	<--	murla (~murla@146.120.13.152) has quit (Remote host closed the connection)
2019-11-18 13:26:02	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Client Quit)
2019-11-18 13:26:09	<--	narispo (~narispo@2a01:e0a:2a2:1590:713f:c54:2bb1:7c52) has quit (Read error: Connection reset by peer)
2019-11-18 13:26:22	-->	narispo (~narispo@37.120.204.10) has joined ##rust
2019-11-18 13:28:37	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 13:29:03	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 13:31:08	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 245 seconds)
2019-11-18 13:32:34	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 265 seconds)
2019-11-18 13:32:39	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-18 13:32:50	<--	narispo (~narispo@37.120.204.10) has quit (Ping timeout: 252 seconds)
2019-11-18 13:33:03	-->	narispo (~narispo@2a01:e0a:2a2:1590:713f:c54:2bb1:7c52) has joined ##rust
2019-11-18 13:34:27	vorner	I think there was also some kind of Rust for C++ devs book/tutorial (I'm not sure which).
2019-11-18 13:34:47	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-18 13:35:47	vorner	And I think going over https://rust-unofficial.github.io/too-many-lists/index.html gives quite a nice glimpse into Rust, is much shorter and is also somewhat fun to read.
2019-11-18 13:40:18	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-18 13:41:07	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-18 13:42:35	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-18 13:42:48	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 245 seconds)
2019-11-18 13:46:41	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Remote host closed the connection)
2019-11-18 13:47:00	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-18 13:51:45	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 13:52:04	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 13:53:14	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-18 13:54:59	danielparks	OMG too many lists is FANTASTIC
2019-11-18 13:55:46	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Client Quit)
2019-11-18 13:55:56	danielparks	I’m just finishing my second day using Rust, and I found both the book and Rust by example to be a bit slow (this is not my first rodeo)
2019-11-18 13:56:10	danielparks	but the linked list thing is perfect
2019-11-18 13:56:55	-->	lauromoura (~lauromour@2804:7f5:f380:3d36:3568:9aec:59f:40ae) has joined ##rust
2019-11-18 13:56:57	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-18 13:57:16	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-18 13:57:30	the_ment	vorner: that looks really interesting
2019-11-18 14:05:01	<--	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has quit (Quit: Ping timeout: 4294967295 seconds)
2019-11-18 14:05:45	Yaniel	>Using an older toolchain is possible, but unlocks a secret hardmode, where you get extra compiler errors that go completely unmentioned in the text of this book.
2019-11-18 14:05:59	Yaniel	:D great way to put it
2019-11-18 14:07:09	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-11-18 14:12:07	-->	iq (~iq@2600:100e:bf18:a23:1476:e6c:3736:43ed) has joined ##rust
2019-11-18 14:17:32	presiden	secret hardmode, lol
2019-11-18 14:17:59	<--	Chagall (~Chagall@ns326742.ip-37-187-108.eu) has left ##rust ("Leaving")
2019-11-18 14:23:18	j`ey	extra hard: mrustc
2019-11-18 14:25:04	<--	narispo (~narispo@2a01:e0a:2a2:1590:713f:c54:2bb1:7c52) has quit (Read error: Connection reset by peer)
2019-11-18 14:25:17	-->	narispo (~narispo@37.120.204.10) has joined ##rust
2019-11-18 14:27:56	-->	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has joined ##rust
2019-11-18 14:34:12	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 246 seconds)
2019-11-18 14:41:10	<--	matthias_bgg (~mbgg@37.223.144.104) has quit (Quit: Leaving)
2019-11-18 14:41:14	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-18 14:44:15	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-18 14:44:57	-->	matthias_bgg (~mbgg@37.223.144.104) has joined ##rust
2019-11-18 14:46:50	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-18 14:47:00	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 265 seconds)
2019-11-18 14:47:01	--	cdown_ is now known as cdown
2019-11-18 14:47:25	naiveaiguy	I'm wondering why Rust can't understand the exhaustivity of patterns inside of a match, and I'm wondering if there's an RFC for this. More precisely, I mean the condition of "match x { 'G' | 'E' => match x { 'G' => 2, 'E' => 3 }, _ => 42 }"
2019-11-18 14:47:48	naiveaiguy	Here Rust will complain that the inner match is non-exhaustive, despite it only being possible to reach if x == 'G' or 'E'
2019-11-18 14:48:03	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-18 14:48:47	Yaniel	just a matter of the compiler not being clever enough
2019-11-18 14:49:06	Yaniel	I think it only checks the inner match on the type level
2019-11-18 14:49:23	Yaniel	maybe this will change when we get arbitrary range integer types
2019-11-18 14:49:55	Yaniel	(and tbh this particular case would be much clearer if you just flatten it anyway)
2019-11-18 14:50:50	naiveaiguy	Yaniel: well this is just a simplified example, the idea here was that you have to an extremly similar struct initialization in both cases except for literally one field, so it's better to nest the matches
2019-11-18 14:51:05	naiveaiguy	In the end I ended up using an if/else instead since its exhaustivity is not enforced
2019-11-18 14:52:13	Yaniel	could even make it `x - 'D' as u32` and go completely unconditional
2019-11-18 14:53:21	<--	M-ou-se (~m-ou-se@circle.m-ou.se) has quit (Ping timeout: 250 seconds)
2019-11-18 14:54:01	-->	Chagall (~Chagall@ns326742.ip-37-187-108.eu) has joined ##rust
2019-11-18 14:54:54	-->	M-ou-se (~m-ou-se@circle.m-ou.se) has joined ##rust
2019-11-18 14:54:57	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-18 14:56:57	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-18 14:58:21	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 246 seconds)
2019-11-18 14:58:22	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Quit: leaving)
2019-11-18 14:58:45	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-18 14:59:01	<--	cdown (~cdown@199.201.66.0) has quit (Remote host closed the connection)
2019-11-18 15:00:53	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-18 15:01:04	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 15:01:27	-->	cdown (~cdown@89.32.122.5) has joined ##rust
2019-11-18 15:01:38	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 15:07:37	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Quit: leaving)
2019-11-18 15:08:06	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-18 15:15:08	<--	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2019-11-18 15:16:11	-->	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has joined ##rust
2019-11-18 15:16:27	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-18 15:19:59	-->	pep7 (~pep7@unaffiliated/pep7) has joined ##rust
2019-11-18 15:22:23	<--	Ichorio (~Ichorio@2001:16b8:5786:d900:9442:3f26:e7e5:549a) has quit (Ping timeout: 245 seconds)
2019-11-18 15:22:51	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-18 15:32:34	-->	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has joined ##rust
2019-11-18 15:34:40	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 15:35:11	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 15:38:10	-->	iptq (~on@159.65.217.204) has joined ##rust
2019-11-18 15:40:37	<--	OmniMancer1 (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-18 15:42:46	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 15:43:12	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 15:48:14	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-18 15:49:32	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-18 15:50:29	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 15:50:48	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 265 seconds)
2019-11-18 15:50:59	--	cdown_ is now known as cdown
2019-11-18 15:51:12	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 15:54:32	-->	crockwork_ (~crockwork@66.205.193.158) has joined ##rust
2019-11-18 15:57:15	<--	crockwork (~crockwork@66.205.193.158) has quit (Ping timeout: 240 seconds)
2019-11-18 16:01:55	<--	scde (~scde@p5B267C9E.dip0.t-ipconnect.de) has quit (Ping timeout: 265 seconds)
2019-11-18 16:05:21	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 16:06:13	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 16:09:33	<--	tsaka_ (~torstein@94.66.73.249) has quit (Quit: Konversation terminated!)
2019-11-18 16:21:17	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 264 seconds)
2019-11-18 16:29:57	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-18 16:30:14	<--	con3 (~kvirc@154.119.40.183) has quit (Client Quit)
2019-11-18 16:32:11	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 16:32:45	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 16:36:29	-->	jack_rabbit (~jack_rabb@c-98-212-152-230.hsd1.il.comcast.net) has joined ##rust
2019-11-18 16:36:31	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-18 16:37:45	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 16:41:27	-->	moonshine_ (~moonshine@112.134.104.226) has joined ##rust
2019-11-18 16:41:31	moonshine_	hello
2019-11-18 16:41:53	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-18 16:42:35	moonshine_	what is the process of making gui program with rust
2019-11-18 16:47:02	vorner	Well, you pick some GUI library to do it with. But the state there is somewhat… not optimal. Nobody figured out how to make a GUI library that plays really nice and elegantly with the ownership system :-(.
2019-11-18 16:47:53	moonshine_	like GTK+
2019-11-18 16:48:54	dalcde	I'm (slowly) writing a window manager in Rust. What I end up doing is
2019-11-18 16:49:11	dalcde	(1) There is a connection to the X server that everyone shares via an Rc<Connection> (&'a Connection probably works too)
2019-11-18 16:50:08	dalcde	(2) Objects are referred to by their id, which is a u32 (or maybe u16; who knows), and implements Copy
2019-11-18 16:50:34	dalcde	(3) You have to accept that sometimes the window you think you have just no longer exists.
2019-11-18 16:50:43	dalcde	The last part is a pain, as you might expect.
2019-11-18 16:51:46	<--	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2019-11-18 16:52:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 16:52:40	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (Ping timeout: 265 seconds)
2019-11-18 16:53:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 16:54:12	<--	jack_rabbit (~jack_rabb@c-98-212-152-230.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2019-11-18 16:54:26	-->	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has joined ##rust
2019-11-18 16:58:38	-->	bluezone (uid104970@gateway/web/irccloud.com/x-dfgzbwyvozliivfu) has joined ##rust
2019-11-18 17:00:54	moonshine_	as you might expect ;-;
2019-11-18 17:01:37	-->	dunpeal (~dunpeal@unaffiliated/dunpeal) has joined ##rust
2019-11-18 17:02:01	dunpeal	If internally strings in Rust are stored as UTF8, how do you get O(1) indexing?
2019-11-18 17:02:31	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-18 17:04:19	Alexendoo	dunpeal: Indexing is done by the byte still, it panics (or returns None if you're using .get) if you try to index starting from the middle of a code sequence
2019-11-18 17:05:44	dunpeal	Alexendoo: so this answer is outdated? https://users.rust-lang.org/t/accessing-the-char-at-a-byte-index/15398/2
2019-11-18 17:06:37	j`ey	where does that mention O(1)?
2019-11-18 17:06:41	dunpeal	BTW, indexing by byte doesn't help a lot in a string that has variable-byte-width charactrs.
2019-11-18 17:06:53	j`ey	ah
2019-11-18 17:07:02	j`ey	"Indexing is intended to be a constant-time operation, but UTF-8 encoding does not allow us to do this."
2019-11-18 17:07:22	vorner	Well, the first is needed if you want ith character, not character at ith byte. And that's linear. The latter is needlessly non-optimal.
2019-11-18 17:07:34	dunpeal	Yeah, indexing by byte is constant time, but not very useful. Indexing by char is O(n)
2019-11-18 17:07:43	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-18 17:07:43	j`ey	right
2019-11-18 17:07:58	j`ey	but where does it say O(1) indexing for chars?
2019-11-18 17:07:59	vorner	I think I've seen some trick how to index into the string first if you need to do it often/a lot
2019-11-18 17:08:24	Alexendoo	dunpeal: That's still correct
2019-11-18 17:08:27	dunpeal	j`ey: nowhere, I'm asking if it's possible since it is in other languages that internally represent strings in fixed-width encoding.
2019-11-18 17:08:59	dunpeal	vorner: you can certainly store a translation array with the character offsets.
2019-11-18 17:09:02	j`ey	oh, the first question sounded like "how does rust get O(1) indexing?", as if it does do indexing
2019-11-18 17:09:02	<--	abundantmussel (~quassel@server.shortland.org) has quit (Quit: abundantmussel)
2019-11-18 17:09:28	dunpeal	yup, sorry for confusion. I sorta assumed it did since it does in other languages I've used.
2019-11-18 17:10:02	j`ey	Vec<char> could have it
2019-11-18 17:10:32	dunpeal	yup, I suppose Rust doesn't consider indexing into a char string to be that useful
2019-11-18 17:10:37	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-11-18 17:10:55	dunpeal	which can make sense, since most cases I recall needing it for networking and such, they were byte strings, not char strings.
2019-11-18 17:11:00	j`ey	well I suppose it considers utf8 more useful
2019-11-18 17:11:18	dunpeal	It's certainly more space efficient.
2019-11-18 17:11:32	dunpeal	than an encoding that will cover the entire unicode range in fixed-width.
2019-11-18 17:11:44	j`ey	shouldnt be too hard to convert between String and Vec<char
2019-11-18 17:11:45	j`ey	>
2019-11-18 17:12:46	dunpeal	or just use byte indexing.
2019-11-18 17:13:28	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (Read error: Connection reset by peer)
2019-11-18 17:25:29	-->	n8chan (~natechan@2600:1702:a20:5610:6d4d:d9c7:639c:a1f5) has joined ##rust
2019-11-18 17:30:50	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-11-18 17:31:31	<--	n8chan (~natechan@2600:1702:a20:5610:6d4d:d9c7:639c:a1f5) has quit (Ping timeout: 250 seconds)
2019-11-18 17:31:36	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-11-18 17:34:43	<--	naiveaiguy (~root@122.170.175.220) has quit (Ping timeout: 265 seconds)
2019-11-18 17:35:40	-->	t7 (~tommo@2a00:23c5:1284:fc00:302b:ad75:95f:ee9) has joined ##rust
2019-11-18 17:37:03	-->	dmc (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-11-18 17:40:11	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-11-18 17:40:31	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-18 17:40:50	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-18 17:51:09	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-11-19 12:58:41	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-19 12:58:41	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-19 12:58:41	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-19 12:58:41	--	Channel ##rust: 628 nicks (2 ops, 0 voices, 626 normals)
2019-11-19 12:58:56	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-19 12:59:23	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-19 13:02:19	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-11-19 13:05:43	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 13:06:13	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 13:09:34	<--	StarlitGhost (~SG@starlitghost.xyz) has quit (Ping timeout: 246 seconds)
2019-11-19 13:15:00	<--	francisv (123080@vetur.ifi.uio.no) has quit (Read error: Connection reset by peer)
2019-11-19 13:15:32	netopso	hmm, comipler says "this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)" so I do `rustup install --force nightly` and `cargo +nightly test -Z external-macro-backtrace` but ge tthe error "error: unknown `-Z` flag specified: external-macro-backtrace"
2019-11-19 13:15:58	j`ey	try with -- before the -Z
2019-11-19 13:16:09	j`ey	-- -Z
2019-11-19 13:16:34	netopso	j`ey: that did the trick. man, rust loves disk space
2019-11-19 13:17:11	j`ey	yeah, gotta cargo clean occasionally
2019-11-19 13:21:14	<--	naiveaiguy (~root@122.170.175.220) has quit (Ping timeout: 240 seconds)
2019-11-19 13:21:36	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-11-19 13:21:47	netopso	j`ey: hmm, ran it but I get the same traceback with the same message suggesting I run it with -Z external-macro-backtrace
2019-11-19 13:22:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 13:23:14	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 13:23:26	j`ey	ive never tried to run tha toption when ive gotten that error tbh
2019-11-19 13:23:32	j`ey	just tried to figure out it out :P
2019-11-19 13:24:31	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-19 13:26:20	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-19 13:26:52	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-19 13:27:14	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 13:29:02	<--	matthias_bgg (~mbgg@37.223.144.104) has quit (Ping timeout: 265 seconds)
2019-11-19 13:29:40	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-19 13:30:15	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 13:34:22	-->	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-47-37.dsl.bell.ca) has joined ##rust
2019-11-19 13:34:34	<--	icey (sid214912@canonical/icey) has quit
2019-11-19 13:35:49	netopso	j`ey: here's the error/tracebac... https://pastebin.com/89pw9NYK
2019-11-19 13:37:11	j`ey	the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<std::string::String>`
2019-11-19 13:37:17	j`ey	this seems to be the crux of it
2019-11-19 13:37:37	netopso	j`ey: yeah, but see the part at the top where it's all wrapped in a Mutex... that should fix the Sync
2019-11-19 13:37:45	j`ey	impl<T> !Sync for Sender<T> { }
2019-11-19 13:37:57	<--	francisv (123080@vetur.ifi.uio.no) has quit (Ping timeout: 240 seconds)
2019-11-19 13:38:15	netopso	j`ey: ?? what does that do?
2019-11-19 13:39:34	j`ey	ignore that
2019-11-19 13:40:05	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-11-19 13:40:41	netopso	j`ey: ah, I see, that would un-implement: https://doc.rust-lang.org/beta/nomicon/send-and-sync.html
2019-11-19 13:40:44	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-11-19 13:41:04	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Client Quit)
2019-11-19 13:41:57	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-19 13:42:34	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e184b852b71b0179033a96d1b9823c3d
2019-11-19 13:42:39	j`ey	so there's something else going on
2019-11-19 13:43:19	netopso	j`ey: yeah, we've been over this ...
2019-11-19 13:44:00	netopso	also uh that mutex doesn't actually contain a sender, not sure what sorcery that is
2019-11-19 13:44:11	j`ey	which doesnt? mine?
2019-11-19 13:44:33	netopso	yeah, the type is defined to contain a sender but you only initialise it with a function
2019-11-19 13:45:00	j`ey	yeah, just a bit of magic cos I couldnt be bothered to look up how to do it properly
2019-11-19 13:45:07	netopso	ah
2019-11-19 13:45:08	j`ey	but its enough to typecheck
2019-11-19 13:47:41	netopso	but yes, I'd previously posted examples of a sender inside a mutex working in a lazy_static declaration
2019-11-19 13:47:51	netopso	so the question is what the other thing is that's going on
2019-11-19 13:48:01	netopso	the traceback doesn't give much in the way of answers that I can see
2019-11-19 13:48:03	j`ey	try to make a smaller example
2019-11-19 13:48:22	j`ey	i guess you said it doesnt work on the playground cos of chashmap
2019-11-19 13:48:58	netopso	j`ey: yes, and chashmap seems like a good candidate since it's doing weird things for concurrency
2019-11-19 13:49:13	j`ey	you can still make a small example locally i suppose, might help
2019-11-19 13:49:34	netopso	one thing that catches my eye on the paste: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e184b852b71b0179033a96d1b9823c3d
2019-11-19 13:49:43	netopso	sorry,    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<chashmap::CHashMap<mycrate::myothermodule::ConfigOptions, mycrate::mymodule::thing::otherothersubmodule::othersubmodule::OtherSubThing>>`
2019-11-19 13:50:30	netopso	I wonder if that is somehow a clue to the lack of a Send implementation
2019-11-19 13:50:37	netopso	don't know how to read it though
2019-11-19 13:52:50	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 13:53:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 13:56:29	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-19 13:57:16	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 14:05:23	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 246 seconds)
2019-11-19 14:05:50	la_mettrie	something wrong with this??    if i == 0 || i == 32 || i == 255 {continue;}
2019-11-19 14:07:03	j`ey	you tell us!
2019-11-19 14:09:31	--	toure|gone is now known as toure
2019-11-19 14:11:15	-->	t7 (~tommo@2a00:23c5:1284:fc00:8502:eb65:4249:1ffe) has joined ##rust
2019-11-19 14:18:24	-->	iq (~iq@2600:100e:bf18:cc9:4f01:7f59:4b66:9f09) has joined ##rust
2019-11-19 14:21:18	-->	matthias_bgg (~mbgg@37.223.147.243) has joined ##rust
2019-11-19 14:23:28	-->	lauromoura (~lauromour@2804:7f5:f380:3d36:e0f2:5d1e:5e07:bca8) has joined ##rust
2019-11-19 14:26:53	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Quit: Mom decided I had to go to bed.)
2019-11-19 14:26:59	<--	crockwork (~crockwork@66.205.193.158) has quit (Ping timeout: 252 seconds)
2019-11-19 14:27:10	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-19 14:27:12	-->	n8chan (~natechan@2600:1702:a20:5610:a92e:eeba:2adb:426e) has joined ##rust
2019-11-19 14:29:23	-->	matthias_bgg_ (~mbgg@37.223.145.31) has joined ##rust
2019-11-19 14:30:08	<--	matthias_bgg (~mbgg@37.223.147.243) has quit (Ping timeout: 276 seconds)
2019-11-19 14:38:13	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-19 14:39:36	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 14:40:49	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 14:42:36	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 240 seconds)
2019-11-19 14:43:37	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has quit (Ping timeout: 240 seconds)
2019-11-19 14:44:29	-->	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has joined ##rust
2019-11-19 14:45:05	<--	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-47-37.dsl.bell.ca) has quit (Ping timeout: 276 seconds)
2019-11-19 14:46:12	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-19 14:50:50	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-19 14:51:50	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-11-19 14:52:47	-->	ytain (~ghfg@45.72.163.143) has joined ##rust
2019-11-19 14:54:09	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-11-19 14:56:15	-->	MechanicalError (~Mechanica@wndson1335w-lp140-01-70-48-211-230.dsl.bell.ca) has joined ##rust
2019-11-19 14:59:35	georgemp_	Hi. Looking at the docs for std::ffi::CString it says CString::new consumes the underlying data. But, code such as this (https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e925cd8d95794857b2c733e5e4ca8610) works.
2019-11-19 14:59:51	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-19 15:00:15	<--	n8chan (~natechan@2600:1702:a20:5610:a92e:eeba:2adb:426e) has quit (Ping timeout: 250 seconds)
2019-11-19 15:00:28	georgemp_	I was expecting when the _c_string goes out of scope, the String data would no longer be valid (as CString would have taken ownership via the slice, and dropped it)...but, that doesn't seem to be the case
2019-11-19 15:00:43	--	georgemp_ is now known as georgemp
2019-11-19 15:01:07	<--	MechanicalError (~Mechanica@wndson1335w-lp140-01-70-48-211-230.dsl.bell.ca) has quit (Ping timeout: 250 seconds)
2019-11-19 15:01:43	j`ey	georgemp: try without the slice
2019-11-19 15:02:08	sfackler	in your code it takes ownership of a slice, which is not the same thing as ownership of the owned String
2019-11-19 15:03:09	j`ey	Im guessing slice must impl Into<Vec> somehow
2019-11-19 15:03:12	georgemp	j`ey: the compiler complains without the slice...as the String has moved into the CString...which i get
2019-11-19 15:03:50	georgemp	hmm...so when i pass in a slice, it is actually doing a copy?
2019-11-19 15:03:52	j`ey	georgemp: as sfackler said, it takes ownership of the slice.. which only has a borrow into the original string
2019-11-19 15:04:37	j`ey	https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-From%3C%26%27_%20%5BT%5D%3E via this
2019-11-19 15:05:31	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-19 15:09:41	georgemp	hmm..if it just takes ownership of the slice, wouldn't the cstring become invalid, when the owned string goes out of scope? (https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4831b2a8dc82cfa27370f2a952cd52d5)
2019-11-19 15:11:45	sfackler	no, it owns the string's data now
2019-11-19 15:11:58	sfackler	the `string` value doesn't exist anymore
2019-11-19 15:15:09	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-19 15:16:06	j`ey	georgemp: in that case youre not using a slice
2019-11-19 15:19:35	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-19 15:20:21	<--	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has quit (Quit: danielparks)
2019-11-19 15:21:49	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-19 15:26:02	-->	physiology (~physiolog@h99.55.139.40.ip.windstream.net) has joined ##rust
2019-11-19 15:26:02	georgemp	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e925cd8d95794857b2c733e5e4ca8610 - this works as well - so, when CString takes ownership of the slice, which borrows from String, does it prevent the underlying String data from being deallocated (since, it has a borrowed slice into it)?
2019-11-19 15:26:44	georgemp	sorry..wrong link
2019-11-19 15:26:46	georgemp	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=65ccd0a2b43d1463d866d2c051fca50b
2019-11-19 15:26:49	-->	naiveaiguy (~root@122.170.175.220) has joined ##rust
2019-11-19 15:27:50	j`ey	georgemp: new data is allocated when you do it from the slice
2019-11-19 15:28:06	naiveaiguy	How can I identify where the "wind-down" time in my program is coming from? I have something that with --release takes milliseconds to print its actual output, then takes a second or so to actually exit despite the next line simply being Ok(()). Presumably this is because of the dispose stuff going on, but I have no custom disposes, so I'm not sure where all this time is coming from. Is there any
2019-11-19 15:28:08	naiveaiguy	good way to identify or at least guess these without just going directly to profiling?
2019-11-19 15:28:36	georgemp	j`ey: got it...thanks :)
2019-11-19 15:30:45	j`ey	georgemp: because of https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-From%3C%26%27_%20%5BT%5D%3E
2019-11-19 15:32:15	<--	physiology (~physiolog@h99.55.139.40.ip.windstream.net) has quit (Ping timeout: 252 seconds)
2019-11-19 15:33:32	georgemp	j`ey: i just got confused between that link and taking ownership of the slice..i think i got it now :)
2019-11-19 15:36:00	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-19 15:36:58	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-19 15:48:00	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-19 15:53:38	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has quit (Ping timeout: 240 seconds)
2019-11-19 15:53:49	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-11-19 15:54:04	naiveaiguy	evalr: enum Test { A, B }; println!("{}, {}, {}", None == None, None == Some(A), Some(A) == Some(B))
2019-11-19 15:54:07	--	Notice(evalr): error[E0425]: cannot find value `A` in this scope
2019-11-19 15:54:09	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=adb79692877b0d55209559caff599f78&version=stable&mode=debug
2019-11-19 15:54:20	naiveaiguy	Well whoops
2019-11-19 15:55:18	j`ey	the None == None probably wouldnt compile
2019-11-19 16:02:02	-->	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has joined ##rust
2019-11-19 16:04:13	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-19 16:07:11	-->	localhorse (uid18992@gateway/web/irccloud.com/x-nykvqpzilnxxqmxa) has joined ##rust
2019-11-19 16:08:37	-->	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has joined ##rust
2019-11-19 16:15:01	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-19 16:15:19	-->	PeterRabbitIsFlu (~peter@2600:6c64:617f:f9e6:b41b:f4c5:3add:5dee) has joined ##rust
2019-11-19 16:18:49	<--	PeterRabbit (~peter@2600:6c64:617f:f9e6:61bd:4680:80d2:345) has quit (Ping timeout: 252 seconds)
2019-11-19 16:19:07	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 16:19:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 16:20:12	Lumpio-	Asking for a friend but has anybody used https://github.com/microsoft/com-rs
2019-11-19 16:20:36	Lumpio-	If I want to implement an existing interface do I have to manually write the #[com_interface]s for all the interfaces I want to implement?
2019-11-19 16:27:01	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-19 16:27:44	<--	kobberholm (~kobberhol@157.230.23.72) has quit (Quit: kobberholm)
2019-11-19 16:28:43	-->	kobberholm (~kobberhol@157.230.23.72) has joined ##rust
2019-11-19 16:28:49	<--	zbrown (sid200994@gateway/web/irccloud.com/x-huvyoamqxwafqpdw) has quit (Quit: Updating details, brb)
2019-11-19 16:32:24	<--	drewr (~drew@elastic/staff/drewr) has quit (Ping timeout: 246 seconds)
2019-11-19 16:43:25	Arnavion	Yes, you have to do the equivalent of bindgen manually
2019-11-19 16:43:57	Arnavion	As they say in the FAQ, they don't yet support automatically generating the types from a .idl
2019-11-19 16:44:35	Arnavion	If you're okay with using winapi instead of that crate, you can use   https://github.com/Arnavion/winapi-tlb-bindgen   (but note that it's no longer maintained)
2019-11-19 16:45:11	Lumpio-	ah, too bad
2019-11-19 16:46:35	-->	drewr (~drew@elastic/staff/drewr) has joined ##rust
2019-11-19 16:46:37	-->	easye (~user@oxi.slack.net) has joined ##rust
2019-11-19 16:46:41	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has left ##rust
2019-11-19 16:47:20	Lumpio-	Would be kind of annoying to write this whole bunch of related interfaces by hand...
2019-11-19 16:48:32	Moongoodboy	naiveaiguy: profiling is best, of course, but I guess you could quickly skim for large or heavy objects in scope that might be the culprit
2019-11-19 16:48:49	Moongoodboy	I think it's likely that the cause won't be that obvious though
2019-11-19 16:49:56	Moongoodboy	la_mettrie: It's valid code. Are you asking about style?
2019-11-19 16:50:45	la_mettrie	Moongoodboy: I had problems with missing parenthesis and i was using ||s for the first time so i suspected that line ...but errors were elsewhere
2019-11-19 16:51:02	la_mettrie	*mismatching
2019-11-19 16:51:12	Moongoodboy	<BeerLover> Box::new() is allocating new memory right? We just have to create a node and point its next to exisisting list
2019-11-19 16:51:58	Moongoodboy	Sounds like the existing list would then get dropped, making the pointer dangle.
2019-11-19 16:52:38	j`ey	Moongoodboy: it was prepend, the existing list was being moved into a box
2019-11-19 16:53:16	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-19 16:53:42	<--	o01eg (~o01eg@2a02:2698:82b:145e:70da:23fd:356e:bea2) has quit (Quit: Leaving)
2019-11-19 16:54:42	-->	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-19 16:54:47	Moongoodboy	e.g. `pub fn prepend(&mut self, value: T) { *self = Node { value, next: self } }` would drop the existing list and make the prepended node have a dangling next pointer
2019-11-19 16:55:07	Moongoodboy	(modulo that you need replace() instead of just `=`, and a couple other similar issues)
2019-11-19 16:55:15	naiveaiguy	If I have a Struct which I intend to be Copy, is there any way to keep a Vec inside of it neatly? Are there immutable data types I can use here? Becuase the only way to have a Vec<Clone> inside of a Copy struct is to use a reference, which I can't.
2019-11-19 16:55:46	j`ey	you cant, no
2019-11-19 16:55:49	naiveaiguy	I don't exactly need interior mutability - I'm making a SearchNode for A* search, in which I need to keep track of the "path" to the current node
2019-11-19 16:55:51	j`ey	why do you need it to be Copy?
2019-11-19 16:56:16	-->	zbrown (sid200994@gateway/web/irccloud.com/x-nxfvmjjfgenkqotz) has joined ##rust
2019-11-19 16:56:19	j`ey	sounds like you could make it CLone quite easily..
2019-11-19 16:57:08	naiveaiguy	Oh yeah
2019-11-19 16:57:12	naiveaiguy	Well I'm an idiot
2019-11-19 16:57:19	-->	n8chan (~natechan@2600:1702:a20:5610:a92e:eeba:2adb:426e) has joined ##rust
2019-11-19 16:57:40	-->	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has joined ##rust
2019-11-19 16:57:47	naiveaiguy	It is a bit messy to do "node.path.clone()" then push onto that new value but what can ya do
2019-11-19 16:58:22	j`ey	*shrug* I cant see how it can be unmessier, apart from implicit stuff
2019-11-19 16:59:03	<--	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 245 seconds)
2019-11-19 17:00:39	-->	rardiol (~quassel@177.52.226.164) has joined ##rust
2019-11-19 17:01:36	dalcde	What is the best way to extend a Vec<u8> by zeros?
2019-11-19 17:02:06	Moongoodboy	`.resize(new_len, 0)`?
2019-11-19 17:02:09	dalcde	I can think of two ways: v.extend(vec![0; n]) and v.resize(n, 0)
2019-11-19 17:02:11	Moongoodboy	err, check the argument order
2019-11-19 17:02:27	dalcde	(or maybe extend_from_slice)
2019-11-19 17:02:29	j`ey	probably resize
2019-11-19 17:02:30	Moongoodboy	resize(), not extend()
2019-11-19 17:02:32	faern	my_vec.extend(0.take(1000))
2019-11-19 17:02:45	faern	sorry. iter::repeat(0).take(1000)
2019-11-19 17:02:53	Moongoodboy	^ this is okay too
2019-11-19 17:03:22	faern	Vec::resize <- TIL. Thanks Moongoodboy :)
2019-11-19 17:03:27	Moongoodboy	but not `.extend(vec![0; _])` because that allocates and copies
2019-11-19 17:03:36	Moongoodboy	faern :3
2019-11-19 17:03:36	faern	And it's been there since 1.5 :O How did I miss?!
2019-11-19 17:03:40	Moongoodboy	xD
2019-11-19 17:03:54	j`ey	just wanna say that dalcde said resize first :P
2019-11-19 17:04:37	Moongoodboy	on my scrollback, I said it 3 seconds before they did
2019-11-19 17:04:38	faern	True. Too excited to read backlog in in correct order.
2019-11-19 17:04:47	dalcde	Moongoodboy also said it first in my scrollback
2019-11-19 17:04:56	faern	Ah, yeah.
2019-11-19 17:05:43	faern	resize vs extend (with cheap iterator) basically comes down to if you have easiest access to the new size, or the number of elements you want to add I guess :)
2019-11-19 17:06:23	faern	extend guarantees you won't accidentally remove elements. It's strictly adding :)
2019-11-19 17:07:02	dalcde	In the context I'm looking at, I want to pass the resulting Vec to a read_exact
2019-11-19 17:07:08	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-19 17:07:25	Moongoodboy	faern: there's a method that does resize() but no-ops instead of removing
2019-11-19 17:07:35	<--	t7 (~tommo@2a00:23c5:1284:fc00:8502:eb65:4249:1ffe) has quit (Ping timeout: 252 seconds)
2019-11-19 17:07:40	Moongoodboy	like the opposite of truncate() wrt resize()
2019-11-19 17:07:49	dalcde	In theory, I could do a v.reserve(n), unsafely edit the length of the vector, and pass a (partially) uninitialized vector to read_exact
2019-11-19 17:07:53	dalcde	But that sounds really dodgy to me.
2019-11-19 17:08:09	j`ey	dont do that :)
2019-11-19 17:08:21	dalcde	I agree
2019-11-19 17:08:23	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Quit: osa1_)
2019-11-19 17:08:49	dalcde	But I don't think it should cause any issues with a correctly implemented Read?
2019-11-19 17:08:57	faern	Yeah really don't resort to unsafety unless you absolutely have to
2019-11-19 17:08:59	naiveaiguy	Wow, I love fighthing closure rules and borrow checker shenanigans. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d19b2e5f85d8ec8e3f5a6e24c5eccec0 - Why here does switch_possibilities need to last any longer than it currently does? And why can't "adj: Region", being a Copy type, simply be cloned here?
2019-11-19 17:09:06	dalcde	(I don't think this part of the code is anywhere near performance critical that I would resort to such monstrosity)
2019-11-19 17:09:41	faern	There are perfectly nice, safe and ergonomical APIs for what you want directly on the type. Why even think about unsafety? :)
2019-11-19 17:09:59	dalcde	What's the right way to do it then?
2019-11-19 17:10:13	faern	resize or extend, like we said above?
2019-11-19 17:10:14	-->	t7 (~tommo@2a00:23c5:1284:fc00:b40b:8119:bfb0:7777) has joined ##rust
2019-11-19 17:10:26	<--	dan2wik (dan2wik@unaffiliated/dan2wik) has quit (Ping timeout: 240 seconds)
2019-11-19 17:10:43	dalcde	Well it zeros the memory before passing to read, which in theory is not necessary.
2019-11-19 17:10:57	dalcde	(just to be clear, I don't think what I wrote previously was a sane thing to do, in almost all circumstances)
2019-11-19 17:11:12	faern	It is. Because even integers are undefined if uninitialized.
2019-11-19 17:11:22	Arnavion	Read isn't necessarily going to initialize all the bytes you gave it either
2019-11-19 17:11:47	Arnavion	So you really don't want to end up with a Vec that has uninitialized bytes
2019-11-19 17:11:59	Arnavion	Just let them be zeroed
2019-11-19 17:12:30	-->	o01eg (~o01eg@2a02:2698:82b:145e:70da:23fd:356e:bea2) has joined ##rust
2019-11-19 17:12:43	dalcde	I thought read_exact requires it to write to all of the entries
2019-11-19 17:12:49	dalcde	(and return an Error if it is unable to do so)
2019-11-19 17:12:57	Arnavion	It can't conjure up bytes that don't exist. It'll return an Err
2019-11-19 17:13:06	faern	Caring about whether or not it writes zeroes or not feels very much like premature optimization
2019-11-19 17:13:11	dalcde	I agree.
2019-11-19 17:13:18	Arnavion	Yes, and then you have the input buffer left in its uninitialized or partially uninitialized state
2019-11-19 17:13:21	dalcde	Which is why I'm not doing it. I'm just thinking about it when bored.
2019-11-19 17:13:29	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 17:14:02	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 17:14:16	-->	dan2wik (dan2wik@unaffiliated/dan2wik) has joined ##rust
2019-11-19 17:16:22	Arnavion	There's no way to have   impl other_crate::Trait for other_crate::SomeStruct<this_crate::SomeType>   without violating coherence, is there? (other_crate is also in my control)
2019-11-19 17:17:01	Arnavion	Apart from making a   this_crate::NewType(other_crate::SomeStruct<this_crate::SomeType>)   , that is
2019-11-19 17:17:07	dalcde	I mean other_crate could have implemented impl<T> other_crate::Trait for other::SomeStruct<T>
2019-11-19 17:17:33	Arnavion	Yeah, I know. It hasn't, and other_crate is in my control as I said, which is why I'm asking
2019-11-19 17:17:56	<--	thyrc (~thyrc@HSI-KBW-091-089-195-145.hsi2.kabel-badenwuerttemberg.de) has left ##rust
2019-11-19 17:20:33	Moongoodboy	<Moongoodboy> faern: there's a method that does resize() but no-ops instead of removing
2019-11-19 17:20:37	Moongoodboy	…isn't there? I don't see it now.
2019-11-19 17:23:25	-->	yiwan (~yiwan@123.159.8.154) has joined ##rust
2019-11-19 17:24:11	<--	danielparks (~danielpar@c-24-21-203-132.hsd1.or.comcast.net) has quit (Quit: danielparks)
2019-11-19 17:24:25	<--	dan2wik (dan2wik@unaffiliated/dan2wik) has quit (Ping timeout: 265 seconds)
2019-11-19 17:25:47	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-19 17:28:47	-->	dan2wik (dan2wik@unaffiliated/dan2wik) has joined ##rust
2019-11-19 17:29:28	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-11-19 17:30:19	<--	n8chan (~natechan@2600:1702:a20:5610:a92e:eeba:2adb:426e) has quit (Ping timeout: 252 seconds)
2019-11-19 17:31:37	-->	Deide (~Deide@90.249.102.37) has joined ##rust
2019-11-19 17:33:06	naiveaiguy	Is Vec::contains O(1) or will I have to use a HashSet if I want O(1) contains?
2019-11-19 17:34:26	sfackler	it is O(n)
2019-11-19 17:34:59	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-19 17:35:38	Moongoodboy	isn't HashSet::contains() not quite `O(1)`?
2019-11-19 17:35:51	Moongoodboy	like `O(log log n)` or something
2019-11-19 17:36:33	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 245 seconds)
2019-11-19 17:36:41	naiveaiguy	Well close enough
2019-11-19 17:36:53	naiveaiguy	Basically I need to know which one's faster cause I do have a Hash type
2019-11-19 17:38:40	jbaublitzzz	Moongoodboy: is this due to collision handling?
2019-11-19 17:38:58	j`ey	naiveaiguy: idk, time it
2019-11-19 17:39:07	naiveaiguy	Fair enough
2019-11-19 17:39:31	Moongoodboy	naiveaiguy: Vec::contains() is O(n); it needs to check every element until it finds it or gets to the end
2019-11-19 17:39:34	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-19 17:40:24	<--	matthias_bgg_ (~mbgg@37.223.145.31) has quit (Quit: Leaving)
2019-11-19 17:40:59	Moongoodboy	in contrast, HashSet::contains() will compute a hash and then jump straight to the position where it should be, and check that plus a few more positions
2019-11-19 17:41:20	Moongoodboy	which is way smaller than n
2019-11-19 17:41:56	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-11-19 17:43:16	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-11-19 17:45:47	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-19 17:46:33	naiveaiguy	Additionally, is there a BinaryHeap that allows you to have a custom compare function, other than by using Ord on the type? I'm asking since the function I'm using this for has information that the individual types in the BinaryHeap do not have, and they need to be compared based on this information
2019-11-19 17:46:54	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-19 17:47:35	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 17:50:17	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-19 17:50:24	Moongoodboy	naiveaiguy: how would you have a compare function that uses more information than the two items being compared?
2019-11-19 17:50:35	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-19 17:50:52	naiveaiguy	Moongoodboy: the two items are passed to me in a closure, so I can use stuff from outside it
2019-11-19 17:51:40	Moongoodboy	if you were to move that closure into a BinaryHeap, it wouldn't be able to capture anything
2019-11-19 17:51:42	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-19 17:55:44	-->	Gustavo6046_ (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-19 17:56:02	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 240 seconds)
2019-11-19 17:56:18	--	Gustavo6046_ is now known as Gustavo6046
2019-11-20 11:04:51	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-20 11:04:51	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-20 11:04:51	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-20 11:04:51	--	Channel ##rust: 624 nicks (2 ops, 0 voices, 622 normals)
2019-11-20 11:05:06	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-20 11:07:06	belst	hi, short question. is it possible to have a conditional type alias? for example: type Foo = if foo { Foo } else { Bar };
2019-11-20 11:07:31	belst	I want to decode a byte buffer but it has a conditional endianess flag, so it would be kinda nice to just set endianess type at the start
2019-11-20 11:07:31	Kinnison	Types need to be resolvable at compile time
2019-11-20 11:07:31	<--	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 250 seconds)
2019-11-20 11:07:42	belst	hmm
2019-11-20 11:07:57	Kinnison	There are byte manipulation crates out there which might help you a bit
2019-11-20 11:08:39	belst	wait, byteorder has functions. I can just alias the functions I think
2019-11-20 11:09:13	belst	ah no
2019-11-20 11:10:03	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-20 11:12:37	-->	Lymee (lymia@magical.girl.lyrical.lymia.moe) has joined ##rust
2019-11-20 11:12:56	<--	Hedgework (HedgeMage@unaffiliated/hedgemage) has quit (Ping timeout: 276 seconds)
2019-11-20 11:14:05	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-11-20 11:14:14	<--	Lymia (lymia@magical.girl.lyrical.lymia.moe) has quit (Ping timeout: 276 seconds)
2019-11-20 11:14:14	--	Lymee is now known as Lymia
2019-11-20 11:15:42	-->	Hedgework (~HedgeMage@unaffiliated/hedgemage) has joined ##rust
2019-11-20 11:16:11	<--	evocatus (~evocatus@24-212-136-59.cable.teksavvy.com) has quit (Ping timeout: 276 seconds)
2019-11-20 11:17:43	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 252 seconds)
2019-11-20 11:20:29	faern	belst: If your condition `foo` is something available at compile time you might be able to do it
2019-11-20 11:20:35	faern	#[cfg(foo)]
2019-11-20 11:20:37	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-20 11:20:40	faern	type Foo = Foo
2019-11-20 11:20:43	faern	;
2019-11-20 11:20:47	faern	#[cfg(not(foo))]
2019-11-20 11:20:49	faern	type Foo = Bar;
2019-11-20 11:21:31	belst	no, it's the first byte in the network response
2019-11-20 11:21:36	belst	so only runtime
2019-11-20 11:22:13	voker57	then you need to create your own type which has variants for both and handle things in runtime
2019-11-20 11:22:19	<--	pedro4 (~pedro4@213.152.161.25) has quit (Quit: Leaving)
2019-11-20 11:22:22	faern	I see. So can't you parse the first byte into, let's say `is_be`. And then `let endianess_fn = if is_be { u32::from_be } else { u32::from_le}; ?
2019-11-20 11:22:32	voker57	trait would work
2019-11-20 11:22:36	belst	yes, that's what I did atm
2019-11-20 11:22:49	belst	seems to work
2019-11-20 11:22:52	-->	pedro4 (sid145515@gateway/web/irccloud.com/x-vnrenwoctcgertjy) has joined ##rust
2019-11-20 11:23:01	faern	Great
2019-11-20 11:26:50	-->	Xatenev (~I@87.190.19.178) has joined ##rust
2019-11-20 11:26:51	<--	yiwan (~yiwan@124.160.218.24) has quit (Remote host closed the connection)
2019-11-20 11:26:56	-->	yiwan_ (~yiwan@123.159.8.154) has joined ##rust
2019-11-20 11:28:56	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-20 11:31:07	-->	thyrc (~thyrc@HSI-KBW-091-089-195-145.hsi2.kabel-badenwuerttemberg.de) has joined ##rust
2019-11-20 11:32:43	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 11:33:03	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 11:36:05	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-20 11:36:26	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 11:36:33	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-20 11:37:33	<--	con3 (~kvirc@154.119.40.183) has quit (Max SendQ exceeded)
2019-11-20 11:38:06	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-20 11:42:56	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-20 11:44:08	<--	lauromoura (~lauromour@2804:7f5:f380:3d36:e0f2:5d1e:5e07:bca8) has quit (Ping timeout: 276 seconds)
2019-11-20 11:52:01	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-20 11:52:30	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-20 11:52:58	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-20 11:53:02	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-20 11:55:47	naiveaiguy	"cargo run > out", I leave it running to check on the output to debug it, I come back and I've literally run out of disk space because the file's 88GB
2019-11-20 11:55:55	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-20 11:56:50	j`ey	naiveaiguy: fun
2019-11-20 11:57:03	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 11:57:16	naiveaiguy	So, in summary, I've incorrectly implemented A* to such an extent that I can't even review where I went wrong
2019-11-20 11:57:21	naiveaiguy	Not my best day, I'll be honest
2019-11-20 11:57:26	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 12:00:50	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-20 12:01:02	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-20 12:01:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 12:02:49	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-20 12:03:30	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 246 seconds)
2019-11-20 12:06:06	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-20 12:07:02	-->	richard_w (~richard@2001:16b8:5081:4501:20fe:2754:692d:9714) has joined ##rust
2019-11-20 12:08:11	OmniMancer	naiveaiguy: you might be running into Drop recursively destroying the Boxes and running out of stack.
2019-11-20 12:08:17	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-20 12:08:28	--	cdown_ is now known as cdown
2019-11-20 12:09:11	richard_w	I have an issue stating relations between traits in my crate: https://pastebin.com/vpY6vX8v
2019-11-20 12:09:49	richard_w	Basically in this example I want every struct implementing Vector to implement Matrix in a specific way
2019-11-20 12:10:05	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 12:10:09	richard_w	Compiler complains with "downstream crates may implement trait `vector::Vector<_>` for type `matrix::SliceMatrix<'_, _>"
2019-11-20 12:10:18	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 245 seconds)
2019-11-20 12:10:28	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 12:11:10	richard_w	This possibility does not make sense at all. Is there some way to tell the compiler that there can only be one valid Matrix implementation for a struct implementing Vector?
2019-11-20 12:11:41	jbg	but you can't be sure of that, because another crate could implement Vector<_> for SliceMatrix<'_, _> (as the note says)
2019-11-20 12:12:44	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 276 seconds)
2019-11-20 12:12:44	richard_w	jbg: I know. Is there some way to eliminate that possibility
2019-11-20 12:13:24	richard_w	Basically right now its impossible to say that B is a subset of A in a concise way using traits
2019-11-20 12:14:13	<--	dXP (uid404260@gateway/web/irccloud.com/x-bgbmszwqmcedwnqb) has quit (Quit: Connection closed for inactivity)
2019-11-20 12:14:36	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-20 12:14:58	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 12:17:22	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-20 12:22:56	cart_man	how will I be able to print this out one by one in a println!()   ... this is what the object looks like when I println!() the entire thing -> https://hastebin.com/rolebufecu.py
2019-11-20 12:24:51	richard_w	cart_man: You're using 'println!("{:?}", obj)', right?
2019-11-20 12:25:28	richard_w	Change it to 'println!("{:#?}", obj)'. It prettifies your output
2019-11-20 12:29:00	jbg	richard_w: it would be useful to see a bit of your code to get some context, but I believe it's happening because of the type parameters.
2019-11-20 12:29:47	jbg	another crate cannot write an impl that's bound only by types in your crate, but since you have the type parameters, they could impl Vector<T> for matrix::SliceMatrix<'_, T> where T is one of their types
2019-11-20 12:30:00	jbg	which would then be a conflicting impl with yours
2019-11-20 12:33:14	jbg	if you're able to tighten up the type parameters somewhat, you may well be able to eliminate the issue
2019-11-20 12:33:35	jbg	without more context it's hard to give specific advice
2019-11-20 12:34:04	cart_man	richard_w: can you see the pirvate chat?
2019-11-20 12:35:18	<--	thyrc (~thyrc@HSI-KBW-091-089-195-145.hsi2.kabel-badenwuerttemberg.de) has left ##rust
2019-11-20 12:35:38	<--	hashworks (~hashworks@unaffiliated/hashworks) has quit (Remote host closed the connection)
2019-11-20 12:36:36	-->	fanta1 (~fanta1@p200300F76BC442001C3966F693005653.dip0.t-ipconnect.de) has joined ##rust
2019-11-20 12:37:01	-->	hashworks (~hashworks@unaffiliated/hashworks) has joined ##rust
2019-11-20 12:38:53	cart_man	richard_w: I prettified it also
2019-11-20 12:39:02	cart_man	richard_w: Just need to know how I can print them one by one
2019-11-20 12:39:12	cart_man	richard_w: Not sure what to do with the OK thing
2019-11-20 12:40:08	<--	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2019-11-20 12:40:17	-->	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has joined ##rust
2019-11-20 12:44:05	<--	pep7 (~pep7@unaffiliated/pep7) has quit (Ping timeout: 246 seconds)
2019-11-20 12:44:30	-->	Ichorio (~Ichorio@2001:16b8:5735:9100:f4:8a4:8331:cbea) has joined ##rust
2019-11-20 12:44:49	-->	rardiol (~quassel@177.52.226.164) has joined ##rust
2019-11-20 12:47:03	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-20 12:53:07	<--	rardiol (~quassel@177.52.226.164) has quit (Ping timeout: 265 seconds)
2019-11-20 12:53:37	jbg	cart_man: look at the docs for the ParseResultList type. there will be some way to get the results from it (perhaps it implements Iterator)
2019-11-20 12:54:48	jbg	cart_man: then you can match each Result, for example if you have the Result from the ParseResultList in parse_result you could do `if let Ok(input) = parse_result { println!("{:?}", input); }`
2019-11-20 12:54:53	-->	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-20 12:55:10	<--	ravenousmoose (~ravenousm@ptr-cud5aqfspvy0frw2gbk.18120a2.ip6.access.telenet.be) has quit (Client Quit)
2019-11-20 13:00:53	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 13:01:32	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 13:02:28	cart_man	jbg: I have no idea how to inplement a Iterator for something. Cant seem to find an example
2019-11-20 13:04:30	<--	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has quit (Quit: brb)
2019-11-20 13:04:50	jbg	is ParseResultList your type or from a library that you're using?
2019-11-20 13:06:38	jbg	if it's from a library, there is no need for you to impl Iterator, it probably already provides a way to iterate over the results in the list.
2019-11-20 13:06:53	jbg	just have a look at the docs for the library
2019-11-20 13:07:56	cart_man	jbg: No its built in house so I have ti implement it
2019-11-20 13:08:34	jbg	i see. well, if you can pastebin / playground some code, i'm happy to help out
2019-11-20 13:09:09	cart_man	jbg: this is the output if I println!("{:#?", x);
2019-11-20 13:09:26	cart_man	https://hastebin.com/jazucixamu.py  jbg
2019-11-20 13:10:10	jbg	cart_man: as I said, if you can pastebin/playground some code, I'm happy to help, but I'd rather not try to guess what your code looks like from Debug output
2019-11-20 13:11:27	jbg	if ParseResultList has a Vec of Results inside it, then you could consider adding a .iter() method that just calls the Vec's .iter()
2019-11-20 13:11:27	cart_man	jbg: OK cool. haha I actually just dont know where to start to copy it to playground
2019-11-20 13:11:51	naiveaiguy	Can anyone see anything wrong with how I'm implementing A* search here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=df59a43d21fe5c3d10a4c044258913a7? I know I've been asking a lot of questions, but holy shit man, am I tired of not knowing what the hell's happening. It seems to be searching through too many things and it just hangs or even segfaults sometimes... I know
2019-11-20 13:11:54	naiveaiguy	it's hella long but I cannot describe how indebted to you I would be if you helped me out
2019-11-20 13:12:02	naiveaiguy	The search is happening in compute_target_path
2019-11-20 13:12:35	jbg	cart_man: or even just iterate over the vec directly. the main thing I need to give more specific help is just the definition of ParseResultList
2019-11-20 13:13:12	<--	blz37 (602d2209@96.45.34.9) has quit (Remote host closed the connection)
2019-11-20 13:13:37	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-20 13:13:38	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-11-20 13:13:57	<--	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-11-20 13:19:35	cart_man	jbg: I think just wirting a simple example that I can easily follow will do the triuck
2019-11-20 13:19:41	netopso	if I have a Guard / ReadGuard/WriteGuard (from a Mutex/RwLock) is there any way to take the internal value out of it and put it in a new Guard of the same type, such that the new Guard results in the original lock being dropped when the new Guard is dropped?
2019-11-20 13:20:34	netopso	for example CHashMap will return a ReadGuard<K, V> but maybe I just want a ReadGuard<V>
2019-11-20 13:20:54	jbg	netopso: what are you trying to do?
2019-11-20 13:24:22	netopso	jbg: create an in interface where the consumer doesn't care if the hap is keyed by a u64 or a String, which means that the method should return a ReadGuard<V> rather than ReadGuard<K, V>... the latter would require specifying the key type (which may be u64 or string) in the signature
2019-11-20 13:24:31	netopso	* map, not hap
2019-11-20 13:25:17	netopso	the ReadGuard then persists as long as the consumer is looking at the value, then permits further access by other threads once the consumer is done with it
2019-11-20 13:26:28	netopso	maybe I have to wrap the ReadGuard in a struct which implements a trait, then consumers call a method on the trait, rather than playing with the ReadGuard directly
2019-11-20 13:27:16	jbg	trait YourReadGuard<V> {} ; impl YourReadGuard<V> for YourReadGuardWrapper<u64, V> {} ; impl YourReadGuard<V> for YourReadGuardWrapper<String, V> {}
2019-11-20 13:27:25	netopso	the wrapper struct would just return a reference to whatever's inside the ReadGuard, and once the wrapper struct is dropped the ReadGuard vanishes as well
2019-11-20 13:27:29	jbg	and add some methods that pass through to the wrapped readguard
2019-11-20 13:27:30	jbg	yeah
2019-11-20 13:28:24	netopso	makes sense sure
2019-11-20 13:28:50	jbg	the ReadGuard from CHashMap is an implementation detail anyway, so it's better not to leak it in your API
2019-11-20 13:29:12	netopso	jbg: indeed, very true
2019-11-20 13:38:37	OmniMancer	naiveaiguy: have you checked if the segfaults go away if you manually use a loop to destroy the nested boxes instead of relying on the drop impl which will recurse for each one effectively?
2019-11-20 13:39:04	naiveaiguy	OmniMancer: I'm not even using boxes anymore... the segfaults just seem to be caused by my search searching through too many things
2019-11-20 13:39:24	naiveaiguy	That's why I'm doubting the implementation details here
2019-11-20 13:41:57	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-20 13:47:24	-->	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has joined ##rust
2019-11-20 13:47:30	-->	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has joined ##rust
2019-11-20 13:47:42	-->	css (~css@unaffiliated/css) has joined ##rust
2019-11-20 13:49:48	OmniMancer	naiveaiguy: is there a particular reason you don't hash the region type or cost?
2019-11-20 13:50:26	naiveaiguy	OmniMancer: Becuase what matters for whether a particular Region is explored is whether we've already visited this region with the same tool as before.
2019-11-20 13:51:04	naiveaiguy	And the region_type is deterministic for a given region, so there's no reason they'd ever be different for the same Region
2019-11-20 13:51:11	-->	lauromoura (~lauromour@2804:7f5:f380:be6e:2563:12c2:4ff:3003) has joined ##rust
2019-11-20 13:52:20	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-20 13:53:22	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-20 13:53:58	OmniMancer	naiveaiguy: what is depth for?
2019-11-20 13:57:54	naiveaiguy	OmniMancer: I mean, if you're *really* curios, here's the problem description: https://adventofcode.com/2018/day/22 and all of the surrounding code: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=de914238401189528d49ee1941d09021. But TL;DR the depth is what's used to deterministically calculate what RegionType any given Region is
2019-11-20 13:59:06	OmniMancer	naiveaiguy: just making sure it isn't meant to be increasing or decreasing or something leading to non termination
2019-11-20 13:59:15	naiveaiguy	OmniMancer: Nope, it's always constant
2019-11-20 13:59:48	<--	coderobe (~rob@archlinux/trusteduser/coderobe) has quit (Read error: Connection reset by peer)
2019-11-20 14:00:21	naiveaiguy	And the field is *technically* infinite, but my idea is that the field shouldn't go too out of the way since a cheaper path will be found before the search goes way too far out in the inifinite space. AFAIK, A* search does work with infinite fields as long as your target is known in advance
2019-11-20 14:00:57	-->	Acru (8082ff7a@e255-122.eduroam.tuwien.ac.at) has joined ##rust
2019-11-20 14:01:00	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-20 14:02:46	richard_w	jbg: Thanks I will try to constrain the type argument. If it doesn't work I will work around this with macros I guess
2019-11-20 14:05:44	Acru	Hey, I have a problem: I want to have a list of structs, which include a reference back to the list, so the full datatype looks like `<Vec<Rc<Job>>` (`Rc` because the jobs have references to each other) Now I want to iterate through the generator, pushing the values unto the list, but the compiler tells me that it can not borrow the data in the RC
2019-11-20 14:05:45	Acru	as mutable, how would I do this properly?
2019-11-20 14:05:58	-->	thyrc (~thyrc@HSI-KBW-091-089-195-145.hsi2.kabel-badenwuerttemberg.de) has joined ##rust
2019-11-20 14:06:26	<--	sammich (~quassel@unaffiliated/mouldysammich) has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2019-11-20 14:07:17	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-20 14:09:28	-->	sammich (~quassel@unaffiliated/mouldysammich) has joined ##rust
2019-11-20 14:09:42	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-20 14:10:25	<--	sammich (~quassel@unaffiliated/mouldysammich) has quit (Read error: Connection reset by peer)
2019-11-20 14:12:42	-->	sammich (~quassel@unaffiliated/mouldysammich) has joined ##rust
2019-11-20 14:12:53	<--	sammich (~quassel@unaffiliated/mouldysammich) has quit (Read error: Connection reset by peer)
2019-11-20 14:13:17	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-20 14:13:18	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-11-20 14:14:10	-->	sammich (~quassel@unaffiliated/mouldysammich) has joined ##rust
2019-11-20 14:17:23	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 245 seconds)
2019-11-20 14:18:59	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-20 14:20:01	-->	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-20 14:24:51	OmniMancer	naiveaiguy: well adding some simple println debugging after making that code run in the playground it seems despite your efforts your search will check nodes it has already explored again.
2019-11-20 14:26:11	Acru	Ok I think I found a part of the issue: how do I modify values in a RC box?
2019-11-20 14:27:37	-->	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has joined ##rust
2019-11-20 14:29:11	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-20 14:29:26	-->	iq (~iq@2600:100e:be10:475:be77:ef10:c062:d40a) has joined ##rust
2019-11-20 14:29:49	-->	coderobe (~rob@archlinux/trusteduser/coderobe) has joined ##rust
2019-11-20 14:30:50	OmniMancer	Acru: put things you want to modify that are in an Rc in Cell or RefCell depending how you want to use them, this provides interior mutability
2019-11-20 14:32:49	Acru	OmniMancer: but with RefCell, isnt the problem that I only have single ownership, so I could not have a reference back to the vector in each element?
2019-11-20 14:32:55	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 250 seconds)
2019-11-20 14:34:51	OmniMancer	Acru: use Rc<RefCell<T>>
2019-11-20 14:35:02	Acru	OmniMancer Ty!
2019-11-20 14:39:38	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-20 14:39:41	<--	eskatrem (~user@UQ036011224009.au-net.ne.jp) has quit (Read error: Connection reset by peer)
2019-11-20 14:41:09	<--	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 250 seconds)
2019-11-20 14:41:46	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 252 seconds)
2019-11-20 14:45:21	<--	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has quit (Ping timeout: 240 seconds)
2019-11-20 14:46:02	<--	naiveaiguy (~root@122.170.175.220) has quit (Ping timeout: 240 seconds)
2019-11-20 14:47:07	<--	simcop2387 (~simcop238@p3m/member/simcop2387) has quit (Quit: ZNC - http://znc.sourceforge.net)
2019-11-20 14:48:14	dreadward	are there any other rust channels more active than this one?
2019-11-20 14:48:26	dreadward	the one on mozilla's irc server is pretty dead, too
2019-11-20 14:49:16	j`ey	discord, if you wanna go there and oftc
2019-11-20 14:49:28	j`ey	mozillas is dead, because mozilla is killing their irc server
2019-11-20 14:50:02	la_mettrie	i think this is pretty active channel
2019-11-20 14:50:04	j`ey	^
2019-11-20 14:50:28	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-20 14:50:34	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-20 14:50:37	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-20 14:50:45	la_mettrie	irc.gimp.net server has another rust channel which is less active but being also there may give you some extra action
2019-11-20 14:51:34	la_mettrie	then there might be channels like #rust.de or #rust.fr or so somewhere... but haven't tried
2019-11-20 14:52:09	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-20 14:52:13	-->	naiveaiguy (~root@122.170.175.220) has joined ##rust
2019-11-20 14:52:38	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-11-20 14:53:45	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-20 14:53:49	-->	JadeJitsu (~JadeJitsu@109.163.233.86) has joined ##rust
2019-11-20 14:54:15	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-11-20 14:54:36	dreadward	j`ey: can't stand discord unfortunately... love irc, no fucking gifs or emojis
2019-11-20 14:54:50	j`ey	then here's the best place, I think
2019-11-20 14:54:54	dreadward	but ok, if you say it's active, it might just be my first impression
2019-11-20 14:55:16	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Remote host closed the connection)
2019-11-20 14:55:17	j`ey	I mean, it's active when people ask questions *shrug*
2019-11-20 14:55:57	dreadward	yeah, alright, i'll stick around
2019-11-20 14:57:38	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-20 14:59:37	<--	simcop2387 (~simcop238@p3m/member/simcop2387) has quit (Quit: ZNC - http://znc.sourceforge.net)
2019-11-20 15:00:02	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 240 seconds)
2019-11-20 15:00:05	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 15:01:38	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-20 15:01:43	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 15:01:53	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-20 15:02:57	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-11-20 15:03:01	georgemp	Hi...i've recently started playing around with rust. As a toy project, I've written this wrapper to libsqlite using FFI. I would appreciate some pointers on how to improve the code/next steps to make it more idiomatic rust.. Thanks
2019-11-20 15:03:03	georgemp	https://gist.github.com/georgemp/0b64574a47c8528aa1e53be36c2469be
2019-11-20 15:04:44	<--	pknull (~pooky@184.103.126.184) has quit (Client Quit)
2019-11-20 15:05:13	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 15:06:17	<--	Remavas (Remavas@gateway/shell/xshellz/x-hpbxjxofnqivytga) has quit (Ping timeout: 250 seconds)
2019-11-20 15:08:18	naiveaiguy	OmniMancer: Huh, that is real weird. I'm inserting them into the explored thing correctly and seemingly checking them correctly as well, I wonder how it's happening here/
2019-11-20 15:12:20	-->	Remavas (Remavas@gateway/shell/xshellz/x-xclviruqlyydkvkr) has joined ##rust
2019-11-20 15:15:36	-->	AbedB__ (~AbedBhuty@bzq-109-65-88-110.red.bezeqint.net) has joined ##rust
2019-11-20 15:18:02	<--	JadeJitsu (~JadeJitsu@109.163.233.86) has quit (Ping timeout: 240 seconds)
2019-11-20 15:18:02	<--	AbedB_ (~AbedBhuty@bzq-109-64-103-78.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-11-20 15:18:12	-->	vmeson (~rmacleod@128.224.252.2) has joined ##rust
2019-11-20 15:19:07	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-20 15:25:38	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-20 15:28:11	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-11-20 15:31:30	-->	tostr (~tostr@unaffiliated/tostr) has joined ##rust
2019-11-20 15:40:08	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-11-20 15:40:51	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-20 15:42:35	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-20 15:44:44	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-20 15:45:23	-->	tostr_ (~tostr@unaffiliated/tostr) has joined ##rust
2019-11-20 15:47:10	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-11-20 15:47:14	<--	tostr (~tostr@unaffiliated/tostr) has quit (Ping timeout: 276 seconds)
2019-11-20 15:50:26	<--	cart_man (~rynot@105.184.22.11) has quit (Ping timeout: 240 seconds)
2019-11-20 15:50:39	<--	ellcs (~mantel@212.12.60.67) has quit (Remote host closed the connection)
2019-11-20 15:56:46	<--	thyrc (~thyrc@HSI-KBW-091-089-195-145.hsi2.kabel-badenwuerttemberg.de) has left ##rust
2019-11-20 15:58:17	<--	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-11-20 15:58:38	-->	AbedB_ (~AbedBhuty@bzq-79-182-62-146.red.bezeqint.net) has joined ##rust
2019-11-20 16:01:08	<--	Ichorio (~Ichorio@2001:16b8:5735:9100:f4:8a4:8331:cbea) has quit (Ping timeout: 245 seconds)
2019-11-20 16:01:19	<--	AbedB__ (~AbedBhuty@bzq-109-65-88-110.red.bezeqint.net) has quit (Ping timeout: 250 seconds)
2019-11-20 16:02:12	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-11-20 16:02:26	<--	sobol (~steve@kauai.gps.caltech.edu) has quit (Quit: leaving)
2019-11-20 16:02:28	<--	AbedB_ (~AbedBhuty@bzq-79-182-62-146.red.bezeqint.net) has quit (Max SendQ exceeded)
2019-11-20 16:02:55	-->	AbedB_ (~AbedBhuty@bzq-79-182-62-146.red.bezeqint.net) has joined ##rust
2019-11-20 16:06:38	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 16:07:17	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 16:12:26	<--	pknull (~pooky@184.103.126.184) has quit (Quit: Departing.)
2019-11-20 16:12:47	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-11-20 16:12:59	-->	sobol (~steve@kauai.gps.caltech.edu) has joined ##rust
2019-11-20 16:16:39	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-20 16:17:37	-->	old_relik (7c7b5062@124.123.80.98) has joined ##rust
2019-11-20 16:19:21	-->	Ichorio (~Ichorio@2001:16b8:5735:9100:21ac:67f8:3b51:21c9) has joined ##rust
2019-11-20 16:21:59	<--	old_relik (7c7b5062@124.123.80.98) has left ##rust
2019-11-20 16:22:39	-->	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has joined ##rust
2019-11-20 16:25:19	-->	localhorse (uid18992@gateway/web/irccloud.com/x-iftjalhajzulrybo) has joined ##rust
2019-11-20 16:25:38	<--	AbedB_ (~AbedBhuty@bzq-79-182-62-146.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-11-20 16:26:34	<--	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has quit (Max SendQ exceeded)
2019-11-20 16:26:50	<--	m0rphism1 (~m0rphism@ufr-132-230-194-115.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-20 16:27:02	-->	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has joined ##rust
2019-11-20 16:27:34	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-20 16:30:45	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-20 16:30:49	<--	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has quit (Max SendQ exceeded)
2019-11-20 16:31:14	-->	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has joined ##rust
2019-11-20 16:32:47	<--	jenny-m (~jdm-@167.100.78.229) has quit (Read error: Connection reset by peer)
2019-11-20 16:32:59	-->	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has joined ##rust
2019-11-20 16:33:38	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-20 16:33:43	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-20 16:34:01	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Quit: osa1_)
2019-11-20 16:34:03	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 245 seconds)
2019-11-20 16:34:04	--	cdown_ is now known as cdown
2019-11-20 16:35:08	<--	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has quit (Max SendQ exceeded)
2019-11-20 16:35:35	-->	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has joined ##rust
2019-11-20 16:38:28	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-11-20 16:38:56	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-11-20 16:39:12	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (Ping timeout: 250 seconds)
2019-11-20 16:39:24	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-11-20 16:39:24	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-20 16:40:20	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-20 16:40:20	<--	simlay (~simlay@gateway/tor-sasl/simlay) has quit (Ping timeout: 260 seconds)
2019-11-20 16:40:20	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Ping timeout: 260 seconds)
2019-11-20 16:40:20	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Ping timeout: 260 seconds)
2019-11-20 16:43:10	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-11-20 16:43:13	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-20 16:43:37	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-11-20 16:44:20	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-20 16:44:57	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-11-20 16:45:34	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-11-20 16:45:57	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-20 16:47:20	<--	upb (~cmpxchg@unaffiliated/upb) has quit (Ping timeout: 268 seconds)
2019-11-20 16:53:25	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-20 16:56:44	TimMc	dreadward: 💥
2019-11-20 16:56:59	j`ey	TimMc: are you the TimMc I know? (from .au)
2019-11-20 16:57:07	TimMc	Can't escape the emoji! (Depending on your installed fonts.)
2019-11-20 16:57:22	TimMc	j`ey: Nope!
2019-11-20 16:58:49	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-20 17:03:37	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-11-20 17:07:10	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-20 17:17:15	-->	bjorn3 (~bjorn3@217-122-122-73.cable.dynamic.v4.ziggo.nl) has joined ##rust
2019-11-20 17:19:32	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-20 17:20:05	-->	bluezone (uid104970@gateway/web/irccloud.com/x-erudwgdflmlmbvzv) has joined ##rust
2019-11-20 17:20:26	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-11-20 17:21:23	naiveaiguy	TimMc: Jokes on you, I removed emojis from my terminal font for exactly this reason. It's just question marks now.
2019-11-20 17:21:45	<--	naiveaiguy (~root@122.170.175.220) has quit (Quit: WeeChat 2.6)
2019-11-20 17:25:26	-->	AbedB_ (~AbedBhuty@bzq-79-181-30-62.red.bezeqint.net) has joined ##rust
2019-11-20 17:25:55	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-20 17:27:35	-->	belak (~belak@encoded/developer/belak) has joined ##rust
2019-11-20 17:28:50	<--	AbedB__ (~AbedBhuty@bzq-79-182-66-78.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-11-20 17:31:04	-->	upb (~cmpxchg@unaffiliated/upb) has joined ##rust
2019-11-20 17:36:27	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-20 17:38:53	<--	_xor (~xor@74.215.46.133) has quit (Remote host closed the connection)
2019-11-20 17:39:01	<--	bjorn3 (~bjorn3@217-122-122-73.cable.dynamic.v4.ziggo.nl) has quit (Quit: Leaving...)
2019-11-20 17:39:12	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-20 17:40:09	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-11-20 17:40:30	<--	css (~css@unaffiliated/css) has quit (Ping timeout: 252 seconds)
2019-11-20 17:48:15	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 246 seconds)
2019-11-20 17:50:24	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-20 17:50:48	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-20 17:54:09	<--	tostr_ (~tostr@unaffiliated/tostr) has quit (Read error: Connection reset by peer)
2019-11-20 17:55:41	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 265 seconds)
2019-11-20 17:55:54	-->	scde (~scde@p5B267B55.dip0.t-ipconnect.de) has joined ##rust
2019-11-20 17:56:38	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-11-20 17:57:25	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-20 17:57:57	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-11-22 08:59:25	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-22 08:59:25	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-22 08:59:25	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-22 08:59:25	--	Channel ##rust: 600 nicks (2 ops, 0 voices, 598 normals)
2019-11-22 08:59:40	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-22 08:59:51	<--	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has quit (Ping timeout: 265 seconds)
2019-11-22 09:05:12	<--	exit70 (~quassel@unaffiliated/exit70) has quit (Remote host closed the connection)
2019-11-22 09:08:34	-->	doublex__ (~doublex@2601:542:c480:6ee0:89e0:f294:6d0e:2f9) has joined ##rust
2019-11-22 09:11:58	<--	doublex_ (~doublex@2601:542:c480:6ee0:983d:f1f8:bd1a:aad9) has quit (Ping timeout: 245 seconds)
2019-11-22 09:17:20	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 09:17:30	wucke13	Can someone provide me an example for the unstable std::slice::Permutations thing?
2019-11-22 09:20:16	Arnavion	There is no such thing as std::slice::Permutations, unstable or otherwise
2019-11-22 09:28:11	-->	scde_ (~scde@p5B267A62.dip0.t-ipconnect.de) has joined ##rust
2019-11-22 09:30:46	-->	featherlessbiped (~cyl@40.86.167.92) has joined ##rust
2019-11-22 09:32:05	featherlessbiped	say I have two objects A: T, B: T, is there a type that can refer to A or B and I can change which it refers to dynamically?
2019-11-22 09:33:44	Arnavion	enum Either<A, B> { A(A), B(B) }
2019-11-22 09:34:14	Arnavion	which you can make yourself, or use the one from   https://docs.rs/either   that impls a bunch of traits already
2019-11-22 09:34:34	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-22 09:35:24	wucke13	Arnavion: oh no, I looked into an old version of the docs. Thank you for pointing that out!
2019-11-22 09:36:28	Arnavion	wucke13: (Note that itertools does have a permutations() for Iterators)
2019-11-22 09:36:56	wucke13	Arnavion: I'm not yet convinced that I'm willing to add a another crate, but thank you for the info
2019-11-22 09:38:13	-->	natarajs (b64b2132@182.75.33.50) has joined ##rust
2019-11-22 09:38:28	featherlessbiped	I was hoping there'd be something in the std lib
2019-11-22 09:38:37	featherlessbiped	Either is for different types right?
2019-11-22 09:39:03	featherlessbiped	I was wondering if there was something like a weak pointer
2019-11-22 09:40:01	featherlessbiped	but like not a pointer
2019-11-22 09:40:47	-->	mxco86_ (~mxco86@cpc151835-shef17-2-0-cust77.17-1.cable.virginm.net) has joined ##rust
2019-11-22 09:46:57	Moongoodenby	Uhhh…`&T`?
2019-11-22 09:47:18	Moongoodenby	…but not a pointer? `T`?
2019-11-22 09:48:44	wucke13	How can I iterate over hashmap.values() using rayon?
2019-11-22 09:48:46	IaMnEwHeRe	featherlessbiped, you mean not a fat pointer? sure raw-pointers but, I have never used them fairly new to this rust thing
2019-11-22 09:49:06	Moongoodenby	Probably not a rawpointer.
2019-11-22 09:50:15	featherlessbiped	I mean with a pointer you can change where the pointer references and change the referent value as well
2019-11-22 09:50:40	Moongoodenby	Yeah?
2019-11-22 09:50:41	featherlessbiped	with a reference you only change the referent value
2019-11-22 09:50:43	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-22 09:50:54	featherlessbiped	but what if I need to change where it references?
2019-11-22 09:51:06	featherlessbiped	or does that defeat the point of references
2019-11-22 09:51:35	-->	ishw0r (~ishw0r@199.247.8.221) has joined ##rust
2019-11-22 09:51:36	featherlessbiped	ok how about an example
2019-11-22 09:51:49	Moongoodenby	You can do that.
2019-11-22 09:52:04	featherlessbiped	say you want to walk a tree from the root to some leaf
2019-11-22 09:52:14	Moongoodenby	evalr: let a = (); let b = (); let mut ref_: &() = &a; ref_ = &b;
2019-11-22 09:52:17	--	Notice(evalr): ()
2019-11-22 09:53:08	-->	CodesInChaos (~cic@unaffiliated/codesinchaos) has joined ##rust
2019-11-22 09:55:04	featherlessbiped	oh neat
2019-11-22 09:55:05	featherlessbiped	thanks
2019-11-22 09:57:05	IaMnEwHeRe	Moongoodenby, what is the () in the annotation? sry just starting out
2019-11-22 09:57:42	<--	transistor (~trans@S01060011329d4e55.vc.shawcable.net) has quit (Ping timeout: 268 seconds)
2019-11-22 09:57:46	Moongoodenby	() is a zero-tuple, also known as unit. It's used when there's no meaningful value.
2019-11-22 09:58:03	Moongoodenby	I used it here because I needed any old type and I was too lazy to declare a struct or something.
2019-11-22 09:59:55	IaMnEwHeRe	ok then I don't understand the logic behind this, what does rustc do when the declaration of a pointer is not meaningful, it must infere the size of the object pointed to somehow? or is that covered by it always using fat pointers by default?
2019-11-22 10:01:16	Moongoodenby	() is a regular type; you can still take references to it and such.
2019-11-22 10:02:43	--	luxio is now known as leonardus
2019-11-22 10:03:11	-->	matthias_bgg (~mbgg@95.169.224.166) has joined ##rust
2019-11-22 10:03:45	-->	pmatos (~pmatos@p5B2DDC23.dip0.t-ipconnect.de) has joined ##rust
2019-11-22 10:04:27	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-11-22 10:05:07	-->	muhlinux (~muhlinux@45.12.220.172) has joined ##rust
2019-11-22 10:05:31	Moongoodenby	evalr: struct Foo {} let a = Foo {}; let b = Foo {}; let mut ref_: &Foo = &a; ref_ = &b;  // same thing but with a custom type
2019-11-22 10:05:51	--	Notice(evalr): ()
2019-11-22 10:05:55	<--	simlay1 (~simlay@gateway/tor-sasl/simlay) has quit (Quit: %bye%)
2019-11-22 10:06:26	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-11-22 10:07:14	IaMnEwHeRe	ok kthanks I will read up on zero-tuple/unit
2019-11-22 10:07:34	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-22 10:11:43	<--	natarajs (b64b2132@182.75.33.50) has quit (Ping timeout: 260 seconds)
2019-11-22 10:11:43	<--	IaMnEwHeRe (~IaMnEwHeR@196.196.244.84) has quit (Quit: Thanks again and 'till next time.....)
2019-11-22 10:16:14	<--	talin (~unknown@unaffiliated/talin) has left ##rust
2019-11-22 10:17:11	<--	_xor (~xor@74.215.46.133) has quit (Remote host closed the connection)
2019-11-22 10:17:18	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-22 10:17:54	<--	yiwan_ (~yiwan@li1558-132.members.linode.com) has quit (Remote host closed the connection)
2019-11-22 10:18:03	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-11-22 10:21:03	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 265 seconds)
2019-11-22 10:22:15	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-22 10:24:51	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-11-22 10:27:26	-->	d33tah (~d33tah@nmap/d33tah) has joined ##rust
2019-11-22 10:27:34	d33tah	hi!
2019-11-22 10:28:00	d33tah	i'm trying to pull a specific package from a git repository into my cargo.toml. i found this: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories
2019-11-22 10:28:51	d33tah	problem is, i need to point Cargo to a specific subdirectory within the repo. is that even possible?
2019-11-22 10:29:39	d33tah	warning: dependency (sentry-actix) specification is ambiguous. Only one of `git` or `path` is allowed. This will be considered an error in future versions
2019-11-22 10:29:42	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-11-22 10:30:45	d33tah	ok, this is promising and quite unintuitive: https://stackoverflow.com/a/46787162/1091116
2019-11-22 10:30:46	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-11-22 10:31:26	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-22 10:33:20	-->	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-11-22 10:34:14	<--	CodesInChaos (~cic@unaffiliated/codesinchaos) has quit (Ping timeout: 252 seconds)
2019-11-22 10:37:00	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-11-22 10:38:08	<--	leonardus (sid358597@orbital/leonardus) has left ##rust
2019-11-22 10:41:18	oherrala	d33tah: is the git repository Cargo workspace?
2019-11-22 10:42:17	oherrala	d33tah: if it is you can do "<crate name> = { git = <repository url> }" where crate name is the crate in cargo workspace
2019-11-22 10:47:29	<--	SergioBZ (~Sergio965@sergio.bz) has quit (Quit: Bye now!)
2019-11-22 10:47:56	d33tah	oherrala: yes, it looks like it worked. i also came to realize that my actual problem was that i was using a too old version of the dependency.
2019-11-22 10:48:04	-->	SergioBZ (~Sergio965@sergio.bz) has joined ##rust
2019-11-22 10:48:21	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-22 10:48:40	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 10:49:13	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Quit: WeeChat 1.9.1)
2019-11-22 10:49:45	-->	yangzq50 (~yzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 10:51:32	<--	ishw0r (~ishw0r@199.247.8.221) has quit (Quit: Bye says Lecter)
2019-11-22 10:53:35	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-11-22 10:54:21	-->	ishw0r (~ishw0r@199.247.8.221) has joined ##rust
2019-11-22 10:54:53	<--	yangzq50 (~yzq50@unaffiliated/yangzq50) has quit (Quit: WeeChat 2.5)
2019-11-22 10:55:08	-->	yangzq50 (~yzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 10:57:11	<--	yangzq50 (~yzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 10:57:27	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 10:57:54	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 11:02:25	<--	ishw0r (~ishw0r@199.247.8.221) has quit (Remote host closed the connection)
2019-11-22 11:05:21	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-22 11:06:43	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-11-22 11:07:00	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 11:07:26	-->	JadeJitsu (~JadeJitsu@109.163.233.83) has joined ##rust
2019-11-22 11:09:16	-->	ishw0r (~ishw0r@199.247.8.221) has joined ##rust
2019-11-22 11:13:12	-->	ClaymorePT_ (~Claymore@188.251.245.88) has joined ##rust
2019-11-22 11:13:24	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Read error: Connection reset by peer)
2019-11-22 11:14:13	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 265 seconds)
2019-11-22 11:16:59	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-22 11:17:51	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 250 seconds)
2019-11-22 11:23:51	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 11:24:21	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 250 seconds)
2019-11-22 11:27:21	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-22 11:31:10	-->	ravenousmoose (~ravenousm@ptr-cud5aqg1u4gw4ydpwxv.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-22 11:32:54	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Quit: WeeChat 2.5)
2019-11-22 11:33:13	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 11:34:48	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 11:35:45	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 11:35:49	<--	ravenousmoose (~ravenousm@ptr-cud5aqg1u4gw4ydpwxv.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-22 11:36:01	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 11:37:44	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-11-22 11:38:46	<--	ishw0r (~ishw0r@199.247.8.221) has quit (Read error: Connection reset by peer)
2019-11-22 11:39:44	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-11-22 11:39:49	-->	ishw0r (~ishw0r@199.247.8.221) has joined ##rust
2019-11-22 11:48:18	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Quit: WeeChat 2.5)
2019-11-22 11:48:57	-->	cdown (~cdown@89.32.122.5) has joined ##rust
2019-11-22 11:53:51	<--	JadeJitsu (~JadeJitsu@109.163.233.83) has quit (Ping timeout: 265 seconds)
2019-11-22 11:53:51	<--	hussam (uid193284@gateway/web/irccloud.com/x-skmtxiuhmwgegewv) has quit (Quit: Connection closed for inactivity)
2019-11-22 11:53:54	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-11-22 11:54:46	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-22 11:57:57	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-11-22 12:01:50	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-11-22 12:04:51	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-11-22 12:14:43	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-11-22 12:16:10	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-22 12:20:13	-->	kubrat (~val@mail.bogda.co.uk) has joined ##rust
2019-11-22 12:21:57	<--	guardian (~guardian@195.68.250.91) has quit (Ping timeout: 240 seconds)
2019-11-22 12:24:52	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-22 12:25:35	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-22 12:29:14	<--	francisv (123080@vetur.ifi.uio.no) has quit (Ping timeout: 240 seconds)
2019-11-22 12:35:26	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-11-22 12:35:43	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 245 seconds)
2019-11-22 12:36:15	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-22 12:37:17	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2019-11-22 12:38:57	<--	nickmass (~nickmass@nickmass.com) has quit (Quit: Quitting)
2019-11-22 12:39:03	-->	JadeJitsu (~JadeJitsu@89.165.130.67) has joined ##rust
2019-11-22 12:40:26	-->	nickmass (~nickmass@nickmass.com) has joined ##rust
2019-11-22 12:41:32	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-22 12:42:57	-->	ravenousmoose (~ravenousm@ptr-cud5aqg1u4gw4ydpwxv.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-22 12:43:20	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-22 12:43:43	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-11-22 12:44:28	<--	francisv (123080@vetur.ifi.uio.no) has quit (Read error: Connection reset by peer)
2019-11-22 12:47:19	<--	ravenousmoose (~ravenousm@ptr-cud5aqg1u4gw4ydpwxv.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 252 seconds)
2019-11-22 12:48:00	--	osa1_ is now known as osa1
2019-11-22 12:49:34	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-22 12:52:16	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-22 12:53:20	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 246 seconds)
2019-11-22 12:54:17	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-22 12:55:55	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-22 13:01:17	<--	segy (~segfault@pdpc/supporter/active/segy) has quit (Ping timeout: 240 seconds)
2019-11-22 13:03:00	-->	segy (~segfault@pdpc/supporter/active/segy) has joined ##rust
2019-11-22 13:03:44	-->	obx (~ubuntu@ec2-3-15-175-115.us-east-2.compute.amazonaws.com) has joined ##rust
2019-11-22 13:03:56	-->	natarajs (6f5dfb92@111.93.251.146) has joined ##rust
2019-11-22 13:12:45	bsdbandit	morning
2019-11-22 13:16:57	-->	hussam (uid193284@gateway/web/irccloud.com/x-vwsxaqmxvbvozusf) has joined ##rust
2019-11-22 13:21:17	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 13:24:13	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-22 13:24:33	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-22 13:26:10	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 265 seconds)
2019-11-22 13:28:02	<--	ClaymorePT_ (~Claymore@188.251.245.88) has quit (Ping timeout: 240 seconds)
2019-11-22 13:29:33	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 265 seconds)
2019-11-22 13:32:57	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 240 seconds)
2019-11-22 13:33:18	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-11-22 13:34:14	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-22 13:38:08	-->	Dr_Jazz (~jazz@stolen.plutonium.dk) has joined ##rust
2019-11-22 13:38:50	-->	murarth_ (~murarth@45.12.220.207) has joined ##rust
2019-11-22 13:39:33	<--	murarth (~murarth@45.12.220.207) has quit (Ping timeout: 250 seconds)
2019-11-22 13:39:34	--	murarth_ is now known as murarth
2019-11-22 13:41:08	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-22 13:57:51	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-22 13:59:38	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-22 14:02:08	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-22 14:03:19	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 14:06:04	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-22 14:06:23	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-11-22 14:07:40	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-11-22 14:08:35	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 276 seconds)
2019-11-22 14:17:34	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-11-22 14:22:52	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 252 seconds)
2019-11-22 14:23:58	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-22 14:24:37	-->	fsasm (~fsasm@193-154-171-234.adsl.highway.telekom.at) has joined ##rust
2019-11-22 14:30:11	-->	localhorse (uid18992@gateway/web/irccloud.com/x-teovujjkdcyopnxw) has joined ##rust
2019-11-22 14:36:26	<--	matthias_bgg (~mbgg@95.169.224.166) has quit (Ping timeout: 240 seconds)
2019-11-22 14:43:59	<--	rardiol (~quassel@177.52.226.74) has quit (Ping timeout: 265 seconds)
2019-11-22 14:50:19	-->	matthias_bgg (~mbgg@95.169.224.182) has joined ##rust
2019-11-22 14:50:53	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-11-22 14:51:24	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Quit: No Ping reply in 180 seconds.)
2019-11-22 14:52:44	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-11-22 14:53:11	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-22 14:54:03	<--	natarajs (6f5dfb92@111.93.251.146) has quit (Ping timeout: 260 seconds)
2019-11-22 14:55:02	jbg	bsdbandit: afternoon
2019-11-22 14:57:30	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 252 seconds)
2019-11-22 15:01:10	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-11-22 15:04:49	<--	matthias_bgg (~mbgg@95.169.224.182) has quit (Ping timeout: 252 seconds)
2019-11-22 15:07:04	-->	jat-kitty (~jat-kitty@2001:16b8:a0fc:5400:a30c:42b1:fb83:7a1f) has joined ##rust
2019-11-22 15:08:46	<--	jat-kitty (~jat-kitty@2001:16b8:a0fc:5400:a30c:42b1:fb83:7a1f) has quit (Client Quit)
2019-11-22 15:37:05	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-22 15:37:10	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Quit: osa1_)
2019-11-22 15:41:23	-->	shakahl (uid57932@gateway/web/irccloud.com/x-equfuotuiqajhkfe) has joined ##rust
2019-11-22 15:56:05	<--	con3 (~kvirc@154.119.40.183) has quit (Ping timeout: 264 seconds)
2019-11-22 15:57:23	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 245 seconds)
2019-11-22 15:57:37	<--	doomba (~npc@slipgate.logbook.pw) has quit (Changing host)
2019-11-22 15:57:37	-->	doomba (~npc@unaffiliated/roomba) has joined ##rust
2019-11-22 15:59:07	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-22 16:04:02	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 16:06:32	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-11-22 16:06:52	-->	transistor (~trans@S01060011329d4e55.vc.shawcable.net) has joined ##rust
2019-11-22 16:07:39	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 16:08:07	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 16:08:30	-->	Eikon (uid405805@gateway/web/irccloud.com/x-kvcnftjpqgnhgejw) has joined ##rust
2019-11-22 16:11:12	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 16:11:38	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 16:12:16	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 16:12:47	-->	yangzq50 (~yangzq50@unaffiliated/yangzq50) has joined ##rust
2019-11-22 16:12:50	<--	yangzq50 (~yangzq50@unaffiliated/yangzq50) has quit (Client Quit)
2019-11-22 16:15:03	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-22 16:16:13	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-22 16:20:26	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 240 seconds)
2019-11-22 16:25:54	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-22 16:26:43	<--	con3 (~kvirc@154.119.40.183) has quit (Max SendQ exceeded)
2019-11-22 16:26:56	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-22 16:27:17	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-22 16:33:11	-->	daex (~daex@49.189.160.84) has joined ##rust
2019-11-22 16:35:33	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-11-22 16:36:06	-->	MechanicalError (~Mechanica@wndson1335w-lp130-01-174-95-25-229.dsl.bell.ca) has joined ##rust
2019-11-22 17:39:31	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-22 17:39:31	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-22 17:39:31	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-22 17:39:31	--	Channel ##rust: 624 nicks (2 ops, 0 voices, 622 normals)
2019-11-22 17:39:46	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-22 17:47:56	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-25 09:14:33	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-25 09:14:33	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-25 09:14:33	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-25 09:14:33	--	Channel ##rust: 614 nicks (2 ops, 0 voices, 612 normals)
2019-11-25 09:14:50	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-25 09:16:15	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 09:16:58	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-11-25 09:17:20	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-25 09:20:10	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 09:20:46	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 09:21:27	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-25 09:22:00	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 09:23:01	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 09:23:38	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-25 09:23:41	Arnavion	Is there a less-hacky way of having docs.rs-hosted docs redirect to (or at least point the user to) self-hosted docs, than the way I came up with in   https://github.com/rust-lang/docs.rs/issues/125#issuecomment-558042176   ?
2019-11-25 09:24:14	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 09:25:07	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 09:31:48	-->	scde (~scde@p5B267A27.dip0.t-ipconnect.de) has joined ##rust
2019-11-25 09:33:03	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 252 seconds)
2019-11-25 09:38:33	<--	nl3dee (~nl3dee@aclermont-ferrand-653-1-4-113.w86-207.abo.wanadoo.fr) has quit (Ping timeout: 265 seconds)
2019-11-25 09:40:38	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-25 09:41:56	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-25 09:44:15	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 09:48:03	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 250 seconds)
2019-11-25 09:49:11	<--	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 265 seconds)
2019-11-25 09:49:22	-->	AbedB_ (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 09:52:34	<--	AbedB__ (~AbedBhuty@bzq-109-66-79-51.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-11-25 09:54:46	elichai2	Hi, Need some help with futures https://play.rust-lang.org/?gist=917b00ea0c752d6fa50f35965d969648 what am I doing wrong?
2019-11-25 09:54:56	elichai2	using futures I feel like a rust newbie again lol
2019-11-25 09:56:03	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-25 09:56:10	Yaniel	I love this sort of type errors
2019-11-25 09:56:23	Yaniel	"expected &&Self, foudn &&Self"
2019-11-25 09:56:33	elichai2	yep :\
2019-11-25 09:56:56	<--	scde (~scde@p5B267A27.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2019-11-25 09:58:17	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Remote host closed the connection)
2019-11-25 09:59:31	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-11-25 10:03:44	Kinnison	Ooh Futures 0.1 :(
2019-11-25 10:04:08	elichai2	yeah...
2019-11-25 10:04:25	elichai2	I can't just go and tear away the code to replace with 0.3
2019-11-25 10:04:26	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-25 10:05:05	-->	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has joined ##rust
2019-11-25 10:05:50	Kinnison	Your problem is that the and_then() uses `self`
2019-11-25 10:05:55	Kinnison	which is effectively &'a
2019-11-25 10:06:02	Kinnison	but the future itself needs to be 'static
2019-11-25 10:06:23	Kinnison	I think
2019-11-25 10:06:47	elichai2	Kinnison: so how `get_stats` works? https://play.rust-lang.org/?gist=34251aa68dd225e1ecb5a11338fb683c
2019-11-25 10:07:07	elichai2	it seems like if it's the root of the future it's fine but if it's in the `and_then` it's not
2019-11-25 10:07:35	elichai2	I might just `.wait()` on everything and return a regular result :\
2019-11-25 10:07:36	Kinnison	is `get()` returning a future?
2019-11-25 10:07:40	elichai2	yes
2019-11-25 10:08:10	elichai2	This is closer to the full code if you want: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=55a2ef35f41fd1e60453397d5d1e4c23
2019-11-25 10:08:16	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-25 10:09:58	elichai2	but here I first need to do some processing (deserialize and encode) and then call the future, so the future must be in an `and_then`
2019-11-25 10:10:43	<--	libertyprime (~libertypr@124.197.60.232) has quit (Ping timeout: 245 seconds)
2019-11-25 10:11:28	Kinnison	If you `move |data| ...` does it help?  Futures 0.1 is painful
2019-11-25 10:11:48	 *	Kinnison tries to find how he did this in his experiments last year
2019-11-25 10:12:31	elichai2	nope, just changes the error to `Expected &Self found &Self`
2019-11-25 10:12:35	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 10:12:35	elichai2	one less reference :)
2019-11-25 10:12:45	Kinnison	heh
2019-11-25 10:12:56	-->	libertyprime (~libertypr@118.149.231.52) has joined ##rust
2019-11-25 10:14:48	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-11-25 10:16:39	Kinnison	Aha, I sledgehammer'd it
2019-11-25 10:16:50	Kinnison	all my structs which implemented my equivalent of your Storage trait were veneers
2019-11-25 10:16:55	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 10:17:03	Kinnison	i.e.
2019-11-25 10:17:13	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-11-25 10:17:17	Kinnison	pub struct MemoryBackend { inner: Arc<Mutex<MemoryBackendInner>> }
2019-11-25 10:17:30	Kinnison	so then all the futures returned via the trait methods simply cloned the arc
2019-11-25 10:17:50	Kinnison	I imagine there's a more elegant way to do it
2019-11-25 10:17:55	Kinnison	but I was very young in my futures code
2019-11-25 10:18:10	elichai2	mine too but I want to implement this in the trait boilerplate itself :\
2019-11-25 10:18:11	<--	kent\n (~kent@gentoo/developer/kentnl) has quit (Ping timeout: 265 seconds)
2019-11-25 10:18:16	elichai2	not in the implementors
2019-11-25 10:18:35	elichai2	can we do `self: Arc<Self>`?
2019-11-25 10:18:44	elichai2	or hmm `Rc`
2019-11-25 10:19:09	elichai2	I guess not https://github.com/rust-lang/rust/issues/55786
2019-11-25 10:19:29	elichai2	wait
2019-11-25 10:19:32	elichai2	it is?
2019-11-25 10:20:28	elichai2	https://github.com/rust-lang/rust/pull/56805
2019-11-25 10:20:54	 *	Kinnison looks at his FS backend and notices so many state machine enums
2019-11-25 10:21:01	Kinnison	I am *so* happy for async blocks
2019-11-25 10:21:50	elichai2	arghh
2019-11-25 10:21:52	elichai2	:\
2019-11-25 10:22:04	elichai2	I guess i'll implement this manually in all implementors?
2019-11-25 10:23:33	-->	m0rphism1 (~m0rphism@tmo-086-19.customers.d1-online.com) has joined ##rust
2019-11-25 10:26:45	 *	Kinnison sobs at old code: https://gitlab.com/kinnison/cassava/blob/master/cassava-storage/src/backends/fs.rs#L131
2019-11-25 10:27:08	Kinnison	that 120 line future poller ought to collapse to maybe 30 lines of async/await code
2019-11-25 10:27:16	Kinnison	Or possibly even less
2019-11-25 10:28:20	-->	kent\n (~kent@gentoo/developer/kentnl) has joined ##rust
2019-11-25 10:30:17	<--	libertyprime (~libertypr@118.149.231.52) has quit (Quit: leaving)
2019-11-25 10:31:38	<--	m0rphism1 (~m0rphism@tmo-086-19.customers.d1-online.com) has quit (Ping timeout: 240 seconds)
2019-11-25 10:42:23	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 245 seconds)
2019-11-25 10:43:05	<--	xeno (~xeno@unaffiliated/xeno) has quit (Remote host closed the connection)
2019-11-25 10:44:28	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 10:49:55	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-25 10:52:22	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-11-25 10:54:22	-->	gierdo (~Dominik_G@185-196-123-10.dynamic.monzoon.net) has joined ##rust
2019-11-25 10:54:52	-->	mtrx (~mtrx@46.114.39.198) has joined ##rust
2019-11-25 10:59:53	-->	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-25 11:02:06	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 246 seconds)
2019-11-25 11:02:59	--	lineus_ is now known as lineus
2019-11-25 11:09:25	<--	mtrx (~mtrx@46.114.39.198) has quit (Ping timeout: 265 seconds)
2019-11-25 11:13:22	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-25 11:13:51	-->	poysh (~poysh@business-90-187-19-49.pool2.vodafone-ip.de) has joined ##rust
2019-11-25 11:20:08	<--	css (~css@unaffiliated/css) has quit (Quit: ChatZilla 0.9.93 [Firefox 56.0/20170929190952])
2019-11-25 11:22:16	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-11-25 11:23:13	-->	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has joined ##rust
2019-11-25 11:23:40	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-11-25 11:28:45	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-11-25 11:38:32	-->	nl3dee (~nl3dee@lfbn-lyo-1-1348-113.w86-207.abo.wanadoo.fr) has joined ##rust
2019-11-25 11:41:55	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-25 11:42:17	<--	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2019-11-25 11:42:57	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-11-25 11:44:46	-->	con3|2 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 11:45:43	<--	con3 (~kvirc@154.119.40.183) has quit (Read error: Connection reset by peer)
2019-11-25 11:53:54	-->	scde (~scde@p5B267A27.dip0.t-ipconnect.de) has joined ##rust
2019-11-25 11:55:43	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-25 11:58:17	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 240 seconds)
2019-11-25 11:58:32	-->	BeerLove_ (~BeerBuddy@103.72.10.137) has joined ##rust
2019-11-25 11:59:12	<--	hussam (uid193284@gateway/web/irccloud.com/x-gsgrbcvjnlcpruhu) has quit (Quit: Connection closed for inactivity)
2019-11-25 11:59:33	<--	meandi3 (~meandi@dyndsl-178-142-248-229.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-11-25 12:00:40	<--	BeerLove_ (~BeerBuddy@103.72.10.137) has quit (Client Quit)
2019-11-25 12:01:37	<--	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 265 seconds)
2019-11-25 12:03:50	-->	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-25 12:04:20	<--	masonl (~masonl@203-219-16-22.tpgi.com.au) has quit (Ping timeout: 276 seconds)
2019-11-25 12:05:48	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 12:06:18	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 12:16:12	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-25 12:16:13	<--	ivan (~ivan@unaffiliated/ivan/x-000001) has quit (Quit: lp0 on fire)
2019-11-25 12:17:13	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (Remote host closed the connection)
2019-11-25 12:17:16	-->	ivan (~ivan@unaffiliated/ivan/x-000001) has joined ##rust
2019-11-25 12:17:55	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-11-25 12:17:57	<--	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 240 seconds)
2019-11-25 12:29:19	--	con3|2 is now known as con3
2019-11-25 12:35:04	-->	Timelord0 (~TL@64-252-202-134.lightspeed.jcsnms.sbcglobal.net) has joined ##rust
2019-11-25 12:37:03	-->	syem_ (~s@unaffiliated/syem) has joined ##rust
2019-11-25 12:37:46	-->	wrmsr (~ubuntu@ec2-54-193-61-240.us-west-1.compute.amazonaws.com) has joined ##rust
2019-11-25 12:39:05	-->	swalladge_ (~swalladge@unaffiliated/swalladge) has joined ##rust
2019-11-25 12:39:22	-->	lifthrasiir_ (~lifthrasi@ec2-52-79-98-81.ap-northeast-2.compute.amazonaws.com) has joined ##rust
2019-11-25 12:39:48	<--	Timelord (~TL@64-252-202-134.lightspeed.jcsnms.sbcglobal.net) has quit (Quit: Bloop.)
2019-11-25 12:39:48	<--	ExoUNX (~ExoUNX@unaffiliated/exounx) has quit (Ping timeout: 240 seconds)
2019-11-25 12:39:48	<--	talchas (~user@c-73-71-82-80.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2019-11-25 12:39:48	<--	lifthrasiir (~lifthrasi@ec2-52-79-98-81.ap-northeast-2.compute.amazonaws.com) has quit (Remote host closed the connection)
2019-11-25 12:39:48	<--	syem (~s@unaffiliated/syem) has quit (Ping timeout: 240 seconds)
2019-11-25 12:39:48	<--	swalladge (~swalladge@unaffiliated/swalladge) has quit (Ping timeout: 240 seconds)
2019-11-25 12:39:48	<--	wrmsr_ (~ubuntu@ec2-54-193-61-240.us-west-1.compute.amazonaws.com) has quit (Ping timeout: 240 seconds)
2019-11-25 12:39:58	-->	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has joined ##rust
2019-11-25 12:41:54	-->	AbedB__ (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 12:42:06	<--	Strom (strom@127-16-191-90.dyn.estpak.ee) has quit (Disconnected by services)
2019-11-25 12:42:08	-->	vanek (~vanek@84-236-44-64.pool.digikabel.hu) has joined ##rust
2019-11-25 12:42:11	vanek	mornign
2019-11-25 12:42:13	vanek	well, afternoon
2019-11-25 12:43:44	-->	twosquared (~twosquare@2001:630:e4:4220:ab95:3685:b1fc:4b15) has joined ##rust
2019-11-25 12:43:59	-->	jacky- (~jacky@unaffiliated/webjadmin) has joined ##rust
2019-11-25 12:44:14	-->	Iolo_ (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has joined ##rust
2019-11-25 12:45:03	-->	lemsip (~emilsp@freenode/staff/emilsp) has joined ##rust
2019-11-25 12:45:59	-->	jnatten (~jn@unaffiliated/jnatten) has joined ##rust
2019-11-25 12:45:59	<--	twosquared (~twosquare@2001:630:e4:4220:ab95:3685:b1fc:4b15) has quit (Client Quit)
2019-11-25 12:46:57	<--	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-25 12:46:57	-->	OlUv (~ubuntu@ec2-13-124-169-156.ap-northeast-2.compute.amazonaws.com) has joined ##rust
2019-11-25 12:47:07	-->	signop1 (~signop@199.180.249.106) has joined ##rust
2019-11-25 12:48:32	<--	Iolo (~iolo@dsl-tkubng22-58c023-38.dhcp.inet.fi) has quit (Excess Flood)
2019-11-25 12:48:32	<--	jacky (~jacky@unaffiliated/webjadmin) has quit (Excess Flood)
2019-11-25 12:48:32	<--	IanMalcolm (~Buster@unaffiliated/ianmalcolm) has quit (Remote host closed the connection)
2019-11-25 12:48:32	<--	emilsp (~emilsp@freenode/staff/emilsp) has quit (Quit: bye)
2019-11-25 12:48:32	<--	natten (~jn@unaffiliated/jnatten) has quit (Quit: No Ping reply in 180 seconds.)
2019-11-25 12:48:32	<--	AbedB_ (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-11-25 12:48:33	<--	OUv (~ubuntu@ec2-13-124-169-156.ap-northeast-2.compute.amazonaws.com) has quit (Ping timeout: 240 seconds)
2019-11-25 12:48:33	<--	signop (~signop@199.180.249.106) has quit (Ping timeout: 240 seconds)
2019-11-25 12:48:33	<--	jeaye (~jeaye@unaffiliated/jeaye) has quit (Ping timeout: 240 seconds)
2019-11-25 12:48:33	<--	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has quit (Ping timeout: 240 seconds)
2019-11-25 12:48:33	--	Iolo_ is now known as Iolo
2019-11-25 12:48:49	--	jacky- is now known as jacky
2019-11-25 12:49:36	-->	mgrech_ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-25 12:50:21	-->	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-25 12:51:20	-->	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has joined ##rust
2019-11-25 12:51:54	-->	jeaye (~jeaye@unaffiliated/jeaye) has joined ##rust
2019-11-25 12:52:30	jbg	elichai2: I have some similar code where I do self: Arc<Self>
2019-11-25 12:53:31	jbg	been a while since i touched that crate, but it doesn't appear to even have an unstable feature flag. project runs on nightly though
2019-11-25 13:00:20	elichai2	cool
2019-11-25 13:00:33	elichai2	need some help. what the heck is "couldn't initialize the libgit2 library: -1"?
2019-11-25 13:00:36	elichai2	https://travis-ci.org/elichai/Test-travis-BE/jobs/616642874#L59
2019-11-25 13:00:40	elichai2	from cargo itself :O
2019-11-25 13:01:00	-->	hussam (uid193284@gateway/web/irccloud.com/x-rgjhzdxxradvwnym) has joined ##rust
2019-11-25 13:02:57	jbg	:(
2019-11-25 13:03:06	jbg	the error code is passed through from git_libgit2_init()
2019-11-25 13:03:09	jbg	but sadly, -1 means "Generic error"
2019-11-25 13:04:32	elichai2	:\
2019-11-25 13:04:44	elichai2	error of what? because of what? where? :\
2019-11-25 13:04:44	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 13:04:54	elichai2	maybe i'll try nightly/beta?
2019-11-25 13:05:32	jbg	from a brief look at that libgit2 function, the error could be passed through from pthreads, the allocator, openssl or a few other things
2019-11-25 13:05:56	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 13:06:12	jbg	perhaps your version of cargo was built against an incompatibly-different version of libgit2/openssl/etc than you're running on that CI box
2019-11-25 13:06:25	jbg	who knows...
2019-11-25 13:07:06	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 13:07:32	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 13:07:56	elichai2	fails also for nightly+beta https://travis-ci.org/elichai/Test-travis-BE/builds/616644926
2019-11-25 13:08:21	-->	johs (sid246410@gateway/web/irccloud.com/x-elsyvrjhikojcyak) has joined ##rust
2019-11-25 13:08:33	<--	johs (sid246410@gateway/web/irccloud.com/x-elsyvrjhikojcyak) has left ##rust
2019-11-25 13:08:56	jbg	seems like environment then, hmm
2019-11-25 13:09:22	elichai2	:\
2019-11-25 13:12:33	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-25 13:12:48	-->	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has joined ##rust
2019-11-25 13:18:12	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 252 seconds)
2019-11-25 13:23:08	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-11-25 13:23:26	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-25 13:24:54	cart_man	can someone please tell me why I get this error ? -> https://hastebin.com/uvavudosoy.m
2019-11-25 13:25:15	-->	silverfix (9ffdb982@159.253.185.130) has joined ##rust
2019-11-25 13:25:27	silverfix	hello
2019-11-25 13:26:12	silverfix	println!("{:?}", value); prints out  [73, 32, 97, 109, 32, 110, 111, 100, 101, 106, 115]. Is there to print out simply the string ?
2019-11-25 13:26:25	jbg	silverfix: what is value? a Vec<u8>?
2019-11-25 13:27:04	silverfix	I don't know :D
2019-11-25 13:27:14	jbg	what you have there is most likely a Vec, array or slice of bytes. (we could be sure if you showed more code)
2019-11-25 13:27:17	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-25 13:27:26	jbg	if you want a "String", you need to decode those bytes using some encoding.
2019-11-25 13:27:41	jbg	there's a good chance that they're encoded in UTF-8 (again, it depends, but without more context let's go with that)
2019-11-25 13:27:53	silverfix	jbg the code is the following https://docs.rs/kafka/0.8.0/kafka/consumer/index.html
2019-11-25 13:28:12	silverfix	I'm just printing one of ms.messages()
2019-11-25 13:28:12	jbg	ah right
2019-11-25 13:28:19	jbg	m is a kafka::consumer::Message
2019-11-25 13:28:26	jbg	its Debug implementation prints the bytes of the message
2019-11-25 13:28:41	silverfix	that is [u8]
2019-11-25 13:28:44	jbg	kafka messages contain arbitrary bytes, nothing guarantees that they are valid UTF-8 or whatever
2019-11-25 13:28:52	jbg	but you have various options for decoding them to a string
2019-11-25 13:29:25	silverfix	I'm producing these data, so that's valid UTF-8
2019-11-25 13:29:34	jbg	String::from_utf8(msg.value) returns a Result<String, FromUtf8Error> which you could unwrap (to panic if it's not valid UTF-8) or handle the error gracefully
2019-11-25 13:30:23	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-25 13:30:30	jbg	there's also String::from_utf8_lossy() which returns a Cow<str> - either borrowing from the input data if it's valid utf8, or copying and replacing invalid sequences with � if there is any invalid utf8
2019-11-25 13:30:49	jbg	and finally, if performance is critical and you are _sure_ it's always going to be valid UTF_8
2019-11-25 13:31:34	jbg	you can use String::from_utf8_unchecked(m.value.to_vec()) which just returns a String without checking if it's valid UTF-8 - doing Very Bad Things(tm) to anyone who subsequently uses that string if it turns out that it wasn't valid UTF-8
2019-11-25 13:32:05	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 276 seconds)
2019-11-25 13:32:15	jbg	i would use either of the first two unless performance is absolutely critical. given that Kafka is involved you most likely have network I/O which will be many times slower than checking UTF-8 validity, so i think one of the first two is most sensible.
2019-11-25 13:32:22	silverfix	jbg wow, how many ways to just print out a string :D
2019-11-25 13:32:30	jbg	well, it's not ways to print a string
2019-11-25 13:32:32	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-25 13:32:32	jbg	you don't have a string
2019-11-25 13:33:02	jbg	you have bytes, and getting from bytes to a string requires you to consider whether those bytes are valid UTF-8
2019-11-25 13:33:12	cart_man	can someone please tell me why I get this error ? -> https://hastebin.com/uvavudosoy.m
2019-11-25 13:34:05	jbg	if you're not actually planning on doing anything with the string other than print it out for debugging purposes, then just do println!(String::from_utf8(msg.value).unwrap())
2019-11-25 13:34:09	dalcde	cart_man: serde = { version = "*", features = ["derive"] }
2019-11-25 13:34:23	dalcde	In Cargo.toml [dependencies]
2019-11-25 13:34:31	silverfix	jbg I'm using from_utf8_lossy and it works very well, thank you so much man
2019-11-25 13:34:42	jbg	great :)
2019-11-25 13:38:08	<--	silverfix (9ffdb982@159.253.185.130) has quit (Remote host closed the connection)
2019-11-25 13:42:02	<--	narispo (~narispo@2a01:e35:2fbc:8b90:705b:bd24:84b5:3cca) has quit (Ping timeout: 246 seconds)
2019-11-25 13:42:20	-->	lauromoura (~lauromour@2804:7f5:f380:fc28:f9a1:edc8:680d:7312) has joined ##rust
2019-11-25 13:43:20	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-11-25 13:43:27	-->	narispo (~narispo@37.172.138.248) has joined ##rust
2019-11-25 13:47:12	<--	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has quit (Remote host closed the connection)
2019-11-25 13:50:04	<--	lauromoura (~lauromour@2804:7f5:f380:fc28:f9a1:edc8:680d:7312) has quit (Remote host closed the connection)
2019-11-25 13:50:06	<--	narispo (~narispo@37.172.138.248) has quit (Ping timeout: 246 seconds)
2019-11-25 13:50:06	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-25 13:50:21	-->	lauromoura (~lauromour@2804:7f5:f380:fc28:f9a1:edc8:680d:7312) has joined ##rust
2019-11-25 13:51:27	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-11-25 13:52:06	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-25 13:57:21	-->	narispo (~narispo@37.172.138.248) has joined ##rust
2019-11-25 13:58:33	<--	lithammer_ (~lithammer@arch-vps.cloud.tilaa.com) has quit (Quit: ZNC - http://znc.in)
2019-11-25 13:58:47	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-25 13:58:59	-->	lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) has joined ##rust
2019-11-25 14:09:34	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-11-25 14:11:57	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-25 14:12:04	--	cdown_ is now known as cdown
2019-11-25 14:16:43	<--	con3 (~kvirc@154.119.40.183) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-11-25 14:18:32	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-25 14:18:51	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-25 14:19:11	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 14:20:02	<--	dmgk (~dg@lucille.syrec.org) has quit (Quit: ZNC - https://znc.in)
2019-11-25 14:20:11	<--	narispo (~narispo@37.172.138.248) has quit (Ping timeout: 276 seconds)
2019-11-25 14:21:34	-->	dmgk (~dg@lucille.syrec.org) has joined ##rust
2019-11-25 14:23:20	-->	narispo (~narispo@37.172.98.152) has joined ##rust
2019-11-25 14:26:06	<--	vanek (~vanek@84-236-44-64.pool.digikabel.hu) has quit (Remote host closed the connection)
2019-11-25 14:33:03	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-11-25 14:34:08	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-25 14:35:36	<--	transistor (~trans@S01060011329d4e55.vc.shawcable.net) has quit (Ping timeout: 246 seconds)
2019-11-25 14:41:25	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-11-25 14:41:51	<--	narispo (~narispo@37.172.98.152) has quit (Ping timeout: 250 seconds)
2019-11-25 14:42:02	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-11-25 14:42:16	-->	narispo (~narispo@37.171.123.215) has joined ##rust
2019-11-25 14:43:58	DTEIT	hi guys...am I doing this wrong? I'm checking if the string returned from a reqwest connection is empty with resp.text()?.as_str().is_empty(), if not empty I then pass it to serde_json which returns the error "EOF while parsing a value"
2019-11-25 14:44:14	<--	f_lost (~lost@197.84.242.3) has quit (Ping timeout: 276 seconds)
2019-11-25 14:44:18	jbg	perhaps the string is not empty, but is not valid JSON
2019-11-25 14:44:42	DTEIT	ah so that error could be from a not valid json string
2019-11-25 14:45:03	DTEIT	thanks, let's try to print it then
2019-11-25 14:45:16	jbg	yup, all the error says is that it hit EOF while it was parsing a value
2019-11-25 14:47:04	DTEIT	uhm...it seems empty
2019-11-25 14:47:16	jbg	did you print the string with {:?}?
2019-11-25 14:47:20	DTEIT	yeap
2019-11-25 14:47:22	jbg	it might look empty to you, but not be empty in reality
2019-11-25 14:47:43	jbg	e.g. contain a space, or even invisible characters
2019-11-25 14:47:53	jbg	if it's really empty as printed with {:?}, let's see your code :)
2019-11-25 14:47:53	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-25 14:48:56	DTEIT	do you need a full working code or just the snippet that covers this?
2019-11-25 14:49:19	jbg	just that bit seems fine
2019-11-25 14:49:37	jbg	but also show the output of println!("{:?}", resp.text()?) or similar
2019-11-25 14:53:30	jbg	brb
2019-11-25 14:55:24	DTEIT	https://pastebin.com/ZzSwVRMG
2019-11-25 14:55:46	DTEIT	I'm pretty new to rust...any improvement will be gladly accepted :)
2019-11-25 14:59:11	<--	andi- (~andi-@NixOS/user/andi-) has quit (Ping timeout: 276 seconds)
2019-11-25 15:00:26	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 15:01:47	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-11-25 15:03:57	-->	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has joined ##rust
2019-11-25 15:05:01	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 15:06:01	<--	con3 (~kvirc@154.119.40.183) has quit (Max SendQ exceeded)
2019-11-25 15:06:08	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-25 15:06:51	-->	talchas` (~user@c-73-71-82-80.hsd1.ca.comcast.net) has joined ##rust
2019-11-25 15:10:07	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-25 15:10:31	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 15:14:25	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-25 15:14:44	Alexendoo	DTEIT: An empty string isn't valid JSON
2019-11-25 15:15:31	DTEIT	Alexendoo: yeah but then I guess the check I'm doing before isn't valid?
2019-11-25 15:18:50	Alexendoo	DTEIT: Oh sorry I missed the !
2019-11-25 15:19:24	Alexendoo	DTEIT: I'm assuming you're using reqwest, what's happening here is .text() consumes the body. So you'll want to store it in a variable the first time you call it
2019-11-25 15:19:26	DTEIT	no worries...TBH I didn't spent too much time checking if that was correct...I went more with the flow :)
2019-11-25 15:19:34	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 252 seconds)
2019-11-25 15:19:41	DTEIT	Alexendoo: ahhh
2019-11-25 15:24:05	DTEIT	ok...weird...so I stored resp.text() but the string seems still to be empty
2019-11-25 15:26:33	Alexendoo	DTEIT: You call .text() in your debug! as well as the serde_json::from_str so make sure to replace both
2019-11-25 15:27:38	DTEIT	Alexendoo: yeah, I changed everything...I stored the String and converting to &str when needed
2019-11-25 15:28:00	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 265 seconds)
2019-11-25 15:28:13	DTEIT	let me add a log even before the check to be sure
2019-11-25 15:28:33	Alexendoo	AFK for a bit
2019-11-25 15:31:17	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-25 15:31:59	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-11-25 15:36:42	<--	daex (daex@gateway/vpn/protonvpn/daex) has quit (Ping timeout: 265 seconds)
2019-11-25 15:37:15	-->	daex (daex@gateway/vpn/protonvpn/daex) has joined ##rust
2019-11-25 15:39:56	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-25 15:41:03	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 265 seconds)
2019-11-25 15:42:33	-->	andi- (~andi-@NixOS/user/andi-) has joined ##rust
2019-11-25 15:45:37	<--	AbedB__ (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-25 15:47:40	-->	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 15:48:06	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-25 15:48:57	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-25 15:49:46	<--	poysh (~poysh@business-90-187-19-49.pool2.vodafone-ip.de) has quit (Remote host closed the connection)
2019-11-25 15:49:59	-->	maleldil (~maleldil@2804:d45:8e87:b300:64df:46f:c7fa:9a5f) has joined ##rust
2019-11-25 15:55:04	<--	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 265 seconds)
2019-11-25 15:55:48	Alexendoo	DTEIT: Did you get it sorted?
2019-11-25 15:56:13	DTEIT	Alexendoo: not yet...I've switched to something else now :)
2019-11-25 15:56:47	DTEIT	but I checked the string as soon as I save it and it's empty
2019-11-25 15:57:12	DTEIT	I'm sure the API with this call returns some data (also the status is 200)
2019-11-25 15:58:54	Alexendoo	Hah fair enough. You can post the updated code again if you want me to take a look. Also seems prudent to mention reqwest has a .json method you can use to skip the text -> serde_json::from_str step
2019-11-25 16:02:10	DTEIT	Alexendoo: yeah, I wanted to check first the status cause I'm running this in a separate thread and wanted to continue when I receive 204 and no text
2019-11-25 16:02:21	DTEIT	not sure if it's possible in another way
2019-11-25 16:03:50	Alexendoo	You can check .status() in that case
2019-11-25 16:05:04	DTEIT	yeah, that would be on the reqwest response...that's what I'm doing
2019-11-25 16:05:38	DTEIT	but because 204 is considered Ok, so I thought I still have to check whether the string is empty or not
2019-11-25 16:07:06	Alexendoo	204 means no content, I don't think it's even allowed to have a response
2019-11-25 16:07:16	Alexendoo	(body)
2019-11-25 16:07:55	Moongoodenby	It's not.
2019-11-25 16:08:49	DTEIT	so would response.json() would return an error when getting 204?
2019-11-25 16:10:04	Alexendoo	Yeah
2019-11-25 16:11:22	DTEIT	uhm...then I guess I could skip all my checks
2019-11-25 16:14:55	<--	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-25 16:15:50	-->	meandi (~meandi@dyndsl-178-142-248-229.ewe-ip-backbone.de) has joined ##rust
2019-11-25 16:16:21	-->	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 16:19:45	-->	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has joined ##rust
2019-11-25 16:19:52	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-25 16:27:27	<--	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-25 16:28:55	-->	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 16:33:01	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-25 16:33:54	--	swalladge_ is now known as swalladge
2019-11-25 16:34:10	<--	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-25 16:35:08	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has quit (Quit: Leaving.)
2019-11-25 16:35:46	-->	bluezone (uid104970@gateway/web/irccloud.com/x-kjdorpdgefzekqas) has joined ##rust
2019-11-25 16:36:06	-->	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 16:41:04	<--	narispo (~narispo@37.171.123.215) has quit (Read error: Connection reset by peer)
2019-11-25 16:41:17	-->	narispo (~narispo@2a01:e0a:2a2:1590:705b:bd24:84b5:3cca) has joined ##rust
2019-11-25 16:47:07	-->	t7 (~tommo@2a00:23c5:1284:fc00:58ea:23f0:3098:a972) has joined ##rust
2019-11-25 16:53:01	-->	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has joined ##rust
2019-11-25 16:57:24	<--	con3 (~kvirc@154.119.40.183) has quit (Read error: No route to host)
2019-11-25 16:57:28	-->	con3|2 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 16:57:37	<--	con3|2 (~kvirc@154.119.40.183) has quit (Client Quit)
2019-11-25 16:57:56	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-25 17:00:48	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 265 seconds)
2019-11-25 17:06:54	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Remote host closed the connection)
2019-11-25 17:09:29	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-11-25 17:11:53	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-25 17:14:13	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-11-25 17:14:18	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has quit (Quit: Leaving.)
2019-11-25 17:14:52	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-11-25 17:16:13	<--	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-11-25 17:17:46	-->	AbedB (~AbedBhuty@bzq-79-180-19-137.red.bezeqint.net) has joined ##rust
2019-11-25 17:21:57	<--	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 240 seconds)
2019-11-25 17:22:54	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 246 seconds)
2019-11-25 17:22:58	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-25 17:25:56	<--	gierdo (~Dominik_G@185-196-123-10.dynamic.monzoon.net) has quit (Ping timeout: 265 seconds)
2019-11-25 17:25:58	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-11-25 17:29:08	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-11-25 17:34:31	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-11-25 17:51:16	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-26 09:34:59	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-26 09:34:59	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-26 09:34:59	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-26 09:34:59	--	Channel ##rust: 617 nicks (2 ops, 0 voices, 615 normals)
2019-11-26 09:35:15	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-26 09:39:35	<--	SiegeLord (~SiegeLord@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2019-11-26 09:40:21	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-26 09:43:14	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 252 seconds)
2019-11-26 09:43:21	<--	tempate (~tempate@unaffiliated/tempate) has quit (Quit: ZNC 1.7.2 - https://znc.in)
2019-11-26 09:43:46	-->	tempate (~tempate@unaffiliated/tempate) has joined ##rust
2019-11-26 09:44:20	<--	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-45-148.dsl.bell.ca) has quit (Ping timeout: 276 seconds)
2019-11-26 09:44:33	-->	localhorse (uid18992@gateway/web/irccloud.com/x-onaqjjgnuxuuoplt) has joined ##rust
2019-11-26 09:48:22	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 252 seconds)
2019-11-26 09:50:32	-->	ragecryx (~ragecryx@62.169.207.124) has joined ##rust
2019-11-26 09:51:28	<--	ragecryx (~ragecryx@62.169.207.124) has quit (Remote host closed the connection)
2019-11-26 09:55:37	-->	hussam (uid193284@gateway/web/irccloud.com/x-czwbjmkeyohspeid) has joined ##rust
2019-11-26 10:10:52	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-26 10:11:51	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-26 10:18:29	phill	Hey guys, i'm making an application to import multiple different file formats and output a common XML format. I want to make it easy for other people to add a new file format with out having to modify the main application code. So I'm thinking have a module folder, then have some way of scanning the module folder for a plugin like hook. I say plugin like, as I'm not too fussed about dynamically loading it, statically loading the 'plugins' at compile time would be
2019-11-26 10:18:29	phill	just fine. Any suggestions?
2019-11-26 10:18:41	phill	Would I use build.rs for this?
2019-11-26 10:21:27	-->	jolav (5a4a79a8@90.74.121.168) has joined ##rust
2019-11-26 10:23:00	<--	jolav (5a4a79a8@90.74.121.168) has left ##rust
2019-11-26 10:25:03	-->	konimex (~koni@c83-250-41-185.bredband.comhem.se) has joined ##rust
2019-11-26 10:34:52	jbg	"scanning the module folder for plugin-like hooks at compile time and building them" sounds like exactly what cargo does
2019-11-26 10:35:23	jbg	why not just have a src/modules directory with {modulename}.rs that contains something implementing a trait or w/e
2019-11-26 10:36:11	jbg	or are you thinking these things would not be written in rust?
2019-11-26 10:38:15	phill	jbg: sure, but wouldn't I need to insert something in to the main application? Basically I want to automate that.
2019-11-26 10:38:48	jbg	you could just have those modules register themselves to your main app somehow
2019-11-26 10:39:44	phill	jbg: but how? What I want to do is just drop a file in the modules folder and then cargo automatically add that...
2019-11-26 10:41:13	phill	I'm a bit of a noob, so may be missing something obvious!
2019-11-26 10:41:24	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-26 10:42:17	jbg	well, you could build something with the inventory crate quite easily, where you put inventory::submit! { ... plugin data ... } at the end of your plugin implementation (this can even be in a different crate) and then you can find all of those in your main application code
2019-11-26 10:42:33	jbg	inventory crate is just one way, there are various ways to do this "plugin registry" idea
2019-11-26 10:42:55	jbg	alternatively if you don't want the plugins to have to explicitly register themselves, i guess you'd need to use build.rs indeed
2019-11-26 10:45:37	phill	I'm happy for the plugins to register themselves. That soubds ideal. I'll look in to the inventory create. Thanks!
2019-11-26 10:46:04	Arnavion	If you're thinking of having build.rs automatically emit `mod` statements for the plugins/*.rs files, note that `mod` statements are resolved relative to the file that defines them
2019-11-26 10:46:37	Arnavion	ie if you have the build script emitting `mod` statements in $OUT_DIR/output.rs (which is include!()'d into src/lib.rs) it won't resolve to the files in src/plugins/ but to files under $OUT_DIR/
2019-11-26 10:48:05	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Remote host closed the connection)
2019-11-26 10:49:35	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-11-26 10:49:57	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-11-26 10:51:50	phill	Thanks jbg inteventory hooks just the job, Arnavion might also be a solution. Will have to play with both!
2019-11-26 10:51:55	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-26 11:00:53	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 268 seconds)
2019-11-26 11:03:17	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 240 seconds)
2019-11-26 11:03:54	-->	rople (rople@gateway/vpn/privateinternetaccess/rople) has joined ##rust
2019-11-26 11:04:43	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-26 11:08:11	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 250 seconds)
2019-11-26 11:10:41	-->	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-11-26 11:20:18	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-11-26 11:22:19	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 265 seconds)
2019-11-26 11:22:52	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-11-26 11:24:17	<--	narispo (~narispo@2a01:e0a:2a2:1590:705b:bd24:84b5:3cca) has quit (Read error: Connection reset by peer)
2019-11-26 11:24:30	-->	narispo (~narispo@37.120.204.10) has joined ##rust
2019-11-26 11:26:17	<--	mgrech_ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has quit (Ping timeout: 240 seconds)
2019-11-26 11:45:36	-->	nevill (~nevill@116.233.242.36) has joined ##rust
2019-11-26 11:48:25	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-11-26 11:51:38	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 11:52:39	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 11:52:40	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 11:53:53	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 11:54:12	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 11:55:08	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Quit: rople)
2019-11-26 11:55:20	localhorse	how can i express this? `fn f<T: Send, F: for<'a> Fn(&'a i32) -> (T + 'a)>(f: F) {}` // error[E0404]: expected trait, found type parameter `T`
2019-11-26 11:57:04	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 252 seconds)
2019-11-26 12:07:05	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-11-26 12:13:17	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (Ping timeout: 240 seconds)
2019-11-26 12:13:52	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-26 12:14:14	la_mettrie	the most beautiful argument i've written so far:
2019-11-26 12:14:16	la_mettrie	((((((255 as f32) -33 as f32))/(rowlength as f32)).ceil() as i16)*(gridvars.char_h+1)) as u32)
2019-11-26 12:15:04	jbg	wow, that is horrible
2019-11-26 12:15:07	jbg	:P
2019-11-26 12:15:11	la_mettrie	it's hilarious that also literal values require conversions
2019-11-26 12:15:22	j`ey	they dont
2019-11-26 12:15:23	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-26 12:15:25	j`ey	255f32 works
2019-11-26 12:15:30	la_mettrie	ok, danke
2019-11-26 12:15:40	jbg	extra points for writing the subtraction in a way that makes it look like a negative number
2019-11-26 12:16:07	<--	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 268 seconds)
2019-11-26 12:16:26	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 276 seconds)
2019-11-26 12:18:06	la_mettrie	wonder why there's architecture dependent functions like  core::arch::x86::_mm_ceil_pd
2019-11-26 12:18:12	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-26 12:18:33	-->	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has joined ##rust
2019-11-26 12:18:39	j`ey	so you can call them if you are certain you need them
2019-11-26 12:19:13	j`ey	or rather, those are intrinsics, all they (should) do is emit a single x85 instruction
2019-11-26 12:20:07	la_mettrie	they're faster so they are beneficial whend writing non-portable code?
2019-11-26 12:20:28	-->	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has joined ##rust
2019-11-26 12:20:29	j`ey	if used properly etc, they can be faster.. sometimes :P
2019-11-26 12:20:32	j`ey	but yeah
2019-11-26 12:20:49	j`ey	you could write several versions of a function using different intrinsics for different targets
2019-11-26 12:21:21	dalcde	255.0 should also work for a float
2019-11-26 12:21:32	jbg	or even 255.
2019-11-26 12:21:55	j`ey	the inference might get it as f64 though
2019-11-26 12:22:12	j`ey	well there's the rowlength as f32, so maybe it'd work
2019-11-26 12:23:13	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3a3a284c87a950c2fd09a4c4bea8b4f0 yeah, seems to be fine
2019-11-26 12:23:51	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-26 12:29:22	konimex	is there any way to compile rustc without libgcc_s? using "llvm-libunwind = true" in config.toml somehow results in "error: could not find native static library `unwind`" eventhough -lunwind doesn't return any errors
2019-11-26 12:41:14	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Quit: "Fascism, Nazism, Communism and Socialism are only superficial variations of the same monstrous theme—collectivism." -- Ayn Rand)
2019-11-26 12:48:03	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-11-26 12:52:11	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (Ping timeout: 276 seconds)
2019-11-26 12:54:50	-->	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has joined ##rust
2019-11-26 13:00:22	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-26 13:10:39	<--	tempate (~tempate@unaffiliated/tempate) has quit (Quit: ZNC 1.7.2 - https://znc.in)
2019-11-26 13:11:26	-->	tempate (~tempate@unaffiliated/tempate) has joined ##rust
2019-11-26 13:28:40	dalcde	Suppose I had a function fn f(x : T) -> S, and I had an Option<T>. Is there an ergonomic way to get an Option<S>, sending Some(x) to Some(f(x)) and None to None?
2019-11-26 13:28:58	dalcde	(that is, is Option a functor?)
2019-11-26 13:29:25	dalcde	Currently I cheat with (||{ Some(f(x?)) })()
2019-11-26 13:29:28	dalcde	Which is awful
2019-11-26 13:29:36	dalcde	I can also do a proper pattern match but that's more verbose
2019-11-26 13:29:59	jbg	your_option.and_then(your_fn)
2019-11-26 13:30:39	jbg	oh wait, your fn doesn't return an option
2019-11-26 13:30:44	jbg	your_option.map(your_fn)
2019-11-26 13:31:32	jbg	(the place to look for that would have been the docs of the Option enum: https://doc.rust-lang.org/std/option/enum.Option.html
2019-11-26 13:31:51	dalcde	of course...
2019-11-26 13:31:53	jbg	specifically https://doc.rust-lang.org/std/option/enum.Option.html#method.map )
2019-11-26 13:33:56	-->	con3 (~kvirc@154.119.40.183) has joined ##rust
2019-11-26 13:36:25	-->	mexen (~mexen@165.56.2.2) has joined ##rust
2019-11-26 13:46:27	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-11-26 13:50:27	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-11-26 13:50:59	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-26 13:52:46	georgemp	Hi, I have a struct with a large number of fields for which I would like to impl Default. While for most fields, the defaults are fine, there is one field of type String, which I would like to default to something other than an empty string. Is this possible outside of a) define fn default, instead of deriving, wherein I have to manually enter default values for all fields during init, b) Have a
2019-11-26 13:52:48	georgemp	custom type which encloses a string, and give this custom type a new default value?
2019-11-26 13:53:53	georgemp	for a) I'd be entering a lot of default values manually, which i'd like to avoid. on b) I would then have to create custom types for each struct type that has this field..say employer(id: String), employee(id: String)
2019-11-26 13:54:38	j`ey	can you make the type not a String?
2019-11-26 13:54:43	j`ey	aka make a newtype
2019-11-26 13:54:45	vorner	There's some crate that provides alternative derive(Default) which can be modified on per-field basis by attributes. I don't remember the exact name, though. Maybe something like default-derive or default-more.
2019-11-26 13:54:50	j`ey	oh you said that
2019-11-26 13:56:14	georgemp	j`ey: i'd then have to create types employee_id, employer_id etc, all of which would just be newtypes for String
2019-11-26 13:56:21	georgemp	vorner: let me try to find that
2019-11-26 13:57:01	j`ey	georgemp: it's not a bad thing though
2019-11-26 13:57:10	j`ey	I mean, an employee_id isnt really just a String is it
2019-11-26 13:57:16	j`ey	it's a String with a specific format
2019-11-26 13:58:04	Yaniel	or even a Vec<u8>
2019-11-26 13:58:50	jbg	or a uuid::Uuid
2019-11-26 13:59:12	georgemp	j`ey: true
2019-11-26 14:02:34	georgemp	but, that exmaple was contrived...my actual model is around the reddit api which gives me json Account {kind: "t5",....}, Subreddit {kind: "t2",...}. So, I was modelling these as struct Account {kind: &'static str, } and defaulting kind to t5
2019-11-26 14:02:46	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Remote host closed the connection)
2019-11-26 14:02:52	georgemp	perhaps not the right way to go about modelling the data this way either
2019-11-26 14:03:08	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-26 14:03:43	georgemp	here, "kind" is always a constant for each Data type
2019-11-26 14:04:59	Yaniel	well in that case you *are* dealing with Strings
2019-11-26 14:05:27	Yaniel	because of json limitations (unless you have a more detailed specification of the api)
2019-11-26 14:05:36	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-26 14:06:12	georgemp	Yaniel: yes, they are strings whcih have a constant value..for all instances of that particular type
2019-11-26 14:08:27	georgemp	i guess i could give the rust struct a private field, derive from Default, and in in pub fn new() {Account{kind: "t5", ..Default::default()}..
2019-11-26 14:08:37	Aorimn	I'd convert this string asap in an enum, and during this conversion, you can default the empty string to the t5 enum type
2019-11-26 14:09:34	jbg	serde supports deserialising using a `kind` inside the type doesn't it?
2019-11-26 14:09:40	jbg	internally-tagged or some-such
2019-11-26 14:10:14	jbg	you might be able to get the things returned by reddit deserialised directly into enum struct-variants by serde
2019-11-26 14:10:18	jbg	using that `kind`
2019-11-26 14:10:50	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 276 seconds)
2019-11-26 14:10:55	jbg	https://serde.rs/enum-representations.html#internally-tagged
2019-11-26 14:11:26	jbg	and i guess you could use https://serde.rs/variant-attrs.html#rename to give them better names in Rust than t2, t5, etc
2019-11-26 14:12:51	-->	JadeJitsu (JadeJitsu@gateway/vpn/protonvpn/jadejitsu) has joined ##rust
2019-11-26 14:14:58	-->	iq (~iq@2600:1000:bf0a:33a:40b7:afc6:2854:c4fa) has joined ##rust
2019-11-26 14:15:48	georgemp	jbg: interesting..i didn't know that. I guess I would then have something like a enum RedditType { Subreddit{}, Account{}}..
2019-11-26 14:21:11	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-26 14:22:14	dalcde	georgemp: Why isn't kind an enum?
2019-11-26 14:23:55	georgemp	dalcde: on reflection, it probably should be..
2019-11-26 14:26:08	dalcde	If it is a &'static str, it means you probably know all supported possibilities when writing the code.
2019-11-26 14:26:55	dalcde	And enum makes it throws an error when parsing if the string is invalid instead of further down the road.
2019-11-26 14:27:45	georgemp	dalcde: that's true...let me change this to an enum..thanks :)
2019-11-26 14:28:39	<--	timemage (~timemage@unaffiliated/timemage) has quit (Quit: .)
2019-11-26 14:29:28	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-26 14:35:59	<--	nevill (~nevill@116.233.242.36) has quit (Read error: Connection reset by peer)
2019-11-26 14:38:30	guzzlefry	Say I'm doing this: `let v1 = vec![1, 2, 3]; for val in v1 {}`. Is v1.iter() implicitly called?
2019-11-26 14:39:51	sfackler	v1.into_iter() is called
2019-11-26 14:46:42	<--	nl3dee (~nl3dee@lfbn-lyo-1-1348-113.w86-207.abo.wanadoo.fr) has quit (Ping timeout: 246 seconds)
2019-11-26 14:56:55	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-26 14:57:33	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 14:57:37	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 14:57:57	georgemp	so, i just realized that even after changing kind to an enum from &'static str, I still have the same issue for Default. The Account struct will need a different default from the Subreddit struct...
2019-11-26 15:00:39	-->	ilmu (ilmu@gateway/shell/c-base/x-uvnsmkxstqhypwjc) has joined ##rust
2019-11-26 15:02:06	<--	murarth (~murarth@45.12.220.213) has quit (Ping timeout: 246 seconds)
2019-11-26 15:02:31	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-11-26 15:03:37	<--	m0rphism1 (~m0rphism@ufr-132-230-194-41.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-11-26 15:03:38	-->	ammar (~ammar@li269-36.members.linode.com) has joined ##rust
2019-11-26 15:04:34	<--	ammar (~ammar@li269-36.members.linode.com) has left ##rust
2019-11-26 15:06:09	jbg	if you use my suggestion of one enum with different variants for the different things reddit can return to you, as indicated by their `kind` field and automatically deserialised that way by serde, you might be able to make something quite ergonomic using one of the various "extended Derive" crates
2019-11-26 15:06:57	jbg	i'm not sure about a crate that does defaults for enum variants, but you could use for example derive_new, which lets you tag either `default` or explicit default values on fields of enum variants
2019-11-26 15:07:22	jbg	with derive_new you'd get something like RedditType::new_account(.. the fields that you didn't provide defaults for ..)
2019-11-26 15:07:25	jbg	not sure if it works in your case or not
2019-11-26 15:07:48	georgemp	jbg: i was playing around with that..but, hit a block with the Listing subtype...which would include the other types like Account, Subreddit as child members
2019-11-26 15:08:09	jbg	ah. yeah, enum variants aren't types (yet, or maybe ever)
2019-11-26 15:08:18	jbg	so you wouldn't be able to represent that nicely
2019-11-26 15:09:32	jbg	hang on
2019-11-26 15:09:36	jbg	why do you have the `kind` field at all?
2019-11-26 15:09:50	jbg	in your Account, Subreddit, etc structs
2019-11-26 15:10:53	georgemp	while deserializing, i don't...while serializing to json, i would need to include it..i could get by probably by implementing a custom serializer for each type, but was trying to avoid that as well :)
2019-11-26 15:12:12	jbg	it appears the Serde docs might be out of date, because this PR was merged: https://github.com/serde-rs/serde/pull/1448
2019-11-26 15:12:23	jbg	almost a year ago, so presumably it's found its way into a release
2019-11-26 15:12:38	jbg	it should allow you to write #[serde(tag="t5")] on Account
2019-11-26 15:13:15	jbg	sorry, tag="kind", content="t5"
2019-11-26 15:13:59	jbg	then you can leave the field out
2019-11-26 15:14:51	georgemp	that sounds perfect..let me try that :)
2019-11-26 17:00:17	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-26 17:00:17	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-26 17:00:17	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-26 17:00:17	--	Channel ##rust: 626 nicks (2 ops, 0 voices, 624 normals)
2019-11-26 17:00:32	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-11-26 17:00:33	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-26 17:01:35	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-11-26 17:04:53	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 245 seconds)
2019-11-26 17:05:56	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:07:14	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:08:36	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Max SendQ exceeded)
2019-11-26 17:08:55	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:09:56	-->	Arcaelyx (~Arcaelyx@138.88.94.92) has joined ##rust
2019-11-26 17:10:17	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 240 seconds)
2019-11-26 17:15:19	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:17:37	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (Ping timeout: 240 seconds)
2019-11-26 17:18:39	-->	Coldblackice|2 (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:18:41	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 250 seconds)
2019-11-26 17:20:26	sgt_disco	guys and gals, I still feel really dumb. I tested and this doesn't actually change the directory, although I am not getting an error, and the Path seems to be displaying fine. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=79209792afbafbf9356878d6242155fd
2019-11-26 17:21:22	jbg	after env::set_current_dir() finishes, the process exits
2019-11-26 17:21:30	jbg	and the current working directory is an attribute of the process
2019-11-26 17:22:23	jbg	if a process's cwd affected its parent process, that would make it quite difficult to use e.g. a shell, unless every process was well-behaved and remembered to set it back before exiting :)
2019-11-26 17:22:36	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Ping timeout: 268 seconds)
2019-11-26 17:22:43	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-11-26 17:23:12	sgt_disco	that is very sensible
2019-11-26 17:23:31	jbg	`cd` is a shell builtin, it changes the cwd of bash (or whatever shell you are using)
2019-11-26 17:24:08	sgt_disco	so I have to call a sh script to actually accomplish changing the shell working directory?
2019-11-26 17:24:29	jbg	i am not aware of a way to change the working directory of the shell process that ran your rust executable
2019-11-26 17:24:38	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:24:54	<--	Coldblackice|2 (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 17:25:11	<--	LargeEpsilon (~LargeEpsi@166.165.79.83.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 276 seconds)
2019-11-26 17:25:20	jbg	i mean, gdb can do it, so i suppose you can do it, probably with root privileges. but it's likely that whatever you are trying to do is better done another way
2019-11-26 17:25:34	jbg	than changing the cwd of another process
2019-11-26 17:26:20	jbg	even if you run `sh -c "cd /"` from Rust , all you will do is start a shell, change *that shell*'s working directory to /, and then the shell will exit and nothing will have changed
2019-11-26 17:26:46	jbg	what are you trying to achieve, at a higher level?
2019-11-26 17:27:15	sgt_disco	that makes sense with what has been going on with my builds. I am essentially just trying to make a rust version of this:  https://hackage.haskell.org/package/teleport
2019-11-26 17:28:10	jbg	it says "A tool to quickly switch between directories". what does it actually do?
2019-11-26 17:28:11	sgt_disco	this does use a separate sh file to accomplish the actual directory changing
2019-11-26 17:28:15	sgt_disco	so
2019-11-26 17:29:01	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (Read error: Connection reset by peer)
2019-11-26 17:29:03	sgt_disco	the compiled binary would be named teleport. I would call "teleport -a mydir" which would add the cwd to a list
2019-11-26 17:29:23	jbg	ah, i found the github repo which has an explanation of what it does
2019-11-26 17:29:26	sgt_disco	then i would simply type "teleport mydir" and then I would cd to that saved directory
2019-11-26 17:29:32	jbg	yeah, they built it in two parts
2019-11-26 17:29:39	jbg	so the haskell part just stores the teleport points
2019-11-26 17:29:58	jbg	and there's a shell wrapper which does the cd-ing
2019-11-26 17:30:32	jbg	so you can write your program in Rust, but then run it via a shell wrapper which passes through all the commands except `goto`, which it rewrites to `cd $(your-rust-program get teleportname)` or whatever
2019-11-26 17:30:50	jbg	that works because the shell wrapper runs in the shell process itself, rather than in another process
2019-11-26 17:31:13	jbg	they explain it a bit here: https://bollu.github.io/teleport/
2019-11-26 17:32:34	<--	lauromoura (~lauromour@2804:7f5:f380:fc28:f9a1:edc8:680d:7312) has quit (Ping timeout: 252 seconds)
2019-11-26 17:34:58	sgt_disco	thank you for your patience jbg, I understand how I have to approach it now
2019-11-26 17:35:06	jbg	np!
2019-11-26 17:36:35	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-26 17:38:22	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 17:38:57	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-26 17:40:32	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:40:40	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-26 17:41:12	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-26 17:42:44	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 276 seconds)
2019-11-26 17:43:23	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Max SendQ exceeded)
2019-11-26 17:44:07	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:44:48	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-11-26 17:45:25	<--	narispo (~narispo@37.120.204.10) has quit (Ping timeout: 268 seconds)
2019-11-26 17:45:29	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 17:45:48	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:46:35	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 246 seconds)
2019-11-26 17:46:37	Arnavion	phill: I didn't give you a solution. What I gave you is a problem that you'll encounter.
2019-11-26 17:47:48	Arnavion	phill: My point is that if you want to also include source files under src/plugin/*.rs, you can't just emit mod statements from your build script and expect them to work
2019-11-26 17:48:25	Arnavion	phill: At the very least you'll have to emit #[path] attributes on those with absolute paths based on $CARGO_MANIFEST_DIR , or accept that the plugin author will have to change src/lib.rs of your crate to add a mod statement for their new file
2019-11-26 17:48:37	-->	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:48:46	<--	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 17:49:22	<--	Coldblackice_ (c@gateway/vpn/privateinternetaccess/coldblackice) has quit (Read error: Connection reset by peer)
2019-11-26 17:49:28	-->	Coldblackice (c@gateway/vpn/privateinternetaccess/coldblackice) has joined ##rust
2019-11-26 17:50:18	Arnavion	phill: That is orthogonal to using inventory or whatever to register some value inside that module into a global list without changing the rest of the crate's code. You'll still need that (or again, accept that the plugin author will have to change the crate's source code to add their plugin to some specific list)
2019-11-26 17:51:50	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Ping timeout: 276 seconds)
2019-11-26 17:52:26	-->	lauromoura (~lauromour@2804:7f5:f380:fc28:989a:88da:ce0b:ddc7) has joined ##rust
2019-11-26 17:52:30	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-11-26 17:52:57	-->	LargeEpsilon (~LargeEpsi@178.197.226.155) has joined ##rust
2019-11-26 17:53:16	-->	murarth (~murarth@45.12.220.213) has joined ##rust
2019-11-27 09:05:18	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-27 09:05:18	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-27 09:05:18	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-27 09:05:18	--	Channel ##rust: 620 nicks (2 ops, 0 voices, 618 normals)
2019-11-27 09:05:34	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-27 09:07:08	-->	x1ddos (~x1ddos@2a02:aa12:a682:7500:228:f8ff:fef9:5033) has joined ##rust
2019-11-27 09:07:57	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2019-11-27 09:15:31	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-27 09:17:06	<--	x1ddos (~x1ddos@2a02:aa12:a682:7500:228:f8ff:fef9:5033) has quit (Ping timeout: 252 seconds)
2019-11-27 09:21:08	<--	Ichorio_ (~Ichorio@2001:16b8:5793:a200:d4ef:6f6a:6273:cb9d) has quit (Ping timeout: 245 seconds)
2019-11-27 09:21:21	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-27 09:24:21	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-27 09:31:26	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-27 09:34:35	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-11-27 09:35:37	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-27 09:36:36	-->	narispo (~narispo@2a01:e35:2fbc:8b90:dd57:f429:13ea:e6be) has joined ##rust
2019-11-27 09:46:44	-->	Ichorio (~Ichorio@2001:16b8:5793:a200:8d9c:c6c7:8e6:b402) has joined ##rust
2019-11-27 09:47:59	<--	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2019-11-27 09:48:13	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-11-27 09:52:58	<--	libertyprime (~libertypr@client-173-151.guest.otago.ac.nz) has quit (Ping timeout: 268 seconds)
2019-11-27 09:53:28	-->	binu (~b.paulmon@h-62.96.154.15.host.de.colt.net) has joined ##rust
2019-11-27 09:59:18	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-27 09:59:54	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-27 10:02:43	<--	binu (~b.paulmon@h-62.96.154.15.host.de.colt.net) has quit (Quit: leaving)
2019-11-27 10:07:41	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-27 10:15:20	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-11-27 10:18:53	<--	hussam (uid193284@gateway/web/irccloud.com/x-czwbjmkeyohspeid) has quit (Quit: Connection closed for inactivity)
2019-11-27 10:21:52	-->	ign0tus (~mani@p200300C27F065D00E6B318FFFE897010.dip0.t-ipconnect.de) has joined ##rust
2019-11-27 10:24:00	-->	muhlinux (~muhlinux@45.83.91.19) has joined ##rust
2019-11-27 10:25:11	-->	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has joined ##rust
2019-11-27 10:26:41	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-11-27 10:27:17	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-pcvyvrovplfybwyf) has quit (Read error: Connection reset by peer)
2019-11-27 10:27:24	cart_man	What is the point of Box<Errors>
2019-11-27 10:27:27	cart_man	Box errors
2019-11-27 10:27:34	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-vxvapreopkyjuxoa) has quit (Remote host closed the connection)
2019-11-27 10:27:35	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-hveulazbkpfttvwf) has quit (Write error: Connection reset by peer)
2019-11-27 10:27:45	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (Remote host closed the connection)
2019-11-27 10:27:45	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-bnzswvifwhelhxjg) has quit (Write error: Broken pipe)
2019-11-27 10:27:46	<--	Ericson2314 (ericson231@gateway/shell/matrix.org/x-cunqxwzrefgupvne) has quit (Write error: Connection reset by peer)
2019-11-27 10:27:47	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-subqzbkziikdomll) has quit (Remote host closed the connection)
2019-11-27 10:28:26	Kinnison	Box<dyn std::error::Error> is handy because it's effectively a generic error type
2019-11-27 10:30:35	cart_man	Kinnison: Ohh ok but how does one name it then? Or do you hst match it for a Box Error and write random panic!() message there??
2019-11-27 10:31:09	Kinnison	I'd typically only recommend it at levels of an *app* where you're just going to end up formatting that error for display and exiting
2019-11-27 10:31:15	Kinnison	Libraries shouldn't use it really
2019-11-27 10:39:10	-->	libertyprime (~libertypr@118.149.169.32) has joined ##rust
2019-11-27 10:39:54	-->	AbedB_ (~AbedBhuty@45.56.154.56) has joined ##rust
2019-11-27 10:41:57	<--	mgrech_ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has quit (Ping timeout: 246 seconds)
2019-11-27 10:42:22	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-11-27 10:43:30	<--	AbedB__ (~AbedBhuty@bzq-79-179-11-21.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-11-27 10:46:55	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-27 10:49:04	-->	bunbunbunbunny (~Christoph@unaffiliated/vlvx) has joined ##rust
2019-11-27 11:00:08	<--	bsingharora (~balbirs@193.119.63.162) has quit (Ping timeout: 276 seconds)
2019-11-27 11:00:19	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Read error: Connection reset by peer)
2019-11-27 11:01:38	jbg	cart_man: you can still match for specific errors in the Box<dyn std::error::Error>, using Error::downcast_ref()
2019-11-27 11:02:07	jbg	so your application could have slightly different error handling for different types of errors beyond just panic!()
2019-11-27 11:02:29	jbg	though if you needed different error handling, i'd say that was an argument for a slightly more sophisticated approach to error handling than Box<std::error::Error>
2019-11-27 11:02:39	jbg	dyn*
2019-11-27 11:04:00	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 246 seconds)
2019-11-27 11:05:48	-->	AbedB__ (~AbedBhuty@104.194.218.107) has joined ##rust
2019-11-27 11:08:16	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-27 11:09:01	<--	AbedB_ (~AbedBhuty@45.56.154.56) has quit (Ping timeout: 250 seconds)
2019-11-27 11:10:51	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-27 11:11:59	<--	bunbunbunbunny (~Christoph@unaffiliated/vlvx) has quit (Quit: Lost terminal)
2019-11-27 11:12:14	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Read error: Connection reset by peer)
2019-11-27 11:14:43	<--	pedro4 (~pedro4@213.152.162.154) has quit (Quit: Leaving)
2019-11-27 11:14:50	-->	bsingharora (~balbirs@193.119.63.162) has joined ##rust
2019-11-27 11:15:42	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-11-27 11:18:33	<--	Strom (strom@127-16-191-90.dyn.estpak.ee) has quit (Remote host closed the connection)
2019-11-27 11:19:47	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-11-27 11:24:19	<--	libertyprime (~libertypr@118.149.169.32) has quit (Quit: leaving)
2019-11-27 11:24:26	belst	hello, I was wondering if someone knew of a command line parsing library for rust that has a feature like parse_config_file from boost program options
2019-11-27 11:24:42	<--	bsingharora (~balbirs@193.119.63.162) has quit (Ping timeout: 252 seconds)
2019-11-27 11:25:55	belst	In po I basically create 3 options_descriptions (prompt, config, all) where all = all.add(prompt).add(config)
2019-11-27 11:27:11	belst	does sth like this already exist for rust or do I have to do it manually?
2019-11-27 11:29:05	jbg	i haven't used boost program_options in years, but have you had a look at the `clap` crate?
2019-11-27 11:29:14	-->	t7 (~tommo@2a00:23c5:1284:fc00:85d4:80f4:90ae:5deb) has joined ##rust
2019-11-27 11:29:15	jbg	it has numerous ways to define your options
2019-11-27 11:29:31	jbg	not sure if it's what you're looking for or not
2019-11-27 11:29:32	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-11-27 11:29:39	belst	yes but clap only does command line parsing
2019-11-27 11:30:18	belst	It's really convenient in program options to just generate the help message and everything, and then be able to either use a config file or cli options
2019-11-27 11:30:34	belst	it's good if u want to test stuff via cli and then use a config for a more permanent configuration or so
2019-11-27 11:30:52	<--	LargeEpsilon (~LargeEpsi@247.68.194.178.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 265 seconds)
2019-11-27 11:32:14	jbg	yeah. clap doesn't have a one-liner for that or anything, but it's easy to do it
2019-11-27 11:33:09	jbg	instead of calling App::get_matches() which looks to env::args_os, you can use App::get_matches_from() and pass in args, which you could have brought in from a config file
2019-11-27 11:33:40	jbg	although i'd probably go the other way, and have clap update a struct which has been deserialised from a config file
2019-11-27 11:33:56	jbg	anyway, yeah, it's not very batteries-included for this use case
2019-11-27 11:35:32	belst	What I'm missing is some kind of way to specify some options only per command line. For example, it doesnt make sense to have a config or help argument in a config file
2019-11-27 11:39:04	-->	AbedB_ (~AbedBhuty@bzq-79-179-11-21.red.bezeqint.net) has joined ##rust
2019-11-27 11:39:53	-->	bsingharora (~balbirs@193.119.63.162) has joined ##rust
2019-11-27 11:41:53	-->	pedro4 (~pedro4@213.152.162.15) has joined ##rust
2019-11-27 11:42:23	<--	AbedB__ (~AbedBhuty@104.194.218.107) has quit (Ping timeout: 245 seconds)
2019-11-27 11:43:25	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-joxlxrpbahbjnwts) has joined ##rust
2019-11-27 11:43:25	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-cxyfgnobhlcqpass) has joined ##rust
2019-11-27 11:43:26	-->	Ericson2314 (ericson231@gateway/shell/matrix.org/x-kbtqngctuxiwjcip) has joined ##rust
2019-11-27 11:43:26	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-11-27 11:43:26	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-xckozlknusbrzeyb) has joined ##rust
2019-11-27 11:43:26	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-11-27 11:43:26	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-jaadtrhoxmgzoqsh) has joined ##rust
2019-11-27 11:43:27	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-nfwxxnfimrrnxzaw) has joined ##rust
2019-11-27 11:44:48	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-11-27 11:50:07	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-27 11:50:12	jbg	yup. i would have a struct representing my config, deserialize that from the config file, and then update it from `clap`
2019-11-27 11:51:02	jbg	clap handles --help etc internally so that't not an issue
2019-11-27 11:52:22	-->	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has joined ##rust
2019-11-27 11:56:22	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-27 11:57:16	belst	yes, but what If I want the config struct to also be available as command line options?
2019-11-27 11:57:42	jbg	that's literally what i just said
2019-11-27 11:57:49	jbg	so you have your config file, you deserialise it into a struct
2019-11-27 11:58:00	jbg	and then you update those values from clap (which is a command line argument parser)
2019-11-27 11:58:15	belst	ah yes, sorry misready
2019-11-27 11:58:17	belst	-y
2019-11-27 11:58:19	jbg	:)
2019-11-27 11:58:42	belst	hmm, but how would I add a --config cli option then
2019-11-27 11:59:03	belst	because I'd need to use clap, parse config, then parse cli options again
2019-11-27 12:00:00	jbg	clap's api shouldn't make that too bad
2019-11-27 12:00:27	jbg	parse the args, use the config arg to deserialise the config file, then update the config struct using the rest of the args
2019-11-27 12:00:31	jbg	you'll only need to parse once
2019-11-27 12:00:59	belst	but that way I have to mark everything optional in my config struct
2019-11-27 12:01:01	belst	or give it defaults
2019-11-27 12:01:22	belst	otherwise if I only have --config specified on the commandline clap will error already
2019-11-27 12:01:24	jbg	yep
2019-11-27 12:01:27	-->	lineus_ (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-27 12:01:29	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Remote host closed the connection)
2019-11-27 12:02:11	jbg	well, no, the error if you left them non-optional and undefaulted would be upon deserialisation
2019-11-27 12:02:16	jbg	if they're left out of the config file
2019-11-27 12:02:37	jbg	you'll also have to make all command-line args optional, at least if --config is specified, when configuring clap
2019-11-27 12:03:08	jbg	you may be able to avoid duplicating config options between the struct and the clap configuration by using something like the structopt crate
2019-11-27 12:04:04	belst	well the cli options are a strict superset of the config options. U can basically set everything via config except config and help
2019-11-27 12:04:19	jbg	yup
2019-11-27 12:04:39	jbg	but since you deserialise first, by the time clap gets to updating the config struct, everything must have some value, even if it's None or a default value
2019-11-27 12:05:06	jbg	which is the value it will keep if the argument wasn't specified on the command line
2019-11-27 12:05:23	ign0tus	Can you recommend a tool for checking test case coverage?
2019-11-27 12:05:31	jbg	(which is, i think, normally the expected behaviour -- config file gets applied first, command line arguments override the config file if provided)
2019-11-27 12:06:23	jbg	ign0tus: i've used grcov with success
2019-11-27 12:08:11	ign0tus	Thanks. I'll take a look.
2019-11-27 12:08:27	belst	ign0tus: I use once but never for anything complicated
2019-11-27 12:08:32	belst	kcov*
2019-11-27 12:09:25	belst	but grcov looks better tbh
2019-11-27 12:27:40	-->	Althorion (~althorion@83.220.98.69) has joined ##rust
2019-11-27 12:33:15	<--	Althorion (~althorion@83.220.98.69) has quit (Quit: Leaving)
2019-11-27 12:36:12	-->	forgottenone (~forgotten@176.88.101.247) has joined ##rust
2019-11-27 12:45:16	-->	Althorion (~althorion@83.220.98.69) has joined ##rust
2019-11-27 12:45:18	<--	Ichorio (~Ichorio@2001:16b8:5793:a200:8d9c:c6c7:8e6:b402) has quit (Ping timeout: 245 seconds)
2019-11-27 12:47:19	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Read error: Connection reset by peer)
2019-11-27 12:49:59	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-11-27 12:54:00	<--	rardiol (~quassel@177.52.226.74) has quit (Ping timeout: 265 seconds)
2019-11-27 12:56:02	<--	Strom (strom@127-16-191-90.dyn.estpak.ee) has quit (Remote host closed the connection)
2019-11-27 12:56:42	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-27 13:00:03	jbg	what's a nice pattern for mapping an option through an async fn?
2019-11-27 13:00:46	jbg	i often find myself writing `let mapped_option = match option.as_ref() { Some(v) => Some(an_async_fn(v).await?), None => None };`
2019-11-27 13:00:49	jbg	which is obviously a bit gross
2019-11-27 13:03:48	<--	Althorion (~althorion@83.220.98.69) has quit (Quit: Leaving)
2019-11-27 13:06:34	<--	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2019-11-27 13:06:49	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-11-27 13:09:22	-->	localhorse (uid18992@gateway/web/irccloud.com/x-klhvsqgsapyvlwgi) has joined ##rust
2019-11-27 13:09:22	<--	localhorse (uid18992@gateway/web/irccloud.com/x-klhvsqgsapyvlwgi) has quit (Changing host)
2019-11-27 13:09:22	-->	localhorse (uid18992@unaffiliated/boscop) has joined ##rust
2019-11-27 13:09:22	<--	localhorse (uid18992@unaffiliated/boscop) has quit (Changing host)
2019-11-27 13:09:22	-->	localhorse (uid18992@gateway/web/irccloud.com/x-klhvsqgsapyvlwgi) has joined ##rust
2019-11-27 13:11:10	-->	LargeEpsilon (~LargeEpsi@247.68.194.178.dynamic.wline.res.cust.swisscom.ch) has joined ##rust
2019-11-27 13:13:23	<--	lineus_ (~lineus@gateway/tor-sasl/lineus) has quit (Remote host closed the connection)
2019-11-27 13:15:43	georgemp	when using serde to deserialize json received from a rest http source (not very well documented), I sometimes see null in the json instead of an actual value. I could set all the fields in my struct to Option<>, but, would rather avoid that. Currently, I am using serde-aux and putting #[serde(deserialize_with = "deserialize_default_from_null")] on each struct field.
2019-11-27 13:15:45	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-27 13:16:13	georgemp	This works, but, is there a way to do this on the struct container level (instead of peppering my strcut field defintiions with this attribute).
2019-11-27 13:16:19	belst	jbg: oof, I'd say write an Extension Trait for Option which has something like an async_map. but you can't have async in traits yet
2019-11-27 13:17:29	belst	well there is the async_trait crate, maybe that would do it
2019-11-27 13:21:16	jbg	belst: that's a nice idea. doesn't have to be written as an `async fn` anyway, i can just return impl std::future::Future and then i don't need to use async_trait.
2019-11-27 13:22:29	belst	you can't really return an Option<Future<...>> though, must be Future<Option<T>> because otherwise you have the same problem as before
2019-11-27 13:22:42	jbg	it would be a Future<Output=Option<U>>
2019-11-27 13:22:44	jbg	which makes sense
2019-11-27 13:23:18	jbg	and usage would be option.async_map(async_fn).await
2019-11-27 13:26:44	-->	dbohdan (~dbohdan@unaffiliated/dbohdan) has joined ##rust
2019-11-27 13:29:00	la_mettrie	18 errors from one line, that's my new record (SDL_Line command coordinate start & end points as arguments)
2019-11-27 13:29:12	la_mettrie	(conversion errors)
2019-11-27 13:39:06	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-11-27 13:45:57	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-27 13:46:59	jbg	huh, that .async_map() extension trait is quite difficult to implement without boxing the future :)
2019-11-27 13:47:50	jbg	your option is either None, which means you can return future::ready(None), or Some, in which case you need to return the future returned by the closure, mapped through Some
2019-11-27 13:48:37	jbg	so you can use future::Either, but your return type includes the type of the closure, but every closure has a unique type
2019-11-27 13:49:37	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-27 13:49:45	belst	yeah, I'm currently trying myself
2019-11-27 13:49:58	jbg	implementing Fn for a type is still unstable right?
2019-11-27 13:50:01	belst	tons of core::pin::Pin<Box<dyn Future<Output=U>>> stuff
2019-11-27 13:50:15	jbg	well, i think the implementation is quite simple if you're ok with returning a Pin<Box<>>
2019-11-27 13:50:24	jbg	but i'm not really OK with async_map() involving boxing the future, i would be using this all over the place
2019-11-27 13:51:06	jbg	i think with the ability to implement Fn for a type, I can give a concrete type for the parameter of future::Map and it would work without boxing
2019-11-27 13:51:12	jbg	but i think maybe there's no way to do it on stable Rust without boxing?
2019-11-27 13:52:38	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-11-27 13:56:26	jbg	unless i'm missing something silly. the return type ends up being `Either<Map<Fut, Fun>, Ready<Option<U>>> where Fut: Future<Output = U>, Fun: Fn(Fut::Output) -> Option<U>`
2019-11-27 13:58:12	jbg	but when you try to map through Some, you get "expected type parameter `Fun`, found fn item"
2019-11-27 14:00:51	jbg	`impl Fn ...` would solve this, but can't be used in the return type of a method in a trait
2019-11-27 14:08:34	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-11-27 14:12:38	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-11-27 14:14:29	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 276 seconds)
2019-11-27 14:16:38	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-27 14:17:24	-->	Mateon3 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-11-27 14:17:44	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 276 seconds)
2019-11-27 14:18:35	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 265 seconds)
2019-11-27 14:18:35	--	Mateon3 is now known as Mateon1
2019-11-27 14:25:51	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-27 14:26:34	<--	auscompgeek (aucg@firefox/community/auscompgeek) has quit (Quit: rebooting...)
2019-11-27 14:26:58	jbg	ah, of course, i can use `&'static dyn Fn(Fut::Output) -> Option<U>` and then map though &Some
2019-11-27 14:27:02	jbg	belst: https://gist.github.com/jbg/2eb3f05250f90186bd1ebe0e2449f260
2019-11-27 14:29:18	belst	nice
2019-11-27 14:29:43	jbg	the implementation is a bit ugly, could probably be improved by extracting some of that type mess out into type aliases
2019-11-27 14:29:47	jbg	but, no allocations
2019-11-27 14:29:50	jbg	and quite nice to use
2019-11-27 14:30:43	belst	yeah, just hide all the uglyness in some library and then u only see the nice usage :)
2019-11-27 14:36:52	<--	forgottenone (~forgotten@176.88.101.247) has quit (Read error: Connection reset by peer)
2019-11-27 14:40:44	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-11-27 14:46:33	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-27 14:53:32	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-27 14:55:49	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-27 14:58:17	-->	hussam (uid193284@gateway/web/irccloud.com/x-ibjtyojfnjpvjxhi) has joined ##rust
2019-11-27 15:01:08	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 245 seconds)
2019-11-27 15:03:04	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-27 15:18:13	<--	jinie_ (~jimmy@188.114.159.27) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-11-27 15:19:03	<--	yshui (~yshui@79.173.173.4) has quit (Ping timeout: 245 seconds)
2019-11-27 15:20:37	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-11-27 15:31:06	<--	jenny-m (~jdm-@167.100.78.229) has quit (Remote host closed the connection)
2019-11-27 15:35:39	<--	libertyprime (~libertypr@124.197.60.232) has quit (Read error: No route to host)
2019-11-27 15:42:51	-->	forgottenone (~forgotten@176.88.101.247) has joined ##rust
2019-11-27 15:43:09	<--	forgottenone (~forgotten@176.88.101.247) has quit (Client Quit)
2019-11-27 15:43:13	-->	jenny-m (~jdm-@2605:8d80:6e0:4f98:6078:dccc:49df:4cba) has joined ##rust
2019-11-27 15:46:35	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-11-27 15:51:07	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 250 seconds)
2019-11-27 15:58:18	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-11-27 15:58:35	jbg	hm, i wonder if you could `impl Future<Output = Option<O>> for Option<F> where F: Future<Output = O>`
2019-11-27 15:58:48	jbg	then you could just await the option
2019-11-27 15:59:13	jbg	ah, no, only stdlib could do that
2019-11-27 16:00:49	belst	isn't there a FutureOption or so in the futures crate?
2019-11-27 16:01:14	belst	OptionFuture
2019-11-27 16:01:16	jbg	oh, very nice
2019-11-27 16:01:48	jbg	creates a Future<Output=Option<T>> from an Option<Future<Output=T>> via into()/from()
2019-11-27 16:01:51	jbg	very nice
2019-11-27 16:04:06	belst	so basically instead of opt.async_map(async_fn).await you'd have to write opt.map(async_fn).into::<OptionFuture<_>>().await
2019-11-27 16:04:52	jbg	yeah, in that particular case it's perhaps nicer to use my async_map, but it might be nicer in other cases
2019-11-27 16:05:20	jbg	i tend to use From::from(), e.g. OptionFuture::from(opt.map(async_fn)) rather than using the turbofish
2019-11-27 16:05:24	<--	narispo (~narispo@2a01:e35:2fbc:8b90:dd57:f429:13ea:e6be) has quit (Quit: Quit)
2019-11-27 16:05:32	-->	narispo (~narispo@2a01:e35:2fbc:8b90:dd57:f429:13ea:e6be) has joined ##rust
2019-11-27 16:05:52	<--	pavelz (~pavel@unaffiliated/pavelz) has quit (Ping timeout: 246 seconds)
2019-11-27 16:06:02	jbg	a bit easier to read
2019-11-27 16:07:39	belst	hmm imo with the postfix .await syntax I tend to like the turbofish more, since you can just read left to right then
2019-11-27 16:07:58	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-11-27 16:10:24	<--	libertyprime (~libertypr@124.197.60.232) has quit (Client Quit)
2019-11-27 16:13:14	-->	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has joined ##rust
2019-11-27 16:15:06	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-27 16:17:11	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-27 16:17:20	<--	nevill (~nevill@116.233.242.36) has quit (Quit: nevill)
2019-11-27 16:17:51	-->	Hi-Angel (~Hi-Angel@91.192.73.236) has joined ##rust
2019-11-27 16:18:32	Hi-Angel	How do I run a binary installed with `cargo install`? I'm trying `cargo run flamegraph`, but it says "error: could not find `Cargo.toml` in `/tmp` or any parent directory"
2019-11-27 16:19:05	jbg	they get put in ~/.cargo/bin/ (if you haven't customised paths and you're on linux/macos/etc)
2019-11-27 16:19:14	belst	if ~/.cargo/bin is in your path you can just run `flamegraph`
2019-11-27 16:19:17	jbg	if that's on your $PATH then you can just run them
2019-11-27 16:19:22	jbg	snap :)
2019-11-27 16:19:41	Hi-Angel	Thanks, okay, but how do I use the "cargo run" command to make cargo do that for me?
2019-11-27 16:19:46	jbg	that's not what cargo run is for
2019-11-27 16:20:08	jbg	cargo run is for when you're inside a cargo project and you want to run the binary
2019-11-27 16:20:23	Hi-Angel	Oh. Thanks.
2019-11-27 16:21:28	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-11-27 16:24:33	<--	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has quit (Remote host closed the connection)
2019-11-27 16:28:40	-->	t8 (~tommo@2a00:23c5:1284:fc00:68f4:fa15:40e4:c2c1) has joined ##rust
2019-11-27 16:31:14	<--	t7 (~tommo@2a00:23c5:1284:fc00:85d4:80f4:90ae:5deb) has quit (Ping timeout: 252 seconds)
2019-11-27 16:36:01	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-11-27 16:41:41	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Quit: osa1_)
2019-11-27 16:45:27	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-11-27 16:49:44	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-11-27 16:49:58	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-27 16:50:55	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-11-27 16:50:57	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Client Quit)
2019-11-27 16:51:11	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-27 16:55:19	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Client Quit)
2019-11-27 16:55:26	-->	_Vi (~vi@vi-server.org) has joined ##rust
2019-11-27 16:56:53	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-27 16:57:25	guzzlefry	Do iterator adaptors run in parallel?
2019-11-27 16:57:30	elichai2	I totally blacked out on the name of the bot here
2019-11-27 16:57:59	jbg	guzzlefry: not automaticall, it would be surprising and unpleasant for the standard library to create threads without being asked to
2019-11-27 16:58:04	jbg	guzzlefry: but check out the `rayon` crate
2019-11-27 16:58:34	jbg	elichai2: you mean evalr ?
2019-11-27 16:58:42	elichai2	yesss. thank you! lol
2019-11-27 17:01:08	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Client Quit)
2019-11-27 17:03:48	-->	JotaEme_Linuxuse (~JotaEme_L@233.85-85-99.dynamic.clientes.euskaltel.es) has joined ##rust
2019-11-27 17:04:23	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-11-27 17:10:50	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-11-27 17:14:53	<--	stux|RC (stux@2a01:270:2050:1337::1) has quit (Ping timeout: 245 seconds)
2019-11-27 17:24:56	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Ping timeout: 276 seconds)
2019-11-27 17:29:38	-->	stux|RC (stux@cosmo.lunarshells.com) has joined ##rust
2019-11-27 17:33:39	JotaEme_Linuxuse	Hi!. I'm using the crate Cursive to make a Tetris game and in some point a need to pass the cursive::views::Canvas structure to a function that should use set_draw(...) to draw the game. The problem is that when I try: fn draw(cnv: cursive::views::Canvas, map: &core::Map) {...} the compiler tells me it has 0 arguments
2019-11-27 17:33:42	JotaEme_Linuxuse	any idea?
2019-11-27 17:34:12	jbg	please give the actual error message rather than paraphrasing it, so we don't have to guess
2019-11-27 17:34:19	jbg	and give the fn definition (verbatim) and the way you're invoking it
2019-11-27 17:38:38	JotaEme_Linuxuse	error[E0107]: wrong number of type arguments: expected 1, found 0
2019-11-27 17:39:03	JotaEme_Linuxuse	the function is doin nothing for the moment, and is not being called
2019-11-27 17:39:05	jbg	note that it says _type_ arguments. one of the types of your function arguments expects a type argument
2019-11-27 17:39:32	jbg	if you have a look at the docs for cursive::view::Canvas, here: https://docs.rs/cursive/0.13.0/cursive/views/struct.Canvas.html
2019-11-27 17:39:43	jbg	you'll see that it's defined as Canvas<T>
2019-11-27 17:39:54	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-11-27 17:40:12	JotaEme_Linuxuse	hmm
2019-11-27 17:40:20	jbg	so the Canvas type is generic over some type T. in order for your function to take a Canvas as an argument, it will also need to be generic over that type, unless you can specify the type parameter explicitly in the function definition
2019-11-27 17:40:38	jbg	it looks like the T is whatever the type is of the `state` you passed to Canvas::new()
2019-11-27 17:40:53	JotaEme_Linuxuse	it's empty
2019-11-27 17:41:10	jbg	"empty" isn't a type; what exactly did you pass to Canvas::new() ?
2019-11-27 17:41:13	JotaEme_Linuxuse	its called like Canvas::new(())
2019-11-27 17:41:16	jbg	ok, so it's ()
2019-11-27 17:41:28	jbg	so you can write fn draw(cnv: cursive::views::Canvas<()>, map: &core::Map) {...}
2019-11-27 17:42:13	jbg	if you wanted your draw() function to be able to take Canvases with various different state types, you'd need to make it generic, but i suspect perhaps you'll always have one state type here
2019-11-27 17:42:39	jbg	if you eventually make some struct to hold your state, you'll need to replace the () with that type
2019-11-27 17:42:44	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-11-27 17:43:17	jbg	incidentally, the compiler most likely pointed with a little arrow to exactly which part of the fn definition was missing the type arguments
2019-11-27 17:43:31	jbg	which is one of the biggest (and most overlooked) hints that the compiler errors give
2019-11-27 17:44:34	JotaEme_Linuxuse	it was pointing the whole "cursive::views::Canvas" sentence
2019-11-27 17:44:39	JotaEme_Linuxuse	but thanks!
2019-11-27 17:44:41	jbg	yup, exactly!
2019-11-27 17:44:48	jbg	because that's the type, which was missing the arguments
2019-11-27 17:44:50	JotaEme_Linuxuse	y didn't guess that () is actually a type
2019-11-27 17:45:11	JotaEme_Linuxuse	I tried calling with <> with same result
2019-11-27 17:45:26	JotaEme_Linuxuse	now I'm using <()> seems that aprt is working!
2019-11-27 17:45:57	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 240 seconds)
2019-11-27 17:47:23	<--	Hi-Angel (~Hi-Angel@91.192.73.236) has quit (Ping timeout: 265 seconds)
2019-11-27 17:47:57	JotaEme_Linuxuse	now i'm facing another error, but I will try to solve by my self some time
2019-11-27 17:48:01	JotaEme_Linuxuse	XD
2019-11-27 17:52:27	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 246 seconds)
2019-11-29 09:13:57	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-11-29 09:13:57	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-11-29 09:13:57	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-11-29 09:13:57	--	Channel ##rust: 608 nicks (2 ops, 0 voices, 606 normals)
2019-11-29 09:14:12	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-11-29 09:15:48	Moongoodenby	wucke13: method-level generics?
2019-11-29 09:15:54	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-11-29 09:16:07	wucke13	Yes!
2019-11-29 09:17:21	papna	wucke13: /lastlog wucke13
2019-11-29 09:17:22	Moongoodenby	ah, yeah, method-level generics makes a trait not object-safe
2019-11-29 09:17:24	papna	wucke13: Oops
2019-11-29 09:17:41	wucke13	So it's not possible?
2019-11-29 09:18:49	Moongoodenby	You can't have a `dyn MspConnection`, no.
2019-11-29 09:19:00	Moongoodenby	you /might/ have been able to use `impl` if it were stable
2019-11-29 09:19:18	Moongoodenby	uh, let's see...
2019-11-29 09:19:37	SpaceManiac	wucke13: how can you do anything useful with a method's return value without knowing what type it is?
2019-11-29 09:21:00	Moongoodenby	I feel like there's a way to get what you want, but I can't think of it
2019-11-29 09:21:58	wucke13	SpaceManiac: Hmmh. It's basically it's about some networkish code. I want to build a translation layer. For each message which can be translated, a function shall be in a HashMap. The translation of messages requires other messages, from another connection. So I'm trying to make that other resource available in the translatio functions
2019-11-29 09:22:28	-->	minsec (~shijiafen@104.192.108.9) has joined ##rust
2019-11-29 09:23:28	wucke13	Each message of the other protocol has it's own type: MspMessage<P>, where P is the Payload of that message. The MspConnection trait offers a fetch fetch method, which yields the payload of a message (and thus needs to be generic).
2019-11-29 09:27:18	-->	localhorse (uid18992@gateway/web/irccloud.com/x-wqhsvqgcaetjefzt) has joined ##rust
2019-11-29 09:29:11	SpaceManiac	so you want to take the MspMessage<P> and pass it to some other function with a known concrete P?
2019-11-29 09:29:51	wucke13	Not exactly. Let me think of a nice wording:
2019-11-29 09:32:15	<--	lovesegfault (~bemeurer@rrcs-67-53-39-99.west.biz.rr.com) has quit (Quit: WeeChat 2.6)
2019-11-29 09:32:17	wucke13	Basically, I want a HashMap of functions (or closures), and in each of that function, I need to get a MspMessage with a known P. For that, I either need the function (or closures) to take a generic T: which implements Read+Write (which is sufficient for doing the MSP stuff) or a MspConnection (which is implemented for everything which has Read + Write).
2019-11-29 09:32:23	jbg	SpaceManiac: the fetch method could return a trait object rather than having type parameters
2019-11-29 09:32:38	papna	wucke13: Would it be suitable to use an enum to represent the various payloads, rather than making MspConnetion generic?
2019-11-29 09:32:45	jbg	e.g. MspMessage could contain a Box<dyn Payload> or whatever
2019-11-29 09:32:52	SpaceManiac	jbg: yes, it was somewhat of a leading question
2019-11-29 09:32:57	<--	xeno (~xeno@unaffiliated/xeno) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-11-29 09:33:19	-->	crockwork (~crockwork@c-73-65-254-96.hsd1.ut.comcast.net) has joined ##rust
2019-11-29 09:33:24	jbg	but yeah i often use enums for payload types in networking code
2019-11-29 09:34:22	wucke13	papna: I had that before (enum for Payloads). However, since I always know which message will be received (because it's a strict request/response thing), there is no need for it (hopefully). In general, the enum approach adds a lot of noise. Another library is doing it, which forces me to match up to a depth of 4 or so, which I didn't want to blow up any further.
2019-11-29 09:34:23	papna	Having a Payload trait and a level of virtualness/indirection only helps so much -- there might be things about the payloads you want to handle differently, presumably.
2019-11-29 09:34:58	wucke13	jbg: In that case, could I access the fields of the different structs that implement the payload trait?
2019-11-29 09:35:44	<--	crockwork (~crockwork@c-73-65-254-96.hsd1.ut.comcast.net) has quit (Client Quit)
2019-11-29 09:35:55	papna	wucke13: May I ask what you mean about it adding noise? You're going to need to tag the payload type somewhow -- you seem currently to be losing it the way you're using your hashmap?
2019-11-29 09:36:05	papna	wucke13: Or do you mean you know it a priori from the key or something?
2019-11-29 09:36:06	jbg	wucke13: for things that you can't provide methods on Payload for accessing, you have to either implement some kind of downcasting (like the Error trait's .downcast_ref()) or use Any
2019-11-29 09:36:09	SpaceManiac	wucke13: maybe a design like fn handle_foo<T: MspConnection>(conn: &mut T, ...) { do_stuff_with(conn.read::<Foo>()) }
2019-11-29 09:36:37	jbg	but i think the trait approach may end up with at least as much noise as the enum approach
2019-11-29 09:37:02	papna	wucke13: I suspect it's likely you'll find re-implementing tagging at your application level (though more flexible) will result in far more noise than using an enum.
2019-11-29 09:38:44	wucke13	papna: Currently, it's not an issue, because I have one big match where I translate the messages in the highest level arms. However, I would prefer putting that code into seperate functions which are accessed over the hashmap, to make the code more modular (easily allowing the addition of translations for new messages without blowing up one function to multiple hundred lines of code).
2019-11-29 09:39:27	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-11-29 09:41:34	wucke13	So, just to reiterate: I can not make a T:Read + Write into a trait object, right?
2019-11-29 09:42:08	SpaceManiac	wucke13: you could if it didn't have generic methods
2019-11-29 09:42:29	wucke13	Well, does Read + Write have generic methods?
2019-11-29 09:43:00	SpaceManiac	Read and Write are object-safe
2019-11-29 09:43:19	wucke13	Is there already a combination of both?
2019-11-29 09:43:32	SpaceManiac	No
2019-11-29 09:44:06	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-29 09:44:13	wucke13	How would one combine them?
2019-11-29 09:44:16	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-29 09:45:18	SpaceManiac	trait ReadWrite: Read + Write {} impl<R: Read + Write> ReadWrite for R{}
2019-11-29 09:47:43	wucke13	SpaceManiac, papna jbg Moongoodenby : Thank you all a lot!
2019-11-29 09:48:00	<--	hussam (uid193284@gateway/web/irccloud.com/x-jeeverdkwfbpwfdr) has quit (Quit: Connection closed for inactivity)
2019-11-29 09:50:32	wucke13	(Using the dyn ReadWrite, I can make it work without the enum noise :)
2019-11-29 09:53:20	<--	minsec (~shijiafen@104.192.108.9) has quit (Ping timeout: 276 seconds)
2019-11-29 09:57:51	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-11-29 10:01:03	wucke13	Why is this error happening? https://paste.krebsco.de/PKTnhX4p The return value of both functions in question is an io::Result of an enum, thus should be allowed?
2019-11-29 10:01:08	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 276 seconds)
2019-11-29 10:03:08	SpaceManiac	wucke13: fn items have a unique type each to allow for certain optimizations. Type inference is seeing your first .insert() and giving your HashMap the `fn core::heartbeat` type, so specify the type of the map explicitly
2019-11-29 10:03:43	SpaceManiac	btw, fn types are already pointers, so taking references to them is not necessary
2019-11-29 10:04:38	wucke13	SpaceManiac: ah, ok :) Thanks for the hint!
2019-11-29 10:05:02	wucke13	But functions need to be boxed, right?
2019-11-29 10:06:27	SpaceManiac	closures (with captures) yes, function pointers no
2019-11-29 10:07:05	vorner	If it's just a function or closure without captures, it should not be a separate type.
2019-11-29 10:08:31	SpaceManiac	wucke13: for clarity, `fn()` types and `Fn()` types are different
2019-11-29 10:08:48	wucke13	Oh ok.
2019-11-29 10:09:39	cart_man	Moongoodenby: Can you please edit this file so I can use TestObject in Main? -> https://hastebin.com/ukigasizud.m
2019-11-29 10:09:43	cart_man	I am missing something
2019-11-29 10:11:40	wucke13	Why does one have to specify mut multiple times (like this: `mut mspconn: &mut dyn MspConnection,`)?
2019-11-29 10:14:36	j`ey	cart_man: youre missing a 'mod' statement
2019-11-29 10:15:35	papna	wucke13: Seems like a fair question, and I don't personally have an answer. Which would you get rid of?
2019-11-29 10:15:44	wucke13	The first one
2019-11-29 10:15:54	wucke13	Though than it won't compile
2019-11-29 10:16:47	j`ey	wucke13: are you re-assigning to mspconn?
2019-11-29 10:17:07	wucke13	If I understand correctly, no
2019-11-29 10:17:45	wucke13	Btw; the worst I had was this `encode(&mut &mut new_buf[..])`
2019-11-29 10:20:20	<--	forgottenone (~forgotten@176.88.97.4) has quit (Ping timeout: 252 seconds)
2019-11-29 10:20:31	j`ey	whats the error if you remove the first mut?
2019-11-29 10:21:56	<--	yiwan (~yiwan@li1558-132.members.linode.com) has quit (Ping timeout: 276 seconds)
2019-11-29 10:22:30	wucke13	For which one?
2019-11-29 10:23:43	j`ey	mut mspconn: &mut dyn...
2019-11-29 10:25:09	-->	minsec (~shijiafen@104.192.108.10) has joined ##rust
2019-11-29 10:26:16	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-11-29 10:28:23	cart_man	j`ey: Where am I missing thta?
2019-11-29 10:28:38	j`ey	cart_man: in the main.rs
2019-11-29 10:28:49	j`ey	go look up the rust module system!
2019-11-29 10:34:28	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 245 seconds)
2019-11-29 10:37:12	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-29 10:37:54	cart_man	j`ey: That really making me confused ? mod before what? mod testobject; ?    mod TestObject; ? mod crate::TestObject;?
2019-11-29 10:45:09	j`ey	mod testobject;
2019-11-29 10:47:09	j`ey	then you can also add 'use crate::TestObject;'
2019-11-29 10:47:12	cart_man	j`ey: Ok so the fileNAME should be the same as the object
2019-11-29 10:47:31	-->	hussam (uid193284@gateway/web/irccloud.com/x-ylydwypqkdiqvpab) has joined ##rust
2019-11-29 10:47:32	j`ey	no
2019-11-29 10:47:40	j`ey	the mod is the same as the filename
2019-11-29 10:49:16	j`ey	cart_man: go read the books chapter on modules, shouldnt take too long
2019-11-29 10:54:47	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 252 seconds)
2019-11-29 10:55:27	-->	pedro4 (~pedro4@213.152.162.99) has joined ##rust
2019-11-29 10:58:28	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 252 seconds)
2019-11-29 11:07:02	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-11-29 11:10:26	<--	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has quit (Quit: WeeChat 2.6)
2019-11-29 11:13:38	-->	JotaEme_Linuxuse (~JotaEme_L@120.85-85-107.dynamic.clientes.euskaltel.es) has joined ##rust
2019-11-29 11:17:52	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-11-29 11:24:12	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-11-29 11:35:17	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 240 seconds)
2019-11-29 11:45:47	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-11-29 11:46:32	-->	m0rphism (~m0rphism@HSI-KBW-085-216-106-127.hsi.kabelbw.de) has joined ##rust
2019-11-29 11:48:35	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-11-29 11:49:43	wucke13	Why does `let payload: MspRawImu = MspMessage::fetch(mspconn)?;` yield `mspconn doesn't have a size known at compile-time` despite `mspconn` being `mspconn: &mut dyn MspConnection` (so a reference already)?
2019-11-29 11:53:00	-->	forgottenone (~forgotten@178.241.116.149) has joined ##rust
2019-11-29 11:55:49	<--	forgottenone (~forgotten@178.241.116.149) has quit (Read error: Connection reset by peer)
2019-11-29 11:59:16	j`ey	I guess we'll need more context
2019-11-29 11:59:25	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2019-11-29 12:03:56	-->	pinkieval (~progval@pdpc/supporter/student/progval) has joined ##rust
2019-11-29 12:05:12	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Quit: "Fascism, Nazism, Communism and Socialism are only superficial variations of the same monstrous theme—collectivism." -- Ayn Rand)
2019-11-29 12:06:11	-->	ClaymorePT_ (~Claymore@188.251.245.88) has joined ##rust
2019-11-29 12:06:17	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 252 seconds)
2019-11-29 12:07:18	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-29 12:07:46	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2019-11-29 12:10:02	<--	ClaymorePT_ (~Claymore@188.251.245.88) has quit (Client Quit)
2019-11-29 12:14:01	-->	f_lost (~lost@197.84.242.3) has joined ##rust
2019-11-29 12:14:44	f_lost	is it possible to run a shell command from a rust binary in the current shell? Not sure if that makes sense, but I need a rust application to run `source ~/something` in the current shell.
2019-11-29 12:15:09	f_lost	not the shell that it internally spins up (which I believe it does?)
2019-11-29 12:15:19	-->	daimonos (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 12:16:30	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-11-29 12:17:34	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-11-29 12:17:38	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 276 seconds)
2019-11-29 12:21:44	jbg	f_lost: unless the specific shell you're using provides a way for subprocesses to pipe text back for it to interpret (or you explicitly do that via something like `$(your-rust-program)`), no
2019-11-29 12:21:50	-->	heday (~fheday@2a02:c7f:7701:3a00:abd7:d527:7fbc:afec) has joined ##rust
2019-11-29 12:21:58	jbg	whatever you're trying to do is likely to be better done a different way :)
2019-11-29 12:22:42	f_lost	jbg, I agree, but I need to make this work within a very specific setup in my company :/
2019-11-29 12:22:42	-->	hulk{-_-} (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 12:22:45	f_lost	hmmm
2019-11-29 12:22:46	<--	daimonos (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-29 12:22:49	f_lost	thought not
2019-11-29 12:22:55	f_lost	a bit of a weird problem
2019-11-29 12:25:05	-->	tsaka__ (~torstein@178-153-128.dynamic.cyta.gr) has joined ##rust
2019-11-29 12:26:38	hashworks	Hi! I'm using serde to parse a json file like this: [iterator...] .map(|p| serde_json::from_reader(fs::File::open(p).unwrap()).unwrap()) <-- However that needs a type annotation. I know I can do it like this ::<type>, but I don't know where to place that in there. Any idea?
2019-11-29 12:32:57	ZirconiumX	hashworks: You could break it down into a bunch of `let`s and see where rustc complains?
2019-11-29 12:34:43	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-11-29 12:37:57	-->	bronsen (housetier@pdpc/supporter/professional/housetier) has joined ##rust
2019-11-29 12:39:29	netopso	if 2 structs have (nearly) identical fields, is there any way to automatically do StructB{field1: a.field1, field2: a.field2, ...}?
2019-11-29 12:41:01	netopso	hashworks: my guess is from_reader should be from_reader::<type> since it's from_reader that needs to know what type it's deserializing into... serde is all about using rust's types to tell the logic what to do
2019-11-29 12:41:43	netopso	a good example of how a strong type system can be made to do things *besides* preventing your code from compiling
2019-11-29 12:44:04	<--	narispo (~narispo@2a01:e0a:2a2:1590:cd42:1316:689:a90) has quit (Read error: Connection reset by peer)
2019-11-29 12:44:06	<--	JotaEme_Linuxuse (~JotaEme_L@120.85-85-107.dynamic.clientes.euskaltel.es) has quit (Quit: Konversation terminated!)
2019-11-29 12:44:09	hashworks	netopso: Ah, it's from_reader<R, T>(rdr: R)
2019-11-29 12:44:17	-->	narispo (~narispo@37.120.204.10) has joined ##rust
2019-11-29 12:44:30	hashworks	So I need to set the type I want it to deserialize to (T) and the type of the Reader
2019-11-29 12:45:09	<--	hulk{-_-} (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 252 seconds)
2019-11-29 12:48:59	<--	Strom (strom@127-16-191-90.dyn.estpak.ee) has quit (Remote host closed the connection)
2019-11-29 12:49:19	<--	maleldil (~maleldil@2804:d45:8e87:b300::2) has quit (Remote host closed the connection)
2019-11-29 12:49:36	-->	maleldil (~maleldil@2804:d45:8e87:b300:f627:5ae7:b295:8f38) has joined ##rust
2019-11-29 12:52:28	-->	hulk{-_-} (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 12:53:16	-->	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-11-29 12:54:42	jbg	f_lost: well, ignoring the question of whether it's a good design, if you really have to pipe some shellcode up to the parent process and have it interpret it, there *are* ways to do it
2019-11-29 12:55:30	jbg	f_lost: e.g. just output `source ~/something` from the rust program and execute it from the parent shell as $(your-rust-program)
2019-11-29 12:56:24	jbg	hashworks: you can leave the type of the reader unspecified as it can be inferred from what you pass to from_reader()
2019-11-29 12:56:36	jbg	so you can go serde_json::from_reader::<YourType, _>(...)
2019-11-29 12:56:52	jbg	ehh, the other way around i think, since it's <R, T>
2019-11-29 13:03:24	f_lost	jbg, yeah. I think I'm going to rethink the implementation. I'm sure that are better ways of doing it.
2019-11-29 13:03:47	f_lost	or perhaps re-write the thing that's making me do this :)
2019-11-29 13:21:51	<--	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has quit (Ping timeout: 268 seconds)
2019-11-29 13:24:26	netopso	another turbofish question: how can I tell .into() what type to use when using it as part of another expression? for example `let foo: i64 = my_value.into() / an_i64_value`
2019-11-29 13:25:21	netopso	my_value.into::<i64>() doesn't work
2019-11-29 13:25:24	j`ey	you can use From
2019-11-29 13:25:30	j`ey	i64::from(my_value)
2019-11-29 13:26:15	netopso	j`ey: bingo, thanks
2019-11-29 13:34:30	dalcde	Or Into::<i64>::into(my_value) if you must use into
2019-11-29 13:41:37	<--	narispo (~narispo@37.120.204.10) has quit (Ping timeout: 240 seconds)
2019-11-29 13:42:01	-->	narispo (~narispo@37.164.187.149) has joined ##rust
2019-11-29 13:43:02	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-11-29 13:45:38	-->	yiwan (~yiwan@101.65.80.22) has joined ##rust
2019-11-29 13:48:43	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-11-29 13:49:31	-->	t7 (~tommo@2a00:23c5:1284:fc00:8c94:943f:19b6:c8a0) has joined ##rust
2019-11-29 13:51:54	<--	heday (~fheday@2a02:c7f:7701:3a00:abd7:d527:7fbc:afec) has quit (Ping timeout: 252 seconds)
2019-11-29 13:52:41	<--	minsec (~shijiafen@104.192.108.10) has quit (Ping timeout: 268 seconds)
2019-11-29 13:56:13	<--	yiwan (~yiwan@101.65.80.22) has quit (Ping timeout: 250 seconds)
2019-11-29 13:57:00	-->	yiwan (~yiwan@101.65.80.22) has joined ##rust
2019-11-29 14:03:12	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-29 14:07:10	<--	f_lost (~lost@197.84.242.3) has quit (Ping timeout: 265 seconds)
2019-11-29 14:09:39	-->	vanek (~vanek@84-236-44-64.pool.digikabel.hu) has joined ##rust
2019-11-29 14:09:44	vanek	beep
2019-11-29 14:15:06	-->	lauromoura (~lauromour@2804:7f5:f380:ed03:7ca4:2ec2:1afb:31b3) has joined ##rust
2019-11-29 14:17:12	statusfailed	this function has a type parameter "Cs" and a parameter with type Cs::SpecializationConstants - what does that mean? https://docs.rs/vulkano/0.16.0/vulkano/pipeline/struct.ComputePipeline.html#method.new
2019-11-29 14:18:34	j`ey	thats an associated type
2019-11-29 14:19:12	statusfailed	how would I declare a type with such an associated type?
2019-11-29 14:19:12	j`ey	you can have traits like: trait T { type Output; }
2019-11-29 14:19:19	statusfailed	ah like that? :D
2019-11-29 14:19:26	statusfailed	ok, so T::Output would be the equivalent there?
2019-11-29 14:19:33	j`ey	yeah
2019-11-29 14:19:37	statusfailed	thanks very much!
2019-11-29 14:20:10	j`ey	statusfailed: are yoy just trying to call this function?
2019-11-29 14:20:45	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-11-29 14:21:12	statusfailed	j`ey: yes, but first I'm trying to figure out how to construct the "shader" parameter
2019-11-29 14:21:53	<--	maleldil (~maleldil@2804:d45:8e87:b300:f627:5ae7:b295:8f38) has quit (Remote host closed the connection)
2019-11-29 14:22:11	-->	maleldil (~maleldil@2804:d45:8e87:b300:64df:46f:c7fa:9a5f) has joined ##rust
2019-11-29 14:22:35	statusfailed	I'm pretty sure it needs to be a ComputeEntryPoint but I'm not sure what the type "S" is in that struct
2019-11-29 14:23:23	statusfailed	sorry, I mean the L type
2019-11-29 14:25:04	j`ey	https://docs.rs/vulkano/0.16.0/vulkano/descriptor/pipeline_layout/trait.PipelineLayoutDesc.html
2019-11-29 14:25:11	j`ey	one of those
2019-11-29 14:26:54	statusfailed	I'm trying to use EmptyPipelineDesc, but the only method is has is build(), which returns something that doesn't implement PipelineLayoutDesc
2019-11-29 14:26:57	statusfailed	so pretty confused :D
2019-11-29 14:27:55	j`ey	that should
2019-11-29 14:27:58	j`ey	https://docs.rs/vulkano/0.16.0/vulkano/descriptor/pipeline_layout/trait.PipelineLayoutDesc.html
2019-11-29 14:31:25	statusfailed	hm, it works if I pass *layout.desc()
2019-11-29 14:31:39	statusfailed	where layout is the EmptyPipelineLayout.build(...
2019-11-29 14:32:25	statusfailed	not sure why I need to call desc though
2019-11-29 14:33:17	<--	tsaka__ (~torstein@178-153-128.dynamic.cyta.gr) has quit (Ping timeout: 240 seconds)
2019-11-29 14:33:22	j`ey	build returns a pipelinelayout
2019-11-29 14:33:36	j`ey	desc returns the pipelinelayoutdesc.......
2019-11-29 14:33:44	statusfailed	PipelineLayout<D> implements the trait though
2019-11-29 14:34:08	statusfailed	or am I misreading?
2019-11-29 14:34:31	statusfailed	impl<D> PipelineLayoutDesc for PipelineLayout<D>
2019-11-29 14:34:39	j`ey	oh yeah
2019-11-29 14:34:42	j`ey	odd
2019-11-29 14:34:54	statusfailed	oh hold up
2019-11-29 14:35:06	statusfailed	nah, it is the right version
2019-11-29 14:35:06	statusfailed	weird
2019-11-29 14:35:21	statusfailed	anyway, after eventually getting *layout.desc() to work, it turns out all this code is unsafe anyway
2019-11-29 14:35:23	statusfailed	hehehe
2019-11-29 14:35:27	statusfailed	thanks for your help though!
2019-11-29 14:37:34	jbg	desc() is safe, but the direct impl is unsafe
2019-11-29 14:37:42	jbg	so i guess you would only be able to use the direct impl inside an unsafe {} block
2019-11-29 14:37:54	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-11-29 14:38:21	jbg	seems like a doc fail, to not indicate `unsafe impl`
2019-11-29 14:38:46	statusfailed	tbf the docs say "don't do any of the shader loading yourself"
2019-11-29 14:38:48	jbg	if you hit `src` in the docs it takes you to here, and it becomes clear: https://docs.rs/vulkano/0.16.0/src/vulkano/descriptor/pipeline_layout/sys.rs.html#188
2019-11-29 14:38:57	statusfailed	but unfortunately I couldn't get their macro solution to work :[
2019-11-29 14:39:07	jbg	but the docs themselves are missing that it's unsafe, which is why you couldn't call it (i'm guessing you weren't in an unsafe {} block)
2019-11-29 14:39:15	statusfailed	ahh!!! that makes total sense haha
2019-11-29 14:39:19	statusfailed	thanks
2019-11-29 14:39:27	statusfailed	yeah I wasn't unsafe{}
2019-11-29 14:46:23	vorner	I thought `unsafe impl Trait for Type` was just to implement unsafe traits. That it doesn't make the methods inside unsafe to call.
2019-11-29 14:46:26	-->	citizen-stig (~citizen-s@2a02:a210:2041:9c80:94fd:7dae:93fd:8c65) has joined ##rust
2019-11-29 14:49:54	<--	narispo (~narispo@37.164.187.149) has quit (Ping timeout: 246 seconds)
2019-11-29 14:50:21	-->	narispo (~narispo@37.166.138.139) has joined ##rust
2019-11-29 14:50:50	jbg	huh, yeah, you're right. brain fart... so that doesn't explain why statusfailed couldn't use that impl
2019-11-29 14:53:18	vorner	I didn't read the whole history ↑, but does D (the type parameter) implement PipelineLayoutDesc? It's required in the where clause on line 189.
2019-11-29 14:53:39	jbg	yes, EmptyPipelineLayoutDesc impls PipelineLayoutDesc
2019-11-29 14:54:01	jbg	statusfailed: i suspect some variable didn't have the type you thought it did when you were trying it out
2019-11-29 14:54:26	jbg	sorry, EmptyPipelineDesc &
2019-11-29 14:54:28	jbg	*
2019-11-29 14:54:31	statusfailed	Yeah I mean "user error" is a likely hypothesis here :D
2019-11-29 14:57:13	osa1	is there a way to call a toolchain's rustc using rustup? I have both nighly and stable installed, and I want to be able to do something like `$ rustc_nightly ...` or `$ rustc_stable ...`
2019-11-29 14:57:27	osa1	I'm trying `cargo +stable rustc -- ...` but that expects a Cargo.toml for some reason
2019-11-29 14:58:53	j`ey	doesnt rustc +stable do it?
2019-11-29 14:59:45	j`ey	(it does, I checked)
2019-11-29 15:01:28	osa1	indeed it does, thanks
2019-11-29 15:05:02	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-29 15:12:26	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-11-29 15:14:08	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-11-29 15:15:30	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-11-29 15:21:05	-->	urbanslug (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 15:21:17	<--	hulk{-_-} (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-29 15:27:20	-->	m0rphism1 (~m0rphism@tmo-099-6.customers.d1-online.com) has joined ##rust
2019-11-29 15:34:19	-->	jenny-m (~jdm-@75.98.19.133) has joined ##rust
2019-11-29 15:37:33	<--	urbanslug (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-11-29 15:44:33	<--	m0rphism1 (~m0rphism@tmo-099-6.customers.d1-online.com) has quit (Ping timeout: 250 seconds)
2019-11-29 15:51:31	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-11-29 15:52:37	<--	citizen-stig (~citizen-s@2a02:a210:2041:9c80:94fd:7dae:93fd:8c65) has quit (Remote host closed the connection)
2019-11-29 15:59:48	-->	urbanslug (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 16:04:57	<--	urbanslug (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-11-29 16:05:54	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-11-29 16:10:49	<--	Eikon (uid405805@gateway/web/irccloud.com/x-kvcnftjpqgnhgejw) has quit (Quit: Connection closed for inactivity)
2019-11-29 16:11:56	-->	citizen-stig (~citizen-s@2a02:a210:2041:9c80:acac:1184:feba:fdc6) has joined ##rust
2019-11-29 16:12:02	-->	woodz (~woodz@cpc96574-uddi27-2-0-cust731.20-3.cable.virginm.net) has joined ##rust
2019-11-29 16:12:24	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-11-29 16:16:50	-->	fsasm (~fsasm@93-82-154-170.adsl.highway.telekom.at) has joined ##rust
2019-11-29 16:17:36	<--	matthias_bgg (~mbgg@95.169.224.182) has quit (Ping timeout: 268 seconds)
2019-11-29 16:21:16	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Quit: WeeChat 2.6)
2019-11-29 16:21:36	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-11-29 16:22:33	-->	panicbit2 (~panicbit@p57ADE115.dip0.t-ipconnect.de) has joined ##rust
2019-11-29 16:23:59	<--	panicbit (~panicbit@p5B09E1D2.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2019-11-29 16:25:32	<--	t7 (~tommo@2a00:23c5:1284:fc00:8c94:943f:19b6:c8a0) has quit (Ping timeout: 252 seconds)
2019-11-29 16:26:37	-->	crockwork (~crockwork@c-73-65-254-96.hsd1.ut.comcast.net) has joined ##rust
2019-11-29 16:28:07	-->	t7 (~tommo@2a00:23c5:1284:fc00:7cac:a32e:628b:1021) has joined ##rust
2019-11-29 16:31:04	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-11-29 16:37:34	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-11-29 16:39:52	yshui	so, a T could impl Future even if T: !Unpin. but Box<T> would only impl Future when T: Unpin. why is that?
2019-11-29 16:41:24	danieldg	yshui: because you should use Pin<Box<T>> instead
2019-11-29 16:41:33	-->	urbanslug (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-11-29 16:41:50	danieldg	that works even if T:!Unpin
2019-11-29 16:41:52	<--	citizen-stig (~citizen-s@2a02:a210:2041:9c80:acac:1184:feba:fdc6) has quit (Remote host closed the connection)
2019-11-29 16:42:07	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-11-29 16:42:23	yshui	danieldg: that is what i already do. but i am just curious why it is designed this way
2019-11-29 16:43:41	danieldg	if Box implemented it directly, you could use Pin<&mut Box<T>> which is not enough to protect T itself from being moved
2019-11-29 16:43:55	<--	panicbit2 (~panicbit@p57ADE115.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-11-29 16:44:42	yshui	ah, i see.
2019-11-29 16:45:04	yshui	it's because Box<T>: Unpin even when T: !Unpin
2019-11-29 16:45:15	yshui	thanks
2019-11-29 16:52:57	<--	nevill (~nevill@116.233.242.36) has quit (Quit: nevill)
2019-11-29 16:54:57	-->	forgottenone (~forgotten@178.241.116.149) has joined ##rust
2019-11-29 16:59:47	<--	crockwork (~crockwork@c-73-65-254-96.hsd1.ut.comcast.net) has quit (Quit: crockwork)
2019-11-29 17:11:02	-->	panicbit2 (~panicbit@p57ADE115.dip0.t-ipconnect.de) has joined ##rust
2019-11-29 17:11:19	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-11-29 17:14:37	<--	forgottenone (~forgotten@178.241.116.149) has quit (Ping timeout: 240 seconds)
2019-11-29 17:16:45	-->	forgottenone (~forgotten@178.241.116.149) has joined ##rust
2019-11-29 17:19:06	<--	jenny-m (~jdm-@75.98.19.133) has quit (Quit: Leaving...)
2019-11-29 17:21:57	<--	fsasm (~fsasm@93-82-154-170.adsl.highway.telekom.at) has quit (Ping timeout: 240 seconds)
2019-11-29 17:22:09	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-11-29 17:27:17	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 268 seconds)
2019-11-29 17:30:33	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-11-29 17:37:02	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-11-29 17:37:17	<--	chowmeined (~chowmeine@unaffiliated/chowmeined) has quit (Ping timeout: 240 seconds)
2019-11-29 17:43:20	-->	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-45-148.dsl.bell.ca) has joined ##rust
2019-11-29 17:43:38	<--	drewr (~drew@elastic/staff/drewr) has quit (Ping timeout: 245 seconds)
2019-11-29 17:46:19	<--	minsec (~shijiafen@115.171.222.95) has quit (Ping timeout: 250 seconds)
2019-11-29 17:47:12	<--	efm (~efm@vpn.tummy.com) has quit (Remote host closed the connection)
2019-11-29 17:47:36	-->	mgrech__ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-29 17:49:51	-->	mgrech_ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-29 17:50:33	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-11-29 17:51:05	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-11-29 17:52:24	-->	mgrech (~mgrech@193-83-64-225.adsl.highway.telekom.at) has joined ##rust
2019-11-29 17:52:53	<--	mgrech__ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has quit (Ping timeout: 265 seconds)
2019-11-29 17:54:17	<--	mgrech_ (~mgrech@193-83-64-225.adsl.highway.telekom.at) has quit (Ping timeout: 240 seconds)
2019-12-02 09:11:56	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-02 09:11:56	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-02 09:11:56	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-02 09:11:56	--	Channel ##rust: 621 nicks (2 ops, 0 voices, 619 normals)
2019-12-02 09:12:12	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-02 09:19:08	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-12-02 09:21:21	lovesegfault	elichai2: I'd say a _mutable_ reference (by which I mean mut &T not &mut T)
2019-12-02 09:21:35	lovesegfault	i.e. no better way than to just explain it
2019-12-02 09:21:40	lovesegfault	that's what I do at work
2019-12-02 09:22:09	elichai2	lovesegfault: so how do you pronounce `&mut T`?
2019-12-02 09:23:12	lovesegfault	elichai2: I usually leave out the mutable, and say &T since IME most of the time it's clear from context whether it's &T or &mut T; if you need to specify again just say "ampersand mut T"
2019-12-02 09:23:21	lovesegfault	It's clunky
2019-12-02 09:23:46	elichai2	Arghh
2019-12-02 09:23:51	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-02 09:27:00	hashworks	Hi! Could someone tell me why rustc says "expected ()" for "foo" here? How would I write that correctly? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b66cbac63a2224ec6e1f44e6482da87a
2019-12-02 09:28:32	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 276 seconds)
2019-12-02 09:28:43	Kinnison	The "foo" is in a statement which has type ()
2019-12-02 09:28:49	Kinnison	What are you trying to achieve?
2019-12-02 09:29:06	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-02 09:29:36	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-12-02 09:31:54	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-12-02 09:32:28	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-02 09:33:42	papna	hashworks: your_iter.filter(...Some("foo")).next().unwrap_or("bar") ?
2019-12-02 09:34:51	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-02 09:34:51	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-02 09:34:57	<--	x1ddos (~x1ddos@2a02:aa12:a682:7500:228:f8ff:fef9:5033) has quit (Ping timeout: 246 seconds)
2019-12-02 09:36:25	hashworks	Kinnison: I have two for loops (O(N²)) that might return something, if not I want to return something else (to a variable). I could do it in some other way, but I just expected it to work as I wrote it
2019-12-02 09:36:48	Kinnison	for{} doesn't have a return value, it's always ()
2019-12-02 09:37:08	papna	elichai2: Sorry, a mut &T? You mean a situation like `let mut foo = &bar`?
2019-12-02 09:37:08	Kinnison	If you're doing this in a function, just use `return someval;` where you want to early-exit
2019-12-02 09:37:50	Kinnison	If you're needing this as part of a larger function, then you could have a mutable variable set to the default; and then mutate it before breaking out of the outer for loop
2019-12-02 09:38:11	Kinnison	I wonder if hashworks is doing AdventOfCode :D
2019-12-02 09:38:12	elichai2	papna: foo(a: mut &T)
2019-12-02 09:38:37	hashworks	Kinnison: yup^^ solved it already, just wanted to beautify stuff
2019-12-02 09:39:30	hashworks	I guess since I might need it again later on a function might be best
2019-12-02 09:39:33	Kinnison	:D
2019-12-02 09:39:58	Kinnison	Try not to give too much away to others here, in case they're doing AoC later than you :D
2019-12-02 09:40:01	<--	Fairy (~Fairy@unaffiliated/fairy) has quit (Ping timeout: 250 seconds)
2019-12-02 09:40:02	Kinnison	But I hope you enjoy doing it in Rust
2019-12-02 09:40:14	papna	elichai2: In what circumstance does that occur?
2019-12-02 09:40:23	papna	elichai2: https://ideone.com/TqHaFO it's disallowed here?
2019-12-02 09:41:25	hashworks	Kinnison: Hence my foo bar simplification ;) But yeah, I love it.
2019-12-02 09:41:48	papna	elichai2: Do you mean mut a: &T?
2019-12-02 09:47:04	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-12-02 09:47:27	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-12-02 09:49:00	<--	Oddity (~Oddity@unaffiliated/oddity) has quit (Read error: Connection reset by peer)
2019-12-02 09:51:41	elichai2	Yes, sorry. Early morning here heh
2019-12-02 09:54:33	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 246 seconds)
2019-12-02 09:59:50	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-02 09:59:55	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-02 10:00:02	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-02 10:00:49	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-12-02 10:01:06	papna	elichai2: Don't know what anyone else would call it; I would be tempted to note, if I had to, that I had a rebindable/mutable variable that is a reference to T or just a "rebindable ref T".
2019-12-02 10:01:13	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-02 10:01:42	papna	elichai2: Definitely disagree with the remark above, I think calling &mut T a mutable reference to T is ubiquitous.
2019-12-02 10:01:48	ssbr_	I would've said "mutable variable holding a reference to T" or similar
2019-12-02 10:02:11	-->	Oddity (~Oddity@unaffiliated/oddity) has joined ##rust
2019-12-02 10:02:25	Yaniel	"mutable variable holding a reference" implies that you can change what piece of memory it refers to
2019-12-02 10:02:33	Yaniel	instead of changing the contents of said memory
2019-12-02 10:02:39	ssbr_	Yaniel: that was the entire point, yes
2019-12-02 10:02:57	yuken	Would ya'll think Rust is appropriate for extremely time sensitive tasks like controlling the motors on a vehicle?
2019-12-02 10:03:06	Yaniel	yuken: absolutely
2019-12-02 10:03:16	ssbr_	the question was what to call "let mut a = &x;" vs "let a = &mut x;" AIUI
2019-12-02 10:03:31	Yaniel	ah
2019-12-02 10:04:04	Yaniel	yuken: given rust's focus on *deterministic* runtime it is a perfect fit IMHO
2019-12-02 10:04:05	yuken	Yaniel, anything in specific I should watch out for? I'm interested in converting certain vehicles to electric, and I want to run my own computers/controllers for them.
2019-12-02 10:05:26	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-02 10:05:33	Yaniel	keep an eye on memory allocations, be wary of dynamic dispatch yadda yadda
2019-12-02 10:05:52	elichai2	yuken: I think that's where rusts shines
2019-12-02 10:05:55	elichai2	I think we have a bug in the rust terminology
2019-12-02 10:05:59	-->	endless90 (~endless90@p200300C577307600A45287FD24037508.dip0.t-ipconnect.de) has joined ##rust
2019-12-02 10:06:12	yuken	Not sure what dynamic dispatch means, never heard that before o-o
2019-12-02 10:06:28	j`ey	yuken: do you know virtual in c++?
2019-12-02 10:07:03	yuken	I know what it allows, j`ey, but not relaly what it _does_. Overrideable functions mainly in a subclass?
2019-12-02 10:07:47	Yaniel	it adds a runtime symbol table to objects
2019-12-02 10:08:02	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-02 10:08:08	Yaniel	so when you call a fn on an object, it first looks up the actual fn to call from that object's vtable
2019-12-02 10:08:18	elichai2	in C, `int* a` is a pointer to a mutable integer. `const int* a` is a pointer to a const int
2019-12-02 10:08:21	Yaniel	instead of just jumping to a fixed fn
2019-12-02 10:09:01	elichai2	`const int* const a` is a const pointer to a const int
2019-12-02 10:09:01	elichai2	dsa
2019-12-02 10:09:31	yuken	Makes sense, Yaniel - what could go wrong there in a sensitive application like what I said above?
2019-12-02 10:09:49	<--	nebula1000 (~AdminUser@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-02 10:10:35	Yaniel	it takes more time and it's harder to be *really* sure you know what code path it will take at any given time
2019-12-02 10:11:12	Yaniel	hm, I suppose you don't really want to be using stuff like Rc either (reference counting wrapper type)
2019-12-02 10:11:19	yuken	hm. I've never had to think about that, but I've never used a computer old than the early 2000s or anything that could kill me if I do it wrong.
2019-12-02 10:11:39	ssbr_	Yaniel: those are all fine for realtime applications as far as I know.
2019-12-02 10:12:34	ssbr_	(well, at the very least there's nothing wrong with dynamic dispatch.)
2019-12-02 10:13:00	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-12-02 10:13:09	ssbr_	elichai2: C const being part of the type is... unfortunate. For example, you can have a const return type. How silly is that?
2019-12-02 10:13:51	ssbr_	(for example: in C++, x = Foo(); is efficient (constructs x in place from the return value) if Foo() returns a std::string, and slow (copies the string) if Foo() returns a const std::string. What nonsense!)
2019-12-02 10:13:56	yrp	look at vxworks support if you actually want an rtos
2019-12-02 10:14:01	yrp	for constant time stuff
2019-12-02 10:14:36	elichai2	hmm
2019-12-02 10:14:47	yrp	there are also some all-rust rtos's, but i wouldnt want to be the person to break them in
2019-12-02 10:14:59	elichai2	idk. I opened an issue in zulip to bikeshed :P
2019-12-02 10:15:19	ssbr_	I said const as a type is a mistake, but OTOH it does mean that you can have things like absl::Span<const int> as a library type, whereas rust &[T] is part of the language
2019-12-02 10:15:45	ssbr_	like everything else in C, it's complicated, I guess.
2019-12-02 10:17:12	rom1v	hi, could you give me an example (using async-std) where calling task::spawn() is actually different from not calling it? For example, if I remove it from the example https://book.async.rs/concepts/tasks.html it still works ("let reader_task = task::spawn(async {…});" --> "let reader_task = async {…};")
2019-12-02 10:18:42	elichai2	ssbr_: I still think there's a mismatch here. as in C something like `let ptr = &mut T` would be a const pointer to a mutable T
2019-12-02 10:18:59	elichai2	something like `int* const a;`
2019-12-02 10:24:21	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-12-02 10:24:38	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-02 10:24:38	<--	xeno (~xeno@unaffiliated/xeno) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-02 10:27:24	cart_man	Hey everyone. Why do I get this error? -> https://hastebin.com/gobuvuxiza.php
2019-12-02 10:27:57	j`ey	cart_man: did you read the error?
2019-12-02 10:31:06	-->	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has joined ##rust
2019-12-02 10:33:24	<--	cart_man (~rynot@196.61.22.83) has quit (Read error: Connection reset by peer)
2019-12-02 10:35:24	-->	ign0tus (~mani@p200300C27F065D00E6B318FFFE897010.dip0.t-ipconnect.de) has joined ##rust
2019-12-02 10:35:25	<--	ign0tus (~mani@p200300C27F065D00E6B318FFFE897010.dip0.t-ipconnect.de) has left ##rust
2019-12-02 10:40:56	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-02 10:41:01	cart_man	j`ey : Yea I know its been moved but does that mean that Push Moves the variable it pushes into?
2019-12-02 10:41:20	cart_man	omg I swear that error was different!
2019-12-02 10:41:27	cart_man	j`ey: sigh nvm
2019-12-02 10:41:56	j`ey	fn push(&mut self, obj: TestObject)
2019-12-02 10:42:04	j`ey	push moves 'obj'
2019-12-02 10:42:45	<--	sgift (~sgift@2001:a61:35e0:ab01:94f2:ff3b:3845:baab) has quit (Quit: Leaving)
2019-12-02 10:44:54	-->	sgift (~sgift@2001:a61:35e0:ab01:b1e8:a7db:2065:60e4) has joined ##rust
2019-12-02 10:55:37	-->	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has joined ##rust
2019-12-02 10:56:20	justsomeguy	How can I disable the warning "warning: constant `x` should have an upper case name"?
2019-12-02 10:57:06	j`ey	the warning should say
2019-12-02 10:57:15	j`ey	something like #[allow(...)]
2019-12-02 10:58:28	<--	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has quit (Remote host closed the connection)
2019-12-02 10:58:35	-->	maelcum (~horst@2001:16b8:c110:4700:8c4c:b955:f296:d75) has joined ##rust
2019-12-02 10:59:20	justsomeguy	Ah, it does.  "= note: `#[warn(non_upper_case_globals)｣ on by default".
2019-12-02 11:00:16	<--	m0rphism2 (~m0rphism@134.3.100.170) has quit (Ping timeout: 240 seconds)
2019-12-02 11:04:05	justsomeguy	Now I just have to figure out how to apply project-wide. I wonder if I can put it in Cargo.toml...
2019-12-02 11:05:15	j`ey	#![] at the top of the lib.rs
2019-12-02 11:05:26	j`ey	justsomeguy: why do you want non uppercase gloabls?
2019-12-02 11:05:52	justsomeguy	It's a holdover from Haskell.
2019-12-02 11:06:30	j`ey	but yo might aswell get used to the Rust style :)
2019-12-02 11:06:32	justsomeguy	I like to use const for everything. They're not actually globals.
2019-12-02 11:07:06	j`ey	well same thing
2019-12-02 11:07:27	justsomeguy	Sure, I probably will use the rust naming convention. It's still useful for me to be able to toggle the warnings, though.
2019-12-02 11:07:27	<--	cart_man (~rynot@196.61.22.83) has quit (Read error: Connection reset by peer)
2019-12-02 11:07:58	justsomeguy	...and it's not really the same thing. const doesn't have anything to do with variable scope, just mutability.
2019-12-02 11:08:39	j`ey	I meant same thing about naming convention
2019-12-02 11:09:36	justsomeguy	Oh, right.
2019-12-02 11:10:47	justsomeguy	This is why I shouldn't do computer stuff at 5am; My reading comprehension is way worse until I've fully woken up.
2019-12-02 11:11:14	j`ey	I should have been clearer, but im IRCing from bed :D
2019-12-02 11:12:59	elichai2	argh. I want to impl `Index` for my type. So I wanted to copy Vec's implementation, so I won't need to impl per all the weird types (usize,Range,InclusiveRange etc.) but it's unstable https://doc.rust-lang.org/src/alloc/vec.rs.html#1791-1798
2019-12-02 11:13:03	elichai2	:(
2019-12-02 11:19:48	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-02 11:21:38	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 252 seconds)
2019-12-02 11:22:07	<--	justan0theruser (~justanoth@unaffiliated/justanotheruser) has quit (Quit: WeeChat 2.6)
2019-12-02 11:22:55	-->	localhorse (uid18992@gateway/web/irccloud.com/x-jfpmpviinecgsrui) has joined ##rust
2019-12-02 11:23:17	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-12-02 11:25:23	-->	rople (~rople@193-114-148-110.tpgi.com.au) has joined ##rust
2019-12-02 11:27:42	elichai2	my mistake. it was stabilized in 1.28. this is my fault :/
2019-12-02 11:29:16	<--	paradoxspiral (~weechat@mail.jomarwin.de) has quit (Quit: cya)
2019-12-02 11:30:15	-->	muhlinux (~muhlinux@45.12.220.235) has joined ##rust
2019-12-02 11:30:27	<--	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-12-02 11:31:18	-->	paradoxspiral (~weechat@mail.jomarwin.de) has joined ##rust
2019-12-02 11:36:23	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-02 11:37:30	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-02 11:44:36	elichai2	we should have a `ReverseOrd` derive trait
2019-12-02 11:46:30	justsomeguy	Actually, the more I think of it, the less this error makes sense. It's warning about non uppercase gloabls, but my const declaration is not in the global scope. I just wanted to indicate that the value is constant, has a type, and is not time ordered. It should be a non_upper_case_const error, if it really wants to complain. Maybe I should post an issue for it on the rust github.
2019-12-02 11:46:57	justsomeguy	Or I can just be quiet until I know the basics of rust, first. :^p
2019-12-02 11:47:13	 *	justsomeguy is only like 20 minutes into learning rust at this point.
2019-12-02 11:51:03	dansho	justsomeguy: 'const' doesn't mean just immutable, it's a compile-time constant
2019-12-02 11:54:26	justsomeguy	That's immutable by my definition. It seems like the definition of immutable varies by programming language. In JS, immutable really means "can't be reassigned". In Haskell, it seems to mean "is guaranteed to have this value at compile time for everything in the current scope".
2019-12-02 11:55:06	justsomeguy	Sorry, that's a _constant_ by my definition. s/immutable/constant/
2019-12-02 11:55:44	justsomeguy	But it's not relevant to my point. The warning is about globals, but constants are not necessarily global.
2019-12-02 11:56:12	justsomeguy	...and in the code I wrote, there are no globals at all, but I still get errors becuase I use const.
2019-12-02 11:57:01	tracker1	If it is contained in scope, is it really a constant, or re-created every time that scope is generated?
2019-12-02 11:57:25	justsomeguy	It is constant within that scope.
2019-12-02 11:57:35	jbg	it does seem that the error & the warning toggle should say "non_upper_case_constant" if it's going to complain about all constants regardless of scope
2019-12-02 11:57:49	justsomeguy	Right, that's what I'm saying.
2019-12-02 11:58:03	jbg	but justsomeguy, you basically never see `const` used in Rust in the way it's used in JS
2019-12-02 11:58:27	<--	TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) has quit (Quit: Bye)
2019-12-02 11:58:39	-->	TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) has joined ##rust
2019-12-02 11:58:47	jbg	the value of a variable can't be changed after assignment unless it's explicitly marked mutable, so `const` is usually used for global constants
2019-12-02 11:59:36	<--	wolfshappen (~waff@irc.furworks.de) has quit (Ping timeout: 240 seconds)
2019-12-02 12:00:00	justsomeguy	But not necessarily.
2019-12-02 12:00:13	jbg	you said "I like to use const for everything", but it's hard to imagine how that would work except for very specific programs
2019-12-02 12:00:28	jbg	it's compile-time evaluated so the RHS of assignment can only include other consts and const fns
2019-12-02 12:01:12	dansho	i think you can do conditionals and match statements now so const might be more useful than it was before
2019-12-02 12:01:24	justsomeguy	Functional programming uses const in this way. Names can only have one value in a scope. It's a little hard to describe unless you see some usage of it.
2019-12-02 12:01:36	dansho	but i either use it for globals or sometimes for local constants like array indices or parameters
2019-12-02 12:02:10	jbg	i'm aware that functional programming works like this, but the usage you describe (a variable can only have one value in a scope) is what rust's variables already are
2019-12-02 12:02:17	-->	wolfshappen (~waff@irc.furworks.de) has joined ##rust
2019-12-02 12:02:42	jbg	you don't need to use compile-time constants just to enforce immutability; immutability is the default
2019-12-02 12:03:30	justsomeguy	But constants have additional guarantees that it can never be reassigned as a mutable value later with  `let mut`, I'd like to communicate that.
2019-12-02 12:03:47	jbg	actually, let mut is declaring a new variable with the same name, that shadows the old variable
2019-12-02 12:03:56	jbg	not making the old variable mutable
2019-12-02 12:04:02	justsomeguy	Hmm...
2019-12-02 12:05:03	justsomeguy	Then a name can have more than one value in a scope if you use let. That doesn't fit my definition of a constant at all.
2019-12-02 12:05:22	justsomeguy	Unless you consider a line a scope, which would be very confusing.
2019-12-02 12:06:22	jbg	i didn't say that rust's variables were all constants, i said they were immutable by default, which they are, but you need to understand that you can use the same name more than once in a scope (which shadows any variables with the same name that preceded)
2019-12-02 12:06:23	-->	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has joined ##rust
2019-12-02 12:07:33	jbg	anyway, i do agree that the warning is misnamed, it triggers on all constants but refers to globals. but the reality is that almost everyone who writes Rust code probably uses constants in that way
2019-12-02 12:07:35	justsomeguy	Right, I misread. My mistake.
2019-12-02 12:07:59	jbg	so you could disable the warnings and try to write Rust as if it's another language - or try to learn how things are typically done in Rust ;)
2019-12-02 12:09:32	jbg	myself, i'm more concerned with mutability/immutability of values, rather than variable names
2019-12-02 12:09:53	jbg	e.g. i want to know that if I pass a MyStruct into a fn, it can't modify it unless it was explicitly marked mutable
2019-12-02 12:10:22	jbg	and i want to be able to look at a block of code and know that some_var can't be modified within it, because it's not marked mutable
2019-12-02 12:10:27	jbg	rust already provides those guarantees
2019-12-02 12:10:35	jbg	without needing to make every variable a `const` :)
2019-12-02 12:12:36	tracker1	jbg I believe it's that way by default (passing a struct into a function).
2019-12-02 12:13:10	 *	tracker1 is really green with Rust, only done a bit of reading and experimentation at this point.
2019-12-02 12:13:34	jbg	say for example you have an &MyStruct
2019-12-02 12:13:35	justsomeguy	Depending on your perspective, assigning a new immutable value to an existing name *is* a modification. If you can guarantee that a name only has one value in a scope, it's easier to reason about the control flow within that scope. It's also easier to decouple time ordering from the logic of your function.
2019-12-02 12:13:38	tracker1	I will say, so far, I've enjoyed experimenting with Rocket and Yew.
2019-12-02 12:14:04	jbg	even if you rebind it with let mut my_struct = my_struct; (new variable that shadows the old one, but is mutable)
2019-12-02 12:14:08	jbg	you still can't mutate MyStruct
2019-12-02 12:14:11	jbg	because it's a &MyStruct
2019-12-02 12:14:26	jbg	you can change the value of the my_struct variable to point to another &MyStruct if you want
2019-12-02 12:14:36	jbg	but that's it
2019-12-02 12:14:50	jbg	justsomeguy: there's no requirement for you to use `mut` variables
2019-12-02 12:15:07	jbg	if you want to have a code style where your names always have one value in a scope, then just don't write `mut`
2019-12-02 12:15:28	Kinnison	and don't ever re-bind names
2019-12-02 12:16:02	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-12-02 12:16:02	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Read error: Connection reset by peer)
2019-12-02 12:16:02	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Write error: Connection reset by peer)
2019-12-02 12:16:07	Kinnison	You can deny the clippy shadowing lints, and then enforce clippy for your CI
2019-12-02 12:16:31	jbg	right, so then re-binding will be an error
2019-12-02 12:16:35	hashworks	[AoC Spoiler] Anyone got an idea how to place lines 32 and 36 into 33 and 37? https://github.com/hashworks/AoC/blob/master/2019/intcode/src/lib.rs#L32 Placing them directly instead of c gives me "cannot borrow `*m` as immutable because it is also borrowed as mutable"
2019-12-02 12:17:25	hashworks	Basically I would just need a copy of that value there?
2019-12-02 12:17:50	justsomeguy	jbg:  I was talking about regular `let` vs `const`. You can do `let x = 3; let x = 4`, but const won't allow you to do that. Sure, you can follow a personal best practice of never doing that, but the whole point of having a nice compiler like this is that it acts as an assistant by pointing out violations of invariant you set.
2019-12-02 12:17:59	Kinnison	hashworks: Your problem is that the lifetimes are not resolved at a fine-enough granularity
2019-12-02 12:18:11	Kinnison	hashworks: It's (IMO) not worth fighting it
2019-12-02 12:18:29	justsomeguy	jbg: But at this point I think I've beat this horse to death. It was an interesting discussion, anyways.
2019-12-02 12:18:37	jbg	justsomeguy: yeah, just turn on the clippy lint for denying shadowing, and shadowing will become an error
2019-12-02 12:18:59	justsomeguy	jbg: Oh, I didn't know you can do that. That help a lot!
2019-12-02 12:19:04	justsomeguy	*helps
2019-12-02 12:19:09	jbg	Kinnison just suggested it above ;)
2019-12-02 12:19:11	j`ey	it's a different tool
2019-12-02 12:19:14	j`ey	not in cargo
2019-12-02 12:19:19	jbg	yeah, you need to install clippy, it's a linter
2019-12-02 12:19:31	j`ey	justsomeguy: but anyway, I would just suggest getting at least used to the UPPERCASE constants
2019-12-02 12:19:34	Kinnison	j`ey: You can run `cargo clippy` though once it's installed :D
2019-12-02 12:19:35	j`ey	for when reading other code
2019-12-02 12:21:18	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-12-02 12:25:30	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-12-02 12:25:31	jbg	hashworks: m[i + 3] borrows m immutably. the immutable borrow lasts for the whole expression, but the expression also mutably borrows m
2019-12-02 12:25:40	jbg	i'm curious, is there any solution at all?
2019-12-02 12:25:52	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-12-02 12:26:19	jbg	it seems like it should be possible for the lifetime of that immutable borrow to be shorter
2019-12-02 12:26:46	jbg	but since it isn't, i think the only viable solution is the code as written, i.e. bind m[i + 3] to a variable on the previous line
2019-12-02 12:31:23	-->	hussam (uid193284@gateway/web/irccloud.com/x-neqzjubymulmnkjc) has joined ##rust
2019-12-02 12:41:39	<--	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has quit (Ping timeout: 265 seconds)
2019-12-02 12:47:32	-->	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has joined ##rust
2019-12-02 12:56:19	elichai2	I wrote a couple of proc macros in the past, but I want to write a derive macro one. any good examples out there? (maybe by dtolnady)
2019-12-02 12:57:37	<--	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has quit (Ping timeout: 250 seconds)
2019-12-02 12:57:49	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-02 13:01:50	-->	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has joined ##rust
2019-12-02 13:03:07	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-12-02 13:03:22	<--	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has left ##rust
2019-12-02 13:07:55	-->	learningc (~pi@121.122.98.56) has joined ##rust
2019-12-02 13:08:28	netopso	ReadGuard riddle: I destructure a ReadGuard (similar to a Mutex Guard) win an Option using `match`, drop the result, and now want to pass a mutable reference to the containing struct... but it doesn't work. how do I do this? example playbook: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d6a830989b0cdb08018e501bd266d694
2019-12-02 13:10:18	<--	tracker1 (~tracker1@2001:579:8000:9:ed89:dd32:7c48:d3cf) has quit (Quit: Leaving)
2019-12-02 13:13:44	-->	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-45-148.dsl.bell.ca) has joined ##rust
2019-12-02 13:14:06	netopso	(the same behavior also appears with ordinary Guards, should have made this clear)
2019-12-02 13:16:36	<--	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has quit (Ping timeout: 240 seconds)
2019-12-02 13:16:40	<--	m0rphism2 (~m0rphism@tmo-099-6.customers.d1-online.com) has quit (Ping timeout: 268 seconds)
2019-12-02 13:16:59	jbg	match mem::replace(&mut my.foo, None)
2019-12-02 13:17:24	-->	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has joined ##rust
2019-12-02 13:17:38	jbg	i don't think it has anything to do with the Guard. you're just partially moving the struct (moving out of a field) on line 15, and then trying to get a mutable reference to the same struct later
2019-12-02 13:18:09	jbg	if you instead swap the value out for a None, the struct doesn't get moved, so you can later get a reference to it
2019-12-02 13:19:46	jbg	in fact, you didn't have a Guard in that example at all, just the Mutex itself
2019-12-02 13:19:55	jbg	since you never called .lock()
2019-12-02 13:20:19	netopso	jbg: fair, yeah. why not use .take() instead of mem::replace()?
2019-12-02 13:21:16	jbg	yeah, .take() works. mem::replace() works if your real code doesn't use Option but uses something else that you can come up with a replacement for
2019-12-02 13:29:00	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 268 seconds)
2019-12-02 13:29:24	-->	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has joined ##rust
2019-12-02 13:31:01	netopso	it also looks like match creates a "temporary" which is only dropped at the end of the match statement (the closing brace). I ended up having to use .is_none() instead of `match`. is there a wayto manually drop the "temporary" value (which is matched against None/Some(s))?
2019-12-02 13:31:21	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-12-02 13:33:29	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-02 13:35:54	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-02 13:38:11	-->	mgrech__ (~mgrech@93-82-6-40.adsl.highway.telekom.at) has joined ##rust
2019-12-02 13:52:26	-->	bsdbandit-01 (~bsdbandit@2607:fb90:7d4b:5a0a:78e3:1313:a8e9:2834) has joined ##rust
2019-12-02 14:00:27	<--	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-45-148.dsl.bell.ca) has quit (Ping timeout: 268 seconds)
2019-12-02 14:08:13	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-02 14:09:15	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-12-02 14:17:27	<--	meandi_2 (~meandi@dyndsl-178-142-249-002.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-12-02 14:20:45	-->	bsdband71 (~bsdbandit@2607:fb90:7da5:33b2:7d15:2103:8115:d2b9) has joined ##rust
2019-12-02 14:21:33	<--	bsdbandit-01 (~bsdbandit@2607:fb90:7d4b:5a0a:78e3:1313:a8e9:2834) has quit (Ping timeout: 245 seconds)
2019-12-02 14:25:28	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-02 14:33:05	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-12-02 14:36:33	<--	AbedB_ (~AbedBhuty@bzq-79-180-105-86.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-02 14:36:38	-->	ign0tus (~mani@p200300C27F065D00E6B318FFFE897010.dip0.t-ipconnect.de) has joined ##rust
2019-12-02 14:39:43	-->	meandi (~meandi@dyndsl-178-142-249-002.ewe-ip-backbone.de) has joined ##rust
2019-12-02 14:44:00	-->	cdepillabout (~cdepillab@p8791173-ipbf1323marunouchi.tokyo.ocn.ne.jp) has joined ##rust
2019-12-02 14:44:25	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 265 seconds)
2019-12-02 14:49:12	-->	tsaka__ (~torstein@ppp005054167071.access.hol.gr) has joined ##rust
2019-12-02 14:49:30	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-12-02 14:52:05	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-02 14:53:10	<--	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has quit (Remote host closed the connection)
2019-12-02 14:53:38	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-12-02 14:55:57	-->	drewr (~drew@elastic/staff/drewr) has joined ##rust
2019-12-02 14:57:17	<--	con3 (~kvirc@165.255.106.186) has quit (Ping timeout: 264 seconds)
2019-12-02 14:58:34	elichai2	I'm trying to find where do derive macros like `Debug` are defined in rustc so I can see how do they handle to core vs std problem
2019-12-02 15:01:23	sfackler	elichai2: https://github.com/rust-lang/rust/tree/master/src/libsyntax_ext/deriving
2019-12-02 15:01:40	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-02 15:02:30	elichai2	sfackler: Thank you! I love syntax there :)
2019-12-02 15:02:36	elichai2	`macro pathvec_std` :D
2019-12-02 15:03:26	<--	drewr (~drew@elastic/staff/drewr) has quit (Quit: ERC (IRC client for Emacs 26.3))
2019-12-02 15:03:43	elichai2	altough too much heap allocations hehe
2019-12-02 15:03:44	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-02 15:05:35	elichai2	altough I just don't understand the `path_std` macro :(
2019-12-02 15:06:39	elichai2	oh now I do I think. it takes it from the `ExtCtxt` context which I don't have
2019-12-02 15:07:22	-->	drewr (~drew@elastic/staff/drewr) has joined ##rust
2019-12-02 15:10:58	elichai2	should I really feature gate this? there must be a better solution
2019-12-02 15:28:18	elichai2	I honestly don't get it. when I use `cargo expand` it shows like all the derive implementations(i.e. Default) use `::core::*` but only *my* derive complain about `maybe a missing crate `core`?`
2019-12-02 15:33:59	rtyler	greetings! I'm having trouble with lifetimes and the clap crate, figured maybe somebody around would be able to help me parse this https://gist.github.com/rtyler/041d6f8850d1cf43e12d83f41d189c65
2019-12-02 15:34:32	rtyler	when the .collect::<>() is omitted, there's no compile error, but it's not clear to me what's happening with `matches`
2019-12-02 15:38:24	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-12-02 15:38:33	<--	saati (~s@marvin.harmless.hu) has quit (Ping timeout: 265 seconds)
2019-12-02 15:39:35	<--	cdepillabout (~cdepillab@p8791173-ipbf1323marunouchi.tokyo.ocn.ne.jp) has quit (Quit: Leaving)
2019-12-02 15:43:09	jbg	rtyler: what are you doing with `topics` after line 80?
2019-12-02 15:43:23	jbg	it would be easiest if you could just show the code
2019-12-02 15:44:20	rtyler	hrm, a thread takes it
2019-12-02 15:44:24	jbg	the error message is basically saying that you're borrowing from matches (because you're collecting string references into the Vec)
2019-12-02 15:44:31	jbg	right, and then you pass topics into a thread
2019-12-02 15:44:40	jbg	but matches only lasts until the end of the function line 80 is in
2019-12-02 15:44:46	jbg	(maybe main())
2019-12-02 15:44:53	rtyler	indeed within main
2019-12-02 15:45:04	jbg	but it could be any fn, the point is that matches only lives until the end of the scope
2019-12-02 15:45:08	jbg	but topics outlives that
2019-12-02 15:45:16	rtyler	right, so I see
2019-12-02 15:45:29	jbg	you most likely just want to clone the strings so that you're not holding references to the matches returned from clap
2019-12-02 15:45:32	rtyler	I was reading this error as if it were entirely about matches specifically, which I don't use after this line
2019-12-02 15:45:37	 *	rtyler nods
2019-12-02 15:45:50	jbg	rust is inferring that the Vec is a Vec<&'static str>
2019-12-02 15:45:59	jbg	from the later use of it
2019-12-02 15:46:43	-->	AbedB (~AbedBhuty@bzq-79-180-105-86.red.bezeqint.net) has joined ##rust
2019-12-02 15:48:24	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-02 15:49:40	<--	tsaka__ (~torstein@ppp005054167071.access.hol.gr) has quit (Ping timeout: 265 seconds)
2019-12-02 15:51:44	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-02 15:51:47	<--	con3 (~kvirc@165.255.106.186) has quit (Client Quit)
2019-12-02 15:54:07	--	daimonos is now known as jellie
2019-12-02 15:54:42	rtyler	I think that's enough to push me in the right direction, thanks jbg
2019-12-02 15:54:47	jbg	np!
2019-12-02 15:55:38	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-02 15:56:14	jellie	Hello all
2019-12-02 15:56:20	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-02 15:56:46	jellie	Say I have a type x that is an iterator.
2019-12-02 15:57:05	jellie	I then borrow x and in this fn that borrows x I want to iterate over it.
2019-12-02 15:57:15	jellie	However &x is not an iterator
2019-12-02 15:57:37	jellie	Isn't there a way to iterate over x? I seem remember there was.
2019-12-02 15:57:41	jbg	most of the iterator methods take self by mutable reference; most importantly next()
2019-12-02 15:57:52	jbg	so as long as you pass &mut x into the fn, you can iterate x
2019-12-02 16:00:19	jellie	jbg: Okay let me try that
2019-12-02 16:01:43	jbg	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b9e3593bfc62019fa4a7c3878a2e470f
2019-12-02 16:04:05	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-02 16:05:16	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-02 16:06:06	<--	meandi (~meandi@dyndsl-178-142-249-002.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-12-02 16:06:16	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Ping timeout: 240 seconds)
2019-12-02 16:11:01	-->	jenny-m (~jdm-@135-23-188-241.cpe.pppoe.ca) has joined ##rust
2019-12-02 16:14:02	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-02 16:15:46	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-02 16:18:58	-->	porky11 (~porky11@p200300F843C0E50EB6D5BDFFFE20A28D.dip0.t-ipconnect.de) has joined ##rust
2019-12-02 16:27:51	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-12-02 16:28:39	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-12-02 16:29:57	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Ping timeout: 250 seconds)
2019-12-02 16:30:52	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-02 16:31:41	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-02 16:35:46	<--	nevill (~nevill@116.233.242.36) has quit (Quit: nevill)
2019-12-02 16:35:54	<--	endless90 (~endless90@p200300C577307600A45287FD24037508.dip0.t-ipconnect.de) has quit (Quit: endless90)
2019-12-02 16:37:01	-->	tsaka__ (~torstein@ppp005054167071.access.hol.gr) has joined ##rust
2019-12-02 16:45:05	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-02 16:47:44	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-02 16:48:04	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-12-02 16:53:47	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 276 seconds)
2019-12-02 16:58:06	-->	gioyik (~gioyik@186.114.52.209) has joined ##rust
2019-12-02 17:06:56	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (Ping timeout: 240 seconds)
2019-12-02 17:12:14	<--	tsaka__ (~torstein@ppp005054167071.access.hol.gr) has quit (Ping timeout: 268 seconds)
2019-12-02 17:13:20	-->	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has joined ##rust
2019-12-02 17:13:42	justsomeguy	I just want to say that rusts module system is awesome. That is all. :^)
2019-12-02 17:14:00	codeaholic	seconded
2019-12-02 17:14:56	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-12-02 17:15:07	j`ey	funny cos often people hate it
2019-12-02 17:15:16	j`ey	or at least are confused by it
2019-12-02 17:16:22	codeaholic	it has changed a bit over time.
2019-12-02 17:16:30	codeaholic	for the better IMO
2019-12-02 17:17:40	<--	SpaceManiac (~SpaceMani@2601:200:4400:f::10e6) has quit (Ping timeout: 252 seconds)
2019-12-02 17:19:28	justsomeguy	I like that it gives you the building blocks of encapsulation/interfaces to arrange any way you like.
2019-12-02 17:20:01	justsomeguy	If that makes sense.
2019-12-02 17:24:50	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-12-02 17:26:32	<--	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-12-02 17:26:33	<--	sujeet (sujeet@unaffiliated/freeboson) has quit (Ping timeout: 245 seconds)
2019-12-02 17:27:30	<--	con3 (~kvirc@165.255.106.186) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-12-02 17:28:14	-->	krystcich (~krystcich@088156132039.dynamic-ww-04.vectranet.pl) has joined ##rust
2019-12-02 17:28:40	-->	sujeet (sujeet@unaffiliated/freeboson) has joined ##rust
2019-12-02 17:29:47	-->	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has joined ##rust
2019-12-02 17:29:57	-->	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has joined ##rust
2019-12-02 17:32:17	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-12-02 17:36:54	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 268 seconds)
2019-12-02 17:39:28	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Ping timeout: 245 seconds)
2019-12-02 17:41:08	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-12-02 17:42:32	<--	ign0tus (~mani@p200300C27F065D00E6B318FFFE897010.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-02 17:45:12	-->	mcoffin (~mcoffin@unaffiliated/mcoffin) has joined ##rust
2019-12-02 17:47:37	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-02 17:51:24	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 252 seconds)
2019-12-02 17:52:57	<--	justsomeguy (~justsomeg@unaffiliated/--/x-3805311) has left ##rust
2019-12-02 17:54:41	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-12-02 17:55:04	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-12-03 09:07:31	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-03 09:07:31	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-03 09:07:31	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-03 09:07:31	--	Channel ##rust: 610 nicks (2 ops, 0 voices, 608 normals)
2019-12-03 09:07:47	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-03 09:08:05	-->	minsec (~shijiafen@104.192.108.10) has joined ##rust
2019-12-03 09:08:36	<--	minsec_ (~shijiafen@2405:a900:ffee:257:cc9:ef04:629b:fe26) has quit (Ping timeout: 246 seconds)
2019-12-03 09:12:18	-->	ionelmc (uid20175@python/site-packages/ionelmc) has joined ##rust
2019-12-03 09:15:00	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-12-03 09:30:07	<--	Kinnison (~dsilvers@quassel.co.uk) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2019-12-03 09:34:03	<--	vasilakisfil (~vasilakis@51.15.225.200) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.1 - http://znc.in)
2019-12-03 09:35:49	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-12-03 09:46:53	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-12-03 09:47:58	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-12-03 09:49:44	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-12-03 09:50:17	-->	Kinnison (~dsilvers@quassel.co.uk) has joined ##rust
2019-12-03 09:51:57	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-03 09:58:09	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-12-03 09:59:24	<--	johnnyfive (~johnnyfiv@unaffiliated/isalive) has quit (Ping timeout: 252 seconds)
2019-12-03 10:01:52	-->	johnnyfive (~johnnyfiv@unaffiliated/isalive) has joined ##rust
2019-12-03 10:07:17	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 276 seconds)
2019-12-03 10:11:17	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 240 seconds)
2019-12-03 10:11:27	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-03 10:12:57	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-03 10:14:47	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-03 10:14:55	-->	sgift (~sgift@2001:a61:35e0:ab01:b1e8:a7db:2065:60e4) has joined ##rust
2019-12-03 10:20:49	yrp	is there any reason to use the hashbrown crate now that its been merged into std?
2019-12-03 10:20:56	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-12-03 10:22:19	Kinnison	If you want control over the bits that std defaults to, I guess
2019-12-03 10:24:08	yrp	k
2019-12-03 10:24:11	yrp	thanks
2019-12-03 10:32:38	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 276 seconds)
2019-12-03 10:37:49	-->	maelcum (~horst@2001:16b8:c135:a800:dd4f:7083:5961:64b8) has joined ##rust
2019-12-03 10:40:17	<--	jtbx (~jtbx@hetzner-01.h.jtbx.de) has quit (Ping timeout: 240 seconds)
2019-12-03 10:40:39	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Ping timeout: 250 seconds)
2019-12-03 10:40:45	-->	jtbx (~jtbx@hetzner-01.h.jtbx.de) has joined ##rust
2019-12-03 10:40:57	<--	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has quit (Ping timeout: 240 seconds)
2019-12-03 10:40:57	<--	sjums (~nick@hurtig.ninja) has quit (Ping timeout: 240 seconds)
2019-12-03 10:41:17	<--	Kilo`byte (~kilobyte@banana-new.kilobyte22.de) has quit (Ping timeout: 240 seconds)
2019-12-03 10:41:29	-->	Kilo`byte (~kilobyte@2a01:4f8:201:34c7::1) has joined ##rust
2019-12-03 10:42:17	<--	johnnyfive (~johnnyfiv@unaffiliated/isalive) has quit (Ping timeout: 240 seconds)
2019-12-03 10:42:17	<--	athaudia (athaudia@athaudia.com) has quit (Ping timeout: 240 seconds)
2019-12-03 10:42:17	<--	easye (~user@oxi.slack.net) has quit (Ping timeout: 240 seconds)
2019-12-03 10:42:17	<--	Philonous (~Philonous@unaffiliated/philonous) has quit (Ping timeout: 240 seconds)
2019-12-03 10:42:17	<--	Zorton (~zorton@unaffiliated/zorton) has quit (Ping timeout: 240 seconds)
2019-12-03 10:42:35	-->	athaudia (athaudia@athaudia.com) has joined ##rust
2019-12-03 10:43:57	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 240 seconds)
2019-12-03 10:43:58	-->	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has joined ##rust
2019-12-03 10:45:27	elichai2	ssbr: between what and what?
2019-12-03 10:45:30	<--	rople (rople@gateway/vpn/privateinternetaccess/rople) has quit (Ping timeout: 268 seconds)
2019-12-03 10:47:30	-->	Philonous (~Philonous@unaffiliated/philonous) has joined ##rust
2019-12-03 10:47:33	-->	sjums (~nick@hurtig.ninja) has joined ##rust
2019-12-03 10:51:09	-->	Alan (~alan@unaffiliated/alan) has joined ##rust
2019-12-03 10:57:23	<--	jacob_ (~jacobirc@unaffiliated/jacob) has quit (Ping timeout: 245 seconds)
2019-12-03 10:59:46	-->	johnnyfive (~johnnyfiv@unaffiliated/isalive) has joined ##rust
2019-12-03 11:05:39	-->	jacob_ (~jacobirc@unaffiliated/jacob) has joined ##rust
2019-12-03 11:06:30	<--	gioyik (~gioyik@186.114.52.209) has quit (Ping timeout: 252 seconds)
2019-12-03 11:10:13	-->	endless90 (~endless90@p200300DA372BCF006C816CC8E1322DD6.dip0.t-ipconnect.de) has joined ##rust
2019-12-03 11:11:05	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-12-03 11:12:58	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-03 11:17:42	-->	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has joined ##rust
2019-12-03 11:19:42	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-03 11:22:27	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-03 11:23:22	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-03 11:24:00	-->	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has joined ##rust
2019-12-03 11:27:33	-->	MaxSan (~four@193.148.16.211) has joined ##rust
2019-12-03 11:33:01	-->	justanotheruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-12-03 11:33:50	-->	metnel (~metnel@212.29.206.113) has joined ##rust
2019-12-03 11:35:05	<--	metnel (~metnel@212.29.206.113) has quit (Quit: metnel)
2019-12-03 11:35:55	-->	metnel (~metnel@212.29.206.113) has joined ##rust
2019-12-03 11:35:57	<--	metnel (~metnel@212.29.206.113) has quit (Remote host closed the connection)
2019-12-03 11:36:32	-->	metnel (~metnel@212.29.206.113) has joined ##rust
2019-12-03 11:36:47	<--	metnel (~metnel@212.29.206.113) has quit (Remote host closed the connection)
2019-12-03 11:38:13	-->	metnel (~binyamin@212.29.206.113) has joined ##rust
2019-12-03 11:39:37	metnel	If there is a create which on building state that my target is not available. what are the options?
2019-12-03 11:40:00	j`ey	what target is that?
2019-12-03 11:40:13	metnel	x86_64-unknown-linux-musl
2019-12-03 11:40:17	metnel	or really, alpine
2019-12-03 11:40:45	j`ey	I dont think you can really do anything
2019-12-03 11:40:52	j`ey	maybe see why it doesnt work and try fix it?
2019-12-03 11:41:17	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 240 seconds)
2019-12-03 11:41:32	metnel	Yeah, I found the source for the create, but I am not sure where it even states the target
2019-12-03 11:42:01	j`ey	what was the error you got?
2019-12-03 11:42:07	j`ey	maybe it was from the build.rs file
2019-12-03 11:42:39	metnel	just that my target doesn't support 'those crate types'
2019-12-03 11:42:45	j`ey	ah
2019-12-03 11:42:47	j`ey	proc macro?
2019-12-03 11:43:54	metnel	I think, the crate is euclid_macros
2019-12-03 11:44:18	-->	t7 (~tommo@2a00:23c5:1284:fc00:d46b:b3b1:de8b:1ad7) has joined ##rust
2019-12-03 11:46:40	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-03 11:47:17	<--	ski (~ski@remote11.chalmers.se) has quit (Ping timeout: 240 seconds)
2019-12-03 11:47:39	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-03 11:50:29	metnel	j`ey: Okay, thanks, I found that there is an issue already open -> https://github.com/alexcrichton/proc-macro2/issues/139
2019-12-03 11:51:39	-->	marmoute (~marmoute@62-210-81-168.rev.poneytelecom.eu) has joined ##rust
2019-12-03 11:51:42	marmoute	Hello htere
2019-12-03 11:52:06	marmoute	I am trying to install rustfmt on debian but how to get it is unclear.
2019-12-03 11:54:28	jbg	rustup component add rustfmt
2019-12-03 11:56:59	marmoute	command not found: rustup
2019-12-03 11:57:06	marmoute	E: Unable to locate package rustup
2019-12-03 11:57:31	jbg	oh, i assumed you already had rustup. do you have rust/cargo/etc?
2019-12-03 11:57:41	jbg	*rustc/cargo/etc
2019-12-03 11:58:29	jbg	rustup doesn't seem to be in debian's package repositories, probably because they don't like tools that are used to install other software that aren't apt
2019-12-03 11:58:29	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 265 seconds)
2019-12-03 11:59:34	marmoute	I have rust and cargo
2019-12-03 11:59:45	jbg	so you can choose between keeping whatever (most likely out-of-date) rustc/etc that apt can install for you, or remove that and install rustup (https://rustup.rs) and then you'll be able to install rustfmt and other components easily
2019-12-03 12:00:06	<--	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has quit (Ping timeout: 246 seconds)
2019-12-03 12:00:56	jbg	if you really want to keep rustc/cargo from apt but still want rustfmt i guess you can just check it out and build it: https://github.com/rust-lang/rustfmt
2019-12-03 12:01:03	-->	hc (~ircd@unaffiliated/hc) has joined ##rust
2019-12-03 12:01:44	hc	hi all, any hints how to compare a HashSet<String> with a HashSet<&str>? I'm aware it's possible to convert String to &str, but maybe there's a more efficient way without having to rebuild the whole Set structure?
2019-12-03 12:02:20	j`ey	marmoute: so debian doesnt have a rustfmt pckaage?
2019-12-03 12:03:04	jbg	not even in unstable or experimental. someone could make one of course
2019-12-03 12:06:18	Kinnison	You can also install rustup, set up a system toolchain, and have it fallback to stable for rustfmt
2019-12-03 12:07:19	j`ey	interesting, didnt know rustup could have system toolchains
2019-12-03 12:08:46	-->	muhlinux (~muhlinux@45.12.220.162) has joined ##rust
2019-12-03 12:12:14	Kinnison	Rustup can do all sorts
2019-12-03 12:12:27	Kinnison	rustup toolchain link system /usr
2019-12-03 12:12:34	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-03 12:12:44	Kinnison	Then +system etc should work
2019-12-03 12:13:19	<--	AbedB (~AbedBhuty@bzq-79-180-105-86.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-03 12:13:26	j`ey	that's cool
2019-12-03 12:19:25	-->	azymi (~azymi@87.101.95.115) has joined ##rust
2019-12-03 12:23:42	-->	matty_r (~admin@110.141.215.83) has joined ##rust
2019-12-03 12:27:49	marmoute	jbg: okay, thanks for the building from source pointeur
2019-12-03 12:28:15	marmoute	Kinnison: but I don't have a package for rustup.
2019-12-03 12:31:45	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-03 12:32:21	jbg	Kinnison: yes, debian don't package it (they have a general aversion to packaging other "package managers" which i guess you could put rustup in the category of)
2019-12-03 12:32:23	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Ping timeout: 245 seconds)
2019-12-03 12:33:01	jbg	er, that should be marmoute: :)
2019-12-03 12:33:21	jbg	marmoute: you could create your own Debian package - it's not too difficult - or just install rustup the usual way as detailed on the website
2019-12-03 12:34:00	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-12-03 12:34:10	jbg	you can install it for a single user, so you don't need to worry about it putting things in /usr that aren't managed by apt, and then you can use Kinnison's suggestion to still use the rust toolchain that apt installed if you want to.
2019-12-03 12:34:24	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 246 seconds)
2019-12-03 12:34:49	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-03 12:37:57	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-03 12:51:54	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-03 12:52:23	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 276 seconds)
2019-12-03 12:54:02	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Read error: Connection reset by peer)
2019-12-03 12:56:48	<--	metnel (~binyamin@212.29.206.113) has quit (Quit: leaving)
2019-12-03 12:58:32	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-12-03 13:10:27	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-12-03 13:10:56	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-03 13:16:02	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-12-03 13:16:27	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-12-03 13:24:50	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Read error: Connection reset by peer)
2019-12-03 13:32:31	-->	zipper (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-03 13:34:46	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-03 13:42:41	<--	bsdbandit-01 (~bsdbandit@2607:fb90:7da5:33b2:7d15:2103:8115:d2b9) has quit (Remote host closed the connection)
2019-12-03 13:46:12	-->	BeerLover (~BeerBuddy@125.22.102.134) has joined ##rust
2019-12-03 13:49:56	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-03 13:57:58	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-03 13:58:15	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-03 14:05:48	-->	penguwin (~penguwin@static.88-198-33-9.clients.your-server.de) has joined ##rust
2019-12-03 14:05:49	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-03 14:06:27	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-12-03 14:12:17	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2019-12-03 14:12:20	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 276 seconds)
2019-12-03 14:13:01	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-03 14:15:36	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-12-03 14:19:35	-->	AbedB (~AbedBhuty@bzq-79-180-105-86.red.bezeqint.net) has joined ##rust
2019-12-03 14:23:52	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Write error: Connection reset by peer)
2019-12-03 14:23:52	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Read error: Connection reset by peer)
2019-12-03 14:23:52	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Write error: Connection reset by peer)
2019-12-03 14:24:01	--	zipper is now known as jelliw
2019-12-03 14:24:04	--	jelliw is now known as jellie
2019-12-03 14:28:10	<--	con3 (~kvirc@165.255.106.186) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-12-03 14:29:19	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-12-03 14:29:22	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-12-03 14:30:12	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-12-03 14:33:24	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-12-03 14:33:44	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-12-03 14:34:35	<--	dodobrain__ (~dodobrain@unaffiliated/freakabcd) has quit (Remote host closed the connection)
2019-12-03 14:35:01	-->	dodobrain__ (~dodobrain@unaffiliated/freakabcd) has joined ##rust
2019-12-03 14:37:59	murla	Hi, what is needed for Gotlab's CI to be able to build binaries with LTO (link time optimization)? Using latest stable image for building.
2019-12-03 14:38:04	murla	*Gitlab
2019-12-03 14:45:12	-->	the_ment (~thement@ibawizard.net) has joined ##rust
2019-12-03 14:45:34	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-03 14:52:24	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-03 14:54:01	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 268 seconds)
2019-12-03 14:55:44	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-03 14:56:35	--	coderobe8 is now known as coderobe
2019-12-03 14:56:53	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-03 14:57:54	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Read error: Connection reset by peer)
2019-12-03 14:58:17	-->	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has joined ##rust
2019-12-03 15:06:07	-->	dowwie (dowwie@gateway/vpn/nordvpn/dowwie) has joined ##rust
2019-12-03 15:06:18	-->	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-12-03 15:14:10	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (*.net *.split)
2019-12-03 15:16:37	jellie	Say I have a Vec<String> and a &Vec<String>
2019-12-03 15:16:55	jellie	What's the best way to compare the strings in contained for equality?
2019-12-03 15:17:08	jellie	actually compare the vectors
2019-12-03 15:17:12	jellie	order doesn't matter
2019-12-03 15:17:29	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-03 15:19:17	<--	carado (~carado@2a01:e35:2ebf:3970:6ac:c692:c356:dc8c) has quit (Ping timeout: 276 seconds)
2019-12-03 15:21:00	<--	narispo (~narispo@37.120.204.10) has quit (Ping timeout: 265 seconds)
2019-12-03 15:24:16	j`ey	jellie: dosnt a == &b work?
2019-12-03 15:24:28	j`ey	oh, well order does matter for a vec
2019-12-03 15:25:38	jbg	if order doesn't matter, consider using a set
2019-12-03 15:26:04	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-03 15:26:09	jbg	else i guess you'd have to loop over one vec and check if the other vec contains, or sort them before comparing
2019-12-03 15:27:19	-->	localhorse (uid18992@gateway/web/irccloud.com/x-sbeaznzpgfrcucfd) has joined ##rust
2019-12-03 15:29:06	-->	twosquared (~twosquare@2001:630:e4:4220:ab95:3685:b1fc:4b15) has joined ##rust
2019-12-03 15:29:58	<--	sacredfrog (~ryan@dev.appthecloud.io) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-12-03 15:31:08	<--	drincruz (~adriancru@104.129.137.82) has quit (Ping timeout: 245 seconds)
2019-12-03 15:32:22	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-03 15:36:47	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-03 15:41:51	<--	AbedB (~AbedBhuty@bzq-79-180-105-86.red.bezeqint.net) has quit (Remote host closed the connection)
2019-12-03 15:41:58	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 245 seconds)
2019-12-03 15:42:00	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 246 seconds)
2019-12-03 15:45:27	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-12-03 15:45:46	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-03 15:45:50	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-12-03 15:47:38	-->	tracker1 (~Michael@65.121.173.226) has joined ##rust
2019-12-03 15:48:02	<--	tracker1 (~Michael@65.121.173.226) has quit (Client Quit)
2019-12-03 15:49:27	-->	tracker1 (~tracker1@65.121.173.226) has joined ##rust
2019-12-03 15:51:30	-->	narispo (~narispo@2a01:e0a:2a2:1590:9665:2dff:fea4:9486) has joined ##rust
2019-12-03 15:52:03	<--	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has quit (Quit: Konversation terminated!)
2019-12-03 15:53:05	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-12-03 15:58:47	<--	pjs902 (~quassel@140.184.2.20) has quit (Quit: pjs902)
2019-12-03 15:59:35	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Ping timeout: 276 seconds)
2019-12-03 16:01:46	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-03 16:06:57	<--	ign0tus (~mani@ip-178-249-30-50.static.reverse.dsi.net) has quit (Quit: Leaving.)
2019-12-03 16:07:46	-->	EvilKhaosKat (~evilkhaos@134.17.27.127) has joined ##rust
2019-12-03 16:08:10	-->	bluezone (uid104970@gateway/web/irccloud.com/x-zdfjcxjxnmtmkcsj) has joined ##rust
2019-12-03 16:10:41	-->	easyAnalyst (~easyAnaly@unaffiliated/easyanalyst) has joined ##rust
2019-12-03 16:11:08	<--	EvilKhaosKat (~evilkhaos@134.17.27.127) has quit
2019-12-03 16:11:17	<--	easyAnalyst (~easyAnaly@unaffiliated/easyanalyst) has left ##rust
2019-12-03 16:15:48	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-12-03 16:15:57	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 240 seconds)
2019-12-03 16:17:43	-->	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has joined ##rust
2019-12-03 16:20:06	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-03 16:22:40	-->	metnel (~metnel@212.29.206.113) has joined ##rust
2019-12-03 16:25:09	-->	cdown (~cdown@rrcs-24-103-44-77.nyc.biz.rr.com) has joined ##rust
2019-12-03 16:25:36	-->	nevill (~nevill@116.233.242.36) has joined ##rust
2019-12-03 16:26:05	-->	kagaherk (~kagaherk@ptr-822w9odldnhagh2055u.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-03 16:27:27	<--	metnel (~metnel@212.29.206.113) has quit (Quit: metnel)
2019-12-03 16:29:02	-->	hexfive (~hexfive@50.35.80.237) has joined ##rust
2019-12-03 16:29:55	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 250 seconds)
2019-12-03 16:30:46	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-03 16:33:48	osa1	when working on a code base without help from RLS/rust-analyzer are there any hacks/tricks to force compiler to print type of a local variables? I have something like `if let Foo(bar) = ... { ... }` and I want to know what fully qualified type of `bar` is
2019-12-03 16:34:00	Lumpio-	let () = bar;
2019-12-03 16:34:07	 *	osa1 tries
2019-12-03 16:34:18	Lumpio-	It'll fail with a type mismatch (well, unless it really is () I suppose)
2019-12-03 16:34:33	osa1	Lumpio-: it gives me the type name, but not what it's instantiated with
2019-12-03 16:34:41	<--	rardiol (~quassel@177.52.226.74) has quit (Ping timeout: 250 seconds)
2019-12-03 16:34:49	Lumpio-	What do you mean "what it's instantiated with"?
2019-12-03 16:34:52	osa1	so e.g. it says "expected Vec found ()" instead of "expected Vec<u64> found ()" which is what I need
2019-12-03 16:35:02	Lumpio-	Well that's odd
2019-12-03 16:35:13	Lumpio-	It should print all the generic arguments as well
2019-12-03 16:35:13	osa1	oh, wait
2019-12-03 16:35:17	osa1	it gives a few of the generic args
2019-12-03 16:35:19	osa1	but not all
2019-12-03 16:35:23	osa1	but this is already helpful, thanks
2019-12-03 16:35:40	j`ey	osa1: so the Vec was just an example?
2019-12-03 16:35:55	<--	drincruz (~adriancru@104.129.137.82) has quit (Ping timeout: 265 seconds)
2019-12-03 16:36:06	Lumpio-	Are you sure the type it's printing without arguments has any arguments
2019-12-03 16:36:10	Lumpio-	Because AFAIK it really should print all of the
2019-12-03 16:36:12	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-03 16:36:12	Lumpio-	m
2019-12-03 16:36:48	vorner	I think there's some limit to the length. I've seen some of the inner ones replaced by _ myself in some error messages.
2019-12-03 16:36:54	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-12-03 16:37:14	Lumpio-	I've gotten up to four lines or so at least
2019-12-03 16:37:17	Lumpio-	Of type names
2019-12-03 16:37:25	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-03 16:37:28	osa1	yeah some of the args are replaced by _
2019-12-03 16:37:55	Lumpio-	Is that type_length_limit in action or something
2019-12-03 16:38:35	<--	cdown (~cdown@rrcs-24-103-44-77.nyc.biz.rr.com) has quit (Ping timeout: 276 seconds)
2019-12-03 16:38:51	Lumpio-	...wait that's the argument for actual compilation
2019-12-03 16:38:59	Lumpio-	Is there a separate flag to print full type names or something
2019-12-03 16:39:24	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-03 16:45:16	-->	noonien (uid162445@gateway/web/irccloud.com/x-caxsihqbswcedgop) has joined ##rust
2019-12-03 16:46:59	<--	twosquared (~twosquare@2001:630:e4:4220:ab95:3685:b1fc:4b15) has quit (Quit: Leaving)
2019-12-03 16:47:21	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-12-03 16:50:49	-->	silves89 (b97de22a@185.125.226.42) has joined ##rust
2019-12-03 16:54:39	<--	lopsided98 (~quassel@2601:18a:0:ff60:c4fb:f64c:c256:2d6e) has quit (Quit: Disconnected)
2019-12-03 16:56:55	-->	lopsided98 (~quassel@2601:18a:0:ff60:74ee:4482:b0e8:e18c) has joined ##rust
2019-12-03 16:57:32	hashworks	Is it possible to implement the iterator trait to a pub struct of an extern crate? Rust gives me "only traits defined in the current crate can be implemented for arbitrary types
2019-12-03 16:58:51	-->	dsmith-work (~user@mail.avid-tech.com) has joined ##rust
2019-12-03 16:59:55	-->	alfonsox (~nimrod@110.172.150.15) has joined ##rust
2019-12-03 17:00:21	-->	gioyik (~gioyik@186.114.52.209) has joined ##rust
2019-12-03 17:02:59	-->	zbrown (sid200994@gateway/web/irccloud.com/x-pwvriuatwdnegzrj) has joined ##rust
2019-12-03 17:05:05	-->	krystcich (~krystcich@088156132099.dynamic-ww-04.vectranet.pl) has joined ##rust
2019-12-03 17:08:28	<--	lopsided98 (~quassel@2601:18a:0:ff60:74ee:4482:b0e8:e18c) has quit (Quit: Disconnected)
2019-12-03 17:09:08	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 252 seconds)
2019-12-03 17:10:11	-->	lopsided98 (~quassel@c-73-149-219-1.hsd1.ma.comcast.net) has joined ##rust
2019-12-03 17:11:49	-->	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has joined ##rust
2019-12-03 17:11:54	Lumpio-	hashworks: Nope, you can't implement a trait for a type if they're both in an external crate (orphan rule)
2019-12-03 17:12:08	Lumpio-	The usual solution is to create a local newtype over the type to implement the iterator for
2019-12-03 17:13:55	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-12-03 17:15:33	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-12-03 17:16:08	jbg	Lumpio-: osa1: I always thought that it printed <_> when the type was not inferred, so if all rustc knew was that you were building a Vec "of something", it would say
2019-12-03 17:16:13	jbg	"expected Vec<_>, found ..."
2019-12-03 17:16:38	jbg	i am not sure there is some size limit, because I have had futures code print type errors that are 20 lines long, and the types are still written in full
2019-12-03 17:18:45	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-03 17:19:23	jbg	i'm not sure exactly how it works, but if the type inside the Vec was going to be inferred based on something that appeared on a subsequent line, perhaps the error gets emitted before the type inside the vec is known
2019-12-03 17:20:01	jbg	since it's enough to know that it's a type error already, if it's not a Vec, without knowing the type inside
2019-12-03 17:20:51	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-12-03 17:21:27	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-03 17:24:23	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-12-03 17:29:01	-->	andrewzah (~andrewzah@cpe-98-25-244-188.sc.res.rr.com) has joined ##rust
2019-12-03 17:31:59	hashworks	Lumpio-: Hm yeah I thought so. Just looked weird to do it that way. I'm trying to implement one for sqlite::Cursor, but I'm having some lifetime issues [1]. Rust want's a lifetime for 'type Item = &', but I don't really know where to take it from.
2019-12-03 17:32:00	hashworks	[1] https://fb.hash.works/iH0LQutX/
2019-12-03 17:32:06	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-03 17:32:09	hashworks	*wants
2019-12-03 17:32:47	jbg	the lifetimes of the items would usually come from the cursor
2019-12-03 17:33:59	jbg	impl<'a> Iterator for IterCursor<'a> { type Item = &'a [Sqlite::Value]; ... }
2019-12-03 17:34:02	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-03 17:34:29	-->	easyAnalyst (~easyAnaly@unaffiliated/easyanalyst) has joined ##rust
2019-12-03 17:35:01	jbg	btw the type param T in `struct IterCursor<'a, T>` (and the type bound to it on the impl block) is not necessary since your Iterator Item isn't generic
2019-12-03 17:35:33	jbg	it's always going to be `&'a [sqlite::Value]`
2019-12-03 17:35:46	hashworks	Hm RLS expects one
2019-12-03 17:36:19	jbg	i guess what you pasted is not your actual code?
2019-12-03 17:37:00	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-03 17:38:08	hashworks	Well I have some more lines, but regarding the iterator struct that's all I have. But I had to remove `, T>` from the IterCursor struct, now it doesn't complain :)
2019-12-03 17:38:17	hashworks	Now there is just `cannot infer an appropriate lifetime for autoref due to conflicting requirements
2019-12-03 17:38:22	hashworks	for cursor.next()
2019-12-03 17:38:27	-->	AbedB (~AbedBhuty@bzq-79-180-20-161.red.bezeqint.net) has joined ##rust
2019-12-03 17:38:36	jbg	yeah, that's what I said, the T is unnecessary (and you can't have it unless you use it in the struct)
2019-12-03 17:38:46	jbg	did you add the lifetimes as I indicated above?
2019-12-03 17:39:49	hashworks	Ah, sorry. Yup, I did: https://fb.hash.works/g6rmrTAL/
2019-12-03 17:40:29	-->	cart_man (~cart_man@8ta-250-3-123.telkomadsl.co.za) has joined ##rust
2019-12-03 17:40:58	hashworks	Compiler log: https://fb.hash.works/5uDsb3/
2019-12-03 17:41:57	-->	AbedB_ (~AbedBhuty@bzq-79-180-20-161.red.bezeqint.net) has joined ##rust
2019-12-03 17:42:07	<--	silves89 (b97de22a@185.125.226.42) has quit (Ping timeout: 260 seconds)
2019-12-03 17:42:14	cart_man	Hi everyone. I am looking for a bit of advice. I have a couple of serverside scripts running that is written in NodeJS. The way it works which I really like is a Socket Object gets created for every connection established and will then be kept in a List of Sockets and everyting the socket needs will also be inside that same object. Will I be able to do sometihng similar with Rust? Since its not really OOP and all that
2019-12-03 17:42:49	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-03 17:44:17	jbg	hashworks: when collaborating on problems like this it's good to use the playground as it allows a much faster change/compile/test cycle
2019-12-03 17:44:20	jbg	hashworks: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4c2ab6b5e7a66139c0527d060f7715b2
2019-12-03 17:44:38	jbg	hashworks: unfortunately the playground doesn't have sqlite but it's very easy to stub the two structs and one method you're using
2019-12-03 17:44:51	jbg	i give that just as an example of how to provide a playground link for something with an external dep really
2019-12-03 17:45:15	hashworks	jbg: Ah, I didn't use it because it didn't had sqlite :)
2019-12-03 17:45:36	jbg	yup
2019-12-03 17:46:00	<--	AbedB (~AbedBhuty@bzq-79-180-20-161.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-12-03 17:47:53	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-12-03 17:48:17	<--	AbedB_ (~AbedBhuty@bzq-79-180-20-161.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2019-12-03 17:49:37	hashworks	Ok, got it
2019-12-03 17:49:39	<--	kagaherk (~kagaherk@ptr-822w9odldnhagh2055u.18120a2.ip6.access.telenet.be) has quit (Remote host closed the connection)
2019-12-03 17:49:44	hashworks	Using a reference for the cursor works: cursor: &'a sqlite::Cursor<'a>
2019-12-03 17:49:54	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-03 17:50:20	jbg	yeah, that makes sense. the cursor's next() method doesn't return a slice which is bound to the lifetime of the cursor
2019-12-03 17:50:44	jbg	if you could change the sqlite library, changing the next() method to next(&mut self) -> Result<Option<&'a [Value]>> would also solve it
2019-12-03 17:50:51	jbg	as you can see by changing the stubs in the playground
2019-12-03 17:51:56	jbg	but there may be some implementation reason why next() returns a slice with a shorter lifetime (the lifetime of the reference passed in)
2019-12-03 17:52:08	-->	cdown (~cdown@163.114.130.128) has joined ##rust
2019-12-04 09:10:44	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-04 09:10:44	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-04 09:10:44	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-04 09:10:44	--	Channel ##rust: 628 nicks (1 op, 0 voices, 627 normals)
2019-12-04 09:11:00	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-04 09:12:14	<--	gioyik (~gioyik@186.114.52.209) has quit (Quit: WeeChat 2.6)
2019-12-04 09:14:34	-->	gioyik (~gioyik@186.114.52.209) has joined ##rust
2019-12-04 09:19:20	<--	Deide (~Deide@90.249.102.37) has quit (Quit: Seeee yaaaa)
2019-12-04 09:20:57	<--	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has quit (Ping timeout: 240 seconds)
2019-12-04 09:23:17	<--	gioyik (~gioyik@186.114.52.209) has quit (Quit: WeeChat 2.6)
2019-12-04 09:23:51	<--	simcop2387 (~simcop238@p3m/member/simcop2387) has quit (*.net *.split)
2019-12-04 09:23:51	<--	leah2 (~leah@vuxu.org) has quit (*.net *.split)
2019-12-04 09:23:51	<--	DTEIT (DTEIT@nat/redhat/x-qrfdhmowtefanjkz) has quit (*.net *.split)
2019-12-04 09:23:52	<--	W1lkins (~W1lkins@178.128.163.127) has quit (*.net *.split)
2019-12-04 09:23:52	<--	aqrln (~aqrln@142.93.101.49) has quit (*.net *.split)
2019-12-04 09:23:52	<--	rotty (rotty@ghost.xx.vu) has quit (*.net *.split)
2019-12-04 09:23:52	<--	Lumpio- (~matti@dsl-lhtbng12-54fa71-56.dhcp.inet.fi) has quit (*.net *.split)
2019-12-04 09:23:52	<--	chrempson (~chrempson@a24.me) has quit (*.net *.split)
2019-12-04 09:23:52	<--	apetresc (~apetresc@toroon474qw-lp130-03-65-95-169-25.dsl.bell.ca) has quit (*.net *.split)
2019-12-04 09:23:52	<--	haskell_enthusia (~twain@168.61.46.105) has quit (*.net *.split)
2019-12-04 09:23:52	<--	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-04 09:23:52	<--	endocrimes (~quassel@163.172.167.41) has quit (*.net *.split)
2019-12-04 09:23:52	<--	luis (~luis@kerno.org) has quit (*.net *.split)
2019-12-04 09:23:52	<--	spacekookie (~kookie@qaul.net/dev/spacekookie) has quit (*.net *.split)
2019-12-04 09:23:52	<--	cbmuser (~glaubitz@zlogin2.physik.fu-berlin.de) has quit (*.net *.split)
2019-12-04 09:23:52	<--	codeaholic (trey@linuxgeneration.org) has quit (*.net *.split)
2019-12-04 09:23:52	<--	yourfate (~yourfate@unaffiliated/yourfate) has quit (*.net *.split)
2019-12-04 09:23:52	<--	j`ey (~joey@unaffiliated/jey/x-00002) has quit (*.net *.split)
2019-12-04 09:23:52	<--	qbnk4 (~qbnk4@static.16.198.46.78.clients.your-server.de) has quit (*.net *.split)
2019-12-04 09:23:52	<--	eddie_pete (~eddie@ec2-18-206-63-77.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-04 09:23:52	<--	nshp (~hi@my.domain.is.better.thanyours.com) has quit (*.net *.split)
2019-12-04 09:23:52	<--	dr_lepper (~hades@amarok/developer/hades) has quit (*.net *.split)
2019-12-04 09:23:52	<--	apoc (~apoc@april-fools/2014/ninth/apoc) has quit (*.net *.split)
2019-12-04 09:23:52	<--	foodoo (~foodoo@static.227.205.46.78.clients.your-server.de) has quit (*.net *.split)
2019-12-04 09:23:52	<--	so (~so@unaffiliated/so) has quit (*.net *.split)
2019-12-04 09:23:56	-->	gioyik (~gioyik@186.114.52.209) has joined ##rust
2019-12-04 09:24:31	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-12-04 09:24:31	-->	leah2 (~leah@vuxu.org) has joined ##rust
2019-12-04 09:24:31	-->	DTEIT (DTEIT@nat/redhat/x-qrfdhmowtefanjkz) has joined ##rust
2019-12-04 09:24:31	-->	W1lkins (~W1lkins@178.128.163.127) has joined ##rust
2019-12-04 09:24:31	-->	codeaholic (trey@linuxgeneration.org) has joined ##rust
2019-12-04 09:24:31	-->	aqrln (~aqrln@142.93.101.49) has joined ##rust
2019-12-04 09:24:31	-->	chrempson (~chrempson@a24.me) has joined ##rust
2019-12-04 09:24:31	-->	rotty (rotty@ghost.xx.vu) has joined ##rust
2019-12-04 09:24:31	-->	Lumpio- (~matti@dsl-lhtbng12-54fa71-56.dhcp.inet.fi) has joined ##rust
2019-12-04 09:24:31	-->	haskell_enthusia (~twain@168.61.46.105) has joined ##rust
2019-12-04 09:24:31	-->	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has joined ##rust
2019-12-04 09:24:31	-->	luis (~luis@kerno.org) has joined ##rust
2019-12-04 09:24:31	-->	endocrimes (~quassel@163.172.167.41) has joined ##rust
2019-12-04 09:24:31	-->	foodoo (~foodoo@static.227.205.46.78.clients.your-server.de) has joined ##rust
2019-12-04 09:24:31	-->	spacekookie (~kookie@qaul.net/dev/spacekookie) has joined ##rust
2019-12-04 09:24:31	-->	cbmuser (~glaubitz@zlogin2.physik.fu-berlin.de) has joined ##rust
2019-12-04 09:24:31	-->	j`ey (~joey@unaffiliated/jey/x-00002) has joined ##rust
2019-12-04 09:24:31	-->	yourfate (~yourfate@unaffiliated/yourfate) has joined ##rust
2019-12-04 09:24:32	-->	qbnk4 (~qbnk4@static.16.198.46.78.clients.your-server.de) has joined ##rust
2019-12-04 09:24:32	-->	apoc (~apoc@april-fools/2014/ninth/apoc) has joined ##rust
2019-12-04 09:24:32	-->	eddie_pete (~eddie@ec2-18-206-63-77.compute-1.amazonaws.com) has joined ##rust
2019-12-04 09:24:32	-->	nshp (~hi@my.domain.is.better.thanyours.com) has joined ##rust
2019-12-04 09:24:32	-->	dr_lepper (~hades@amarok/developer/hades) has joined ##rust
2019-12-04 09:24:32	-->	so (~so@unaffiliated/so) has joined ##rust
2019-12-04 09:24:53	<--	simcop2387 (~simcop238@p3m/member/simcop2387) has quit (Max SendQ exceeded)
2019-12-04 09:24:53	<--	leah2 (~leah@vuxu.org) has quit (Max SendQ exceeded)
2019-12-04 09:24:53	<--	yourfate (~yourfate@unaffiliated/yourfate) has quit (Max SendQ exceeded)
2019-12-04 09:24:53	<--	so (~so@unaffiliated/so) has quit (Max SendQ exceeded)
2019-12-04 09:25:05	-->	so (~so@unaffiliated/so) has joined ##rust
2019-12-04 09:25:41	-->	apetresc (~apetresc@toroon474qw-lp130-03-65-95-169-25.dsl.bell.ca) has joined ##rust
2019-12-04 09:26:06	-->	leah2 (~leah@vuxu.org) has joined ##rust
2019-12-04 09:26:12	-->	yourfate (~yourfate@unaffiliated/yourfate) has joined ##rust
2019-12-04 09:27:18	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-12-04 09:27:45	-->	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has joined ##rust
2019-12-04 09:28:48	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 246 seconds)
2019-12-04 09:29:56	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-04 09:37:08	-->	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has joined ##rust
2019-12-04 09:38:12	<--	gioyik (~gioyik@186.114.52.209) has quit (Quit: WeeChat 2.6)
2019-12-04 09:38:33	<--	hussam (uid193284@gateway/web/irccloud.com/x-neqzjubymulmnkjc) has quit (Quit: Connection closed for inactivity)
2019-12-04 09:45:24	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-04 09:55:44	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-04 09:56:05	<--	chrisdotcode (~chrisdotc@unaffiliated/chrisdotcode) has quit (Quit: chrisdotcode)
2019-12-04 10:02:14	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-04 10:02:49	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 265 seconds)
2019-12-04 10:03:30	jbg	madprops: why take strings when you can accept arbitrary bytes? the API is more useful if it can be used with any bytes, rather than only UTF-8. say for example I want to encrypt a JPEG image. with your current API i'd have to base64-encode it first, enlarging it by 33%, even though you're just going to call .as_bytes() on the string straight away and turn it back into a &[u8]
2019-12-04 10:05:59	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-04 10:08:33	jbg	the same goes for the return type - returning a Vec<u8> rather than a String lets the caller decide how they want to encode it (if at all). maybe they're storing it in a file or transmitting it over a socket and don't need to encode it, so they can save space/bandwidth by just storing/transmitting the bytes.
2019-12-04 10:12:09	-->	ragecryx (~ragecryx@hrt933.static.otenet.gr) has joined ##rust
2019-12-04 10:12:52	<--	ENOBUFS (~ENOBUFS@072-177-019-125.res.spectrum.com) has quit (Quit: ZNC 1.7.2+deb3 - https://znc.in)
2019-12-04 10:13:15	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-04 10:13:45	madprops	jbg: sure, though this is just a note taking program, for text
2019-12-04 10:13:47	-->	ENOBUFS (~ENOBUFS@072-177-019-125.res.spectrum.com) has joined ##rust
2019-12-04 10:14:58	-->	fanta1 (~fanta1@p200300F76BC4450040986484E6D1F2DB.dip0.t-ipconnect.de) has joined ##rust
2019-12-04 10:15:03	jbg	right, i didn't look beyond the file you linked. in that context i'd just pick the most efficient encoding possible i guess. but i still don't understand why the enciphered notes are being encoded to a text format. where are they being stored?
2019-12-04 10:23:51	-->	maelcum (~horst@2001:16b8:c15b:700:f5f1:bb5a:589:46) has joined ##rust
2019-12-04 10:24:22	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-04 10:25:42	jbg	it seems like it's a file, in which case there's no need to base64 encode the ciphertext. just save it to the file
2019-12-04 10:28:22	<--	tsaka__ (~torstein@94.66.73.249) has quit (Quit: Konversation terminated!)
2019-12-04 10:28:38	-->	tsaka__ (~torstein@94.66.73.249) has joined ##rust
2019-12-04 10:31:04	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-04 10:32:33	<--	marusich (~marusich@unaffiliated/marusich) has quit (Remote host closed the connection)
2019-12-04 10:36:39	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 265 seconds)
2019-12-04 10:37:34	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-12-04 10:38:38	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-04 10:38:40	<--	b_jonas (~x@catv-176-63-14-58.catv.broadband.hu) has quit (Quit: leaving)
2019-12-04 10:40:33	--	pupskucheen is now known as pupskuchen
2019-12-04 10:40:52	elichai2	Hi, is there anything like `.iter()` but that works also on primitives?
2019-12-04 10:41:04	Kinnison	how do you mean?
2019-12-04 10:41:12	Kinnison	what would it mean to iterate a primitive type?
2019-12-04 10:41:12	elichai2	I want to be able to iterate over anything that impl Iterator *or* a single primitive
2019-12-04 10:41:33	Yaniel	basically you want to be able to handle `[1]` and `1` the same way?
2019-12-04 10:42:16	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-12-04 10:42:21	Yaniel	sounds a bit unnecessary to me (although something that seems common in python)
2019-12-04 10:42:39	Yaniel	but I suppose you could take a T and stuff it into an array first thing
2019-12-04 10:42:49	jbg	could do iter::once(x).flatten()
2019-12-04 10:42:51	Yaniel	and then call .iter().flatten()
2019-12-04 10:43:38	jbg	the docs are not clear on what flatten() does if there's no nesting, so i'm not sure if you could just do it unconditionally
2019-12-04 10:43:51	jbg	ah, Self::Item: IntoIterator is a bound
2019-12-04 10:45:37	elichai2	I'm writing a custom derive macro for LowerHex
2019-12-04 10:46:55	elichai2	right now I need to somehow diffrenciate between a primitive and an iterator, and for a primitive derive using  `write!(f, "{:02x}", self.#field); ` and an iterator `for ch in self.#field.iter {  write!(f, "{:02x}", ch); }`
2019-12-04 10:47:13	-->	ev4rist3 (~phoenix@x4e37f45b.dyn.telefonica.de) has joined ##rust
2019-12-04 10:49:49	elichai2	jbg: Yaniel doesn't quite work: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5b2efb0b6788b26dccd1e810e119b556
2019-12-04 10:50:33	<--	mixi (~mixi@exherbo/developer/mixi) has quit (Quit: mixi)
2019-12-04 10:56:57	<--	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has quit (Ping timeout: 240 seconds)
2019-12-04 10:59:57	-->	thequux (~thequux@ptr-fzs5rljnyl8he6q60yy.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-04 11:02:05	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-04 11:03:40	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-12-04 11:05:08	-->	ThornsA (~ThornsA@gateway/tor-sasl/thornsa) has joined ##rust
2019-12-04 11:10:57	<--	tsaka__ (~torstein@94.66.73.249) has quit (Ping timeout: 240 seconds)
2019-12-04 11:11:09	<--	ragecryx (~ragecryx@hrt933.static.otenet.gr) has quit (Quit: Leaving)
2019-12-04 11:12:44	<--	ThornsA (~ThornsA@gateway/tor-sasl/thornsa) has quit (Ping timeout: 260 seconds)
2019-12-04 11:12:47	elichai2	I don't think this is possible :(
2019-12-04 11:13:04	-->	mixi (~mixi@exherbo/developer/mixi) has joined ##rust
2019-12-04 11:15:25	-->	ThornsA (~ThornsA@gateway/tor-sasl/thornsa) has joined ##rust
2019-12-04 11:17:33	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-04 11:19:11	-->	geluso (~geluso@172.58.78.222) has joined ##rust
2019-12-04 11:20:54	daxim	I'm stuck on rustlings/exercises/enums/enums3.rs, see https://play.rust-lang.org/?gist=53bb891eca7441bd0ffef3a0fee6604a
2019-12-04 11:20:56	daxim	how do I get the string out of the message?
2019-12-04 11:20:58	daxim	I tried various postfix subscripts, but that wouldn't work
2019-12-04 11:22:07	Kinnison	daxim: Without looking, I'd imagine if you have enums and based on your query, I'd say "You probably need to learn about the match{} syntax"
2019-12-04 11:22:56	daxim	I have a match expression already
2019-12-04 11:23:14	daxim	that's not the problem
2019-12-04 11:23:54	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-04 11:24:11	j`ey	daxim: line 45 is the problem?
2019-12-04 11:24:21	daxim	yes
2019-12-04 11:24:30	<--	geluso (~geluso@172.58.78.222) has quit (Quit: geluso)
2019-12-04 11:24:33	Kinnison	Echo(s) => self.echo(s),  (ish)
2019-12-04 11:24:36	Kinnison	probably
2019-12-04 11:25:12	j`ey	Message::Echo(foo) => self.echo(foo),
2019-12-04 11:30:12	daxim	why do I need to qualify with Message:: for ChangeColor, Echo, Move, but not for Quit?
2019-12-04 11:30:38	j`ey	yoyu do for Quit too
2019-12-04 11:30:54	j`ey	without it, youre just creating a 'catch all'
2019-12-04 11:31:39	j`ey	if you put Quit => at the top, it would always quit, regardless of the message type
2019-12-04 11:32:17	daxim	how come Quit works as catch all, I thought the correct syntax for that is `_`?
2019-12-04 11:32:34	j`ey	anything works
2019-12-04 11:32:49	j`ey	_ is just 'un-named'
2019-12-04 11:32:54	daxim	what a design blunder! :(
2019-12-04 11:33:40	j`ey	it is something you have to remember
2019-12-04 11:34:49	-->	muhlinux (~muhlinux@45.12.220.233) has joined ##rust
2019-12-04 11:36:18	daxim	thanks for the help, I have managed to pass this exercise
2019-12-04 11:37:14	j`ey	yay
2019-12-04 11:37:24	 *	Kinnison suggests you spend some time consolidating your understanding of the match expression before you move on.
2019-12-04 11:37:44	daxim	do you have anything specific in mind?
2019-12-04 11:37:50	-->	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has joined ##rust
2019-12-04 11:37:59	yrp	if guards, match bindings
2019-12-04 11:38:43	Kinnison	Mostly understanding the pattern syntax, and how destructuring works in them.  Given your initial question
2019-12-04 11:39:05	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-12-04 11:41:50	<--	fanta1 (~fanta1@p200300F76BC4450040986484E6D1F2DB.dip0.t-ipconnect.de) has quit (Quit: fanta1)
2019-12-04 11:41:56	<--	Manishearth (~Manishear@wikipedia/Manishearth) has quit (Ping timeout: 276 seconds)
2019-12-04 11:42:25	-->	Manishearth (~Manishear@wikipedia/Manishearth) has joined ##rust
2019-12-04 11:44:15	<--	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has quit (Quit: バイバイ！ (^_^)/~)
2019-12-04 11:44:19	<--	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has quit (Ping timeout: 265 seconds)
2019-12-04 11:53:42	<--	upb (~cmpxchg@unaffiliated/upb) has quit (Ping timeout: 246 seconds)
2019-12-04 11:54:59	-->	t7 (~tommo@2a00:23c5:1284:fc00:797a:776:7e8d:a8c8) has joined ##rust
2019-12-04 11:55:54	tomboy64	Thanks for your elaboration, talchas.
2019-12-04 11:55:57	-->	recon_- (~quassel@2602:febc:0:b6::6ca2) has joined ##rust
2019-12-04 11:57:41	talin	hello. if i have a _ arm in a match, and i want to say println!("illegal value: ???"), how to i refer to the _?
2019-12-04 11:58:00	tomboy64	However I'm still in the dark about the advantage of tokio over async-std. Would it be accurate to say that async-std is the recent std take on the whole async - futures complex?
2019-12-04 11:58:04	voker57	talin: just name it whatever you like
2019-12-04 11:58:18	voker57	something => println!("{}", something)
2019-12-04 11:58:29	talin	voker57: huh, so something would catch all as well?
2019-12-04 11:58:32	voker57	yes
2019-12-04 11:58:36	voker57	_ is just a convention
2019-12-04 11:58:37	talin	what the...
2019-12-04 11:59:01	voker57	also starting variables with _ supresses "variable not used" warning
2019-12-04 11:59:17	talin	voker57: thank you, noble sir
2019-12-04 11:59:33	ZirconiumX	It's actually an interesting thing regarding patterns
2019-12-04 11:59:43	j`ey	funny, we just talked about that a few mins ago too :-)
2019-12-04 12:00:05	voker57	it's syntax of the day
2019-12-04 12:00:17	talin	this is like playing world of syntaxcraft
2019-12-04 12:01:09	ZirconiumX	Just wait until you get to things like `@` in patterns
2019-12-04 12:01:34	j`ey	_@[h .. t]
2019-12-04 12:01:45	j`ey	(I dunno if that compiles)
2019-12-04 12:01:52	ZirconiumX	Don't think so.
2019-12-04 12:02:06	ZirconiumX	(h, t) @ _ might?
2019-12-04 12:02:06	talin	is that a regular expression for finding e-mail addresses?
2019-12-04 12:02:10	talin	j/k
2019-12-04 12:02:17	belst	h @ (5 .. 10) works
2019-12-04 12:02:44	<--	dowwie (dowwie@gateway/vpn/nordvpn/dowwie) has quit (Ping timeout: 276 seconds)
2019-12-04 12:02:49	-->	dowwie_ (dowwie@gateway/vpn/nordvpn/dowwie) has joined ##rust
2019-12-04 12:03:43	ZirconiumX	`@` assigns a variable name to a pattern. For example `h @ (5 .. 10)` matches a number between 5 and 10, and then assigns that number to the variable `h`
2019-12-04 12:04:04	talin	cool
2019-12-04 12:04:30	ZirconiumX	So the `_` you traditionally write as a catch all desugars to `_ @ _`
2019-12-04 12:07:07	ZirconiumX	I generally write `foo @ _` when matching to tell myself that "yes I meant to catch everything"
2019-12-04 12:07:23	netopso	am I missing something? I keep finding situations where I want to get a reference to a value in an Option, but don't want to consume the original Option and/or replace it with None. What's the proper way to do this?
2019-12-04 12:07:43	yrp	netopso: as_ref or as_mut
2019-12-04 12:07:59	netopso	yrp: and then .expect() what comes out of as_ref?
2019-12-04 12:08:14	yrp	s reference to the wrapped value
2019-12-04 12:08:21	yrp	a reference*
2019-12-04 12:08:23	yrp	or a panic
2019-12-04 12:09:03	yrp	oh sorry, yes, and the .expect or .unwrap or match or if let
2019-12-04 12:09:06	netopso	yes, so if I know an Option contains a value and I want a reference to that value, I would do my_option.as_ref().expect("nothing here")
2019-12-04 12:09:22	yrp	sure
2019-12-04 12:09:24	netopso	ah ok great, thanks
2019-12-04 12:09:25	<--	ThornsA (~ThornsA@gateway/tor-sasl/thornsa) has quit (Quit: ThornsA)
2019-12-04 12:09:55	-->	upb (~cmpxchg@unaffiliated/upb) has joined ##rust
2019-12-04 12:11:12	yrp	alternatively you can also map across option i think
2019-12-04 12:11:15	yrp	which is also useful
2019-12-04 12:11:36	yrp	in some scenarios
2019-12-04 12:11:57	jbg	map consumes the option and gives you a new option though, so if you wanted a reference it may not be what you're looking for :)
2019-12-04 12:12:14	netopso	yeah, I don't want to eat the original just yet
2019-12-04 12:12:33	belst	Option implements Iterator, so you can use all the iterator combinators on Option aswell
2019-12-04 12:12:47	jbg	belst: i always forget that. it's super useful sometimes
2019-12-04 12:13:19	belst	yes, for example if u have Iterator<Item=Option<T>> and u want Iterator<Item=T> you can just it.flatten()
2019-12-04 12:13:25	belst	really cool tbh
2019-12-04 12:14:05	yrp	its a little known fact, but 90% of learning rust is just Option and Result ergonomics
2019-12-04 12:16:14	-->	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has joined ##rust
2019-12-04 12:19:04	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-04 12:25:51	belst	you can increase that to like 95% for Haskell tbh :)
2019-12-04 12:29:32	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-04 12:31:19	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-04 12:32:07	talin	is there a way to iterate over a Vec<&str> and get the index of the element too, sort of like enumerate()?
2019-12-04 12:32:14	j`ey	yes
2019-12-04 12:32:17	j`ey	enumerate() :P
2019-12-04 12:32:29	talin	hmm, i tried that
2019-12-04 12:32:36	talin	i'll try to figure out where i went wrong
2019-12-04 12:32:39	j`ey	vec.iter().enumerate()
2019-12-04 12:33:08	talin	iter()... is it is always iter() when i mess something up
2019-12-04 12:33:23	yrp	sometimes its into_iter() =p
2019-12-04 12:33:34	talin	hmm,
2019-12-04 12:35:45	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-04 12:36:03	jbg	talin: v.iter() if you want an iterator of references to items, v.into_iter() to consume the vec and get an iterator of owned items
2019-12-04 12:36:55	<--	BlackDex (~blackdex@ori.vyus.nl) has quit (Quit: ByeBye)
2019-12-04 12:37:44	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-04 12:39:25	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-12-04 12:41:25	-->	kokx (~kokx@kokx.org) has joined ##rust
2019-12-04 12:46:17	<--	m0rphism2 (~m0rphism@tmo-081-108.customers.d1-online.com) has quit (Ping timeout: 240 seconds)
2019-12-04 12:46:55	-->	BlackDex (~blackdex@ori.vyus.nl) has joined ##rust
2019-12-04 12:52:22	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-12-04 12:53:02	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-04 13:01:14	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-04 13:03:02	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-04 13:07:48	the_ment	any idea how to convince `config` crate to throw errors on unknown configuration options?
2019-12-04 13:07:51	talin	aah, that makes sense
2019-12-04 13:09:04	talin	i am having a borrowing issue right now. i want to modify digits that i create on line 17 in a loop below that... but i keep getting multiple mut references to it... https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5fa703d157108e495179ef6cbbed0b04
2019-12-04 13:10:44	j`ey	lol did you copy / paste from vim with a split window?
2019-12-04 13:11:36	j`ey	talin: I would just iterate from 0..digits.len()
2019-12-04 13:13:21	talin	j`ey: oooops! yes i did (emacs)
2019-12-04 13:17:02	georgemp	hi..is it safe to say that if the closure that is passed in produces an error, we should use and_then..else, use map?
2019-12-04 13:19:11	<--	con3 (~kvirc@165.255.106.186) has quit (Read error: Connection reset by peer)
2019-12-04 13:19:38	-->	con3 (~kvirc@165.255.106.186) has joined ##rust
2019-12-04 13:22:00	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-04 13:23:58	cart_man	Hi all. I have a Node Server that treats all incoming sockets as a new Object containing everything that object needs to operate seperately from the rest. They are stored inside a list that can be accessed from most of the App via a "bridge".  Will something like this be possible in RUST?
2019-12-04 13:24:18	cart_man	ALso what is the best socket crate out there?
2019-12-04 13:24:28	j`ey	whats a bridge?
2019-12-04 13:25:01	Yaniel	the standard library has likely all you need
2019-12-04 13:29:51	-->	hussam (uid193284@gateway/web/irccloud.com/x-bxkskztdvkzqltvy) has joined ##rust
2019-12-04 13:31:02	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-04 13:32:11	cart_man	j`ey: Its a module that handles messages from one module to another. Lets say you dont want to include you socket managing module into every other module that wants to use it. So you just include the module that has access to the socket module
2019-12-04 13:32:48	j`ey	oh, kinda like messaging / IPC
2019-12-04 13:33:09	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-12-04 13:34:32	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Client Quit)
2019-12-04 13:34:59	-->	mgrech__ (~mgrech@193-154-9-224.adsl.highway.telekom.at) has joined ##rust
2019-12-04 13:37:57	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-04 13:42:36	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-04 13:47:21	-->	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has joined ##rust
2019-12-04 13:49:16	-->	jello_pudding (~jello_pud@2601:600:9f80:7780::dbcb) has joined ##rust
2019-12-04 13:50:27	-->	vasilakisfil (~vasilakis@51.15.225.200) has joined ##rust
2019-12-04 13:51:37	<--	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-04 13:52:11	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-04 13:53:47	vasilakisfil	is there any crate that does automatic into/tryinto/from/tryfrom convertions between structs with subset/superset of fields using macros?
2019-12-04 13:55:47	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-12-04 13:55:51	elichai2	Hi, is there a way to make a trait with a fn() -> T and implement it with T as a refenrece?
2019-12-04 13:55:57	elichai2	this is what I'm trying to do: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=348f730cdb5b27cd8cc6291464b50830
2019-12-04 14:03:55	<--	jello_pudding (~jello_pud@2601:600:9f80:7780::dbcb) has quit (Quit: Quit Client)
2019-12-04 14:04:43	<--	tmager (~Thunderbi@96.78.200.121) has quit (Ping timeout: 250 seconds)
2019-12-04 14:19:22	<--	con3 (~kvirc@165.255.106.186) has quit (Read error: No route to host)
2019-12-04 14:20:08	johnw	I don't think you can implement a trait for a reference; what would that mean? You can create a wrapper though: pub struct Wrapper<'a>(&'a T), and then implement the trait for the wrapper.
2019-12-04 14:23:49	-->	eremitah_ (~int@unaffiliated/eremitah) has joined ##rust
2019-12-04 14:24:18	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 265 seconds)
2019-12-04 14:24:37	-->	localhorse (uid18992@gateway/web/irccloud.com/x-qaxqkxevczdimztk) has joined ##rust
2019-12-04 14:25:26	voker57	it would be helpful to know what do you want to accomplish on higher level
2019-12-04 14:26:14	<--	eremitah (~int@unaffiliated/eremitah) has quit (Ping timeout: 265 seconds)
2019-12-04 14:26:14	--	eremitah_ is now known as eremitah
2019-12-04 14:28:56	elichai2	voker57: I'm trying to make a LowerHex derive that supports both arrays and primitives
2019-12-04 14:29:32	voker57	derive? A macro?
2019-12-04 14:29:57	elichai2	yeah
2019-12-04 14:30:42	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-12-04 14:35:27	voker57	but LowerHex is already implemented for primitives
2019-12-04 14:35:52	voker57	and for arrays you need just an implementation, not derive
2019-12-04 14:36:35	elichai2	i'll show an example
2019-12-04 14:37:18	talin	why can't i call .pop() on a &str?
2019-12-04 14:37:38	elichai2	talin: same reason you can't call pop() on &[T]?
2019-12-04 14:37:57	elichai2	I hate that we don't have negative trait bounds
2019-12-04 14:39:19	voker57	because &str does not have .pop() method
2019-12-04 14:39:36	voker57	use String if you want a mutable string
2019-12-04 14:40:00	elichai2	vorner: generally i'm trying to make this possible https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e7db67f5377762ab7e41a907d64531c7
2019-12-04 14:40:11	elichai2	but trying to make this as generic as possible is pretty hard heh
2019-12-04 14:40:44	voker57	ok, but why do you need this reference thing for this?
2019-12-04 14:41:06	elichai2	actually I don't heh, I found a way around the life time problems
2019-12-04 14:41:21	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Ping timeout: 246 seconds)
2019-12-04 14:41:30	elichai2	it was because I tried to return the `Iter` struct
2019-12-04 14:42:53	<--	context (context@gateway/shell/xzibition.com/x-minkxavbdpxsezqs) has quit (Quit: quit)
2019-12-04 14:43:17	<--	dormiens (~alanjcfs@192.241.174.78) has quit (Ping timeout: 276 seconds)
2019-12-04 14:43:29	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-04 14:45:41	-->	dormiens (~alanjcfs@192.241.174.78) has joined ##rust
2019-12-04 14:46:11	-->	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has joined ##rust
2019-12-04 14:49:11	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-12-04 14:52:17	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2019-12-04 14:57:49	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-04 15:00:11	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-12-04 15:04:02	<--	Moongoodenby (~moonbolt@sugar-belle.blackl.net) has quit (*.net *.split)
2019-12-04 15:04:02	<--	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:04:02	<--	superbaloo (baloo@desktop.superbaloo.net) has quit (*.net *.split)
2019-12-04 15:04:02	<--	nodweber (~nodweber@unaffiliated/nodweber) has quit (*.net *.split)
2019-12-04 15:04:02	<--	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-04 15:04:02	<--	enool (~enool@51.15.69.48) has quit (*.net *.split)
2019-12-04 15:04:02	<--	pepesza (~pepesza@185.83.218.228) has quit (*.net *.split)
2019-12-04 15:04:02	<--	edcragg (~edcragg@nomnomnomnom.co.uk) has quit (*.net *.split)
2019-12-04 15:04:02	<--	talin (~unknown@unaffiliated/talin) has quit (*.net *.split)
2019-12-04 15:04:02	<--	danzarov (~danzarov@unaffiliated/danzarov) has quit (*.net *.split)
2019-12-04 15:04:02	<--	motet-a (~motet-a@ec2-3-8-152-66.eu-west-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:04:02	<--	Razaekel (~Astra@104.236.226.72) has quit (*.net *.split)
2019-12-04 15:04:02	<--	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:04:02	<--	RoadrunnerWMC (~Roadrunne@46.101.129.38) has quit (*.net *.split)
2019-12-04 15:04:02	<--	stew (~stew@freenode/staff-emeritus/stew) has quit (*.net *.split)
2019-12-04 15:04:02	<--	iron_houzi (~iron_houz@159.89.29.46) has quit (*.net *.split)
2019-12-04 15:04:02	<--	mirko (~mirko@openwrt/developer/mirko) has quit (*.net *.split)
2019-12-04 15:09:54	-->	talin (~unknown@unaffiliated/talin) has joined ##rust
2019-12-04 15:09:54	-->	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has joined ##rust
2019-12-04 15:09:54	-->	iron_houzi (~iron_houz@159.89.29.46) has joined ##rust
2019-12-04 15:09:54	-->	enool (~enool@51.15.69.48) has joined ##rust
2019-12-04 15:09:54	-->	Moongoodenby (~moonbolt@sugar-belle.blackl.net) has joined ##rust
2019-12-04 15:09:54	-->	danzarov (~danzarov@unaffiliated/danzarov) has joined ##rust
2019-12-04 15:09:54	-->	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has joined ##rust
2019-12-04 15:09:54	-->	Razaekel (~Astra@104.236.226.72) has joined ##rust
2019-12-04 15:09:54	-->	superbaloo (baloo@desktop.superbaloo.net) has joined ##rust
2019-12-04 15:09:54	-->	nodweber (~nodweber@unaffiliated/nodweber) has joined ##rust
2019-12-04 15:09:54	-->	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has joined ##rust
2019-12-04 15:09:54	-->	RoadrunnerWMC (~Roadrunne@46.101.129.38) has joined ##rust
2019-12-04 15:09:54	-->	pepesza (~pepesza@185.83.218.228) has joined ##rust
2019-12-04 15:09:54	-->	edcragg (~edcragg@nomnomnomnom.co.uk) has joined ##rust
2019-12-04 15:09:54	-->	mirko (~mirko@openwrt/developer/mirko) has joined ##rust
2019-12-04 15:09:54	-->	motet-a (~motet-a@ec2-3-8-152-66.eu-west-2.compute.amazonaws.com) has joined ##rust
2019-12-04 15:09:54	-->	stew (~stew@freenode/staff-emeritus/stew) has joined ##rust
2019-12-04 15:13:31	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-12-04 15:13:58	<--	Moongoodenby (~moonbolt@sugar-belle.blackl.net) has quit (*.net *.split)
2019-12-04 15:13:58	<--	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:13:58	<--	superbaloo (baloo@desktop.superbaloo.net) has quit (*.net *.split)
2019-12-04 15:13:58	<--	nodweber (~nodweber@unaffiliated/nodweber) has quit (*.net *.split)
2019-12-04 15:13:58	<--	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-04 15:13:58	<--	enool (~enool@51.15.69.48) has quit (*.net *.split)
2019-12-04 15:13:58	<--	pepesza (~pepesza@185.83.218.228) has quit (*.net *.split)
2019-12-04 15:13:58	<--	edcragg (~edcragg@nomnomnomnom.co.uk) has quit (*.net *.split)
2019-12-04 15:13:58	<--	talin (~unknown@unaffiliated/talin) has quit (*.net *.split)
2019-12-04 15:13:58	<--	danzarov (~danzarov@unaffiliated/danzarov) has quit (*.net *.split)
2019-12-04 15:13:58	<--	motet-a (~motet-a@ec2-3-8-152-66.eu-west-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:13:58	<--	Razaekel (~Astra@104.236.226.72) has quit (*.net *.split)
2019-12-04 15:13:58	<--	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-04 15:13:58	<--	RoadrunnerWMC (~Roadrunne@46.101.129.38) has quit (*.net *.split)
2019-12-04 15:13:58	<--	stew (~stew@freenode/staff-emeritus/stew) has quit (*.net *.split)
2019-12-04 15:13:59	<--	iron_houzi (~iron_houz@159.89.29.46) has quit (*.net *.split)
2019-12-04 15:13:59	<--	mirko (~mirko@openwrt/developer/mirko) has quit (*.net *.split)
2019-12-04 15:16:22	-->	m0rphism2 (~m0rphism@tmo-096-50.customers.d1-online.com) has joined ##rust
2019-12-04 15:18:23	<--	meandi_2 (~meandi@dyndsl-178-142-248-149.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-12-04 15:18:55	<--	zeden (~user@unaffiliated/zeden) has quit (Quit: WeeChat 2.6)
2019-12-04 15:19:34	-->	talin (~unknown@unaffiliated/talin) has joined ##rust
2019-12-04 15:19:34	-->	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has joined ##rust
2019-12-04 15:19:34	-->	iron_houzi (~iron_houz@159.89.29.46) has joined ##rust
2019-12-04 15:19:34	-->	enool (~enool@51.15.69.48) has joined ##rust
2019-12-04 15:19:34	-->	Moongoodenby (~moonbolt@sugar-belle.blackl.net) has joined ##rust
2019-12-04 15:19:34	-->	danzarov (~danzarov@unaffiliated/danzarov) has joined ##rust
2019-12-04 15:19:34	-->	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has joined ##rust
2019-12-04 15:19:34	-->	Razaekel (~Astra@104.236.226.72) has joined ##rust
2019-12-04 15:19:34	-->	superbaloo (baloo@desktop.superbaloo.net) has joined ##rust
2019-12-04 15:19:34	-->	nodweber (~nodweber@unaffiliated/nodweber) has joined ##rust
2019-12-04 15:19:34	-->	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has joined ##rust
2019-12-04 15:19:34	-->	RoadrunnerWMC (~Roadrunne@46.101.129.38) has joined ##rust
2019-12-04 15:19:34	-->	pepesza (~pepesza@185.83.218.228) has joined ##rust
2019-12-04 15:19:34	-->	edcragg (~edcragg@nomnomnomnom.co.uk) has joined ##rust
2019-12-04 15:19:34	-->	mirko (~mirko@openwrt/developer/mirko) has joined ##rust
2019-12-04 15:19:34	-->	motet-a (~motet-a@ec2-3-8-152-66.eu-west-2.compute.amazonaws.com) has joined ##rust
2019-12-04 15:19:34	-->	stew (~stew@freenode/staff-emeritus/stew) has joined ##rust
2019-12-04 15:21:11	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-04 15:22:27	-->	treeshateorcs (~tho@46-198-128-218.static.cyta.gr) has joined ##rust
2019-12-04 15:23:13	treeshateorcs	let ProgressTick { progress, .. } = progress_tracker.tick(); -- what is this syntax called? where can i read about it?
2019-12-04 15:24:29	vorner	Which one? The `..`?
2019-12-04 15:24:29	voker57	https://doc.rust-lang.org/stable/reference/patterns.html#struct-patterns
2019-12-04 15:24:43	-->	pothibo (4a0ec301@gateway/web/cgi-irc/kiwiirc.com/ip.74.14.195.1) has joined ##rust
2019-12-04 15:25:28	treeshateorcs	thank you voker57
2019-12-04 15:27:03	pothibo	Hi! I'm doing the advent of code in Rust and I got stuck this morning, some googling made me even more confused. Here's the code: https://gist.github.com/pothibo/c8ba0ebed3bcc424b7480adb295417f0 and the compile error is: cannot borrow `*self` as mutable because it is also borrowed as immutable ( I added the errors in the comment for that gist
2019-12-04 15:27:03	pothibo	file). This happens on all the mutation method (self.right, self.up, self.down, self.left). Any hint?
2019-12-04 15:28:10	-->	darkout (~Darkout@74.113.162.106) has joined ##rust
2019-12-04 15:28:49	voker57	well, arguments borrow point as immutable, method call borrows it as mutable
2019-12-04 15:29:12	voker57	use clone() and pass not by reference
2019-12-04 15:29:26	<--	m0rphism2 (~m0rphism@tmo-096-50.customers.d1-online.com) has quit (Ping timeout: 276 seconds)
2019-12-04 15:29:48	voker57	borrow self *
2019-12-04 15:31:35	pothibo	I'm really new to rust, so I'm not sure I fully undertand the borrow concept. I did made the change (thank you) but it now says:  cannot move out of borrowed content
2019-12-04 15:32:55	talin	going to write this again, since split-spam erased the last one. i want to do .split() on a String and then iterate over the elements and be able to modify them. it seems that when i iterate over the result of calling .split(), i always get &str which can't modify the string
2019-12-04 15:32:55	voker57	yeah sorry pass not by reference is unneeded here
2019-12-04 15:34:05	pothibo	voker57 you rock
2019-12-04 15:35:10	j`ey	talin: from a quick look i cant see a split_mut
2019-12-04 15:36:36	<--	htd (~htd@095129203062.t4.akis.net) has quit (Read error: Connection reset by peer)
2019-12-04 15:41:23	-->	htd (~htd@095129203062.t4.akis.net) has joined ##rust
2019-12-04 15:44:30	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-04 15:44:33	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-04 15:57:39	<--	rotty (rotty@ghost.xx.vu) has quit (Ping timeout: 240 seconds)
2019-12-04 15:58:55	<--	pjs902 (~quassel@140.184.2.20) has quit (Quit: pjs902)
2019-12-04 16:00:20	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-04 16:08:37	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-04 16:22:57	<--	pedro4 (sid145515@gateway/web/irccloud.com/x-vfmvqzyerucrcfiq) has quit
2019-12-04 16:25:08	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Remote host closed the connection)
2019-12-04 16:25:28	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-04 16:25:33	gchristensen	is there a nice way to convert a Option<Result<X, Y>> in to  Result<Option<X>, Y> ?
2019-12-04 16:26:40	j`ey	transpose I think?
2019-12-04 16:26:48	j`ey	https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose
2019-12-04 16:26:55	<--	pothibo (4a0ec301@gateway/web/cgi-irc/kiwiirc.com/ip.74.14.195.1) has quit (Remote host closed the connection)
2019-12-04 16:26:59	gchristensen	woo!
2019-12-04 16:27:06	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-04 16:28:25	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-04 16:31:02	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-04 16:34:37	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-12-04 16:35:41	<--	daxim (~daxim@095129203238.i3.akis.net) has quit (Ping timeout: 268 seconds)
2019-12-04 16:36:37	-->	drpal (sid171564@gateway/web/irccloud.com/x-kcfcqewfzopylgqk) has joined ##rust
2019-12-04 16:38:18	vasilakisfil	is there any macro that allows you to automatically convert a struct A to another struct B that has a subset of fields from A ?
2019-12-04 16:38:46	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 268 seconds)
2019-12-04 16:41:31	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-04 16:42:15	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-04 16:50:20	<--	nevill (~nevill@116.233.242.36) has quit (Quit: nevill)
2019-12-04 16:53:58	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-12-04 16:55:02	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-04 16:56:16	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Client Quit)
2019-12-04 16:57:30	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-04 16:57:58	-->	TheBrayn (~TheBrayn@unaffiliated/thebrayn) has joined ##rust
2019-12-04 17:03:03	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-12-04 17:03:34	-->	cdown (~cdown@163.114.130.128) has joined ##rust
2019-12-04 17:03:35	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-04 17:09:25	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-04 17:09:32	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-04 17:11:54	-->	krystcich (~krystcich@088156132020.dynamic-ww-04.vectranet.pl) has joined ##rust
2019-12-04 17:16:13	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-04 17:16:21	-->	jenny-m_ (~jdm-@167.100.78.229) has joined ##rust
2019-12-04 17:18:37	<--	jenny-m (~jdm-@167.100.78.229) has quit (Ping timeout: 240 seconds)
2019-12-04 17:20:04	<--	derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) has quit (Quit: Leaving)
2019-12-04 17:20:37	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-12-04 17:26:32	-->	rotty (rotty@ghost.xx.vu) has joined ##rust
2019-12-04 17:28:03	-->	derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) has joined ##rust
2019-12-04 17:28:56	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-04 17:30:56	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Quit: osa1_)
2019-12-04 17:31:55	-->	meandi (~meandi@dyndsl-178-142-248-149.ewe-ip-backbone.de) has joined ##rust
2019-12-04 17:32:19	<--	rardiol (~quassel@177.52.226.74) has quit (Ping timeout: 265 seconds)
2019-12-04 17:33:27	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-04 17:33:36	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-12-04 17:36:11	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 250 seconds)
2019-12-04 17:41:45	elichai2	I hope someone here have experience with derive macros. how do I generate the struct name such that it will contain the necassary generic bounds?
2019-12-04 17:42:06	elichai2	Normally there's `DeriveInput` which has the `ident` - name. and `generics` seperatly
2019-12-04 17:42:18	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-12-04 17:46:09	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-04 17:46:09	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-04 17:46:09	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-04 17:46:09	--	Channel ##rust: 646 nicks (1 op, 0 voices, 645 normals)
2019-12-04 17:46:20	nerdypepper	;)
2019-12-04 17:46:25	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-04 17:50:47	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-04 17:51:43	-->	dugurr (~dugur@2601:401:100:2520::9d5c) has joined ##rust
2019-12-04 17:51:54	elichai2	GreenJello: https://docs.rs/syn/0.15.44/syn/struct.Generics.html#method.split_for_impl :)
2019-12-04 17:51:58	<--	dugur (~dugur@2601:401:100:2520::4abf) has quit (Ping timeout: 245 seconds)
2019-12-04 17:52:00	elichai2	I knew there's a hack :P
2019-12-04 17:52:38	GreenJello	elichai2, oh nice!
2019-12-05 08:02:41	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-05 08:02:41	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-05 08:02:41	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-05 08:02:41	--	Channel ##rust: 618 nicks (1 op, 0 voices, 617 normals)
2019-12-05 08:02:57	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-05 08:05:06	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-12-05 08:05:27	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 250 seconds)
2019-12-05 08:05:59	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-05 08:07:14	<--	xeno (~xeno@unaffiliated/xeno) has quit (Read error: Connection reset by peer)
2019-12-05 08:07:49	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-05 08:11:27	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-05 08:18:16	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 265 seconds)
2019-12-05 08:21:39	<--	cdown (~cdown@rrcs-24-103-44-77.nyc.biz.rr.com) has quit (Ping timeout: 268 seconds)
2019-12-05 08:23:29	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-12-05 08:30:19	<--	moon-child (~Elronnd@227.71.236.35.bc.googleusercontent.com) has left ##rust
2019-12-05 08:32:29	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-05 08:37:42	<--	epony (epony@unaffiliated/epony) has quit (Quit: QUIT)
2019-12-05 08:47:13	--	Moongoodenby is now known as Moongoodgirl
2019-12-05 08:49:40	-->	epony (epony@unaffiliated/epony) has joined ##rust
2019-12-05 08:53:41	-->	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-12-05 08:53:55	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-05 08:55:55	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-12-05 08:56:49	cart_man	How does Rust handle race conditions? For example lets say I have a Buffer and a functoin is called to add data into this buffer. Now multiple threads are done with their data at once and wants to call this function to place the data in the Buffer. What will happen if two or more threads try and call that function at the same time making a race condition?
2019-12-05 08:57:12	cart_man	Mutex?
2019-12-05 08:59:43	ChaiTRex	cart_man: You can't get two mutable references to it at the same time.
2019-12-05 09:02:17	<--	dfrey (~dfrey@172.103.152.101) has quit (Ping timeout: 240 seconds)
2019-12-05 09:05:45	cart_man	ChaiTRex: Yes but that is why I want to make a function that acts like a buffer so the threads can actually only be served one at a time.. its quite difficult . I was thinking making this function so that it has an internal counter and 10 actual buffers. This counter will be incremented each time it is called and make it write into a different buffer each time
2019-12-05 09:05:57	cart_man	But that in itself can make race conditions ...sigh
2019-12-05 09:06:03	jellie	Is there a way to go back on an iterator?
2019-12-05 09:06:16	jellie	Something like a prev?
2019-12-05 09:07:10	ChaiTRex	cart_man: I've heard about RwLocks.
2019-12-05 09:09:07	ChaiTRex	cart_man: There's also mpsc
2019-12-05 09:09:34	oherrala	cart_man: You can lock the buffers with mutex or rwlock. And atomic counters can be done with AtomicUsize.
2019-12-05 09:10:45	oherrala	cart_man: but something along the lines of struct Data { inner: Mutex<Inner> }; struct Inner { buffer: Vec<u8>, counter: usize }; would probably get you started.
2019-12-05 09:13:00	oherrala	And to share Data between threads, you might actually also need Arc, so inner: Arc<Mutex<Inner>>.
2019-12-05 09:16:49	cart_man	oherrala: Ahh I think all my threads will be piling data into the main thread perhaps. So thats exactly what I will need actually
2019-12-05 09:22:04	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-05 09:23:32	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-05 09:23:52	-->	maelcum (~horst@2001:16b8:c17e:6c00:4a5:ad6b:93bc:4ae3) has joined ##rust
2019-12-05 09:24:15	papna	jellie: Don't believe so -- perhaps you want to use indices instead?
2019-12-05 09:28:42	<--	motet-a (~motet-a@ec2-3-8-152-66.eu-west-2.compute.amazonaws.com) has quit (Quit: WeeChat 2.4-dev)
2019-12-05 09:31:29	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-12-05 09:34:40	<--	juanfra (~juanfra@unaffiliated/juanfra) has quit (*.net *.split)
2019-12-05 09:34:40	<--	averell (~averell@unaffiliated/averell) has quit (*.net *.split)
2019-12-05 09:34:40	<--	mattgirv (~quassel@moggy.vps.webpigeon.me.uk) has quit (*.net *.split)
2019-12-05 09:34:40	<--	onelson (~onelson@104.236.188.205) has quit (*.net *.split)
2019-12-05 09:34:40	<--	mycroft (mycroft@abused.minithins.net) has quit (*.net *.split)
2019-12-05 09:34:40	<--	S007 (spydar007@unaffiliated/spydar007) has quit (*.net *.split)
2019-12-05 09:34:40	<--	kubrat (~val@mail.bogda.co.uk) has quit (*.net *.split)
2019-12-05 09:34:40	<--	kaotikus (~mutantsou@pluto.whatbox.ca) has quit (*.net *.split)
2019-12-05 09:34:40	<--	xnor (~alex@untian.silverninja.net) has quit (*.net *.split)
2019-12-05 09:34:40	<--	autrilla (~autrilla@python/site-packages/autrilla) has quit (*.net *.split)
2019-12-05 09:34:40	<--	Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 09:34:40	<--	Drajwer (~Drajwer@46.101.119.200) has quit (*.net *.split)
2019-12-05 09:34:40	<--	jonbryan (~no@unaffiliated/jonbryan) has quit (*.net *.split)
2019-12-05 09:34:40	<--	zadig (~arouet@163.172.93.240) has quit (*.net *.split)
2019-12-05 09:34:40	<--	Aorimn (tc@giboulees.net) has quit (*.net *.split)
2019-12-05 09:34:40	<--	mrbkap (sid68050@gateway/web/irccloud.com/x-lehfdfcymsnlmfsh) has quit (*.net *.split)
2019-12-05 09:38:03	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-12-05 09:38:16	-->	kubrat (~val@mail.bogda.co.uk) has joined ##rust
2019-12-05 09:38:16	-->	juanfra (~juanfra@unaffiliated/juanfra) has joined ##rust
2019-12-05 09:38:16	-->	averell (~averell@unaffiliated/averell) has joined ##rust
2019-12-05 09:38:16	-->	autrilla (~autrilla@python/site-packages/autrilla) has joined ##rust
2019-12-05 09:38:16	-->	mycroft (mycroft@abused.minithins.net) has joined ##rust
2019-12-05 09:38:16	-->	mattgirv (~quassel@moggy.vps.webpigeon.me.uk) has joined ##rust
2019-12-05 09:38:16	-->	onelson (~onelson@104.236.188.205) has joined ##rust
2019-12-05 09:38:16	-->	S007 (spydar007@unaffiliated/spydar007) has joined ##rust
2019-12-05 09:38:16	-->	kaotikus (~mutantsou@pluto.whatbox.ca) has joined ##rust
2019-12-05 09:38:16	-->	Aorimn (tc@giboulees.net) has joined ##rust
2019-12-05 09:38:16	-->	xnor (~alex@untian.silverninja.net) has joined ##rust
2019-12-05 09:38:16	-->	Drajwer (~Drajwer@46.101.119.200) has joined ##rust
2019-12-05 09:38:16	-->	jonbryan (~no@unaffiliated/jonbryan) has joined ##rust
2019-12-05 09:38:16	-->	Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) has joined ##rust
2019-12-05 09:38:16	-->	zadig (~arouet@163.172.93.240) has joined ##rust
2019-12-05 09:38:16	-->	mrbkap (sid68050@gateway/web/irccloud.com/x-lehfdfcymsnlmfsh) has joined ##rust
2019-12-05 09:38:22	<--	averell (~averell@unaffiliated/averell) has quit (Max SendQ exceeded)
2019-12-05 09:38:22	<--	Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) has quit (Max SendQ exceeded)
2019-12-05 09:38:43	-->	averell (~averell@unaffiliated/averell) has joined ##rust
2019-12-05 09:38:59	-->	Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) has joined ##rust
2019-12-05 09:39:57	<--	libertyprime (~libertypr@89.51.255.123.dynamic.snap.net.nz) has quit (Ping timeout: 240 seconds)
2019-12-05 09:43:16	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-12-05 09:50:09	<--	xeno (~xeno@unaffiliated/xeno) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-05 09:55:44	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Remote host closed the connection)
2019-12-05 09:56:23	-->	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 09:56:54	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-12-05 09:58:04	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-05 09:58:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-05 10:02:03	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-12-05 10:03:40	-->	blobsson (~infer@2001:558:6014:38:d1c2:8e59:d1c4:97a0) has joined ##rust
2019-12-05 10:04:08	<--	b_jonas (~x@catv-176-63-14-140.catv.broadband.hu) has quit (Quit: Lost terminal)
2019-12-05 10:05:36	<--	pepijndevos (~pepijndev@2a00:d880:5:3ec::2) has quit (Quit: ZNC 1.6.6+deb1ubuntu0.1 - http://znc.in)
2019-12-05 10:07:19	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2019-12-05 10:09:51	-->	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 10:16:03	elichai2	evalr: let a: <Box<[u8]>::Deref::deref() as ::std::ops::Index<::std::ops::RangeFrom<usize>>>::Output = 5;
2019-12-05 10:16:06	--	Notice(evalr): error: parenthesized type parameters may only be used with a `Fn` trait
2019-12-05 10:16:08	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=a68442731a09087bf26983b2955d0e6f&version=stable&mode=debug
2019-12-05 10:16:18	elichai2	evalr: let a: <Box<[u8]>::Deref::deref as ::std::ops::Index<::std::ops::RangeFrom<usize>>>::Output = 5;
2019-12-05 10:16:20	--	Notice(evalr): error[E0223]: ambiguous associated type
2019-12-05 10:16:22	--	Notice(evalr): ~~~ Full output: https://play.rust-lang.org/?gist=5f7d9017bafb3898f3f907e8445ca6cf&version=stable&mode=debug
2019-12-05 10:17:42	-->	pepijndevos (~pepijndev@2a00:d880:5:3ec::2) has joined ##rust
2019-12-05 10:24:22	-->	ycjung (~hallabada@141.223.107.7) has joined ##rust
2019-12-05 10:34:34	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 265 seconds)
2019-12-05 10:41:46	blobsson	why is every instance of pop the same? https://pastebin.com/ka0MEyEa
2019-12-05 10:54:53	<--	juanfra (~juanfra@unaffiliated/juanfra) has quit (*.net *.split)
2019-12-05 10:54:53	<--	mattgirv (~quassel@moggy.vps.webpigeon.me.uk) has quit (*.net *.split)
2019-12-05 10:54:53	<--	mycroft (mycroft@abused.minithins.net) has quit (*.net *.split)
2019-12-05 10:54:53	<--	onelson (~onelson@104.236.188.205) has quit (*.net *.split)
2019-12-05 10:54:53	<--	S007 (spydar007@unaffiliated/spydar007) has quit (*.net *.split)
2019-12-05 10:54:53	<--	kubrat (~val@mail.bogda.co.uk) has quit (*.net *.split)
2019-12-05 10:54:53	<--	kaotikus (~mutantsou@pluto.whatbox.ca) has quit (*.net *.split)
2019-12-05 10:54:53	<--	xnor (~alex@untian.silverninja.net) has quit (*.net *.split)
2019-12-05 10:54:53	<--	autrilla (~autrilla@python/site-packages/autrilla) has quit (*.net *.split)
2019-12-05 10:54:53	<--	Drajwer (~Drajwer@46.101.119.200) has quit (*.net *.split)
2019-12-05 10:54:53	<--	jonbryan (~no@unaffiliated/jonbryan) has quit (*.net *.split)
2019-12-05 10:54:53	<--	zadig (~arouet@163.172.93.240) has quit (*.net *.split)
2019-12-05 10:54:53	<--	Aorimn (tc@giboulees.net) has quit (*.net *.split)
2019-12-05 10:54:53	<--	mrbkap (sid68050@gateway/web/irccloud.com/x-lehfdfcymsnlmfsh) has quit (*.net *.split)
2019-12-05 10:54:54	<--	DTEIT (DTEIT@nat/redhat/x-qrfdhmowtefanjkz) has quit (*.net *.split)
2019-12-05 10:54:54	<--	W1lkins (~W1lkins@178.128.163.127) has quit (*.net *.split)
2019-12-05 10:54:54	<--	aqrln (~aqrln@142.93.101.49) has quit (*.net *.split)
2019-12-05 10:54:54	<--	Lumpio- (~matti@dsl-lhtbng12-54fa71-56.dhcp.inet.fi) has quit (*.net *.split)
2019-12-05 10:54:54	<--	chrempson (~chrempson@a24.me) has quit (*.net *.split)
2019-12-05 10:54:54	<--	haskell_enthusia (~twain@168.61.46.105) has quit (*.net *.split)
2019-12-05 10:54:54	<--	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:54	<--	endocrimes (~quassel@163.172.167.41) has quit (*.net *.split)
2019-12-05 10:54:54	<--	luis (~luis@kerno.org) has quit (*.net *.split)
2019-12-05 10:54:54	<--	spacekookie (~kookie@qaul.net/dev/spacekookie) has quit (*.net *.split)
2019-12-05 10:54:54	<--	cbmuser (~glaubitz@zlogin2.physik.fu-berlin.de) has quit (*.net *.split)
2019-12-05 10:54:54	<--	codeaholic (trey@linuxgeneration.org) has quit (*.net *.split)
2019-12-05 10:54:54	<--	j`ey (~joey@unaffiliated/jey/x-00002) has quit (*.net *.split)
2019-12-05 10:54:54	<--	qbnk4 (~qbnk4@static.16.198.46.78.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:54:54	<--	eddie_pete (~eddie@ec2-18-206-63-77.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:54	<--	nshp (~hi@my.domain.is.better.thanyours.com) has quit (*.net *.split)
2019-12-05 10:54:54	<--	dr_lepper (~hades@amarok/developer/hades) has quit (*.net *.split)
2019-12-05 10:54:54	<--	apoc (~apoc@april-fools/2014/ninth/apoc) has quit (*.net *.split)
2019-12-05 10:54:54	<--	foodoo (~foodoo@static.227.205.46.78.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:54:54	<--	dxld (~dxld@80-109-136-248.cable.dynamic.surfer.at) has quit (*.net *.split)
2019-12-05 10:54:54	<--	lauromoura_ (~lauromour@2804:7f5:f380:1e6b:51d7:7a7c:ab30:b4a0) has quit (*.net *.split)
2019-12-05 10:54:54	<--	yourfate (~yourfate@unaffiliated/yourfate) has quit (*.net *.split)
2019-12-05 10:54:54	<--	leah2 (~leah@vuxu.org) has quit (*.net *.split)
2019-12-05 10:54:54	<--	Iolo (~iolo@dsl-tkubng22-50de93-232.dhcp.inet.fi) has quit (*.net *.split)
2019-12-05 10:54:54	<--	sammi`_ (~qw@1-163-176-182.dynamic-ip.hinet.net) has quit (*.net *.split)
2019-12-05 10:54:54	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (*.net *.split)
2019-12-05 10:54:54	<--	minsec (~shijiafen@104.192.108.10) has quit (*.net *.split)
2019-12-05 10:54:54	<--	acalm (~fz@behemoth.hivefleet.eu) has quit (*.net *.split)
2019-12-05 10:54:54	<--	teej (uid154177@gateway/web/irccloud.com/x-gbyrahetykfczwfv) has quit (*.net *.split)
2019-12-05 10:54:54	<--	dav1d (~dav1d@volt/developer/dav1d) has quit (*.net *.split)
2019-12-05 10:54:54	<--	llinguini_ (sid257922@gateway/web/irccloud.com/x-oxebkjqmukdjesca) has quit (*.net *.split)
2019-12-05 10:54:54	<--	vqrs_ (~vqrs@learnprogramming/regular/vqrs) has quit (*.net *.split)
2019-12-05 10:54:54	<--	martin--t_ (~quassel@wtwrp.de) has quit (*.net *.split)
2019-12-05 10:54:54	<--	jared-w (uid405292@gateway/web/irccloud.com/x-ymrhmppmnyfatcwv) has quit (*.net *.split)
2019-12-05 10:54:54	<--	dheiberg (sid395135@gateway/web/irccloud.com/x-wmucsfmigchgsxcv) has quit (*.net *.split)
2019-12-05 10:54:54	<--	solidsnack (sid135249@pdpc/supporter/active/solidsnack) has quit (*.net *.split)
2019-12-05 10:54:54	<--	jml (sid162989@gateway/web/irccloud.com/x-eahmjhrpatqadqvb) has quit (*.net *.split)
2019-12-05 10:54:54	<--	Fairy (~Fairy@unaffiliated/fairy) has quit (*.net *.split)
2019-12-05 10:54:54	<--	dmgk (~dg@lucille.syrec.org) has quit (*.net *.split)
2019-12-05 10:54:54	<--	bwe (~bwe@unaffiliated/bwe) has quit (*.net *.split)
2019-12-05 10:54:55	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-dzicynbfydqtmtzy) has quit (*.net *.split)
2019-12-05 10:54:55	<--	gbmor (ben@tilde.team/users/ahriman) has quit (*.net *.split)
2019-12-05 10:54:55	<--	nickmass (~nickmass@2600:1f14:437:cd00:7708:f28b:d9dd:378a) has quit (*.net *.split)
2019-12-05 10:54:55	<--	DoubleAW (~DoubleAW@unaffiliated/doubleaw) has quit (*.net *.split)
2019-12-05 10:54:55	<--	histrio (~histrio@109.234.34.168) has quit (*.net *.split)
2019-12-05 10:54:55	<--	gus (~quassel@2400:6180:0:d0::f76:7001) has quit (*.net *.split)
2019-12-05 10:54:55	<--	MarkAtwood (MarkAtwood@gateway/web/irccloud.com/x-ovpweqviroavmaga) has quit (*.net *.split)
2019-12-05 10:54:55	<--	Meths (~meths@95.150.228.36) has quit (*.net *.split)
2019-12-05 10:54:55	<--	Remosi (~isomer@windy.lorier.net) has quit (*.net *.split)
2019-12-05 10:54:55	<--	Lymia (lymia@magical.girl.lyrical.lymia.moe) has quit (*.net *.split)
2019-12-05 10:54:55	<--	aceeri_ (uid202865@gateway/web/irccloud.com/x-fizrugcceostvemc) has quit (*.net *.split)
2019-12-05 10:54:55	<--	darkapex (~darkapex@unaffiliated/ja1lulu) has quit (*.net *.split)
2019-12-05 10:54:55	<--	dutchie (~jholland@unaffiliated/dutchie) has quit (*.net *.split)
2019-12-05 10:54:55	<--	amitizle (~amitizle@vmi213363.contaboserver.net) has quit (*.net *.split)
2019-12-05 10:54:55	<--	fowlduck (sid2258@gateway/web/irccloud.com/x-pzkjnjjxxervrlxq) has quit (*.net *.split)
2019-12-05 10:54:55	<--	caddr (uid403478@gateway/web/irccloud.com/x-knabfqjfepqrzbtc) has quit (*.net *.split)
2019-12-05 10:54:55	<--	fotato (sid41913@gateway/web/irccloud.com/x-olqyidxgnppaivum) has quit (*.net *.split)
2019-12-05 10:54:55	<--	obskur3 (sid336617@gateway/web/irccloud.com/x-csgnaubgdsvchifq) has quit (*.net *.split)
2019-12-05 10:54:55	<--	canton7 (~canton7@about/csharp/regular/canton7) has quit (*.net *.split)
2019-12-05 10:54:55	<--	kwantam (~kwantam@graviton.stanford.edu) has quit (*.net *.split)
2019-12-05 10:54:55	<--	tuxxy (~tuxxy@159.89.82.42) has quit (*.net *.split)
2019-12-05 10:54:55	<--	violator (~lars@unaffiliated/violator) has quit (*.net *.split)
2019-12-05 10:54:55	<--	tjis (~matthijs@terminusdb/developer/tjis) has quit (*.net *.split)
2019-12-05 10:54:55	<--	flexd (~flexd@rxd.no) has quit (*.net *.split)
2019-12-05 10:54:55	<--	jbit (~jbit@unaffiliated/jbit) has quit (*.net *.split)
2019-12-05 10:54:56	<--	dbarrett (~dbarrett@unaffiliated/dbarrett) has quit (*.net *.split)
2019-12-05 10:54:56	<--	fuzen (fuzen@fsf/member/Fuzen) has quit (*.net *.split)
2019-12-05 10:54:56	<--	voker57 (f00b47@kvirc/developer/Voker57) has quit (*.net *.split)
2019-12-05 10:54:56	<--	Niall (~ircuser@unaffiliated/niall) has quit (*.net *.split)
2019-12-05 10:54:56	<--	d33tah (~d33tah@nmap/d33tah) has quit (*.net *.split)
2019-12-05 10:54:56	<--	Freaky (~freaky@2a03:9800:10:11::2) has quit (*.net *.split)
2019-12-05 10:54:56	<--	hcs (sid395453@rockbox/contributor/hcs) has quit (*.net *.split)
2019-12-05 10:54:56	<--	oherrala (oherrala@shell.jkry.org) has quit (*.net *.split)
2019-12-05 10:54:56	<--	uncool (~discordia@winterhold.org) has quit (*.net *.split)
2019-12-05 10:54:56	<--	JTL (~jtl999@unaffiliated/jtl) has quit (*.net *.split)
2019-12-05 10:54:56	<--	raindev (~raindev@2a03:b0c0:3:d0::41c:c001) has quit (*.net *.split)
2019-12-05 10:54:56	<--	stevenroose (~steven@vps.weuste.club) has quit (*.net *.split)
2019-12-05 10:54:56	<--	drpal (sid171564@gateway/web/irccloud.com/x-kcfcqewfzopylgqk) has quit (*.net *.split)
2019-12-05 10:54:56	<--	ycjung (~hallabada@141.223.107.7) has quit (*.net *.split)
2019-12-05 10:54:56	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (*.net *.split)
2019-12-05 10:54:56	<--	cats3d (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:56	<--	tsal (~tsal@i59F52463.versanet.de) has quit (*.net *.split)
2019-12-05 10:54:56	<--	snover (~snover@unaffiliated/snover) has quit (*.net *.split)
2019-12-05 10:54:56	<--	justan0theruser (~justanoth@unaffiliated/justanotheruser) has quit (*.net *.split)
2019-12-05 10:54:56	<--	Kaivo (~Kaivo@ec2-99-79-72-247.ca-central-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:56	<--	daxim (~daxim@095129203238.i3.akis.net) has quit (*.net *.split)
2019-12-05 10:54:56	<--	dowwie_ (dowwie@gateway/vpn/nordvpn/dowwie) has quit (*.net *.split)
2019-12-05 10:54:56	<--	simcop2387 (~simcop238@p3m/member/simcop2387) has quit (*.net *.split)
2019-12-05 10:54:56	<--	Volund (IceChat9@c-73-125-58-123.hsd1.fl.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:56	<--	angelsl (~angelsl@pdpc/supporter/student/angelsl) has quit (*.net *.split)
2019-12-05 10:54:56	<--	evalr (~evalr@85.25.44.176) has quit (*.net *.split)
2019-12-05 10:54:56	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (*.net *.split)
2019-12-05 10:54:56	<--	dsmith-work (~user@mail.avid-tech.com) has quit (*.net *.split)
2019-12-05 10:54:56	<--	_xor (~xor@74.215.46.133) has quit (*.net *.split)
2019-12-05 10:54:56	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (*.net *.split)
2019-12-05 10:54:56	<--	stux|RC-only (stux@endurance.xzibition.com) has quit (*.net *.split)
2019-12-05 10:54:56	<--	goncalor (~goncalor@unaffiliated/goncalor) has quit (*.net *.split)
2019-12-05 10:54:56	<--	coderobe (~rob@archlinux/trusteduser/coderobe) has quit (*.net *.split)
2019-12-05 10:54:56	<--	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has quit (*.net *.split)
2019-12-05 10:54:56	<--	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has quit (*.net *.split)
2019-12-05 10:54:56	<--	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has quit (*.net *.split)
2019-12-05 10:54:57	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	cota (~cota@li509-198.members.linode.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	johnw (~johnw@haskell/developer/johnw) has quit (*.net *.split)
2019-12-05 10:54:57	<--	ghost64 (~ghost64@corrigan.xyz) has quit (*.net *.split)
2019-12-05 10:54:57	<--	rtyler (~rtyler@jenkins/developer/rtyler) has quit (*.net *.split)
2019-12-05 10:54:57	<--	krullis (~krullis@mail.netalia.se) has quit (*.net *.split)
2019-12-05 10:54:57	<--	Ekho (~Ekho@unaffiliated/ekho) has quit (*.net *.split)
2019-12-05 10:54:57	<--	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	yuken (~yuken@unaffiliated/yuken) has quit (*.net *.split)
2019-12-05 10:54:57	<--	murr4y (ali@38.95.231.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	Remavas (Remavas@gateway/shell/xshellz/x-ccorrfhitxnsunec) has quit (*.net *.split)
2019-12-05 10:54:57	<--	obensource (~obensourc@c-73-37-43-230.hsd1.or.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	Disconsented (~quassel@disconsented.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	belst (~belst@unaffiliated/belst) has quit (*.net *.split)
2019-12-05 10:54:57	<--	mgocobachi (~m@fsf/member/mgocobachi) has quit (*.net *.split)
2019-12-05 10:54:57	<--	AkhILman (~AkhIL@host-94-251-61-202.bbcustomer.zsttk.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	yrc (~yves@176-137-231-181.abo.bbox.fr) has quit (*.net *.split)
2019-12-05 10:54:57	<--	acetakwas (~acetakwas@167.99.197.42) has quit (*.net *.split)
2019-12-05 10:54:57	<--	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	netopso (~user@cloud608804.fastpipe.io) has quit (*.net *.split)
2019-12-05 10:54:57	<--	m0rr1gan (~m0rr1gan@141.193.239.165) has quit (*.net *.split)
2019-12-05 10:54:57	<--	nixpulvis (~nixpulvis@142.93.252.66) has quit (*.net *.split)
2019-12-05 10:54:57	<--	damjan (~damjan@unaffiliated/damjan) has quit (*.net *.split)
2019-12-05 10:54:57	<--	landaire (~landaire@251.28.230.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	featherlessbiped (~cyl@40.86.167.92) has quit (*.net *.split)
2019-12-05 10:54:57	<--	bsrd (~weechat@51.15.126.104) has quit (*.net *.split)
2019-12-05 10:54:57	<--	strangeqargo (ubuntu@ec2-18-195-185-121.eu-central-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:57	<--	Byteflux (~byte@byteflux.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:57	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (*.net *.split)
2019-12-05 10:54:57	<--	Bonstra (~Bonstra@val.bonstra.fr.eu.org) has quit (*.net *.split)
2019-12-05 10:54:57	<--	narispo (~narispo@2a01:e35:2fbc:8b90:39ab:bc23:bf09:26a8) has quit (*.net *.split)
2019-12-05 10:54:58	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (*.net *.split)
2019-12-05 10:54:58	<--	dormiens (~alanjcfs@192.241.174.78) has quit (*.net *.split)
2019-12-05 10:54:58	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (*.net *.split)
2019-12-05 10:54:58	<--	Manishearth (~Manishear@wikipedia/Manishearth) has quit (*.net *.split)
2019-12-05 10:54:58	<--	mixi (~mixi@exherbo/developer/mixi) has quit (*.net *.split)
2019-12-05 10:54:58	<--	ssbr_ (~scorchsab@python/site-packages/ssbr) has quit (*.net *.split)
2019-12-05 10:54:58	<--	sigwinch28 (~joe@2a01:4f8:151:9118::2) has quit (*.net *.split)
2019-12-05 10:54:58	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (*.net *.split)
2019-12-05 10:54:58	<--	sjums (~nick@hurtig.ninja) has quit (*.net *.split)
2019-12-05 10:54:58	<--	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:54:58	<--	Frogging101 (~Frogging@kitsune.fastquake.com) has quit (*.net *.split)
2019-12-05 10:54:58	<--	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:58	<--	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has quit (*.net *.split)
2019-12-05 10:54:58	<--	EliDupree (~quassel@2604:a880:400:d0::9bb:2001) has quit (*.net *.split)
2019-12-05 10:54:58	<--	melmothX (~marco@unaffiliated/melmothx) has quit (*.net *.split)
2019-12-05 10:54:58	<--	nemith (~bbennett@cyanogenmod/maintainer/Nemith) has quit (*.net *.split)
2019-12-05 10:54:58	<--	aismallard (aismallard@lykos/aismallard) has quit (*.net *.split)
2019-12-05 10:54:58	<--	gchristensen (~grahamc@NixOS/user/gchristensen) has quit (*.net *.split)
2019-12-05 10:54:58	<--	scal_ (~scal@129.69.216.241) has quit (*.net *.split)
2019-12-05 10:54:58	<--	syem (~s@unaffiliated/syem) has quit (*.net *.split)
2019-12-05 10:54:58	<--	ricky_clarkson (~rjclarkso@unaffiliated/rickyclarkson/x-000000001) has quit (*.net *.split)
2019-12-05 10:54:58	<--	lhx1 (lhx@2600:3c00::f03c:91ff:fe1c:2581) has quit (*.net *.split)
2019-12-05 10:54:58	<--	mhinz (~mhi^@unaffiliated/mhi/x-9993184) has quit (*.net *.split)
2019-12-05 10:54:58	<--	recon_- (~quassel@2602:febc:0:b6::6ca2) has quit (*.net *.split)
2019-12-05 10:54:58	<--	hc (~ircd@unaffiliated/hc) has quit (*.net *.split)
2019-12-05 10:54:58	<--	PotatoGim (sid99505@gateway/web/irccloud.com/x-xedtyujditbsdsle) has quit (*.net *.split)
2019-12-05 10:54:58	<--	elichai2 (sid212594@gateway/web/irccloud.com/x-btcupeghbgvkjake) has quit (*.net *.split)
2019-12-05 10:54:58	<--	miega (miega@unaffiliated/miega) has quit (*.net *.split)
2019-12-05 10:54:58	<--	visl (~visl@2001:19f0:4009:1423::64) has quit (*.net *.split)
2019-12-05 10:54:58	<--	roguelazer (~roguelaze@2605:2700:0:2:a800:ff:fe0d:5f19) has quit (*.net *.split)
2019-12-05 10:54:58	<--	pinkieval (~progval@pdpc/supporter/student/progval) has quit (*.net *.split)
2019-12-05 10:54:58	<--	kblin1 (~kai@samba/team/kai) has quit (*.net *.split)
2019-12-05 10:54:58	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (*.net *.split)
2019-12-05 10:54:58	<--	dftxbs3e (~dftxbs3e@unaffiliated/dftxbs3e) has quit (*.net *.split)
2019-12-05 10:54:58	<--	dbohdan (~dbohdan@unaffiliated/dbohdan) has quit (*.net *.split)
2019-12-05 10:54:58	<--	no_maam (~password_@gauss.datenzone.de) has quit (*.net *.split)
2019-12-05 10:54:58	<--	cheers (user@unaffiliated/cheers) has quit (*.net *.split)
2019-12-05 10:54:58	<--	BlackYoup (~BlackYoup@2001:bc8:2e94:100::1) has quit (*.net *.split)
2019-12-05 10:54:58	<--	kokx (~kokx@kokx.org) has quit (*.net *.split)
2019-12-05 10:54:58	<--	infinity0 (~infinity0@freenet/developer/infinity0) has quit (*.net *.split)
2019-12-05 10:54:58	<--	OlUv (~ubuntu@ec2-13-124-169-156.ap-northeast-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:58	<--	emilsp (~emilsp@freenode/staff/emilsp) has quit (*.net *.split)
2019-12-05 10:54:58	<--	ivan (~ivan@unaffiliated/ivan/x-000001) has quit (*.net *.split)
2019-12-05 10:54:58	<--	kent\n (~kent@gentoo/developer/kentnl) has quit (*.net *.split)
2019-12-05 10:54:59	<--	wucke13 (~wucke13@mail.wucke13.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Almindor (~irc@d104-205-230-103.abhsia.telus.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	fengshaun (~fengshaun@unaffiliated/fengshaun) has quit (*.net *.split)
2019-12-05 10:54:59	<--	lebster (sid17131@gateway/web/irccloud.com/x-izkiocdvesecsimi) has quit (*.net *.split)
2019-12-05 10:54:59	<--	earlz (~earlz@earlz.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	subsonick (~subsonik@matrix.netspectrum.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	tse_ (~tse@static.240.142.216.95.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	vorner (~vorner@vorner.cz) has quit (*.net *.split)
2019-12-05 10:54:59	<--	emerent (~quassel@p200300CD571F4C01BA27EBFFFED28A59.dip0.t-ipconnect.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	ilmu (ilmu@gateway/shell/c-base/x-uvnsmkxstqhypwjc) has quit (*.net *.split)
2019-12-05 10:54:59	<--	M-ou-se (~m-ou-se@circle.m-ou.se) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Snaipe (~Snaipe@2001:41d0:52:d00::1186) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Defcronyke (~Defcronyk@cryptospread.com) has quit (*.net *.split)
2019-12-05 10:54:59	<--	compenguy (~compenguy@c-73-240-172-56.hsd1.wa.comcast.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	eythian (~quassel@fsf/member/eythian) has quit (*.net *.split)
2019-12-05 10:54:59	<--	XVar (~XVar@unaffiliated/xvar) has quit (*.net *.split)
2019-12-05 10:54:59	<--	bsdbandit (~bwell@users.757.org) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	TheWearyGamer (jmerdich@pool-173-76-152-218.bstnma.fios.verizon.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	w1gz (~do@159.89.11.133) has quit (*.net *.split)
2019-12-05 10:54:59	<--	dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) has quit (*.net *.split)
2019-12-05 10:54:59	<--	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has quit (*.net *.split)
2019-12-05 10:54:59	<--	yrp (~x@unaffiliated/yrp) has quit (*.net *.split)
2019-12-05 10:54:59	<--	paracyst (~paracyst@unaffiliated/paracyst) has quit (*.net *.split)
2019-12-05 10:54:59	<--	RayS (~raysl@sdf1.xen.prgmr.com) has quit (*.net *.split)
2019-12-05 10:54:59	<--	nekron (~nekron@noordsee.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	tumdedum (~tumdedum@unaffiliated/espiral) has quit (*.net *.split)
2019-12-05 10:54:59	<--	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has quit (*.net *.split)
2019-12-05 10:54:59	<--	delusionallogic (~delusiona@176-23-98-104-cable.dk.customer.tdc.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	spesk_ (~swatson@47.19.105.250) has quit (*.net *.split)
2019-12-05 10:54:59	<--	bkhl (~bkhl@marsh.hcoop.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	jbaublitzzz (~jbaublitz@134.209.88.39) has quit (*.net *.split)
2019-12-05 10:54:59	<--	andi_ (~andi@unaffiliated/andi/x-9058200) has quit (*.net *.split)
2019-12-05 10:54:59	<--	_jack_ (uid396411@gateway/web/irccloud.com/x-rfpyscximquwbcfa) has quit (*.net *.split)
2019-12-05 10:54:59	<--	nerdypepper (~NerdyPepp@139.59.93.193) has quit (*.net *.split)
2019-12-05 10:54:59	<--	tcsc (uid145321@gateway/web/irccloud.com/x-fgkkxgeqedxtkrjz) has quit (*.net *.split)
2019-12-05 10:54:59	<--	xxpor (~xxpor@ec2-54-191-92-16.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:54:59	<--	northcode (~northcode@vps-29.35.101.185.stwvps.net) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Guest39455 (~trui@2001:982:feff:1:a19c:662f:dde8:6560) has quit (*.net *.split)
2019-12-05 10:54:59	<--	Kronuz (~Kronuz@unaffiliated/kronuz) has quit (*.net *.split)
2019-12-05 10:54:59	<--	vup (~~~~@46.101.193.235) has quit (*.net *.split)
2019-12-05 10:54:59	<--	dbrgn (~dbrgn@v2201907172493568.quicksrv.de) has quit (*.net *.split)
2019-12-05 10:54:59	<--	mp (sid298319@gateway/web/irccloud.com/x-mwiyahcotcudbdau) has quit (*.net *.split)
2019-12-05 10:55:00	<--	bradleymeck (sid292902@gateway/web/irccloud.com/x-tkeawdgrvfoaainp) has quit (*.net *.split)
2019-12-05 10:55:00	<--	saintdev (sid25343@gateway/web/irccloud.com/x-fcbujynbkdpksthq) has quit (*.net *.split)
2019-12-05 10:55:00	<--	cja (sid161498@gateway/web/irccloud.com/x-qqmgjlatlfntawyr) has quit (*.net *.split)
2019-12-05 10:55:00	<--	Naeblis (~Naeblis@unaffiliated/naeblis) has quit (*.net *.split)
2019-12-05 10:55:00	<--	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-05 10:55:00	<--	Argorok (sid195487@gateway/web/irccloud.com/x-fqgiyeswwblfrjcc) has quit (*.net *.split)
2019-12-05 10:55:00	<--	naftulikay (sid278111@gateway/web/irccloud.com/x-eclrmjfbsxurhkgv) has quit (*.net *.split)
2019-12-05 10:55:00	<--	eddyb[legacy] (sid155877@gateway/web/irccloud.com/x-otgtzelwkmxuzqaf) has quit (*.net *.split)
2019-12-05 10:55:01	<--	lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) has quit (*.net *.split)
2019-12-05 10:55:01	<--	so (~so@unaffiliated/so) has quit (*.net *.split)
2019-12-05 10:55:01	<--	Moongoodgirl (~moonbolt@sugar-belle.blackl.net) has quit (*.net *.split)
2019-12-05 10:55:01	<--	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:01	<--	superbaloo (baloo@desktop.superbaloo.net) has quit (*.net *.split)
2019-12-05 10:55:01	<--	nodweber (~nodweber@unaffiliated/nodweber) has quit (*.net *.split)
2019-12-05 10:55:01	<--	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-05 10:55:01	<--	enool (~enool@51.15.69.48) has quit (*.net *.split)
2019-12-05 10:55:01	<--	pepesza (~pepesza@185.83.218.228) has quit (*.net *.split)
2019-12-05 10:55:01	<--	edcragg (~edcragg@nomnomnomnom.co.uk) has quit (*.net *.split)
2019-12-05 10:55:01	<--	talin (~unknown@unaffiliated/talin) has quit (*.net *.split)
2019-12-05 10:55:01	<--	danzarov (~danzarov@unaffiliated/danzarov) has quit (*.net *.split)
2019-12-05 10:55:01	<--	Razaekel (~Astra@104.236.226.72) has quit (*.net *.split)
2019-12-05 10:55:01	<--	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:01	<--	RoadrunnerWMC (~Roadrunne@46.101.129.38) has quit (*.net *.split)
2019-12-05 10:55:01	<--	stew (~stew@freenode/staff-emeritus/stew) has quit (*.net *.split)
2019-12-05 10:55:01	<--	iron_houzi (~iron_houz@159.89.29.46) has quit (*.net *.split)
2019-12-05 10:55:01	<--	mirko (~mirko@openwrt/developer/mirko) has quit (*.net *.split)
2019-12-05 10:55:01	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (*.net *.split)
2019-12-05 10:55:01	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (*.net *.split)
2019-12-05 10:55:01	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (*.net *.split)
2019-12-05 10:55:01	<--	sklv (~sklv@gateway/tor-sasl/sklv) has quit (*.net *.split)
2019-12-05 10:55:01	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (*.net *.split)
2019-12-05 10:55:01	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (*.net *.split)
2019-12-05 10:55:01	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (*.net *.split)
2019-12-05 10:55:01	<--	simlay (~simlay@gateway/tor-sasl/simlay) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (*.net *.split)
2019-12-05 10:55:02	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (*.net *.split)
2019-12-05 10:55:02	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (*.net *.split)
2019-12-05 10:55:02	<--	osa1 (~osa1@haskell/developer/osa1) has quit (*.net *.split)
2019-12-05 10:55:02	<--	djhworld (~djhworld@90.253.50.19) has quit (*.net *.split)
2019-12-05 10:55:02	<--	dalcde (~dalcde@unaffiliated/dalcde) has quit (*.net *.split)
2019-12-05 10:55:02	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (*.net *.split)
2019-12-05 10:55:02	<--	brsc2909_ (~quassel@132.145.65.167) has quit (*.net *.split)
2019-12-05 10:55:02	<--	dan2wik (dan2wik@unaffiliated/dan2wik) has quit (*.net *.split)
2019-12-05 10:55:02	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:02	<--	eremitah (~int@unaffiliated/eremitah) has quit (*.net *.split)
2019-12-05 10:55:02	<--	vasilakisfil (~vasilakis@51.15.225.200) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Reapster (~reapster@196.41.127.46) has quit (*.net *.split)
2019-12-05 10:55:02	<--	upb (~cmpxchg@unaffiliated/upb) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has quit (*.net *.split)
2019-12-05 10:55:02	<--	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Pyrus_ (~pyrus@unaffiliated/pyrus) has quit (*.net *.split)
2019-12-05 10:55:02	<--	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has quit (*.net *.split)
2019-12-05 10:55:02	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Moyst (~moyst@212-149-213-144.bb.dnainternet.fi) has quit (*.net *.split)
2019-12-05 10:55:02	<--	daex (daex@gateway/vpn/protonvpn/daex) has quit (*.net *.split)
2019-12-05 10:55:02	<--	nl3dee (~nl3dee@alyon-656-1-674-93.w92-137.abo.wanadoo.fr) has quit (*.net *.split)
2019-12-05 10:55:02	<--	luser3 (~ubuntu@ec2-174-129-57-94.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:02	<--	vertrex- (~vertrex@unaffiliated/vertrex) has quit (*.net *.split)
2019-12-05 10:55:02	<--	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Oddity (~Oddity@unaffiliated/oddity) has quit (*.net *.split)
2019-12-05 10:55:02	<--	ExoUNX (~ExoUNX@unaffiliated/exounx) has quit (*.net *.split)
2019-12-05 10:55:02	<--	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has quit (*.net *.split)
2019-12-05 10:55:02	<--	fmccann (~fmccann@www.sharpnoodles.com) has quit (*.net *.split)
2019-12-05 10:55:02	<--	chachasmooth (~chachasmo@unaffiliated/chachasmooth) has quit (*.net *.split)
2019-12-05 10:55:02	<--	Freeaqingme (quassel@gateway/vpn/privateinternetaccess/freeaqingme) has quit (*.net *.split)
2019-12-05 10:55:02	<--	jeaye (~jeaye@unaffiliated/jeaye) has quit (*.net *.split)
2019-12-05 10:55:02	<--	signop1 (~signop@199.180.249.106) has quit (*.net *.split)
2019-12-05 10:55:02	<--	ldiamond (~ldiamond@unaffiliated/ldiamond) has quit (*.net *.split)
2019-12-05 10:55:02	<--	lifthrasiir_ (~lifthrasi@ec2-52-79-98-81.ap-northeast-2.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:02	<--	wrmsr (~ubuntu@ec2-54-193-61-240.us-west-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	wrl (~wrl@naphtha.ix.illest.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	nemo (nemo@hedgewars/dev/nemo) has quit (*.net *.split)
2019-12-05 10:55:03	<--	xcthulhu (~xcthulhu@c-24-34-49-85.hsd1.ma.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	mwbrown (~mwbrown@unaffiliated/mwbrown) has quit (*.net *.split)
2019-12-05 10:55:03	<--	betawaffle (~betawaffl@h2.kdf.io) has quit (*.net *.split)
2019-12-05 10:55:03	<--	Jokler (~Jokler@46.101.123.78) has quit (*.net *.split)
2019-12-05 10:55:03	<--	guardian (~guardian@planet-d.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	SergioBZ (~Sergio965@sergio.bz) has quit (*.net *.split)
2019-12-05 10:55:03	<--	ptrcmd (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2019-12-05 10:55:03	<--	UndeadLeech (~UndeadLee@165.227.76.134) has quit (*.net *.split)
2019-12-05 10:55:03	<--	ddima__ (~d-goldin@mail.moulodi.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	phill (phill@openlp.io) has quit (*.net *.split)
2019-12-05 10:55:03	<--	Arguggi (~Arguggi__@arguggi-do.arguggi.co.uk) has quit (*.net *.split)
2019-12-05 10:55:03	<--	woodz (~woodz@cpc96574-uddi27-2-0-cust731.20-3.cable.virginm.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has quit (*.net *.split)
2019-12-05 10:55:03	<--	a_trox (~a_trox@m3.unl.edu) has quit (*.net *.split)
2019-12-05 10:55:03	<--	pastly (pastly@192.3.162.137) has quit (*.net *.split)
2019-12-05 10:55:03	<--	stalled (~stalled@unaffiliated/stalled) has quit (*.net *.split)
2019-12-05 10:55:03	<--	brsc2909 (~quassel@109.255.244.60) has quit (*.net *.split)
2019-12-05 10:55:03	<--	dmilith (~dmilith@verknowsys.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	geekgonecrazy (geekgonecr@da1.hashbang.sh) has quit (*.net *.split)
2019-12-05 10:55:03	<--	Rantanen (~wace@85.25.44.176) has quit (*.net *.split)
2019-12-05 10:55:03	<--	zxk (~zxv@222.ip-144-217-89.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	mwa (~mwa@unaffiliated/mwa) has quit (*.net *.split)
2019-12-05 10:55:03	<--	wareya (~wareya@104.207.141.41) has quit (*.net *.split)
2019-12-05 10:55:03	<--	HedgeMage (~HedgeMage@unaffiliated/hedgemage) has quit (*.net *.split)
2019-12-05 10:55:03	<--	groks (~groks@groks.io) has quit (*.net *.split)
2019-12-05 10:55:03	<--	statusfailed (~statusfai@statusfailed.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	cmarchive (~cmr@oftn/oswg-member/cmr) has quit (*.net *.split)
2019-12-05 10:55:03	<--	sangy (~sangy@archlinux/trusteduser/sangy) has quit (*.net *.split)
2019-12-05 10:55:03	<--	gwillen (~gwillen@unaffiliated/gwillen) has quit (*.net *.split)
2019-12-05 10:55:03	<--	JWatkins (~quassel@unaffiliated/jwatkins) has quit (*.net *.split)
2019-12-05 10:55:03	<--	dom96 (~dom96@unaffiliated/dom96) has quit (*.net *.split)
2019-12-05 10:55:03	<--	loc (~loc@unaffiliated/loc) has quit (*.net *.split)
2019-12-05 10:55:03	<--	ollien (~ollien@ollien.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	adema (~adema@ns509503.ip-198-245-51.net) has quit (*.net *.split)
2019-12-05 10:55:03	<--	Amaan (~Amaan@45.55.224.115) has quit (*.net *.split)
2019-12-05 10:55:03	<--	hodapp (~hodapp@react-ams-119225.antiddos.solutions) has quit (*.net *.split)
2019-12-05 10:55:03	<--	GreenJello (~GreenJell@unaffiliated/greenjello) has quit (*.net *.split)
2019-12-05 10:55:03	<--	rickymiller (~rickymill@unaffiliated/rmill) has quit (*.net *.split)
2019-12-05 10:55:03	<--	mr_ab (~nezZario@unaffiliated/nezzario) has quit (*.net *.split)
2019-12-05 10:55:03	<--	thesquib (~thesquib@192.241.198.27) has quit (*.net *.split)
2019-12-05 10:55:03	<--	lavalike (~lavalike@45.77.139.85) has quit (*.net *.split)
2019-12-05 10:55:03	<--	gilbertw1 (~gilbertw1@ec2-52-91-154-1.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:03	<--	danderson (~danderson@104.236.149.22) has quit (*.net *.split)
2019-12-05 10:55:03	<--	blobsson (~infer@2001:558:6014:38:d1c2:8e59:d1c4:97a0) has quit (*.net *.split)
2019-12-05 10:55:03	<--	nokdoot (~nokdoot@211.205.207.39) has quit (*.net *.split)
2019-12-05 10:55:03	<--	endless90 (~endless90@p200300DA372BCF00C0542B0A94264CF2.dip0.t-ipconnect.de) has quit (*.net *.split)
2019-12-05 10:55:03	<--	scain (~scain@2607:5300:60:233b::1) has quit (*.net *.split)
2019-12-05 10:55:03	<--	kyren (~kyren@otachi.kyju.org) has quit (*.net *.split)
2019-12-05 10:55:04	<--	markasoftware (~quassel@2604:180:1:bc0::679c) has quit (*.net *.split)
2019-12-05 10:55:04	<--	XDjackieXD_ (~jackie@irc.chaosfield.at) has quit (*.net *.split)
2019-12-05 10:55:04	<--	jamra (sid16103@gateway/web/irccloud.com/x-yhibgjxdgtbbyixv) has quit (*.net *.split)
2019-12-05 10:55:04	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (*.net *.split)
2019-12-05 10:55:04	<--	sujeet (sujeet@unaffiliated/freeboson) has quit (*.net *.split)
2019-12-05 10:55:04	<--	drewr (~drew@elastic/staff/drewr) has quit (*.net *.split)
2019-12-05 10:55:04	<--	wolfshappen (~waff@irc.furworks.de) has quit (*.net *.split)
2019-12-05 10:55:04	<--	TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) has quit (*.net *.split)
2019-12-05 10:55:04	<--	CathyInBlue (~garrett@2605:a000:112e:a76:0:3e13:19fe:af7d) has quit (*.net *.split)
2019-12-05 10:55:04	<--	pfn (~pfn@abort.v6.boom.net) has quit (*.net *.split)
2019-12-05 10:55:04	<--	mniip (mniip@freenode/staff/mniip) has quit (*.net *.split)
2019-12-05 10:55:04	<--	Nickeeh (~quassel@bulbasaur.sjorsgielen.nl) has quit (*.net *.split)
2019-12-05 10:55:04	<--	andi- (~andi-@NixOS/user/andi-) has quit (*.net *.split)
2019-12-05 10:55:04	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-naruoreyapdslamq) has quit (*.net *.split)
2019-12-05 10:55:04	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (*.net *.split)
2019-12-05 10:55:04	<--	jebrosen (jebrosen@cygnus.jebrosen.com) has quit (*.net *.split)
2019-12-05 10:55:04	<--	kini (~kini@unaffiliated/kini) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Arzte (~arzte@unaffiliated/the-doctors-life/x-7151280) has quit (*.net *.split)
2019-12-05 10:55:05	<--	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has quit (*.net *.split)
2019-12-05 10:55:05	<--	holgersson (~quassel@unaffiliated/holgersson) has quit (*.net *.split)
2019-12-05 10:55:05	<--	freakazoid0223 (~matt@pool-96-227-98-169.phlapa.fios.verizon.net) has quit (*.net *.split)
2019-12-05 10:55:05	<--	greizgh (~quassel@2001:41d0:8:5025::1) has quit (*.net *.split)
2019-12-05 10:55:05	<--	madprops (~exofvak@li628-159.members.linode.com) has quit (*.net *.split)
2019-12-05 10:55:05	<--	karthik (~karthik@unaffiliated/karthik) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Dr_Jazz (~jazz@stolen.plutonium.dk) has quit (*.net *.split)
2019-12-05 10:55:05	<--	daddesio (~daddesio@104.131.189.104) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Smjert_ (~Smjert@unaffiliated/smjert) has quit (*.net *.split)
2019-12-05 10:55:05	<--	heftig (heftig@archlinux/developer/heftig) has quit (*.net *.split)
2019-12-05 10:55:05	<--	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has quit (*.net *.split)
2019-12-05 10:55:05	<--	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:05	<--	bot-rs (~bot-rs@2601:600:9f80:14b6:e2c8:41d9:d004:7a2f) has quit (*.net *.split)
2019-12-05 10:55:05	<--	edmoore (sid147314@gateway/web/irccloud.com/x-ypeltznwcnihjwcw) has quit (*.net *.split)
2019-12-05 10:55:05	<--	banjiewen (sid115913@gateway/web/irccloud.com/x-lzesuvbbgvufglcy) has quit (*.net *.split)
2019-12-05 10:55:05	<--	trom (sid29839@gateway/web/irccloud.com/x-hukmrehrsohpariu) has quit (*.net *.split)
2019-12-05 10:55:05	<--	devsnek (sid280155@gateway/web/irccloud.com/x-hwjwrvgwdymtyqga) has quit (*.net *.split)
2019-12-05 10:55:05	<--	strmpnk (sid2261@gateway/web/irccloud.com/x-dujzdpfhhivyruqz) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Beryllium9 (sid186414@gateway/web/irccloud.com/x-srpwnwlrachzjvai) has quit (*.net *.split)
2019-12-05 10:55:05	<--	peschkaj (sid156955@gateway/web/irccloud.com/x-mrmsvsmmqlvvkwea) has quit (*.net *.split)
2019-12-05 10:55:05	<--	ecobos (sid133554@gateway/web/irccloud.com/x-svaomoxjblqtaaqw) has quit (*.net *.split)
2019-12-05 10:55:05	<--	mutin-sa (~s-mutin@85.234.114.134) has quit (*.net *.split)
2019-12-05 10:55:05	<--	ssbr` (scorchsabe@python/site-packages/ssbr) has quit (*.net *.split)
2019-12-05 10:55:05	<--	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has quit (*.net *.split)
2019-12-05 10:55:05	<--	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has quit (*.net *.split)
2019-12-05 10:55:05	<--	jinakola (jinakola@evo.paivola.fi) has quit (*.net *.split)
2019-12-05 10:55:05	<--	jennings (~jennings@104.207.155.11) has quit (*.net *.split)
2019-12-05 10:55:05	<--	meinside (uid24933@gateway/web/irccloud.com/x-suaajjnoghvsyxlf) has quit (*.net *.split)
2019-12-05 10:55:05	<--	kmelvn (karl@2a01:7e00::f03c:91ff:fed2:9e14) has quit (*.net *.split)
2019-12-05 10:55:05	<--	cukier (sid268358@gateway/web/irccloud.com/x-ldkrcvvgqtspqkgn) has quit (*.net *.split)
2019-12-05 10:55:05	<--	demize (kyrias@archlinux/developer/demize) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Seich (~seich@2605:de00:1:1:4a:45:0:2) has quit (*.net *.split)
2019-12-05 10:55:05	<--	Alchemical (~al@unaffiliated/alchemical) has quit (*.net *.split)
2019-12-05 10:55:05	<--	mgxm (~mgxm@unaffiliated/mgxm) has quit (*.net *.split)
2019-12-05 10:55:05	<--	jasperw (~jasperw@tunnel132062-pt.tunnel.tserv5.lon1.ipv6.he.net) has quit (*.net *.split)
2019-12-05 10:55:05	<--	erasmospunk (~erasmospu@2a01:4f8:160:9147::2) has quit (*.net *.split)
2019-12-05 10:55:05	<--	lopex (uid4272@gateway/web/irccloud.com/x-cwshowdmkwdoaloo) has quit (*.net *.split)
2019-12-05 10:55:06	<--	AbedB__ (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	jinie (~jimmy@188.114.159.27) has quit (*.net *.split)
2019-12-05 10:55:06	<--	skind (~skind@unaffiliated/skind) has quit (*.net *.split)
2019-12-05 10:55:06	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (*.net *.split)
2019-12-05 10:55:06	<--	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	rotty (rotty@ghost.xx.vu) has quit (*.net *.split)
2019-12-05 10:55:06	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (*.net *.split)
2019-12-05 10:55:06	<--	fxrs (~fxrs@192.227.212.130) has quit (*.net *.split)
2019-12-05 10:55:06	<--	sacredfrog (~ryan@dev.appthecloud.io) has quit (*.net *.split)
2019-12-05 10:55:06	<--	murarth (~murarth@45.12.220.213) has quit (*.net *.split)
2019-12-05 10:55:06	<--	andrewzah (~andrewzah@unaffiliated/andrewzah) has quit (*.net *.split)
2019-12-05 10:55:06	<--	lopsided98 (~quassel@c-73-149-219-1.hsd1.ma.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	liiwi (liiwi@idle.fi) has quit (*.net *.split)
2019-12-05 10:55:06	<--	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	panicbit (~panicbit@p57ADE115.dip0.t-ipconnect.de) has quit (*.net *.split)
2019-12-05 10:55:06	<--	jacky (~jacky@unaffiliated/webjadmin) has quit (*.net *.split)
2019-12-05 10:55:06	<--	Choscura (~Choscurar@047-224-056-115.res.spectrum.com) has quit (*.net *.split)
2019-12-05 10:55:06	<--	drolmer_ (~drolmer@unaffiliated/drolmer) has quit (*.net *.split)
2019-12-05 10:55:06	<--	Alan (~alan@unaffiliated/alan) has quit (*.net *.split)
2019-12-05 10:55:06	<--	talchas (~user@c-73-71-82-80.hsd1.ca.comcast.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	swalladge (~swalladge@unaffiliated/swalladge) has quit (*.net *.split)
2019-12-05 10:55:06	<--	chowmeined (~chowmeine@unaffiliated/chowmeined) has quit (*.net *.split)
2019-12-05 10:55:06	<--	Strom (strom@127-16-191-90.dyn.estpak.ee) has quit (*.net *.split)
2019-12-05 10:55:06	<--	Schoentoon (~Schoentoo@unaffiliated/schoentoon) has quit (*.net *.split)
2019-12-05 10:55:06	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (*.net *.split)
2019-12-05 10:55:06	<--	stux|RC (stux@cosmo.lunarshells.com) has quit (*.net *.split)
2019-12-05 10:55:06	<--	jtdowney (~jtdowney@unaffiliated/jtdowney) has quit (*.net *.split)
2019-12-05 10:55:06	<--	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has quit (*.net *.split)
2019-12-05 10:55:06	<--	francisv (123080@vetur.ifi.uio.no) has quit (*.net *.split)
2019-12-05 10:55:06	<--	jnatten (~jn@unaffiliated/jnatten) has quit (*.net *.split)
2019-12-05 10:55:07	<--	Timelord0 (~TL@64-252-202-134.lightspeed.jcsnms.sbcglobal.net) has quit (*.net *.split)
2019-12-05 10:55:07	<--	Baughn (~Baughn@madoka.brage.info) has quit (*.net *.split)
2019-12-05 10:55:07	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (*.net *.split)
2019-12-05 10:55:07	<--	marmoute (~marmoute@62-210-81-168.rev.poneytelecom.eu) has quit (*.net *.split)
2019-12-05 10:55:07	<--	delusionallogic_ (~delusiona@176.9.10.162) has quit (*.net *.split)
2019-12-05 10:55:07	<--	de-vri-es (~de-vri-es@voyager.de-vri.es) has quit (*.net *.split)
2019-12-05 10:55:07	<--	bronsen (housetier@pdpc/supporter/professional/housetier) has quit (*.net *.split)
2019-12-05 10:55:07	<--	jiggawattz (jiggawattz@runs.on.ubuntu.crapping.cricket) has quit (*.net *.split)
2019-12-05 10:55:07	<--	sammich (~quassel@unaffiliated/mouldysammich) has quit (*.net *.split)
2019-12-05 10:55:07	<--	treeshateorcs (~tho@46-198-128-218.static.cyta.gr) has quit (*.net *.split)
2019-12-05 10:55:07	<--	thecoffemaker (~thecoffem@unaffiliated/thecoffemaker) has quit (*.net *.split)
2019-12-05 10:55:07	<--	gkh (~gkh@thor.kevinhill.nl) has quit (*.net *.split)
2019-12-05 10:55:07	<--	nyaomi (~naomi@cpe-74-75-6-125.maine.res.rr.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	Alexendoo (~Alex@macleod.io) has quit (*.net *.split)
2019-12-05 10:55:07	<--	jcnmark6 (~jcnmark6@static.213-133-100-141.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:55:07	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	vodkaInferno (~wormphleg@104.131.156.184) has quit (*.net *.split)
2019-12-05 10:55:07	<--	tyler569 (~tyler@209.182.232.125) has quit (*.net *.split)
2019-12-05 10:55:07	<--	mcr1 (~mcr@obiwan.sandelman.ca) has quit (*.net *.split)
2019-12-05 10:55:07	<--	ahf (ahf@irssi/staff/ahf) has quit (*.net *.split)
2019-12-05 10:55:07	<--	ub|k (~ubikuitou@indico/developer/ubik) has quit (*.net *.split)
2019-12-05 10:55:07	<--	penguwin (~penguwin@static.88-198-33-9.clients.your-server.de) has quit (*.net *.split)
2019-12-05 10:55:07	<--	paperManu (~paperManu@138.197.128.151) has quit (*.net *.split)
2019-12-05 10:55:07	<--	ccakes (~ccakes@188.166.40.165) has quit (*.net *.split)
2019-12-05 10:55:07	<--	nerdopoly (~nerdopoly@dianahacksoc.york.ac.uk) has quit (*.net *.split)
2019-12-05 10:55:07	<--	s34n (~s34n@104.152.131.130) has quit (*.net *.split)
2019-12-05 10:55:07	<--	xales (xales@repose.naveria.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	oldsk00l (~znc@ec2-35-157-202-155.eu-central-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	ebel (~quassel@unaffiliated/ebel) has quit (*.net *.split)
2019-12-05 10:55:07	<--	amygara (~lain@ec2-54-183-209-65.us-west-1.compute.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	runciter (~mrw@unaffiliated/runciter) has quit (*.net *.split)
2019-12-05 10:55:07	<--	ekleog (~ii@prologin/ekleog) has quit (*.net *.split)
2019-12-05 10:55:07	<--	luser (~ubuntu@ec2-18-232-208-36.compute-1.amazonaws.com) has quit (*.net *.split)
2019-12-05 10:55:07	<--	nickster (~nickster@198.199.66.86) has quit (*.net *.split)
2019-12-05 10:55:07	<--	tuv (~tuv@unaffiliated/tuv) has quit (*.net *.split)
2019-12-05 10:55:07	<--	_0x40_ (~0x40@95.179.188.248) has quit (*.net *.split)
2019-12-05 10:55:07	<--	Pilum (~JKM@vps-85.201.170.217.stwvps.net) has quit (*.net *.split)
2019-12-05 10:55:07	<--	wadadli (fatpointer@fedora/wadadli) has quit (*.net *.split)
2019-12-05 10:55:07	<--	microcolonel (~aaron@unaffiliated/microcolonel) has quit (*.net *.split)
2019-12-05 10:55:07	<--	LawnGnome (~LawnGnome@unaffiliated/lawngnome) has quit (*.net *.split)
2019-12-05 10:55:07	<--	capitol (~capitol@login.hackeriet.no) has quit (*.net *.split)
2019-12-05 10:55:08	<--	hashworks (~hashworks@unaffiliated/hashworks) has quit (*.net *.split)
2019-12-05 10:55:08	<--	averell (~averell@unaffiliated/averell) has quit (*.net *.split)
2019-12-05 10:55:08	<--	epony (epony@unaffiliated/epony) has quit (*.net *.split)
2019-12-05 10:55:08	<--	aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) has quit (*.net *.split)
2019-12-05 10:55:08	<--	neferty (~andor@typhoon.neferty.me) has quit (*.net *.split)
2019-12-05 10:55:08	<--	kaptin (~k@notyour.host) has quit (*.net *.split)
2019-12-05 10:55:08	<--	papna (~mike@python/site-packages/papna) has quit (*.net *.split)
2019-12-05 10:55:08	<--	Ultrasauce (~sauce@omae.wa.mou.shindei.ru) has quit (*.net *.split)
2019-12-05 10:55:08	<--	hexagoxel (~hexagoxel@hexagoxel.de) has quit (*.net *.split)
2019-12-05 10:55:08	<--	null_ptr (~null_ptr@keksdie.be) has quit (*.net *.split)
2019-12-05 10:55:08	<--	heeen (heeen@endboss.org) has quit (*.net *.split)
2019-12-05 10:55:08	<--	maurer (~maurer@157.135.154.104.bc.googleusercontent.com) has quit (*.net *.split)
2019-12-05 10:55:08	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-wjuhtoedzgatkqoh) has quit (*.net *.split)
2019-12-05 10:55:08	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-ubwjmwpwaqubugmq) has quit (*.net *.split)
2019-12-05 10:55:08	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-mdbphubuvgsdswng) has quit (*.net *.split)
2019-12-05 10:55:08	<--	vjoki (vjoki@2a00:d880:3:1::fea1:9ae) has quit (*.net *.split)
2019-12-05 10:55:08	<--	TheBrayn (~TheBrayn@unaffiliated/thebrayn) has quit (*.net *.split)
2019-12-05 10:55:08	<--	gju (~gju@unaffiliated/gju) has quit (*.net *.split)
2019-12-05 10:55:08	<--	ntnn (~ntnn@atlas.ntnn.de) has quit (*.net *.split)
2019-12-05 10:55:08	<--	pro-src (uid240036@gateway/web/irccloud.com/x-yajnxveqtziwniuh) has quit (*.net *.split)
2019-12-05 10:55:08	<--	nocsi (sid217134@gateway/web/irccloud.com/x-xmzgkxwcudzpvkps) has quit (*.net *.split)
2019-12-05 10:55:08	<--	sfackler (sid243132@gateway/web/irccloud.com/x-vykxtcornocdvipe) has quit (*.net *.split)
2019-12-05 10:55:08	<--	Brend (sid34888@gateway/web/irccloud.com/x-hzeiywidqspdzzhe) has quit (*.net *.split)
2019-12-05 10:55:08	<--	glowcoil (sid3405@gateway/web/irccloud.com/x-pediusiqbonjavde) has quit (*.net *.split)
2019-12-05 10:55:08	<--	apo (~apo@2001:41d0:8:684e::3) has quit (*.net *.split)
2019-12-05 10:55:08	<--	ish (sid1441@gateway/web/irccloud.com/x-zswaduttgsxagjku) has quit (*.net *.split)
2019-12-05 10:55:08	<--	Speed (~Speed@unaffiliated/speeda) has quit (*.net *.split)
2019-12-05 10:55:09	<--	pepijndevos (~pepijndev@2a00:d880:5:3ec::2) has quit (*.net *.split)
2019-12-05 10:55:09	<--	OmniMancer (~Paul@101.100.137.239) has quit (*.net *.split)
2019-12-05 10:55:09	<--	hussam (uid193284@gateway/web/irccloud.com/x-bxkskztdvkzqltvy) has quit (*.net *.split)
2019-12-05 10:55:09	<--	BlackDex (~blackdex@ori.vyus.nl) has quit (*.net *.split)
2019-12-05 10:55:09	<--	thequux (~thequux@ptr-fzs5rljnyl8he6q60yy.18120a2.ip6.access.telenet.be) has quit (*.net *.split)
2019-12-05 10:55:09	<--	the_ment (~thement@ibawizard.net) has quit (*.net *.split)
2019-12-05 10:55:09	<--	Lorkki (lorkki@lorkki.net) has quit (*.net *.split)
2019-12-05 10:55:09	<--	liushuyu (~liushuyu@2604:a880:cad:d0::555:1) has quit (*.net *.split)
2019-12-05 10:55:09	<--	hikari-chan (~hikari@noyu.me) has quit (*.net *.split)
2019-12-05 10:55:09	<--	WakiMiko (~WakiMiko@unaffiliated/wakimiko) has quit (*.net *.split)
2019-12-05 10:55:09	<--	Techman (Techman@unaffiliated/techman) has quit (*.net *.split)
2019-12-05 10:55:09	<--	remexre_ (~nathan@x-160-94-179-186.acm.umn.edu) has quit (*.net *.split)
2019-12-05 10:55:09	<--	ChaiTRex (~ChaiTRex@unaffiliated/chaitrex) has quit (*.net *.split)
2019-12-05 10:55:09	<--	zbrown (sid200994@gateway/web/irccloud.com/x-pwvriuatwdnegzrj) has quit (*.net *.split)
2019-12-05 10:55:09	<--	beaky (~beaky@2a03:b0c0:0:1010::17cf:7003) has quit (*.net *.split)
2019-12-05 10:55:09	<--	paradoxspiral (~weechat@mail.jomarwin.de) has quit (*.net *.split)
2019-12-05 10:55:09	<--	ryzokuken (sid116283@gateway/web/irccloud.com/x-obkjtrkqiaelwvmp) has quit (*.net *.split)
2019-12-05 10:55:09	<--	Kamuela (sid111576@gateway/web/irccloud.com/x-qzdbuegjdpprtesr) has quit (*.net *.split)
2019-12-05 10:55:09	<--	unreal (~unreal@unaffiliated/unreal) has quit (*.net *.split)
2019-12-05 10:55:09	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Timvde (~tim@towely.vdeynde.com) has quit (*.net *.split)
2019-12-05 10:55:10	<--	asm89 (~asm89@unaffiliated/asm89) has quit (*.net *.split)
2019-12-05 10:55:10	<--	seanBE (~seanBE@unaffiliated/seanbe) has quit (*.net *.split)
2019-12-05 10:55:10	<--	segy (~segfault@pdpc/supporter/active/segy) has quit (*.net *.split)
2019-12-05 10:55:10	<--	scott (scott@gateway/web/irccloud.com/x-rlsonfucwerugojh) has quit (*.net *.split)
2019-12-05 10:55:10	<--	ishw0r (~ishw0r@199.247.8.221) has quit (*.net *.split)
2019-12-05 10:55:10	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (*.net *.split)
2019-12-05 10:55:10	<--	lifeless (~robertc@114.23.108.45) has quit (*.net *.split)
2019-12-05 10:55:10	<--	kobberholm (~kobberhol@157.230.23.72) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Red15 (~red15@unaffiliated/red15) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Yaniel (yaniel@unaffiliated/yaniel) has quit (*.net *.split)
2019-12-05 10:55:10	<--	dreadward (~quassel@142.93.97.147) has quit (*.net *.split)
2019-12-05 10:55:10	<--	adium (adium@unaffiliated/adium) has quit (*.net *.split)
2019-12-05 10:55:10	<--	wjlroe (sid1877@gateway/web/irccloud.com/x-cpnkcsfmwysoraha) has quit (*.net *.split)
2019-12-05 10:55:10	<--	l1x (sid1954@gateway/web/irccloud.com/x-smxtwweudqdlzruy) has quit (*.net *.split)
2019-12-05 10:55:10	<--	matti (sid379192@pdpc/supporter/monthlygold/matti) has quit (*.net *.split)
2019-12-05 10:55:10	<--	loganfsmyth (sid317246@gateway/web/irccloud.com/x-euzmobobqnlekuvs) has quit (*.net *.split)
2019-12-05 10:55:10	<--	epopt (sid389102@gateway/web/irccloud.com/x-bgcdowisipyhsetp) has quit (*.net *.split)
2019-12-05 10:55:10	<--	ladyfriday (~robert@unaffiliated/mrmonday) has quit (*.net *.split)
2019-12-05 10:55:10	<--	justache (justache@gateway/web/irccloud.com/x-giibqjyvgmlufbbn) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Proximyst (~Proximyst@148.251.50.76) has quit (*.net *.split)
2019-12-05 10:55:10	<--	talanor (~talanor@2001:41d0:1:ea21::1) has quit (*.net *.split)
2019-12-05 10:55:10	<--	bromind (~bromind@pas38-2-82-224-180-63.fbx.proxad.net) has quit (*.net *.split)
2019-12-05 10:55:10	<--	empty_string (emptystrin@tjctf/alum/tris) has quit (*.net *.split)
2019-12-05 10:55:10	<--	glowpelt (~myst@focks.pw) has quit (*.net *.split)
2019-12-05 10:55:10	<--	nextloop (~kilian@2a03:4000:33:556:1812:cff:fefe:9efd) has quit (*.net *.split)
2019-12-05 10:55:10	<--	dos1 (~dos1@neo900/coreteam/dos) has quit (*.net *.split)
2019-12-05 10:55:10	<--	dexterlb (~dexterlb@qtrp.org) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Twey (~twey@unaffiliated/twey) has quit (*.net *.split)
2019-12-05 10:55:10	<--	da-x (~da-x@2604:a880:800:10::cc3:6001) has quit (*.net *.split)
2019-12-05 10:55:10	<--	Nascher (~quassel@holarse/core/nascher) has quit (*.net *.split)
2019-12-05 10:55:10	<--	ubitux (~ubitux@lstlambert-657-1-117-164.w92-154.abo.wanadoo.fr) has quit (*.net *.split)
2019-12-05 10:55:10	<--	agrif (agrif@overviewer/dev/agrif) has quit (*.net *.split)
2019-12-05 10:55:10	<--	elwisp (~elwisp@178.73.210.32) has quit (*.net *.split)
2019-12-05 10:55:10	<--	ZirconiumX (~Zirconium@2001:41d0:52:a00::c8a) has quit (*.net *.split)
2019-12-05 10:55:10	<--	sparr (~sparr@pdpc/supporter/active/sparr) has quit (*.net *.split)
2019-12-05 10:55:10	<--	steveeJ (sid321023@gateway/web/irccloud.com/x-fgaffqbwyiqgtjab) has quit (*.net *.split)
2019-12-05 10:55:10	<--	ec (sid1544@gateway/web/irccloud.com/x-nkeoqjqzxfsoxuty) has quit (*.net *.split)
2019-12-05 10:55:11	<--	rockstar (sid26942@gateway/web/irccloud.com/x-kvyrrbfyyhrtoptm) has quit (*.net *.split)
2019-12-05 10:55:11	<--	dxu (~dxu@2604:a880:800:10::2232:e001) has quit (*.net *.split)
2019-12-05 10:55:11	<--	fjahr (sid374480@gateway/web/irccloud.com/x-xxqryhzcklprwjpv) has quit (*.net *.split)
2019-12-05 10:55:11	<--	rpgwaiter (sid108352@gateway/web/irccloud.com/x-atgxpeeqrvcpuqpj) has quit (*.net *.split)
2019-12-05 10:55:11	<--	Jabbslad (sid25161@gateway/web/irccloud.com/x-xmhetzyshfohilhc) has quit (*.net *.split)
2019-12-05 10:55:11	<--	stephe (sid14127@gateway/web/irccloud.com/x-fpxywtxrzgjisbxl) has quit (*.net *.split)
2019-12-05 10:55:11	<--	leio (~leio@gentoo/developer/leio) has quit (*.net *.split)
2019-12-05 10:55:11	<--	bendem (~bendem@irc.bendem.be) has quit (*.net *.split)
2019-12-05 10:55:11	<--	oz (~oz@2001:41d0:1:c441::) has quit (*.net *.split)
2019-12-05 10:55:11	<--	aib (~aib@unaffiliated/aib42) has quit (*.net *.split)
2019-12-05 10:55:11	<--	bananagram (~bananagra@2604:180:0:af5::6c9a) has quit (*.net *.split)
2019-12-05 10:55:11	<--	mstruebing (~mstruebin@2001:41d0:8:93c7::1) has quit (*.net *.split)
2019-12-05 10:55:11	<--	ChanServ (ChanServ@services.) has quit (*.net *.split)
2019-12-05 10:55:50	<--	jamm (~jamm@unaffiliated/jamm) has quit (Remote host closed the connection)
2019-12-05 10:57:29	<--	noonien (uid162445@gateway/web/irccloud.com/x-caxsihqbswcedgop) has quit (Ping timeout: 250 seconds)
2019-12-05 10:57:29	<--	bluezone (uid104970@gateway/web/irccloud.com/x-zdfjcxjxnmtmkcsj) has quit (Ping timeout: 250 seconds)
2019-12-05 11:02:06	-->	stevenroose (~steven@vps.weuste.club) has joined ##rust
2019-12-05 11:02:06	-->	raindev (~raindev@2a03:b0c0:3:d0::41c:c001) has joined ##rust
2019-12-05 11:02:06	-->	JTL (~jtl999@unaffiliated/jtl) has joined ##rust
2019-12-05 11:02:06	-->	oherrala (oherrala@shell.jkry.org) has joined ##rust
2019-12-05 11:02:06	-->	hcs (sid395453@rockbox/contributor/hcs) has joined ##rust
2019-12-05 11:02:06	-->	Freaky (~freaky@2a03:9800:10:11::2) has joined ##rust
2019-12-05 11:02:06	-->	Niall (~ircuser@unaffiliated/niall) has joined ##rust
2019-12-05 11:02:06	-->	voker57 (f00b47@kvirc/developer/Voker57) has joined ##rust
2019-12-05 11:02:06	-->	dbarrett (~dbarrett@unaffiliated/dbarrett) has joined ##rust
2019-12-05 11:02:06	-->	jbit (~jbit@unaffiliated/jbit) has joined ##rust
2019-12-05 11:02:06	-->	flexd (~flexd@rxd.no) has joined ##rust
2019-12-05 11:02:06	-->	tjis (~matthijs@terminusdb/developer/tjis) has joined ##rust
2019-12-05 11:02:06	-->	violator (~lars@unaffiliated/violator) has joined ##rust
2019-12-05 11:02:06	-->	uncool (~discordia@winterhold.org) has joined ##rust
2019-12-05 11:02:06	-->	fuzen (fuzen@fsf/member/Fuzen) has joined ##rust
2019-12-05 11:02:06	-->	tuxxy (~tuxxy@159.89.82.42) has joined ##rust
2019-12-05 11:02:06	-->	kwantam (~kwantam@graviton.stanford.edu) has joined ##rust
2019-12-05 11:02:06	-->	canton7 (~canton7@about/csharp/regular/canton7) has joined ##rust
2019-12-05 11:02:06	-->	fotato (sid41913@gateway/web/irccloud.com/x-olqyidxgnppaivum) has joined ##rust
2019-12-05 11:02:06	-->	caddr (uid403478@gateway/web/irccloud.com/x-knabfqjfepqrzbtc) has joined ##rust
2019-12-05 11:02:06	-->	fowlduck (sid2258@gateway/web/irccloud.com/x-pzkjnjjxxervrlxq) has joined ##rust
2019-12-05 11:02:06	-->	amitizle (~amitizle@vmi213363.contaboserver.net) has joined ##rust
2019-12-05 11:02:06	-->	dutchie (~jholland@unaffiliated/dutchie) has joined ##rust
2019-12-05 11:02:06	-->	aceeri_ (uid202865@gateway/web/irccloud.com/x-fizrugcceostvemc) has joined ##rust
2019-12-05 11:02:06	-->	darkapex (~darkapex@unaffiliated/ja1lulu) has joined ##rust
2019-12-05 11:02:06	-->	Lymia (lymia@magical.girl.lyrical.lymia.moe) has joined ##rust
2019-12-05 11:02:06	-->	Remosi (~isomer@windy.lorier.net) has joined ##rust
2019-12-05 11:02:06	-->	d33tah (~d33tah@nmap/d33tah) has joined ##rust
2019-12-05 11:02:06	-->	MarkAtwood (MarkAtwood@gateway/web/irccloud.com/x-ovpweqviroavmaga) has joined ##rust
2019-12-05 11:02:06	-->	Meths (~meths@95.150.228.36) has joined ##rust
2019-12-05 11:02:06	-->	gus (~quassel@2400:6180:0:d0::f76:7001) has joined ##rust
2019-12-05 11:02:06	-->	histrio (~histrio@109.234.34.168) has joined ##rust
2019-12-05 11:02:06	-->	DoubleAW (~DoubleAW@unaffiliated/doubleaw) has joined ##rust
2019-12-05 11:02:06	-->	nickmass (~nickmass@2600:1f14:437:cd00:7708:f28b:d9dd:378a) has joined ##rust
2019-12-05 11:02:06	-->	gbmor (ben@tilde.team/users/ahriman) has joined ##rust
2019-12-05 11:02:06	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-dzicynbfydqtmtzy) has joined ##rust
2019-12-05 11:02:06	-->	obskur3 (sid336617@gateway/web/irccloud.com/x-csgnaubgdsvchifq) has joined ##rust
2019-12-05 11:02:06	-->	bwe (~bwe@unaffiliated/bwe) has joined ##rust
2019-12-05 11:02:06	-->	dmgk (~dg@lucille.syrec.org) has joined ##rust
2019-12-05 11:02:06	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-12-05 11:02:06	-->	jml (sid162989@gateway/web/irccloud.com/x-eahmjhrpatqadqvb) has joined ##rust
2019-12-05 11:02:06	-->	solidsnack (sid135249@pdpc/supporter/active/solidsnack) has joined ##rust
2019-12-05 11:02:06	-->	dheiberg (sid395135@gateway/web/irccloud.com/x-wmucsfmigchgsxcv) has joined ##rust
2019-12-05 11:02:06	-->	jared-w (uid405292@gateway/web/irccloud.com/x-ymrhmppmnyfatcwv) has joined ##rust
2019-12-05 11:02:06	-->	martin--t_ (~quassel@wtwrp.de) has joined ##rust
2019-12-05 11:02:06	-->	vqrs_ (~vqrs@learnprogramming/regular/vqrs) has joined ##rust
2019-12-05 11:02:06	-->	llinguini_ (sid257922@gateway/web/irccloud.com/x-oxebkjqmukdjesca) has joined ##rust
2019-12-05 11:02:06	-->	dav1d (~dav1d@volt/developer/dav1d) has joined ##rust
2019-12-05 11:02:06	-->	minsec (~shijiafen@104.192.108.10) has joined ##rust
2019-12-05 11:02:06	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-12-05 11:02:06	-->	sammi`_ (~qw@1-163-176-182.dynamic-ip.hinet.net) has joined ##rust
2019-12-05 11:02:06	-->	Iolo (~iolo@dsl-tkubng22-50de93-232.dhcp.inet.fi) has joined ##rust
2019-12-05 11:02:06	-->	acalm (~fz@behemoth.hivefleet.eu) has joined ##rust
2019-12-05 11:02:06	-->	leah2 (~leah@vuxu.org) has joined ##rust
2019-12-05 11:02:06	-->	yourfate (~yourfate@unaffiliated/yourfate) has joined ##rust
2019-12-05 11:02:06	-->	drpal (sid171564@gateway/web/irccloud.com/x-kcfcqewfzopylgqk) has joined ##rust
2019-12-05 11:02:06	-->	lauromoura_ (~lauromour@2804:7f5:f380:1e6b:51d7:7a7c:ab30:b4a0) has joined ##rust
2019-12-05 11:02:06	-->	dxld (~dxld@80-109-136-248.cable.dynamic.surfer.at) has joined ##rust
2019-12-05 11:02:06	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-05 11:02:06	-->	justache (justache@gateway/web/irccloud.com/x-bukmdszlpmqidszw) has joined ##rust
2019-12-05 11:02:06	-->	teej (uid154177@gateway/web/irccloud.com/x-nadblavdklscjehk) has joined ##rust
2019-12-05 11:02:06	-->	Byteflux (~byte@byteflux.net) has joined ##rust
2019-12-05 11:02:06	-->	strangeqargo (ubuntu@ec2-18-195-185-121.eu-central-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	landaire (~landaire@251.28.230.35.bc.googleusercontent.com) has joined ##rust
2019-12-05 11:02:06	-->	damjan (~damjan@unaffiliated/damjan) has joined ##rust
2019-12-05 11:02:06	-->	nixpulvis (~nixpulvis@142.93.252.66) has joined ##rust
2019-12-05 11:02:06	-->	m0rr1gan (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-05 11:02:06	-->	netopso (~user@cloud608804.fastpipe.io) has joined ##rust
2019-12-05 11:02:06	-->	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has joined ##rust
2019-12-05 11:02:06	-->	acetakwas (~acetakwas@167.99.197.42) has joined ##rust
2019-12-05 11:02:06	-->	yrc (~yves@176-137-231-181.abo.bbox.fr) has joined ##rust
2019-12-05 11:02:06	-->	AkhILman (~AkhIL@host-94-251-61-202.bbcustomer.zsttk.net) has joined ##rust
2019-12-05 11:02:06	-->	mgocobachi (~m@fsf/member/mgocobachi) has joined ##rust
2019-12-05 11:02:06	-->	belst (~belst@unaffiliated/belst) has joined ##rust
2019-12-05 11:02:06	-->	bsrd (~weechat@51.15.126.104) has joined ##rust
2019-12-05 11:02:06	-->	featherlessbiped (~cyl@40.86.167.92) has joined ##rust
2019-12-05 11:02:06	-->	Disconsented (~quassel@disconsented.com) has joined ##rust
2019-12-05 11:02:06	-->	obensource (~obensourc@c-73-37-43-230.hsd1.or.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	Remavas (Remavas@gateway/shell/xshellz/x-ccorrfhitxnsunec) has joined ##rust
2019-12-05 11:02:06	-->	murr4y (ali@38.95.231.35.bc.googleusercontent.com) has joined ##rust
2019-12-05 11:02:06	-->	yuken (~yuken@unaffiliated/yuken) has joined ##rust
2019-12-05 11:02:06	-->	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined ##rust
2019-12-05 11:02:06	-->	Ekho (~Ekho@unaffiliated/ekho) has joined ##rust
2019-12-05 11:02:06	-->	krullis (~krullis@mail.netalia.se) has joined ##rust
2019-12-05 11:02:06	-->	rtyler (~rtyler@jenkins/developer/rtyler) has joined ##rust
2019-12-05 11:02:06	-->	ghost64 (~ghost64@corrigan.xyz) has joined ##rust
2019-12-05 11:02:06	-->	johnw (~johnw@haskell/developer/johnw) has joined ##rust
2019-12-05 11:02:06	-->	cota (~cota@li509-198.members.linode.com) has joined ##rust
2019-12-05 11:02:06	-->	arecaceae (root@gateway/vpn/privateinternetaccess/arecaceae) has joined ##rust
2019-12-05 11:02:06	-->	llorllale (~llorllale@CPEac202e24ff83-CMac202e24ff80.cpe.net.fido.ca) has joined ##rust
2019-12-05 11:02:06	-->	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined ##rust
2019-12-05 11:02:06	-->	coderobe (~rob@archlinux/trusteduser/coderobe) has joined ##rust
2019-12-05 11:02:06	-->	goncalor (~goncalor@unaffiliated/goncalor) has joined ##rust
2019-12-05 11:02:06	-->	stux|RC-only (stux@endurance.xzibition.com) has joined ##rust
2019-12-05 11:02:06	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-12-05 11:02:06	-->	_xor (~xor@74.215.46.133) has joined ##rust
2019-12-05 11:02:06	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-12-05 11:02:06	-->	dsmith-work (~user@mail.avid-tech.com) has joined ##rust
2019-12-05 11:02:06	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-12-05 11:02:06	-->	evalr (~evalr@85.25.44.176) has joined ##rust
2019-12-05 11:02:06	-->	angelsl (~angelsl@pdpc/supporter/student/angelsl) has joined ##rust
2019-12-05 11:02:06	-->	Volund (IceChat9@c-73-125-58-123.hsd1.fl.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	simcop2387 (~simcop238@p3m/member/simcop2387) has joined ##rust
2019-12-05 11:02:06	-->	dowwie_ (dowwie@gateway/vpn/nordvpn/dowwie) has joined ##rust
2019-12-05 11:02:06	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-05 11:02:06	-->	Kaivo (~Kaivo@ec2-99-79-72-247.ca-central-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined ##rust
2019-12-05 11:02:06	-->	snover (~snover@unaffiliated/snover) has joined ##rust
2019-12-05 11:02:06	-->	tsal (~tsal@i59F52463.versanet.de) has joined ##rust
2019-12-05 11:02:06	-->	cats3d (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-05 11:02:06	-->	ycjung (~hallabada@141.223.107.7) has joined ##rust
2019-12-05 11:02:06	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-05 11:02:06	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-05 11:02:06	-->	AbedB__ (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has joined ##rust
2019-12-05 11:02:06	-->	pepijndevos (~pepijndev@2a00:d880:5:3ec::2) has joined ##rust
2019-12-05 11:02:06	-->	blobsson (~infer@2001:558:6014:38:d1c2:8e59:d1c4:97a0) has joined ##rust
2019-12-05 11:02:06	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-05 11:02:06	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-12-05 11:02:06	-->	averell (~averell@unaffiliated/averell) has joined ##rust
2019-12-05 11:02:06	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-12-05 11:02:06	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-12-05 11:02:06	-->	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-12-05 11:02:06	-->	epony (epony@unaffiliated/epony) has joined ##rust
2019-12-05 11:02:06	-->	dmc (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-12-05 11:02:06	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-05 11:02:06	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined ##rust
2019-12-05 11:02:06	-->	endless90 (~endless90@p200300DA372BCF00C0542B0A94264CF2.dip0.t-ipconnect.de) has joined ##rust
2019-12-05 11:02:06	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-12-05 11:02:06	-->	sklv (~sklv@gateway/tor-sasl/sklv) has joined ##rust
2019-12-05 11:02:06	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-12-05 11:02:06	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-12-05 11:02:06	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-12-05 11:02:06	-->	djhworld (~djhworld@90.253.50.19) has joined ##rust
2019-12-05 11:02:06	-->	dalcde (~dalcde@unaffiliated/dalcde) has joined ##rust
2019-12-05 11:02:06	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-12-05 11:02:06	-->	skind (~skind@unaffiliated/skind) has joined ##rust
2019-12-05 11:02:06	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-05 11:02:06	-->	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has joined ##rust
2019-12-05 11:02:06	-->	brsc2909_ (~quassel@132.145.65.167) has joined ##rust
2019-12-05 11:02:06	-->	dan2wik (dan2wik@unaffiliated/dan2wik) has joined ##rust
2019-12-05 11:02:06	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	Reapster (~reapster@196.41.127.46) has joined ##rust
2019-12-05 11:02:06	-->	fmccann (~fmccann@www.sharpnoodles.com) has joined ##rust
2019-12-05 11:02:06	-->	rotty (rotty@ghost.xx.vu) has joined ##rust
2019-12-05 11:02:06	-->	TheBrayn (~TheBrayn@unaffiliated/thebrayn) has joined ##rust
2019-12-05 11:02:06	-->	treeshateorcs (~tho@46-198-128-218.static.cyta.gr) has joined ##rust
2019-12-05 11:02:06	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-05 11:02:06	-->	stew (~stew@freenode/staff-emeritus/stew) has joined ##rust
2019-12-05 11:02:06	-->	mirko (~mirko@openwrt/developer/mirko) has joined ##rust
2019-12-05 11:02:06	-->	edcragg (~edcragg@nomnomnomnom.co.uk) has joined ##rust
2019-12-05 11:02:06	-->	pepesza (~pepesza@185.83.218.228) has joined ##rust
2019-12-05 11:02:06	-->	RoadrunnerWMC (~Roadrunne@46.101.129.38) has joined ##rust
2019-12-05 11:02:06	-->	liox (~bj@ec2-54-88-131-124.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	nodweber (~nodweber@unaffiliated/nodweber) has joined ##rust
2019-12-05 11:02:06	-->	superbaloo (baloo@desktop.superbaloo.net) has joined ##rust
2019-12-05 11:02:06	-->	Razaekel (~Astra@104.236.226.72) has joined ##rust
2019-12-05 11:02:06	-->	jcob (~jcob@ec2-3-82-54-165.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	danzarov (~danzarov@unaffiliated/danzarov) has joined ##rust
2019-12-05 11:02:06	-->	Moongoodgirl (~moonbolt@sugar-belle.blackl.net) has joined ##rust
2019-12-05 11:02:06	-->	enool (~enool@51.15.69.48) has joined ##rust
2019-12-05 11:02:06	-->	iron_houzi (~iron_houz@159.89.29.46) has joined ##rust
2019-12-05 11:02:06	-->	whereistejas (~sanapteja@39.43.244.35.bc.googleusercontent.com) has joined ##rust
2019-12-05 11:02:06	-->	talin (~unknown@unaffiliated/talin) has joined ##rust
2019-12-05 11:02:06	-->	eremitah (~int@unaffiliated/eremitah) has joined ##rust
2019-12-05 11:02:06	-->	vasilakisfil (~vasilakis@51.15.225.200) has joined ##rust
2019-12-05 11:02:06	-->	hussam (uid193284@gateway/web/irccloud.com/x-bxkskztdvkzqltvy) has joined ##rust
2019-12-05 11:02:06	-->	BlackDex (~blackdex@ori.vyus.nl) has joined ##rust
2019-12-05 11:02:06	-->	upb (~cmpxchg@unaffiliated/upb) has joined ##rust
2019-12-05 11:02:06	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-12-05 11:02:06	-->	thequux (~thequux@ptr-fzs5rljnyl8he6q60yy.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-05 11:02:06	-->	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has joined ##rust
2019-12-05 11:02:06	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-12-05 11:02:06	-->	kyren (~kyren@otachi.kyju.org) has joined ##rust
2019-12-05 11:02:06	-->	beatleboy07 (~beatleboy@c-24-17-50-149.hsd1.wa.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	Pyrus_ (~pyrus@unaffiliated/pyrus) has joined ##rust
2019-12-05 11:02:06	-->	nickster (~nickster@198.199.66.86) has joined ##rust
2019-12-05 11:02:06	-->	sacredfrog (~ryan@dev.appthecloud.io) has joined ##rust
2019-12-05 11:02:06	-->	murarth (~murarth@45.12.220.213) has joined ##rust
2019-12-05 11:02:06	-->	andrewzah (~andrewzah@unaffiliated/andrewzah) has joined ##rust
2019-12-05 11:02:06	-->	lopsided98 (~quassel@c-73-149-219-1.hsd1.ma.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	zbrown (sid200994@gateway/web/irccloud.com/x-pwvriuatwdnegzrj) has joined ##rust
2019-12-05 11:02:06	-->	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has joined ##rust
2019-12-05 11:02:06	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-12-05 11:02:06	-->	the_ment (~thement@ibawizard.net) has joined ##rust
2019-12-05 11:02:06	-->	penguwin (~penguwin@static.88-198-33-9.clients.your-server.de) has joined ##rust
2019-12-05 11:02:06	-->	marmoute (~marmoute@62-210-81-168.rev.poneytelecom.eu) has joined ##rust
2019-12-05 11:02:06	-->	Alan (~alan@unaffiliated/alan) has joined ##rust
2019-12-05 11:02:06	-->	Lorkki (lorkki@lorkki.net) has joined ##rust
2019-12-05 11:02:06	-->	Moyst (~moyst@212-149-213-144.bb.dnainternet.fi) has joined ##rust
2019-12-05 11:02:06	-->	daex (daex@gateway/vpn/protonvpn/daex) has joined ##rust
2019-12-05 11:02:06	-->	liiwi (liiwi@idle.fi) has joined ##rust
2019-12-05 11:02:06	-->	fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) has joined ##rust
2019-12-05 11:02:06	-->	panicbit (~panicbit@p57ADE115.dip0.t-ipconnect.de) has joined ##rust
2019-12-05 11:02:06	-->	jacky (~jacky@unaffiliated/webjadmin) has joined ##rust
2019-12-05 11:02:06	-->	runciter (~mrw@unaffiliated/runciter) has joined ##rust
2019-12-05 11:02:06	-->	nl3dee (~nl3dee@alyon-656-1-674-93.w92-137.abo.wanadoo.fr) has joined ##rust
2019-12-05 11:02:06	-->	luser3 (~ubuntu@ec2-174-129-57-94.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	Choscura (~Choscurar@047-224-056-115.res.spectrum.com) has joined ##rust
2019-12-05 11:02:06	-->	liushuyu (~liushuyu@2604:a880:cad:d0::555:1) has joined ##rust
2019-12-05 11:02:06	-->	hikari-chan (~hikari@noyu.me) has joined ##rust
2019-12-05 11:02:06	-->	WakiMiko (~WakiMiko@unaffiliated/wakimiko) has joined ##rust
2019-12-05 11:02:06	-->	Techman (Techman@unaffiliated/techman) has joined ##rust
2019-12-05 11:02:06	-->	vertrex- (~vertrex@unaffiliated/vertrex) has joined ##rust
2019-12-05 11:02:06	-->	remexre_ (~nathan@x-160-94-179-186.acm.umn.edu) has joined ##rust
2019-12-05 11:02:06	-->	ChaiTRex (~ChaiTRex@unaffiliated/chaitrex) has joined ##rust
2019-12-05 11:02:06	-->	drolmer_ (~drolmer@unaffiliated/drolmer) has joined ##rust
2019-12-05 11:02:06	-->	markasoftware (~quassel@2604:180:1:bc0::679c) has joined ##rust
2019-12-05 11:02:06	-->	beaky (~beaky@2a03:b0c0:0:1010::17cf:7003) has joined ##rust
2019-12-05 11:02:06	-->	XDjackieXD_ (~jackie@irc.chaosfield.at) has joined ##rust
2019-12-05 11:02:06	-->	jamra (sid16103@gateway/web/irccloud.com/x-yhibgjxdgtbbyixv) has joined ##rust
2019-12-05 11:02:06	-->	Mateon1 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-12-05 11:02:06	-->	sujeet (sujeet@unaffiliated/freeboson) has joined ##rust
2019-12-05 11:02:06	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	drewr (~drew@elastic/staff/drewr) has joined ##rust
2019-12-05 11:02:06	-->	wolfshappen (~waff@irc.furworks.de) has joined ##rust
2019-12-05 11:02:06	-->	TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) has joined ##rust
2019-12-05 11:02:06	-->	paradoxspiral (~weechat@mail.jomarwin.de) has joined ##rust
2019-12-05 11:02:06	-->	Oddity (~Oddity@unaffiliated/oddity) has joined ##rust
2019-12-05 11:02:06	-->	hashworks (~hashworks@unaffiliated/hashworks) has joined ##rust
2019-12-05 11:02:06	-->	jennings (~jennings@104.207.155.11) has joined ##rust
2019-12-05 11:02:06	-->	CathyInBlue (~garrett@2605:a000:112e:a76:0:3e13:19fe:af7d) has joined ##rust
2019-12-05 11:02:06	-->	ExoUNX (~ExoUNX@unaffiliated/exounx) has joined ##rust
2019-12-05 11:02:06	-->	Kamuela (sid111576@gateway/web/irccloud.com/x-qzdbuegjdpprtesr) has joined ##rust
2019-12-05 11:02:06	-->	ryzokuken (sid116283@gateway/web/irccloud.com/x-obkjtrkqiaelwvmp) has joined ##rust
2019-12-05 11:02:06	-->	unreal (~unreal@unaffiliated/unreal) has joined ##rust
2019-12-05 11:02:06	-->	pfn (~pfn@abort.v6.boom.net) has joined ##rust
2019-12-05 11:02:06	-->	mniip (mniip@freenode/staff/mniip) has joined ##rust
2019-12-05 11:02:06	-->	Nickeeh (~quassel@bulbasaur.sjorsgielen.nl) has joined ##rust
2019-12-05 11:02:06	-->	talchas (~user@c-73-71-82-80.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	mr64bit (~mr64bit@dynamic-acs-24-101-245-231.zoominternet.net) has joined ##rust
2019-12-05 11:02:06	-->	tyler569 (~tyler@209.182.232.125) has joined ##rust
2019-12-05 11:02:06	-->	freakazoid0223 (~matt@pool-96-227-98-169.phlapa.fios.verizon.net) has joined ##rust
2019-12-05 11:02:06	-->	andi- (~andi-@NixOS/user/andi-) has joined ##rust
2019-12-05 11:02:06	-->	GreenJello (~GreenJell@unaffiliated/greenjello) has joined ##rust
2019-12-05 11:02:06	-->	swalladge (~swalladge@unaffiliated/swalladge) has joined ##rust
2019-12-05 11:02:06	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-12-05 11:02:06	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-12-05 11:02:06	-->	ldiamond (~ldiamond@unaffiliated/ldiamond) has joined ##rust
2019-12-05 11:02:06	-->	chowmeined (~chowmeine@unaffiliated/chowmeined) has joined ##rust
2019-12-05 11:02:06	-->	nemo (nemo@hedgewars/dev/nemo) has joined ##rust
2019-12-05 11:02:06	-->	woodz (~woodz@cpc96574-uddi27-2-0-cust731.20-3.cable.virginm.net) has joined ##rust
2019-12-05 11:02:06	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-12-05 11:02:06	-->	bronsen (housetier@pdpc/supporter/professional/housetier) has joined ##rust
2019-12-05 11:02:06	-->	chachasmooth (~chachasmo@unaffiliated/chachasmooth) has joined ##rust
2019-12-05 11:02:06	-->	Freeaqingme (quassel@gateway/vpn/privateinternetaccess/freeaqingme) has joined ##rust
2019-12-05 11:02:06	-->	Schoentoon (~Schoentoo@unaffiliated/schoentoon) has joined ##rust
2019-12-05 11:02:06	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-12-05 11:02:06	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-mdbphubuvgsdswng) has joined ##rust
2019-12-05 11:02:06	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-ubwjmwpwaqubugmq) has joined ##rust
2019-12-05 11:02:06	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-naruoreyapdslamq) has joined ##rust
2019-12-05 11:02:06	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-wjuhtoedzgatkqoh) has joined ##rust
2019-12-05 11:02:06	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-12-05 11:02:06	-->	karthik (~karthik@unaffiliated/karthik) has joined ##rust
2019-12-05 11:02:06	-->	ptrcmd (~peter@unaffiliated/petercommand) has joined ##rust
2019-12-05 11:02:06	-->	jebrosen (jebrosen@cygnus.jebrosen.com) has joined ##rust
2019-12-05 11:02:06	-->	Timvde (~tim@towely.vdeynde.com) has joined ##rust
2019-12-05 11:02:06	-->	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has joined ##rust
2019-12-05 11:02:06	-->	asm89 (~asm89@unaffiliated/asm89) has joined ##rust
2019-12-05 11:02:06	-->	kini (~kini@unaffiliated/kini) has joined ##rust
2019-12-05 11:02:06	-->	stux|RC (stux@cosmo.lunarshells.com) has joined ##rust
2019-12-05 11:02:06	-->	seanBE (~seanBE@unaffiliated/seanbe) has joined ##rust
2019-12-05 11:02:06	-->	ollien (~ollien@ollien.com) has joined ##rust
2019-12-05 11:02:06	-->	jtdowney (~jtdowney@unaffiliated/jtdowney) has joined ##rust
2019-12-05 11:02:06	-->	waldo323 (~waldo323@75-151-31-89-Michigan.hfc.comcastbusiness.net) has joined ##rust
2019-12-05 11:02:06	-->	francisv (123080@vetur.ifi.uio.no) has joined ##rust
2019-12-05 11:02:06	-->	Arzte (~arzte@unaffiliated/the-doctors-life/x-7151280) has joined ##rust
2019-12-05 11:02:06	-->	GnarlyBob (chris@2600:3c03::f03c:91ff:fee0:8443) has joined ##rust
2019-12-05 11:02:06	-->	holgersson (~quassel@unaffiliated/holgersson) has joined ##rust
2019-12-05 11:02:06	-->	jeaye (~jeaye@unaffiliated/jeaye) has joined ##rust
2019-12-05 11:02:06	-->	signop1 (~signop@199.180.249.106) has joined ##rust
2019-12-05 11:02:06	-->	jnatten (~jn@unaffiliated/jnatten) has joined ##rust
2019-12-05 11:02:06	-->	lifthrasiir_ (~lifthrasi@ec2-52-79-98-81.ap-northeast-2.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	wrmsr (~ubuntu@ec2-54-193-61-240.us-west-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	Timelord0 (~TL@64-252-202-134.lightspeed.jcsnms.sbcglobal.net) has joined ##rust
2019-12-05 11:02:06	-->	segy (~segfault@pdpc/supporter/active/segy) has joined ##rust
2019-12-05 11:02:06	-->	daddesio (~daddesio@104.131.189.104) has joined ##rust
2019-12-05 11:02:06	-->	Baughn (~Baughn@madoka.brage.info) has joined ##rust
2019-12-05 11:02:06	-->	wrl (~wrl@naphtha.ix.illest.net) has joined ##rust
2019-12-05 11:02:06	-->	elwisp (~elwisp@178.73.210.32) has joined ##rust
2019-12-05 11:02:06	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-12-05 11:02:06	-->	greizgh (~quassel@2001:41d0:8:5025::1) has joined ##rust
2019-12-05 11:02:06	-->	madprops (~exofvak@li628-159.members.linode.com) has joined ##rust
2019-12-05 11:02:06	-->	scott (scott@gateway/web/irccloud.com/x-rlsonfucwerugojh) has joined ##rust
2019-12-05 11:02:06	-->	xcthulhu (~xcthulhu@c-24-34-49-85.hsd1.ma.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	mwbrown (~mwbrown@unaffiliated/mwbrown) has joined ##rust
2019-12-05 11:02:06	-->	betawaffle (~betawaffl@h2.kdf.io) has joined ##rust
2019-12-05 11:02:06	-->	Jokler (~Jokler@46.101.123.78) has joined ##rust
2019-12-05 11:02:06	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-12-05 11:02:06	-->	Dr_Jazz (~jazz@stolen.plutonium.dk) has joined ##rust
2019-12-05 11:02:06	-->	ishw0r (~ishw0r@199.247.8.221) has joined ##rust
2019-12-05 11:02:06	-->	SergioBZ (~Sergio965@sergio.bz) has joined ##rust
2019-12-05 11:02:06	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-12-05 11:02:06	-->	UndeadLeech (~UndeadLee@165.227.76.134) has joined ##rust
2019-12-05 11:02:06	-->	ddima__ (~d-goldin@mail.moulodi.com) has joined ##rust
2019-12-05 11:02:06	-->	Smjert_ (~Smjert@unaffiliated/smjert) has joined ##rust
2019-12-05 11:02:06	-->	delusionallogic (~delusiona@176.9.10.162) has joined ##rust
2019-12-05 11:02:06	-->	heftig (heftig@archlinux/developer/heftig) has joined ##rust
2019-12-05 11:02:06	-->	phill (phill@openlp.io) has joined ##rust
2019-12-05 11:02:06	-->	de-vri-es (~de-vri-es@voyager.de-vri.es) has joined ##rust
2019-12-05 11:02:06	-->	Arguggi (~Arguggi__@arguggi-do.arguggi.co.uk) has joined ##rust
2019-12-05 11:02:06	-->	jiggawattz (jiggawattz@runs.on.ubuntu.crapping.cricket) has joined ##rust
2019-12-05 11:02:06	-->	sammich (~quassel@unaffiliated/mouldysammich) has joined ##rust
2019-12-05 11:02:06	-->	lifeless (~robertc@114.23.108.45) has joined ##rust
2019-12-05 11:02:06	-->	kobberholm (~kobberhol@157.230.23.72) has joined ##rust
2019-12-05 11:02:06	-->	dreadward (~quassel@142.93.97.147) has joined ##rust
2019-12-05 11:02:06	-->	adium (adium@unaffiliated/adium) has joined ##rust
2019-12-05 11:02:06	-->	thecoffemaker (~thecoffem@unaffiliated/thecoffemaker) has joined ##rust
2019-12-05 11:02:06	-->	gkh (~gkh@thor.kevinhill.nl) has joined ##rust
2019-12-05 11:02:06	-->	Red15 (~red15@unaffiliated/red15) has joined ##rust
2019-12-05 11:02:06	-->	Blub\0 (~wry@unaffiliated/blubw/x-6625061) has joined ##rust
2019-12-05 11:02:06	-->	kuldeep (~kuldeep@unaffiliated/kuldeepdhaka) has joined ##rust
2019-12-05 11:02:06	-->	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 11:02:06	-->	bot-rs (~bot-rs@2601:600:9f80:14b6:e2c8:41d9:d004:7a2f) has joined ##rust
2019-12-05 11:02:06	-->	nyaomi (~naomi@cpe-74-75-6-125.maine.res.rr.com) has joined ##rust
2019-12-05 11:02:06	-->	Alexendoo (~Alex@macleod.io) has joined ##rust
2019-12-05 11:02:06	-->	jcnmark6 (~jcnmark6@static.213-133-100-141.clients.your-server.de) has joined ##rust
2019-12-05 11:02:06	-->	loganfsmyth (sid317246@gateway/web/irccloud.com/x-euzmobobqnlekuvs) has joined ##rust
2019-12-05 11:02:06	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-12-05 11:02:06	-->	vodkaInferno (~wormphleg@104.131.156.184) has joined ##rust
2019-12-05 11:02:06	-->	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has joined ##rust
2019-12-05 11:02:06	-->	matti (sid379192@pdpc/supporter/monthlygold/matti) has joined ##rust
2019-12-05 11:02:06	-->	wjlroe (sid1877@gateway/web/irccloud.com/x-cpnkcsfmwysoraha) has joined ##rust
2019-12-05 11:02:06	-->	l1x (sid1954@gateway/web/irccloud.com/x-smxtwweudqdlzruy) has joined ##rust
2019-12-05 11:02:06	-->	edmoore (sid147314@gateway/web/irccloud.com/x-ypeltznwcnihjwcw) has joined ##rust
2019-12-05 11:02:06	-->	banjiewen (sid115913@gateway/web/irccloud.com/x-lzesuvbbgvufglcy) has joined ##rust
2019-12-05 11:02:06	-->	trom (sid29839@gateway/web/irccloud.com/x-hukmrehrsohpariu) has joined ##rust
2019-12-05 11:02:06	-->	devsnek (sid280155@gateway/web/irccloud.com/x-hwjwrvgwdymtyqga) has joined ##rust
2019-12-05 11:02:06	-->	strmpnk (sid2261@gateway/web/irccloud.com/x-dujzdpfhhivyruqz) has joined ##rust
2019-12-05 11:02:06	-->	Beryllium9 (sid186414@gateway/web/irccloud.com/x-srpwnwlrachzjvai) has joined ##rust
2019-12-05 11:02:06	-->	peschkaj (sid156955@gateway/web/irccloud.com/x-mrmsvsmmqlvvkwea) has joined ##rust
2019-12-05 11:02:06	-->	epopt (sid389102@gateway/web/irccloud.com/x-bgcdowisipyhsetp) has joined ##rust
2019-12-05 11:02:06	-->	ecobos (sid133554@gateway/web/irccloud.com/x-svaomoxjblqtaaqw) has joined ##rust
2019-12-05 11:02:06	-->	ladyfriday (~robert@unaffiliated/mrmonday) has joined ##rust
2019-12-05 11:02:06	-->	mutin-sa (~s-mutin@85.234.114.134) has joined ##rust
2019-12-05 11:02:06	-->	ssbr` (scorchsabe@python/site-packages/ssbr) has joined ##rust
2019-12-05 11:02:06	-->	a_trox (~a_trox@m3.unl.edu) has joined ##rust
2019-12-05 11:02:06	-->	neferty (~andor@typhoon.neferty.me) has joined ##rust
2019-12-05 11:02:06	-->	Proximyst (~Proximyst@148.251.50.76) has joined ##rust
2019-12-05 11:02:06	-->	pastly (pastly@192.3.162.137) has joined ##rust
2019-12-05 11:02:06	-->	jgkamat (~jgkamat@qutebrowser/dev/jgkamat) has joined ##rust
2019-12-05 11:02:06	-->	stalled (~stalled@unaffiliated/stalled) has joined ##rust
2019-12-05 11:02:06	-->	brsc2909 (~quassel@109.255.244.60) has joined ##rust
2019-12-05 11:02:06	-->	talanor (~talanor@2001:41d0:1:ea21::1) has joined ##rust
2019-12-05 11:02:06	-->	mcr1 (~mcr@obiwan.sandelman.ca) has joined ##rust
2019-12-05 11:02:06	-->	dmilith (~dmilith@verknowsys.com) has joined ##rust
2019-12-05 11:02:06	-->	bromind (~bromind@pas38-2-82-224-180-63.fbx.proxad.net) has joined ##rust
2019-12-05 11:02:06	-->	rpgwaiter (sid108352@gateway/web/irccloud.com/x-atgxpeeqrvcpuqpj) has joined ##rust
2019-12-05 11:02:06	-->	empty_string (emptystrin@tjctf/alum/tris) has joined ##rust
2019-12-05 11:02:06	-->	geekgonecrazy (geekgonecr@da1.hashbang.sh) has joined ##rust
2019-12-05 11:02:06	-->	ub|k (~ubikuitou@indico/developer/ubik) has joined ##rust
2019-12-05 11:02:06	-->	statusfailed (~statusfai@statusfailed.com) has joined ##rust
2019-12-05 11:02:06	-->	Rantanen (~wace@85.25.44.176) has joined ##rust
2019-12-05 11:02:06	-->	zxk (~zxv@222.ip-144-217-89.net) has joined ##rust
2019-12-05 11:02:06	-->	null_ptr (~null_ptr@keksdie.be) has joined ##rust
2019-12-05 11:02:06	-->	sparr (~sparr@pdpc/supporter/active/sparr) has joined ##rust
2019-12-05 11:02:06	-->	paperManu (~paperManu@138.197.128.151) has joined ##rust
2019-12-05 11:02:06	-->	s34n (~s34n@104.152.131.130) has joined ##rust
2019-12-05 11:02:06	-->	stephe (sid14127@gateway/web/irccloud.com/x-fpxywtxrzgjisbxl) has joined ##rust
2019-12-05 11:02:06	-->	mwa (~mwa@unaffiliated/mwa) has joined ##rust
2019-12-05 11:02:06	-->	dexterlb (~dexterlb@qtrp.org) has joined ##rust
2019-12-05 11:02:06	-->	nextloop (~kilian@2a03:4000:33:556:1812:cff:fefe:9efd) has joined ##rust
2019-12-05 11:02:06	-->	meinside (uid24933@gateway/web/irccloud.com/x-suaajjnoghvsyxlf) has joined ##rust
2019-12-05 11:02:06	-->	kmelvn (karl@2a01:7e00::f03c:91ff:fed2:9e14) has joined ##rust
2019-12-05 11:02:06	-->	vjoki (vjoki@2a00:d880:3:1::fea1:9ae) has joined ##rust
2019-12-05 11:02:06	-->	wareya (~wareya@104.207.141.41) has joined ##rust
2019-12-05 11:02:06	-->	glowpelt (~myst@focks.pw) has joined ##rust
2019-12-05 11:02:06	-->	ccakes (~ccakes@188.166.40.165) has joined ##rust
2019-12-05 11:02:06	-->	papna (~mike@python/site-packages/papna) has joined ##rust
2019-12-05 11:02:06	-->	agrif (agrif@overviewer/dev/agrif) has joined ##rust
2019-12-05 11:02:06	-->	gju (~gju@unaffiliated/gju) has joined ##rust
2019-12-05 11:02:06	-->	HedgeMage (~HedgeMage@unaffiliated/hedgemage) has joined ##rust
2019-12-05 11:02:06	-->	cukier (sid268358@gateway/web/irccloud.com/x-ldkrcvvgqtspqkgn) has joined ##rust
2019-12-05 11:02:06	-->	heeen (heeen@endboss.org) has joined ##rust
2019-12-05 11:02:06	-->	nerdopoly (~nerdopoly@dianahacksoc.york.ac.uk) has joined ##rust
2019-12-05 11:02:06	-->	demize (kyrias@archlinux/developer/demize) has joined ##rust
2019-12-05 11:02:06	-->	groks (~groks@groks.io) has joined ##rust
2019-12-05 11:02:06	-->	cmarchive (~cmr@oftn/oswg-member/cmr) has joined ##rust
2019-12-05 11:02:06	-->	xales (xales@repose.naveria.com) has joined ##rust
2019-12-05 11:02:06	-->	oldsk00l (~znc@ec2-35-157-202-155.eu-central-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	ebel (~quassel@unaffiliated/ebel) has joined ##rust
2019-12-05 11:02:06	-->	hodapp (~hodapp@react-ams-119225.antiddos.solutions) has joined ##rust
2019-12-05 11:02:06	-->	sangy (~sangy@archlinux/trusteduser/sangy) has joined ##rust
2019-12-05 11:02:06	-->	gwillen (~gwillen@unaffiliated/gwillen) has joined ##rust
2019-12-05 11:02:06	-->	JWatkins (~quassel@unaffiliated/jwatkins) has joined ##rust
2019-12-05 11:02:06	-->	Seich (~seich@2605:de00:1:1:4a:45:0:2) has joined ##rust
2019-12-05 11:02:06	-->	ekleog (~ii@prologin/ekleog) has joined ##rust
2019-12-05 11:02:06	-->	Alchemical (~al@unaffiliated/alchemical) has joined ##rust
2019-12-05 11:02:06	-->	mgxm (~mgxm@unaffiliated/mgxm) has joined ##rust
2019-12-05 11:02:06	-->	dos1 (~dos1@neo900/coreteam/dos) has joined ##rust
2019-12-05 11:02:06	-->	dom96 (~dom96@unaffiliated/dom96) has joined ##rust
2019-12-05 11:02:06	-->	amygara (~lain@ec2-54-183-209-65.us-west-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	mr_ab (~nezZario@unaffiliated/nezzario) has joined ##rust
2019-12-05 11:02:06	-->	loc (~loc@unaffiliated/loc) has joined ##rust
2019-12-05 11:02:06	-->	adema (~adema@ns509503.ip-198-245-51.net) has joined ##rust
2019-12-05 11:02:06	-->	Amaan (~Amaan@45.55.224.115) has joined ##rust
2019-12-05 11:02:06	-->	Twey (~twey@unaffiliated/twey) has joined ##rust
2019-12-05 11:02:06	-->	rickymiller (~rickymill@unaffiliated/rmill) has joined ##rust
2019-12-05 11:02:06	-->	da-x (~da-x@2604:a880:800:10::cc3:6001) has joined ##rust
2019-12-05 11:02:06	-->	Pilum (~JKM@vps-85.201.170.217.stwvps.net) has joined ##rust
2019-12-05 11:02:06	-->	luser (~ubuntu@ec2-18-232-208-36.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	Nascher (~quassel@holarse/core/nascher) has joined ##rust
2019-12-05 11:02:06	-->	ubitux (~ubitux@lstlambert-657-1-117-164.w92-154.abo.wanadoo.fr) has joined ##rust
2019-12-05 11:02:06	-->	danderson (~danderson@104.236.149.22) has joined ##rust
2019-12-05 11:02:06	-->	jasperw (~jasperw@tunnel132062-pt.tunnel.tserv5.lon1.ipv6.he.net) has joined ##rust
2019-12-05 11:02:06	-->	oz (~oz@2001:41d0:1:c441::) has joined ##rust
2019-12-05 11:02:06	-->	thesquib (~thesquib@192.241.198.27) has joined ##rust
2019-12-05 11:02:06	-->	lavalike (~lavalike@45.77.139.85) has joined ##rust
2019-12-05 11:02:06	-->	gilbertw1 (~gilbertw1@ec2-52-91-154-1.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:02:06	-->	tuv (~tuv@unaffiliated/tuv) has joined ##rust
2019-12-05 11:02:06	-->	_0x40_ (~0x40@95.179.188.248) has joined ##rust
2019-12-05 11:02:06	-->	erasmospunk (~erasmospu@2a01:4f8:160:9147::2) has joined ##rust
2019-12-05 11:02:06	-->	wadadli (fatpointer@fedora/wadadli) has joined ##rust
2019-12-05 11:02:06	-->	microcolonel (~aaron@unaffiliated/microcolonel) has joined ##rust
2019-12-05 11:02:06	-->	LawnGnome (~LawnGnome@unaffiliated/lawngnome) has joined ##rust
2019-12-05 11:02:06	-->	ntnn (~ntnn@atlas.ntnn.de) has joined ##rust
2019-12-05 11:02:06	-->	capitol (~capitol@login.hackeriet.no) has joined ##rust
2019-12-05 11:02:06	-->	pro-src (uid240036@gateway/web/irccloud.com/x-yajnxveqtziwniuh) has joined ##rust
2019-12-05 11:02:06	-->	ish (sid1441@gateway/web/irccloud.com/x-zswaduttgsxagjku) has joined ##rust
2019-12-05 11:02:06	-->	lopex (uid4272@gateway/web/irccloud.com/x-cwshowdmkwdoaloo) has joined ##rust
2019-12-05 11:02:06	-->	mstruebing (~mstruebin@2001:41d0:8:93c7::1) has joined ##rust
2019-12-05 11:02:06	-->	aib (~aib@unaffiliated/aib42) has joined ##rust
2019-12-05 11:02:06	-->	aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) has joined ##rust
2019-12-05 11:02:06	-->	nocsi (sid217134@gateway/web/irccloud.com/x-xmzgkxwcudzpvkps) has joined ##rust
2019-12-05 11:02:06	-->	sfackler (sid243132@gateway/web/irccloud.com/x-vykxtcornocdvipe) has joined ##rust
2019-12-05 11:02:06	-->	Brend (sid34888@gateway/web/irccloud.com/x-hzeiywidqspdzzhe) has joined ##rust
2019-12-05 11:02:06	-->	glowcoil (sid3405@gateway/web/irccloud.com/x-pediusiqbonjavde) has joined ##rust
2019-12-05 11:02:06	-->	dxu (~dxu@2604:a880:800:10::2232:e001) has joined ##rust
2019-12-05 11:02:06	-->	apo (~apo@2001:41d0:8:684e::3) has joined ##rust
2019-12-05 11:02:06	-->	ZirconiumX (~Zirconium@2001:41d0:52:a00::c8a) has joined ##rust
2019-12-05 11:02:06	-->	kaptin (~k@notyour.host) has joined ##rust
2019-12-05 11:02:06	-->	Ultrasauce (~sauce@omae.wa.mou.shindei.ru) has joined ##rust
2019-12-05 11:02:06	-->	hexagoxel (~hexagoxel@hexagoxel.de) has joined ##rust
2019-12-05 11:02:06	-->	maurer (~maurer@157.135.154.104.bc.googleusercontent.com) has joined ##rust
2019-12-05 11:02:06	-->	Speed (~Speed@unaffiliated/speeda) has joined ##rust
2019-12-05 11:02:06	-->	bananagram (~bananagra@2604:180:0:af5::6c9a) has joined ##rust
2019-12-05 11:02:06	-->	bendem (~bendem@irc.bendem.be) has joined ##rust
2019-12-05 11:02:06	-->	leio (~leio@gentoo/developer/leio) has joined ##rust
2019-12-05 11:02:06	-->	Jabbslad (sid25161@gateway/web/irccloud.com/x-xmhetzyshfohilhc) has joined ##rust
2019-12-05 11:02:06	-->	rockstar (sid26942@gateway/web/irccloud.com/x-kvyrrbfyyhrtoptm) has joined ##rust
2019-12-05 11:02:06	-->	ec (sid1544@gateway/web/irccloud.com/x-nkeoqjqzxfsoxuty) has joined ##rust
2019-12-05 11:02:06	-->	fjahr (sid374480@gateway/web/irccloud.com/x-xxqryhzcklprwjpv) has joined ##rust
2019-12-05 11:02:06	-->	steveeJ (sid321023@gateway/web/irccloud.com/x-fgaffqbwyiqgtjab) has joined ##rust
2019-12-05 11:02:06	-->	ChanServ (ChanServ@services.) has joined ##rust
2019-12-05 11:02:06	--	Mode ##rust [+o ChanServ] by wolfe.freenode.net
2019-12-05 11:02:11	<--	justache (justache@gateway/web/irccloud.com/x-bukmdszlpmqidszw) has quit (Max SendQ exceeded)
2019-12-05 11:02:11	<--	teej (uid154177@gateway/web/irccloud.com/x-nadblavdklscjehk) has quit (Max SendQ exceeded)
2019-12-05 11:02:11	<--	AbedB__ (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has quit (Remote host closed the connection)
2019-12-05 11:02:36	-->	AbedB__ (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has joined ##rust
2019-12-05 11:03:44	-->	so (~so@unaffiliated/so) has joined ##rust
2019-12-05 11:03:50	-->	justache (justache@gateway/web/irccloud.com/x-vbaabwgizwylpklt) has joined ##rust
2019-12-05 11:03:51	-->	kubrat (~val@mail.bogda.co.uk) has joined ##rust
2019-12-05 11:03:51	-->	juanfra (~juanfra@unaffiliated/juanfra) has joined ##rust
2019-12-05 11:03:51	-->	autrilla (~autrilla@python/site-packages/autrilla) has joined ##rust
2019-12-05 11:03:51	-->	mycroft (mycroft@abused.minithins.net) has joined ##rust
2019-12-05 11:03:51	-->	mattgirv (~quassel@moggy.vps.webpigeon.me.uk) has joined ##rust
2019-12-05 11:03:51	-->	onelson (~onelson@104.236.188.205) has joined ##rust
2019-12-05 11:03:51	-->	S007 (spydar007@unaffiliated/spydar007) has joined ##rust
2019-12-05 11:03:51	-->	kaotikus (~mutantsou@pluto.whatbox.ca) has joined ##rust
2019-12-05 11:03:51	-->	Aorimn (tc@giboulees.net) has joined ##rust
2019-12-05 11:03:51	-->	xnor (~alex@untian.silverninja.net) has joined ##rust
2019-12-05 11:03:51	-->	Drajwer (~Drajwer@46.101.119.200) has joined ##rust
2019-12-05 11:03:51	-->	jonbryan (~no@unaffiliated/jonbryan) has joined ##rust
2019-12-05 11:03:51	-->	zadig (~arouet@163.172.93.240) has joined ##rust
2019-12-05 11:03:51	-->	mrbkap (sid68050@gateway/web/irccloud.com/x-lehfdfcymsnlmfsh) has joined ##rust
2019-12-05 11:03:56	-->	DTEIT (DTEIT@nat/redhat/x-qrfdhmowtefanjkz) has joined ##rust
2019-12-05 11:03:57	-->	W1lkins (~W1lkins@178.128.163.127) has joined ##rust
2019-12-05 11:03:57	-->	codeaholic (trey@linuxgeneration.org) has joined ##rust
2019-12-05 11:03:57	-->	aqrln (~aqrln@142.93.101.49) has joined ##rust
2019-12-05 11:03:57	-->	chrempson (~chrempson@a24.me) has joined ##rust
2019-12-05 11:03:57	-->	Lumpio- (~matti@dsl-lhtbng12-54fa71-56.dhcp.inet.fi) has joined ##rust
2019-12-05 11:03:57	-->	haskell_enthusia (~twain@168.61.46.105) has joined ##rust
2019-12-05 11:03:57	-->	mxco86 (~mxco86@ec2-18-202-244-205.eu-west-1.compute.amazonaws.com) has joined ##rust
2019-12-05 11:03:57	-->	luis (~luis@kerno.org) has joined ##rust
2019-12-05 11:03:57	-->	endocrimes (~quassel@163.172.167.41) has joined ##rust
2019-12-05 11:03:57	-->	foodoo (~foodoo@static.227.205.46.78.clients.your-server.de) has joined ##rust
2019-12-05 11:03:57	-->	spacekookie (~kookie@qaul.net/dev/spacekookie) has joined ##rust
2019-12-05 11:03:57	-->	cbmuser (~glaubitz@zlogin2.physik.fu-berlin.de) has joined ##rust
2019-12-05 11:03:57	-->	j`ey (~joey@unaffiliated/jey/x-00002) has joined ##rust
2019-12-05 11:03:57	-->	qbnk4 (~qbnk4@static.16.198.46.78.clients.your-server.de) has joined ##rust
2019-12-05 11:03:57	-->	apoc (~apoc@april-fools/2014/ninth/apoc) has joined ##rust
2019-12-05 11:03:57	-->	eddie_pete (~eddie@ec2-18-206-63-77.compute-1.amazonaws.com) has joined ##rust
2019-12-05 11:03:57	-->	nshp (~hi@my.domain.is.better.thanyours.com) has joined ##rust
2019-12-05 11:03:57	-->	dr_lepper (~hades@amarok/developer/hades) has joined ##rust
2019-12-05 11:04:10	-->	lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) has joined ##rust
2019-12-05 11:04:16	--	delusionallogic is now known as 07EAA7UPT
2019-12-05 11:04:21	-->	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has joined ##rust
2019-12-05 11:04:21	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-05 11:04:21	-->	Bonstra (~Bonstra@val.bonstra.fr.eu.org) has joined ##rust
2019-12-05 11:04:21	-->	narispo (~narispo@2a01:e35:2fbc:8b90:39ab:bc23:bf09:26a8) has joined ##rust
2019-12-05 11:04:21	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-12-05 11:04:21	-->	dormiens (~alanjcfs@192.241.174.78) has joined ##rust
2019-12-05 11:04:21	-->	kokx (~kokx@kokx.org) has joined ##rust
2019-12-05 11:04:21	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-05 11:04:21	-->	recon_- (~quassel@2602:febc:0:b6::6ca2) has joined ##rust
2019-12-05 11:04:21	-->	Manishearth (~Manishear@wikipedia/Manishearth) has joined ##rust
2019-12-05 11:04:21	-->	mixi (~mixi@exherbo/developer/mixi) has joined ##rust
2019-12-05 11:04:21	-->	ssbr_ (~scorchsab@python/site-packages/ssbr) has joined ##rust
2019-12-05 11:04:21	-->	sigwinch28 (~joe@2a01:4f8:151:9118::2) has joined ##rust
2019-12-05 11:04:21	-->	ricky_clarkson (~rjclarkso@unaffiliated/rickyclarkson/x-000000001) has joined ##rust
2019-12-05 11:04:21	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-12-05 11:04:21	-->	hc (~ircd@unaffiliated/hc) has joined ##rust
2019-12-05 11:04:21	-->	sjums (~nick@hurtig.ninja) has joined ##rust
2019-12-05 11:04:21	-->	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has joined ##rust
2019-12-05 11:04:21	-->	Frogging101 (~Frogging@kitsune.fastquake.com) has joined ##rust
2019-12-05 11:04:21	-->	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has joined ##rust
2019-12-05 11:04:21	-->	Natch (~Natch@h-112-130.A444.priv.bahnhof.se) has joined ##rust
2019-12-05 11:04:21	-->	EliDupree (~quassel@2604:a880:400:d0::9bb:2001) has joined ##rust
2019-12-05 11:04:21	-->	melmothX (~marco@unaffiliated/melmothx) has joined ##rust
2019-12-05 11:04:21	-->	nemith (~bbennett@cyanogenmod/maintainer/Nemith) has joined ##rust
2019-12-05 11:04:21	-->	aismallard (aismallard@lykos/aismallard) has joined ##rust
2019-12-05 11:04:21	-->	gchristensen (~grahamc@NixOS/user/gchristensen) has joined ##rust
2019-12-05 11:04:21	-->	scal_ (~scal@129.69.216.241) has joined ##rust
2019-12-05 11:04:21	-->	syem (~s@unaffiliated/syem) has joined ##rust
2019-12-05 11:04:21	-->	mhinz (~mhi^@unaffiliated/mhi/x-9993184) has joined ##rust
2019-12-05 11:04:21	-->	lhx1 (lhx@2600:3c00::f03c:91ff:fe1c:2581) has joined ##rust
2019-12-05 11:04:21	-->	PotatoGim (sid99505@gateway/web/irccloud.com/x-xedtyujditbsdsle) has joined ##rust
2019-12-05 11:04:21	-->	elichai2 (sid212594@gateway/web/irccloud.com/x-btcupeghbgvkjake) has joined ##rust
2019-12-05 11:04:21	-->	miega (miega@unaffiliated/miega) has joined ##rust
2019-12-05 11:04:21	-->	visl (~visl@2001:19f0:4009:1423::64) has joined ##rust
2019-12-05 11:04:21	-->	roguelazer (~roguelaze@2605:2700:0:2:a800:ff:fe0d:5f19) has joined ##rust
2019-12-05 11:04:21	-->	no_maam (~password_@gauss.datenzone.de) has joined ##rust
2019-12-05 11:04:21	-->	pinkieval (~progval@pdpc/supporter/student/progval) has joined ##rust
2019-12-05 11:04:21	-->	Argorok (sid195487@gateway/web/irccloud.com/x-fqgiyeswwblfrjcc) has joined ##rust
2019-12-05 11:04:21	-->	kblin1 (~kai@samba/team/kai) has joined ##rust
2019-12-05 11:04:21	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined ##rust
2019-12-05 11:04:21	-->	dftxbs3e (~dftxbs3e@unaffiliated/dftxbs3e) has joined ##rust
2019-12-05 11:04:21	-->	dbohdan (~dbohdan@unaffiliated/dbohdan) has joined ##rust
2019-12-05 11:04:21	-->	ilmu (ilmu@gateway/shell/c-base/x-uvnsmkxstqhypwjc) has joined ##rust
2019-12-05 11:04:21	-->	cheers (user@unaffiliated/cheers) has joined ##rust
2019-12-05 11:04:21	-->	infinity0 (~infinity0@freenet/developer/infinity0) has joined ##rust
2019-12-05 11:04:21	-->	BlackYoup (~BlackYoup@2001:bc8:2e94:100::1) has joined ##rust
2019-12-05 11:04:21	-->	OlUv (~ubuntu@ec2-13-124-169-156.ap-northeast-2.compute.amazonaws.com) has joined ##rust
2019-12-05 11:04:21	-->	emilsp (~emilsp@freenode/staff/emilsp) has joined ##rust
2019-12-05 11:04:21	-->	ivan (~ivan@unaffiliated/ivan/x-000001) has joined ##rust
2019-12-05 11:04:21	-->	kent\n (~kent@gentoo/developer/kentnl) has joined ##rust
2019-12-05 11:04:21	-->	wucke13 (~wucke13@mail.wucke13.de) has joined ##rust
2019-12-05 11:04:21	-->	Almindor (~irc@d104-205-230-103.abhsia.telus.net) has joined ##rust
2019-12-05 11:04:21	-->	fengshaun (~fengshaun@unaffiliated/fengshaun) has joined ##rust
2019-12-05 11:04:21	-->	lebster (sid17131@gateway/web/irccloud.com/x-izkiocdvesecsimi) has joined ##rust
2019-12-05 11:04:21	-->	earlz (~earlz@earlz.net) has joined ##rust
2019-12-05 11:04:21	-->	subsonick (~subsonik@matrix.netspectrum.de) has joined ##rust
2019-12-05 11:04:21	-->	tse_ (~tse@static.240.142.216.95.clients.your-server.de) has joined ##rust
2019-12-05 11:04:21	-->	vorner (~vorner@vorner.cz) has joined ##rust
2019-12-05 11:04:21	-->	emerent (~quassel@p200300CD571F4C01BA27EBFFFED28A59.dip0.t-ipconnect.de) has joined ##rust
2019-12-05 11:04:21	-->	M-ou-se (~m-ou-se@circle.m-ou.se) has joined ##rust
2019-12-05 11:04:21	-->	Snaipe (~Snaipe@2001:41d0:52:d00::1186) has joined ##rust
2019-12-05 11:04:21	-->	dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) has joined ##rust
2019-12-05 11:04:21	-->	Defcronyke (~Defcronyk@cryptospread.com) has joined ##rust
2019-12-05 11:04:21	-->	compenguy (~compenguy@c-73-240-172-56.hsd1.wa.comcast.net) has joined ##rust
2019-12-05 11:04:21	-->	eythian (~quassel@fsf/member/eythian) has joined ##rust
2019-12-05 11:04:21	-->	bsdbandit (~bwell@users.757.org) has joined ##rust
2019-12-05 11:04:21	-->	XVar (~XVar@unaffiliated/xvar) has joined ##rust
2019-12-05 11:04:21	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-12-05 11:04:21	-->	TheWearyGamer (jmerdich@pool-173-76-152-218.bstnma.fios.verizon.net) has joined ##rust
2019-12-05 11:04:21	-->	w1gz (~do@159.89.11.133) has joined ##rust
2019-12-05 11:04:21	-->	cja (sid161498@gateway/web/irccloud.com/x-qqmgjlatlfntawyr) has joined ##rust
2019-12-05 11:04:21	-->	heinrich5991 (~hein5991@unaffiliated/heinrich5991) has joined ##rust
2019-12-05 11:04:21	-->	yrp (~x@unaffiliated/yrp) has joined ##rust
2019-12-05 11:04:21	-->	paracyst (~paracyst@unaffiliated/paracyst) has joined ##rust
2019-12-05 11:04:21	-->	RayS (~raysl@sdf1.xen.prgmr.com) has joined ##rust
2019-12-05 11:04:21	-->	nekron (~nekron@noordsee.de) has joined ##rust
2019-12-05 11:04:21	-->	tumdedum (~tumdedum@unaffiliated/espiral) has joined ##rust
2019-12-05 11:04:21	-->	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has joined ##rust
2019-12-05 11:04:21	-->	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has joined ##rust
2019-12-05 11:04:21	-->	naftulikay (sid278111@gateway/web/irccloud.com/x-eclrmjfbsxurhkgv) has joined ##rust
2019-12-05 11:04:21	-->	delusionallogic (~delusiona@176-23-98-104-cable.dk.customer.tdc.net) has joined ##rust
2019-12-05 11:04:21	-->	spesk_ (~swatson@47.19.105.250) has joined ##rust
2019-12-05 11:04:21	-->	bkhl (~bkhl@marsh.hcoop.net) has joined ##rust
2019-12-05 11:04:21	-->	jbaublitzzz (~jbaublitz@134.209.88.39) has joined ##rust
2019-12-05 11:04:21	-->	andi_ (~andi@unaffiliated/andi/x-9058200) has joined ##rust
2019-12-05 11:04:21	-->	_jack_ (uid396411@gateway/web/irccloud.com/x-rfpyscximquwbcfa) has joined ##rust
2019-12-05 11:04:21	-->	nerdypepper (~NerdyPepp@139.59.93.193) has joined ##rust
2019-12-05 11:04:21	-->	tcsc (uid145321@gateway/web/irccloud.com/x-fgkkxgeqedxtkrjz) has joined ##rust
2019-12-05 11:04:21	-->	xxpor (~xxpor@ec2-54-191-92-16.us-west-2.compute.amazonaws.com) has joined ##rust
2019-12-05 11:04:21	-->	northcode (~northcode@vps-29.35.101.185.stwvps.net) has joined ##rust
2019-12-05 11:04:21	-->	Guest39455 (~trui@2001:982:feff:1:a19c:662f:dde8:6560) has joined ##rust
2019-12-05 11:04:21	-->	dbrgn (~dbrgn@v2201907172493568.quicksrv.de) has joined ##rust
2019-12-05 11:04:21	-->	Kronuz (~Kronuz@unaffiliated/kronuz) has joined ##rust
2019-12-05 11:04:21	-->	vup (~~~~@46.101.193.235) has joined ##rust
2019-12-05 11:04:21	-->	mp (sid298319@gateway/web/irccloud.com/x-mwiyahcotcudbdau) has joined ##rust
2019-12-05 11:04:21	-->	bradleymeck (sid292902@gateway/web/irccloud.com/x-tkeawdgrvfoaainp) has joined ##rust
2019-12-05 11:04:21	-->	saintdev (sid25343@gateway/web/irccloud.com/x-fcbujynbkdpksthq) has joined ##rust
2019-12-05 11:04:21	-->	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has joined ##rust
2019-12-05 11:04:21	-->	Naeblis (~Naeblis@unaffiliated/naeblis) has joined ##rust
2019-12-05 11:04:21	-->	eddyb[legacy] (sid155877@gateway/web/irccloud.com/x-otgtzelwkmxuzqaf) has joined ##rust
2019-12-05 11:04:43	<--	lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) has quit (Max SendQ exceeded)
2019-12-05 11:05:05	-->	lithammer (~lithammer@arch-vps.cloud.tilaa.com) has joined ##rust
2019-12-05 11:05:31	<--	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has quit (Max SendQ exceeded)
2019-12-05 11:05:32	<--	ssbr_ (~scorchsab@python/site-packages/ssbr) has quit (Remote host closed the connection)
2019-12-05 11:05:44	-->	ssbr_ (~scorchsab@python/site-packages/ssbr) has joined ##rust
2019-12-05 11:06:36	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-05 11:07:32	-->	Yamakaja (~yamakaja@vps.pub.yamakaja.me) has joined ##rust
2019-12-05 11:07:48	-->	ahf (ahf@irssi/staff/ahf) has joined ##rust
2019-12-05 11:07:53	<--	elichai2 (sid212594@gateway/web/irccloud.com/x-btcupeghbgvkjake) has quit (Ping timeout: 266 seconds)
2019-12-05 11:07:53	<--	lebster (sid17131@gateway/web/irccloud.com/x-izkiocdvesecsimi) has quit (Ping timeout: 266 seconds)
2019-12-05 11:09:13	-->	elichai2 (sid212594@gateway/web/irccloud.com/x-fhihlxwdowbujcbx) has joined ##rust
2019-12-05 11:09:24	-->	lebster (sid17131@gateway/web/irccloud.com/x-cvsnuqsinteyxfxa) has joined ##rust
2019-12-05 11:11:24	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-05 11:20:39	-->	jinakola (jinakola@evo.paivola.fi) has joined ##rust
2019-12-05 11:21:05	-->	Yaniel (yaniel@unaffiliated/yaniel) has joined ##rust
2019-12-05 11:26:46	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-05 11:27:21	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Ping timeout: 246 seconds)
2019-12-05 11:29:20	-->	localhorse (uid18992@gateway/web/irccloud.com/x-zstvnhczkyqxvruj) has joined ##rust
2019-12-05 11:40:18	-->	cschwan (~cschwan@cigno.mi.infn.it) has joined ##rust
2019-12-05 11:52:43	-->	ben_m (~ben@unaffiliated/ben-m/x-8385872) has joined ##rust
2019-12-05 11:53:27	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-05 11:53:36	yrp	if I have #[repr(u32)] enum E { P = 1, Q = 2 }, is it UB to transmute extern "C" fn y(u32) into extern "C" fn y(X)
2019-12-05 11:54:56	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-12-05 11:55:47	-->	learningc (~pi@121.122.98.41) has joined ##rust
2019-12-05 11:55:48	<--	jbg (~jbg@88.98.228.44) has quit (Quit: leaving)
2019-12-05 11:57:49	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-12-05 11:58:23	-->	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has joined ##rust
2019-12-05 11:59:55	-->	kai_w (~kai@213.152.255.34) has joined ##rust
2019-12-05 12:01:24	-->	Jamuwu (~Jamuwu@68.183.114.223) has joined ##rust
2019-12-05 12:01:42	<--	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has quit (Remote host closed the connection)
2019-12-05 12:01:50	-->	jbg (~jbg@88.98.228.44) has joined ##rust
2019-12-05 12:02:23	<--	yshui (~yshui@79.173.173.4) has quit (Ping timeout: 245 seconds)
2019-12-05 12:03:11	Blub\0	https://rust-lang.github.io/rust-clippy/master/index.html#match_bool
2019-12-05 12:03:24	Blub\0	I get that it's not idiomatic... but the explanation of it being less readable is just plain wrong
2019-12-05 12:03:26	-->	ev4rist3 (~phoenix@x4db7ea54.dyn.telefonica.de) has joined ##rust
2019-12-05 12:03:46	Blub\0	especially if it's not just a statement, but a `let x = if bool { a } else { b }` in which case the match is actually much more readable
2019-12-05 12:04:34	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-05 12:04:57	<--	Yaniel (yaniel@unaffiliated/yaniel) has quit (Ping timeout: 240 seconds)
2019-12-05 12:05:01	jbg	Blub\0: to each his own; i don't find the match more readable in that case
2019-12-05 12:05:47	Blub\0	depends on the length of `a` and `b`
2019-12-05 12:06:02	yrp	the word clippy lint by far is suggestion that 0x1000 be rewritten as 1.shift_left(12)
2019-12-05 12:06:04	yrp	like goddamn
2019-12-05 12:06:08	yrp	who thought that was a good idea
2019-12-05 12:06:12	-->	dansho_ (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-05 12:06:18	jbg	to me, it doesn't. if they're long enough to be unreadable as an if/else expression then they're probably not that readable as a match either
2019-12-05 12:06:20	Blub\0	wait wat
2019-12-05 12:06:21	j`ey	yrp: lol
2019-12-05 12:07:02	<--	jinakola (jinakola@evo.paivola.fi) has quit (Ping timeout: 276 seconds)
2019-12-05 12:07:14	jbg	yrp: haha yes. i have some #[allow... for that lint lying around
2019-12-05 12:07:23	Blub\0	jbg: I mostly just dislike how rustfmt formats it if it's not long enough for the entire `if` block to be put into its own indented line after the '='
2019-12-05 12:07:34	jbg	Blub\0: rustfmt is very configurable
2019-12-05 12:07:55	Blub\0	aren't like most options still unstable or some such :p
2019-12-05 12:08:33	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Ping timeout: 250 seconds)
2019-12-05 12:09:06	-->	Yaniel (yaniel@unaffiliated/yaniel) has joined ##rust
2019-12-05 12:10:18	jbg	no idea. i just put my formatting preferences in rustfmt.toml and it seems to work well
2019-12-05 12:10:20	j`ey	can you configure clippy lints with a config file or something?
2019-12-05 12:10:27	-->	jinakola (jinakola@evo.paivola.fi) has joined ##rust
2019-12-05 12:10:31	j`ey	I feel like that's nicer than having them in the source itself
2019-12-05 12:10:47	jbg	https://github.com/rust-lang/cargo/issues/5034
2019-12-05 12:11:14	jbg	in some cases i think it makes sense in the code: "i know clippy doesn't like this, but I know what I'm doing", preferably accompanied by a comment justifying that you know what you're doing
2019-12-05 12:11:24	jbg	in other cases: "i really hate this clippy lint" it makes more sense in a config file
2019-12-05 12:11:40	Blub\0	yup
2019-12-05 12:11:50	yrp	im trying to imagine a case where 1.shift_left(12) is better than 0x1000
2019-12-05 12:12:21	<--	AbedB__ (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-05 12:12:47	Blub\0	uh, I know this one!
2019-12-05 12:12:52	Blub\0	it's better when.... uh... never
2019-12-05 12:13:04	Yaniel	how about 0b1_0000_0000_0000
2019-12-05 12:13:09	Blub\0	what does it say about `1 << 12` then
2019-12-05 12:13:18	Yaniel	or 0b0001_0000_0000_0000
2019-12-05 12:13:21	Blub\0	Yaniel: no, it's not generally better than that either
2019-12-05 12:13:39	Blub\0	I use numbers like this for register bitmasks...
2019-12-05 12:13:54	Blub\0	(for embedded stuff)
2019-12-05 12:14:15	Yaniel	yeh, wouldn't 0bXXXX be the most intuitive for that
2019-12-05 12:14:17	j`ey	https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation this is weird
2019-12-05 12:14:25	Yaniel	(besides everyone being used to reading hex)
2019-12-05 12:15:23	Blub\0	if clippy starts telling me not to use binary numbers there I'ma have to higher a gang of drunks to throw MS clippies at the clippy devs :P
2019-12-05 12:16:23	 *	j`ey should look up how to run clippy on github actions
2019-12-05 12:16:27	yrp	"Hi, it looks like youre trying to tell embedded systems programmers not to use hex bitmasks. Would you like help returning to the world of HTTP where you belong?"
2019-12-05 12:20:30	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-12-05 12:22:39	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-05 12:23:21	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-05 12:25:29	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-05 12:27:20	dalcde	It seems to me that the difficulties around fast binary search trees is in figuring out how to organize things when you insert new elements.
2019-12-05 12:28:16	dalcde	Is there an implementation of binary search tree where the tree is immutable after it is created?
2019-12-05 12:32:04	j`ey	has this started https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html ? I dont see any github actions/workflows in the main repo
2019-12-05 12:33:03	j`ey	or does anyone have a repo that uses github actions i could look at?
2019-12-05 12:34:27	vorner	dalcde, If you have it immutable, you don't need a tree. You're good with a sorted array.
2019-12-05 12:34:35	<--	xeno (~xeno@unaffiliated/xeno) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-05 12:36:54	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-05 12:38:22	-->	muhlinux (~muhlinux@45.12.220.200) has joined ##rust
2019-12-05 12:38:59	-->	pertl (~pertl@p5B05A274.dip0.t-ipconnect.de) has joined ##rust
2019-12-05 12:44:44	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2019-12-05 12:45:09	jellie	Hello people
2019-12-05 12:45:14	jellie	Need some help here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f0acf8ca1aa0cb64f6e46e2cb7399fa8
2019-12-05 12:45:35	jellie	I'm trying to simplify the problem here.
2019-12-05 12:46:16	jellie	Basically I have a struct, a seeker, that I want to update as I go through a file
2019-12-05 12:46:29	jellie	Thing is I'm unable to mutate ths
2019-12-05 12:46:30	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-05 12:46:41	jellie	*the seeker in a fn
2019-12-05 12:49:26	j`ey	theres a few things going on here
2019-12-05 12:50:02	j`ey	jellie: take a look https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=18063808044aa4c09c0a48a44172ebb3
2019-12-05 12:50:07	j`ey	jellie: hopefully its what you want
2019-12-05 12:52:08	jellie	j`ey: So the difference is in replace() ?
2019-12-05 12:54:00	j`ey	and take
2019-12-05 12:56:29	jbg	anyone know how I can get the rust+rls vscode extension to still do formatting even if rls is not installed?
2019-12-05 12:57:01	jbg	every few months I try rls out again but it gets stuck in infinite loops and requires killing several times a day, so i uninstall it again
2019-12-05 12:57:10	jbg	but after uninstalling it, format-on-save doesn't work any more in vscode
2019-12-05 12:57:21	jbg	they should be unrelated, i'd have thought, since rustfmt still works without rls
2019-12-05 12:58:13	jellie	Where can I read more about replace() and take()
2019-12-05 12:58:15	jellie	?
2019-12-05 12:58:22	jellie	I can't find any documentation on it
2019-12-05 12:58:32	j`ey	theyre part of option
2019-12-05 12:58:38	j`ey	https://doc.rust-lang.org/std/option/enum.Option.html
2019-12-05 13:00:00	elichai2	anyone here knows how to use `ndarray`? I want a [[u8; 32]; 32] matrix and I can't seem to make it work :/
2019-12-05 13:00:34	dalcde	vorner: Sure. I was just wondering if there is some existing package, though it is not hard to implement.
2019-12-05 13:01:49	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-05 13:02:57	jellie	j`ey: I don't understand the take()
2019-12-05 13:03:09	cart_man	Why do I keep on getting a Result back instead of a string? How do I return either error or the string for OK() ..  https://hastebin.com/lotelineru.php
2019-12-05 13:03:26	jellie	Is it so that my fn can take ownership?
2019-12-05 13:03:42	j`ey	jellie: yep
2019-12-05 13:03:43	jellie	*my function, bar,
2019-12-05 13:03:48	jbg	cart_man: Result is literally how you return "either error or X"
2019-12-05 13:04:02	jellie	Without ownership can't it mutate the value? Given it has a ref?
2019-12-05 13:05:17	jellie	j`ey:  What do you think about the update method?
2019-12-05 13:05:28	j`ey	jellie: your update value takes ownership
2019-12-05 13:05:37	j`ey	jellie: thats why you have to call take
2019-12-05 13:06:02	j`ey	you could maybe make it &mut self in update
2019-12-05 13:06:45	j`ey	but then in the other case ~line 35, you need to replace the opt_seeker with a new seeker anyway
2019-12-05 13:07:15	jellie	j`ey: Yeah, I'm thinking of having it take a &mut self
2019-12-05 13:07:22	jellie	but then it'll have to return a ref as well
2019-12-05 13:08:24	j`ey	i think the take/replace solution isnt that bad
2019-12-05 13:09:17	jellie	Yes, after trying to rewrite using a reference I am writing weird code
2019-12-05 13:09:21	jellie	*non elegant
2019-12-05 13:12:01	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-12-05 13:12:16	cart_man	jbg: OK but that syntax looks fine right?
2019-12-05 13:12:37	jellie	Yeah I'm gonna use take because using &mut isn't even working https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f5ce4fa0b29835404c27b9d6dbcf62b5
2019-12-05 13:12:55	cart_man	jbg: Because match x{  Ok(x) => x, Err)(e) => e }    will return x or e right
2019-12-05 13:12:56	jellie	Plus I feel like smart pointers would be better for whatI'm doing there
2019-12-05 13:13:35	j`ey	cart_man: what is the type of msg2?
2019-12-05 13:13:51	cart_man	j`ey: String
2019-12-05 13:14:20	j`ey	cart_man: so syntatically it is correct, but you cant put the error into the string
2019-12-05 13:14:26	j`ey	like line 3 is doing
2019-12-05 13:15:01	j`ey	also.. to_string() probably just returns a string, not a result?
2019-12-05 13:15:21	j`ey	so the whole match might not make sense
2019-12-05 13:17:07	cart_man	j`ey: Ok so what I did was removed everything from the .unwrap() and matched it. And then did to_string() to both the returned values .. that worked
2019-12-05 13:17:13	cart_man	OK awesome so this makes sense now
2019-12-05 13:26:56	-->	rardiol (~quassel@177.52.226.74) has joined ##rust
2019-12-05 13:31:56	<--	jbg (~jbg@88.98.228.44) has quit (Ping timeout: 240 seconds)
2019-12-05 13:41:53	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-05 13:47:51	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-05 13:49:52	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-05 13:50:32	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-05 13:50:35	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (Quit: esoteric nonsense)
2019-12-05 13:50:51	-->	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has joined ##rust
2019-12-05 13:51:47	<--	pertl (~pertl@p5B05A274.dip0.t-ipconnect.de) has quit (Quit: pertl)
2019-12-05 13:52:09	<--	narispo (~narispo@2a01:e35:2fbc:8b90:39ab:bc23:bf09:26a8) has quit (Read error: Connection reset by peer)
2019-12-05 13:52:51	<--	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has quit (Client Quit)
2019-12-05 13:52:52	-->	narispo (~narispo@2a01:e35:2fbc:8b90:39ab:bc23:bf09:26a8) has joined ##rust
2019-12-05 13:53:05	-->	esotericnonsense (~esotericn@unaffiliated/esotericnonsense) has joined ##rust
2019-12-05 13:57:56	<--	localhorse (uid18992@gateway/web/irccloud.com/x-zstvnhczkyqxvruj) has quit (Quit: Connection closed for inactivity)
2019-12-05 14:02:44	kokx	is there an 'if not let' type statement or idiomatic way to handle such cases? I want to return None when an underlying function returns None, but the match solution seems quite verbose
2019-12-05 14:03:00	cart_man	If I am using use std::sync::mpsc::channel; but I need more than one channel.. What do I do to instantiate a new channel? Because the example shows let (sender, receiver) = channel(); ...
2019-12-05 14:03:11	cart_man	Will it be possible to make more than one channel?
2019-12-05 14:03:12	gchristensen	kokx: how about `let foo = yourfunction()?;
2019-12-05 14:03:24	cart_man	I cant see a Channel::new() or seomthing similar
2019-12-05 14:03:45	gchristensen	cart_man: just do it :)
2019-12-05 14:03:58	kokx	gchristensen: that doesn't return None for the current function, if I'm correct?
2019-12-05 14:04:05	gchristensen	let (send2, recv2) = channel(); let (send3, recv3) = channel();
2019-12-05 14:04:07	gchristensen	kokx: it does
2019-12-05 14:05:39	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-12-05 14:06:01	kokx	gchristensen: ah wait, I didn't look at your answer correctly, I though the questionmark was simply mistyped, but that works, thanks!
2019-12-05 14:06:16	gchristensen	kokx: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=137713835fb98fe03bd43245f9bcd4ce
2019-12-05 14:08:11	gchristensen	kokx: it also works on Result types: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=19552844c165e6bb9fefe3a6e8f3faf1
2019-12-05 14:09:01	-->	jbg (~jbg@88.98.228.44) has joined ##rust
2019-12-05 14:15:13	cart_man	gchristensen: Hey this is the error I get if I do that -> ^^^^^^^ cannot infer type for `T`
2019-12-05 14:15:17	cart_man	for channel()
2019-12-05 14:15:35	gchristensen	it can't tell what you're going to use it for
2019-12-05 14:16:00	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-05 14:16:50	gchristensen	cart_man: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=08379b2c2ef6760521eb46a74bd05ab6
2019-12-05 14:16:58	cart_man	gchristensen: But if the one is the only one then it knows but if I add two it wants tupe?
2019-12-05 14:17:37	gchristensen	no, there is nothing special about any channel, you can have one channel, you can have a hundred channels, it is the same to Rust
2019-12-05 14:17:48	-->	mgrech__ (~mgrech@193-154-9-224.adsl.highway.telekom.at) has joined ##rust
2019-12-05 14:18:30	cart_man	gchristensen: ahh ok I see.... But what does that actually say then? Does it say that it can only send that type?
2019-12-05 14:18:41	gchristensen	yes
2019-12-05 14:18:48	gchristensen	a given channel can always only send a single type
2019-12-05 14:21:09	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 250 seconds)
2019-12-05 14:22:15	cart_man	gchristensen: Ahh ok well that makes sense so
2019-12-05 14:22:17	cart_man	THanks allot!
2019-12-05 14:22:21	<--	minsec (~shijiafen@104.192.108.10) has quit (Ping timeout: 246 seconds)
2019-12-05 14:22:22	gchristensen	yep!
2019-12-05 14:22:32	cart_man	gchristensen: By the way ... how did you deduce that from the docs?
2019-12-05 14:22:55	gchristensen	happy to answern that question in a few minutes, which part are you needing help deducing?
2019-12-05 14:23:45	<--	narispo (~narispo@2a01:e35:2fbc:8b90:39ab:bc23:bf09:26a8) has quit (Ping timeout: 246 seconds)
2019-12-05 14:26:32	elichai2	why ndarray vec*matrix returns a vec instead of a matrix :/
2019-12-05 14:27:01	cart_man	gchristensen: No I just wonder sometimes how you get that sort of thing from the docs cause I was scanning it but it didnt mean much to me
2019-12-05 14:27:10	cart_man	ALso ... when do I use Self and when do I use self .?
2019-12-05 14:31:38	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-05 14:33:57	dalcde	self is a shorthand for self : Self.
2019-12-05 14:34:02	dalcde	Self is the type. self is a variable name
2019-12-05 14:40:28	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-05 14:44:21	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-05 14:45:58	j`ey	elichai2: something about const generics?
2019-12-05 14:46:08	j`ey	or that it cant know the size of the output beforehand?
2019-12-05 14:47:01	elichai2	j`ey: they have so many tricks *because* threre are no const generics that you can't find what where
2019-12-05 14:47:20	elichai2	I think I figured it out by doing this: `Array::from_shape_vec((32, 32), vec![0u8; 32*32]).unwrap();`
2019-12-05 14:47:23	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-05 14:47:47	gchristensen	cart_man: like the part about the types?
2019-12-05 14:47:50	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 265 seconds)
2019-12-05 14:49:17	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 265 seconds)
2019-12-05 14:50:13	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-05 14:53:06	-->	AbedB (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has joined ##rust
2019-12-05 14:54:44	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-05 14:55:00	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-05 14:56:10	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-05 14:56:53	--	Choscura is now known as JewZeus
2019-12-05 14:57:33	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (Ping timeout: 268 seconds)
2019-12-05 14:57:47	--	JewZeus is now known as Choscura
2019-12-05 14:58:10	-->	johndoe (~john@unaffiliated/johndoe) has joined ##rust
2019-12-05 14:58:33	johndoe	there comes #rust from mozilla to freenode !
2019-12-05 14:58:58	johndoe	anyway, any idea on how to do this properly?
2019-12-05 14:59:25	j`ey	do what?
2019-12-05 14:59:38	johndoe	impl<T> Mul<T> for Point { type Output = Point; fn mul(self, scalar: T) -> Point { Point { x: self.x * scalar, ... ?
2019-12-05 14:59:56	johndoe	I wanna implement multiplying my Point type by a generic scalar type (i32, u32, usize, whatever)
2019-12-05 15:00:20	jbg	T is too broad, someone else could write a conflicting impl
2019-12-05 15:00:30	johndoe	I think I'm missing something like: impl<T: Mul<T>> Mul<T> for Point
2019-12-05 15:01:13	jbg	what is the type of self.x?
2019-12-05 15:01:21	johndoe	sorry, it's i32
2019-12-05 15:01:28	johndoe	I've found this https://users.rust-lang.org/t/implementing-generic-trait-with-local-struct-on-local-trait/23225
2019-12-05 15:01:36	jbg	so, impl<T> Mul<T> for Point where T: Mul<i32>
2019-12-05 15:01:56	johndoe	what does that last part mean exactly?
2019-12-05 15:02:06	johndoe	any type T that can be multiplied with a i32?
2019-12-05 15:02:08	jbg	yes
2019-12-05 15:02:12	johndoe	ahhh, thanks! :-)
2019-12-05 15:02:58	jbg	more accurately, any type T that implements the trait Mul<i32>
2019-12-05 15:06:14	-->	xeno_ (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-05 15:06:56	<--	Jamuwu (~Jamuwu@68.183.114.223) has quit (Quit: The Lounge - https://thelounge.chat)
2019-12-05 15:07:00	<--	chowmeined (~chowmeine@unaffiliated/chowmeined) has quit (Read error: Connection reset by peer)
2019-12-05 15:07:21	-->	chowmeined (~chowmeine@unaffiliated/chowmeined) has joined ##rust
2019-12-05 15:09:15	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 250 seconds)
2019-12-05 15:19:47	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-05 15:26:39	johndoe	cannot seem to get it to work, here it is on the Rust Playground https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=daba5b487f6f0ee850a0f11713356373
2019-12-05 15:26:46	jellie	Is there a container I can use to store one value of something but this contain may be empty?
2019-12-05 15:26:48	johndoe	help appreciated :)
2019-12-05 15:27:08	johndoe	Vec<Option<T>> ?
2019-12-05 15:27:28	johndoe	or just Option<T> ?
2019-12-05 15:34:23	<--	hc (~ircd@unaffiliated/hc) has quit (Ping timeout: 276 seconds)
2019-12-05 15:35:17	j`ey	johndoe: isnt that just Option?
2019-12-05 15:37:11	voker57	johndoe: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a731a8addc677d0603c08c7e5743b269
2019-12-05 15:41:01	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-05 15:42:47	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-05 15:42:50	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-12-05 15:44:47	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 276 seconds)
2019-12-05 15:45:03	--	pupskucheen is now known as pupskuchen
2019-12-05 15:45:35	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-05 15:45:50	-->	jenny-m (~jdm-@72.139.201.157) has joined ##rust
2019-12-05 15:46:00	johndoe	voker57: ahhhh thanks! was missing a "small" detail there :-)
2019-12-05 15:46:04	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-12-05 15:50:02	johndoe	voker57: any way to get this version working? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=427e1fd7d7f665ae0964fca67a4012a1
2019-12-05 15:50:05	<--	dansho_ (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-05 15:50:39	learningc	Can I program Qt with rust?
2019-12-05 15:51:17	Yaniel	yes
2019-12-05 15:51:34	Yaniel	but last time I heard about it it was not very pretty
2019-12-05 15:51:46	Yaniel	unless you stick to QML, in which case it may be fine
2019-12-05 15:53:29	<--	scain (~scain@2607:5300:60:233b::1) has quit (Quit: Konversation terminated!)
2019-12-05 15:55:59	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-05 15:59:05	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 250 seconds)
2019-12-05 16:01:27	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Quit: Leaving)
2019-12-05 16:02:19	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-05 16:07:14	<--	tmager (~Thunderbi@146.115.18.74) has quit (Quit: tmager)
2019-12-05 16:17:37	<--	thesquib (~thesquib@192.241.198.27) has quit (Ping timeout: 240 seconds)
2019-12-05 16:18:14	-->	narispo (~narispo@37.164.30.167) has joined ##rust
2019-12-05 16:18:46	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-05 16:19:50	-->	thesquib (~thesquib@192.241.198.27) has joined ##rust
2019-12-05 16:21:52	learningc	If not for Qt, what options do I have for GUI with rust?
2019-12-05 16:22:27	Yaniel	GTK, Azul, ...
2019-12-05 16:26:25	capitol	https://areweguiyet.com/
2019-12-05 16:31:35	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-12-05 16:33:03	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-05 16:39:13	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-05 16:51:06	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-12-05 16:53:31	-->	abundantmussel (~quassel@server.shortland.org) has joined ##rust
2019-12-05 16:54:09	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-12-05 16:59:36	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-12-05 17:00:29	-->	tsundoku (~tsundoku@irc.tsundoku.ne.jp) has joined ##rust
2019-12-05 17:01:01	tsundoku	quick question - is there a reliable place to check the build dependencies for a given version of cargo?
2019-12-05 17:01:59	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-12-05 17:15:00	<--	ben_m (~ben@unaffiliated/ben-m/x-8385872) has quit (Quit: WeeChat 2.6)
2019-12-05 17:17:36	johndoe	voker57: nvm, got it working :-) https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d22290024c842d000c468bd3b76798c2
2019-12-05 17:19:02	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 276 seconds)
2019-12-05 17:21:19	jbg	tsundoku: the Cargo.toml for the version of cargo in question?
2019-12-05 17:22:54	tsundoku	thanks
2019-12-05 17:23:01	tsundoku	I don't see rust itself in here though
2019-12-05 17:25:24	<--	minsec (~shijiafen@115.171.222.95) has quit (Ping timeout: 265 seconds)
2019-12-05 17:31:56	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-12-05 17:33:07	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-12-05 17:33:08	jbg	oh right
2019-12-05 17:33:36	jbg	yeah, in the same way that you wouldn't see node listed in a package.json or python listed in a requirements.txt
2019-12-05 17:33:39	<--	jinie (~jimmy@188.114.159.27) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2019-12-05 17:34:34	jbg	i think you actually need cargo to build cargo, so... :D
2019-12-05 17:35:30	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-05 17:35:56	jbg	there's a list of build dependencies in cargo's README.md. git, curl, pkg-config, openssl headers, cargo and rustc
2019-12-05 17:36:16	jbg	or, on non-unix, git, cargo and rustc
2019-12-05 17:37:00	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-12-05 17:38:10	j`ey	rustc at least builds with teh previous release?
2019-12-05 17:38:24	j`ey	so I'd assume the same for cargo? *shrug*
2019-12-05 17:49:42	-->	rodorgas (~rodrigoor@143.107.45.1) has joined ##rust
2019-12-05 17:53:26	<--	halfbit (~tburdick@unaffiliated/submersive) has quit (Quit: WeeChat 2.6)
2019-12-05 17:54:11	tsundoku	I have cargo installed already but I'm trying to build firefox and it is complaining about cargo being too old, so I need to update it
2019-12-06 09:10:56	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-06 09:10:56	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-06 09:10:56	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-06 09:10:56	--	Channel ##rust: 626 nicks (1 op, 0 voices, 625 normals)
2019-12-06 09:11:11	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-06 09:14:24	<--	hyu (~hyu@58.48.128.38) has quit (Remote host closed the connection)
2019-12-06 09:15:56	-->	iamthevisitor (~iamthevis@47.151.151.61) has joined ##rust
2019-12-06 09:18:57	-->	endless90 (~endless90@p200300DA372BCF00D1E0BCA691DC412F.dip0.t-ipconnect.de) has joined ##rust
2019-12-06 09:22:47	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-06 09:26:28	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-06 09:26:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-06 09:29:15	-->	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has joined ##rust
2019-12-06 09:29:21	<--	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has left ##rust ("-")
2019-12-06 09:29:55	-->	Moongoodgirl (~moonbolt@sugar-belle.blackl.net) has joined ##rust
2019-12-06 09:30:26	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-06 09:39:24	dansho	it's not abnormal
2019-12-06 09:41:37	jellie	Can anyone tell me how to best implement read here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=11ce613572dd18d7164c5ac4614a3d4e
2019-12-06 09:43:40	<--	skind (~skind@unaffiliated/skind) has quit (Ping timeout: 265 seconds)
2019-12-06 09:43:46	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-12-06 09:44:18	-->	maelcum (~horst@2001:16b8:c1a2:7900:494f:3f0b:8231:3ac9) has joined ##rust
2019-12-06 09:45:50	-->	skind (~skind@unaffiliated/skind) has joined ##rust
2019-12-06 09:45:57	papna	jellie: write is really confusing to me
2019-12-06 09:46:46	jellie	papna: Why?
2019-12-06 09:46:50	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-12-06 09:46:57	jellie	Because it's not using self?
2019-12-06 09:47:58	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-12-06 09:48:44	jellie	papna: Great catch thanks https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=04be2ce94706d121714718d6a7cde265
2019-12-06 09:48:47	jellie	What about now ^
2019-12-06 09:50:00	papna	jellie: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=11ce613572dd18d7164c5ac4614a3d4e ?
2019-12-06 09:50:35	papna	jellie: That's more along the lines of what I'd expect something that is non-static and is called 'write' to do
2019-12-06 09:50:36	jellie	this https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=28b4267264faf09660ea60976de5d2e6
2019-12-06 09:51:24	jellie	I don't see the difference with what I'd written before
2019-12-06 09:52:26	jellie	papna: ^
2019-12-06 09:53:48	papna	jellie: Sorry, I didn't realize it didn't save -- I suggested let mut ret = None;std::mem::swap(&mut ret, &mut self.value);ret
2019-12-06 09:55:29	jellie	This is for read, right?
2019-12-06 09:55:29	<--	jinie (~jimmy@188.114.159.27) has quit (Ping timeout: 276 seconds)
2019-12-06 09:55:39	jellie	What do you think about my updated write?
2019-12-06 09:55:42	jellie	papna: ^
2019-12-06 09:56:12	papna	jellie: It makes more sense to me
2019-12-06 09:56:26	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-06 09:56:41	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-12-06 09:57:25	jellie	papna: Is there a but?
2019-12-06 10:01:28	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-06 10:04:06	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-06 10:04:35	<--	m0rphism2 (~m0rphism@134.3.100.170) has quit (Ping timeout: 250 seconds)
2019-12-06 10:05:43	dansho	you can just use take() for read: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1dbbc06ac961ef8d5f956605a6575c0c
2019-12-06 10:06:45	dansho	also is_empty can just be self.value.is_none()
2019-12-06 10:09:47	<--	m0rphism (~m0rphism@134.3.100.170) has quit (Ping timeout: 276 seconds)
2019-12-06 10:11:03	jellie	dansho: You're right about is_empty. For some reason when writing it I though that it would take/affect ownership
2019-12-06 10:12:16	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-06 10:13:08	jellie	dansho: If I may ask, how come Rust doesn't complain about take() being implemented for T
2019-12-06 10:14:40	<--	jbg (~jbg@88.98.228.44) has quit (Quit: Lost terminal)
2019-12-06 10:15:11	j`ey	 its calling take on an Option, not T
2019-12-06 10:16:13	jellie	j`ey: Ah!
2019-12-06 10:16:44	jellie	I saw take in the docs. Don't know why it didn't hit me that it would also set the value to none
2019-12-06 10:23:48	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-06 10:24:32	jellie	Hey, have you guys ever had to define a closure as mutable?
2019-12-06 10:25:11	jellie	Trying to call a closure and getting: cannot borrow `iterate_records` as mutable, as it is not declared as mutable
2019-12-06 10:25:12	dansho	if it mutates state outside, it has to be mutable (i think)
2019-12-06 10:25:16	capitol	no
2019-12-06 10:25:26	jellie	dansho: yes it does mutate state
2019-12-06 10:25:37	jellie	dansho: Ah then it makes sense now
2019-12-06 10:26:15	jellie	I didn't know that. Let me see if I can reproducde this with a Vec
2019-12-06 10:26:33	-->	crockwork_ (~crockwork@63.228.208.98) has joined ##rust
2019-12-06 10:27:20	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 252 seconds)
2019-12-06 10:29:25	-->	ign0tus (~mani@static.231.255.46.78.clients.your-server.de) has joined ##rust
2019-12-06 10:41:51	<--	muff (~circuser-@208-99-157-37.dyn.estpak.ee) has quit (Ping timeout: 250 seconds)
2019-12-06 10:41:58	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-12-06 10:48:55	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-12-06 10:53:38	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-12-06 11:03:58	<--	crockwork_ (~crockwork@63.228.208.98) has quit (Quit: crockwork_)
2019-12-06 11:04:49	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-06 11:13:32	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-06 11:22:32	<--	kyren (~kyren@otachi.kyju.org) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-12-06 11:23:15	-->	kyren (~kyren@otachi.kyju.org) has joined ##rust
2019-12-06 11:26:40	-->	balbirs (~balbirs@193.119.54.228) has joined ##rust
2019-12-06 11:27:36	-->	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-12-06 11:36:07	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-06 11:45:04	<--	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 268 seconds)
2019-12-06 12:00:17	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 276 seconds)
2019-12-06 12:01:18	-->	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-12-06 12:03:32	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 276 seconds)
2019-12-06 12:04:14	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-12-06 12:04:19	<--	ign0tus (~mani@static.231.255.46.78.clients.your-server.de) has quit (Ping timeout: 265 seconds)
2019-12-06 12:10:21	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 268 seconds)
2019-12-06 12:12:29	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-06 12:15:51	cart_man	Hi everyone. How do I set these permissions? The way I think  it should happen seems to mitigate the File::open function? Are they used in conjunction somehow? https://pastebin.com/nMm9LdX1
2019-12-06 12:16:18	cart_man	 Do you use ONLY the  use std::fs::OpenOptions; to handle the file?
2019-12-06 12:17:14	j`ey	if you use OpenOptions, you dont use File::open
2019-12-06 12:18:20	cart_man	j`ey: But can I still use file::open to write at all then? Cause it seems like you always need to set the permissions
2019-12-06 12:18:22	cart_man	in every case
2019-12-06 12:18:23	j`ey	(as i understand it)
2019-12-06 12:19:11	j`ey	no, File::open is read only
2019-12-06 12:19:19	j`ey	https://doc.rust-lang.org/std/fs/struct.File.html#method.open
2019-12-06 12:19:31	Lumpio-	...do you really need all this code?
2019-12-06 12:19:56	Lumpio-	And how does append(true) write(true) even make sense
2019-12-06 12:19:59	j`ey	Lumpio-: no i dont think so
2019-12-06 12:20:36	Lumpio-	Does OpenOptions::new().read(true).append(true).create(true).open(filePath) not already do all that code does
2019-12-06 12:20:46	Lumpio-	Although does it really make sense to open for both reading and appending..?
2019-12-06 12:21:46	Kinnison	presumably so you can open, append some stuff, and then rewind the file and read back?
2019-12-06 12:22:36	Kinnison	assuming .append(true) means O_APPEND in a POSIX sense, then you can rewind/read, and the next write will automatically fast-forward to the end and write
2019-12-06 12:23:07	cart_man	Lumpio-:  no ... not in this case anyway
2019-12-06 12:23:44	j`ey	Kinnison: interesting
2019-12-06 12:23:59	Kinnison	O_APPEND is *super useful* for logfiles
2019-12-06 12:24:05	Kinnison	because the seek+write is atomic
2019-12-06 12:24:21	Kinnison	so multiple threads writing to the same FD don't mess with each other providing their log lines are in single write() syscalls
2019-12-06 12:24:30	Lumpio-	cart_man: So are you trying to do something besides creating or opening a file?
2019-12-06 12:24:53	cart_man	Lumpio-: Not at this point. But also I didnt know about Options before so I just messed around with FILE etc
2019-12-06 12:24:55	cart_man	soo
2019-12-06 12:25:34	Lumpio-	But you're using OpenOptions...
2019-12-06 12:25:40	Lumpio-	in your code
2019-12-06 12:30:06	cart_man	Lumpio-: I do now though ...since I realized that just using File::open is read only
2019-12-06 12:31:23	Lumpio-	right
2019-12-06 12:31:32	Lumpio-	I'm fairly sure you don't need the whole match bit :)
2019-12-06 12:35:17	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-06 12:37:37	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-12-06 12:37:59	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-12-06 12:38:46	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-06 12:39:00	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-06 12:40:12	<--	OmniMancer (~Paul@101.100.137.239) has quit (Read error: Connection reset by peer)
2019-12-06 12:40:41	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-06 12:42:23	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-12-06 12:44:16	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-06 12:44:49	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-06 12:47:18	-->	ign0tus (~mani@2a01:4f8:c17:e6e::1) has joined ##rust
2019-12-06 12:48:44	<--	AbedB (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-06 12:49:11	-->	AbedB (~AbedBhuty@bzq-109-64-80-116.red.bezeqint.net) has joined ##rust
2019-12-06 13:06:26	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-06 13:07:26	-->	pupskucheen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-06 13:09:11	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 276 seconds)
2019-12-06 13:10:14	-->	ellcs (~mantel@ip-109-41-64-7.web.vodafone.de) has joined ##rust
2019-12-06 13:10:55	<--	yshui (~yshui@79.173.173.4) has quit (Ping timeout: 250 seconds)
2019-12-06 13:12:01	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-06 13:14:05	<--	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has quit (Remote host closed the connection)
2019-12-06 13:16:08	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-06 13:27:17	georgemp	Hi. I'm going through the Tokio.rs GetStarted material, and, am a bit confused as to whether .await calls will block. Over here, under section "Creating TCP stream", it says "The .await call does not block the current thread."
2019-12-06 13:27:58	georgemp	However, on the next page "async fn", under section "async fn", it says "The flow of execution stops until the Future completes and .await returns the result." Doesn't this imply that it blocks?
2019-12-06 13:29:45	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-06 13:31:49	sfackler	it does not block the OS thread it's running on
2019-12-06 13:32:13	sfackler	it does stop the execution of the future until the .awaited future completes
2019-12-06 13:32:25	OmniMancer	georgemp: await logically "blocks" the flow of the async function, but actually returns from the created Future's poll method
2019-12-06 13:34:51	Moongoodgirl	Kinda two different perspectives there.
2019-12-06 13:37:57	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-06 13:41:34	georgemp	with this line "let mut stream = TcpStream::connect("127.0.0.1:6142").await.unwrap();", doesn't the code block until the stream is actually created, before it executes this line "stream.write_all(b"hello world\n").await.unwrap();" Or, are these just pushed off logically to some other thread(s), and tokio interally keeps track of when to execute them and passes the created stream around as needed?
2019-12-06 13:43:59	vorner	georgemp, The `.await` says something like „I have nothing to do right now“. Tokio puts that future/task/coroutine/call-it-somehow thing aside and picks up some other one to do at that time.
2019-12-06 13:44:19	vorner	The `await` is a notation to say „This is a good time to allow other things run“.
2019-12-06 13:44:26	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-06 13:44:31	vorner	So in a sense it pauses the current function
2019-12-06 13:44:45	georgemp	vorner: but, the following line depends on this completing right?
2019-12-06 13:44:48	vorner	but it gets off the OS thread (and gets stored somewhere)
2019-12-06 13:44:51	vorner	yes
2019-12-06 13:45:14	vorner	but the blocking-not blocking thing it talks about is about it getting off the thread and letting something else run
2019-12-06 13:45:54	vorner	if you have blocking primitive or maybe `for _ in 0..1_000_000_000_000`, it sits on the thread and either does something or does nothing or such, but doesn't let anything else run.
2019-12-06 13:46:18	-->	sz0 (uid110435@gateway/web/irccloud.com/x-yybryjuvxuosilmr) has joined ##rust
2019-12-06 13:46:25	vorner	The point there is, if you have million connections all wanting to run from time to time, you don't need million threads to do that. But they have to take turns.
2019-12-06 13:47:30	georgemp	ok..so, this function is paused, but some other function/program can run on the thread, if i've got it right?
2019-12-06 13:47:53	vorner	Yes, some other function.
2019-12-06 13:47:56	gchristensen	georgemp: typically you won't do one operation async, you'd chain a whole  lot of them together and then await it. like you'd connect, do all your IO, and then close, and then this passes back an async function which you await
2019-12-06 13:50:04	georgemp	ok..i think i have the gist..will continue with my reading..thanks :)
2019-12-06 13:56:46	OmniMancer	georgemp: the async function is actually compiled to a state machine
2019-12-06 13:56:58	<--	jennings (~jennings@104.207.155.11) has quit (Ping timeout: 245 seconds)
2019-12-06 13:57:05	-->	x1ddos (~x1ddos@5.170.172.8) has joined ##rust
2019-12-06 13:59:19	georgemp	OmniMancer: i think that clears it up some more..
2019-12-06 13:59:50	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 265 seconds)
2019-12-06 14:03:25	-->	LunarJetman (LunarJetma@5ec1bc5a.skybroadband.com) has joined ##rust
2019-12-06 14:05:35	OmniMancer	georgemp: an async function creates a future that will logically execute as your code defines, but can stop at await points and let something else run until whatever it awaited signals it is ready and then it will be polled again by the executor
2019-12-06 14:06:23	<--	x1ddos (~x1ddos@5.170.172.8) has quit (Ping timeout: 250 seconds)
2019-12-06 14:07:22	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-06 14:08:00	--	pupskucheen is now known as pupskuchen
2019-12-06 14:09:10	<--	ign0tus (~mani@2a01:4f8:c17:e6e::1) has quit (Ping timeout: 252 seconds)
2019-12-06 14:29:41	-->	natechan (~natechan@108-233-125-227.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-06 14:35:17	-->	tinga (~tinga@host86-135-19-180.range86-135.btcentralplus.com) has joined ##rust
2019-12-06 14:39:19	<--	natechan (~natechan@108-233-125-227.lightspeed.sntcca.sbcglobal.net) has quit (Quit: WeeChat 2.4)
2019-12-06 14:43:42	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined ##rust
2019-12-06 14:48:23	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-06 14:50:35	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 265 seconds)
2019-12-06 14:50:35	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-06 14:50:52	johndoe	any idea how to get this one to work? (closure returning a reference & lifetimes) https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=42a91083df22df5eeee7a869f347de92
2019-12-06 14:52:45	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-06 14:56:13	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 250 seconds)
2019-12-06 14:58:20	-->	localhorse (uid18992@gateway/web/irccloud.com/x-vscoiqlxgtcmcqxk) has joined ##rust
2019-12-06 14:59:41	<--	ellcs (~mantel@ip-109-41-64-7.web.vodafone.de) has quit (Ping timeout: 276 seconds)
2019-12-06 15:01:10	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-12-06 15:03:50	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-12-06 15:03:57	-->	madmonkey (~elric@35.136.112.252) has joined ##rust
2019-12-06 15:05:28	<--	madmonkey (~elric@35.136.112.252) has quit (Remote host closed the connection)
2019-12-06 15:06:11	-->	madmonkey (~elric@35.136.112.252) has joined ##rust
2019-12-06 15:12:22	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-06 15:13:42	<--	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 252 seconds)
2019-12-06 15:15:12	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-06 15:17:18	<--	thequux (~thequux@ptr-fzs5rljnyl8he6q60yy.18120a2.ip6.access.telenet.be) has quit (Remote host closed the connection)
2019-12-06 15:23:27	OmniMancer	johndoe: I cannot figure out how to, what use do you have for such a closure, it will cause restrictions on borrowing even if this is fixed I think
2019-12-06 15:29:45	<--	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has quit (Quit: バイバイ！ (^_^)/~)
2019-12-06 15:34:29	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-12-06 15:35:03	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 265 seconds)
2019-12-06 15:40:30	tinga	With -O, rustc compiles this as always returning 123: https://godbolt.org/z/rbpJwj (sorry, couldn't figure out how to actually make it show the assembly)
2019-12-06 15:40:37	tinga	In C, that is "fine" as overflowing integers is not defined. But my understanding was that in Rust overflowing integers is defined as wrapping two's complement, thus an even number would remain even forever, thus shouldn't this give an infinite loop? 123 is never the correct answer for an even number passed to foo.
2019-12-06 15:41:01	tinga	(Is this a bug inherited from LLVM because LLVM optimizes for C?)
2019-12-06 15:41:36	-->	maelcum|konv (~horst@57-27-142-46.pool.kielnet.net) has joined ##rust
2019-12-06 15:42:48	<--	maelcum (~horst@2001:16b8:c1a2:7900:494f:3f0b:8231:3ac9) has quit (Ping timeout: 245 seconds)
2019-12-06 15:42:58	sfackler	this seems like the bug where llvm assumes all loops terminate
2019-12-06 15:43:08	sfackler	like how it removes `loop {}`
2019-12-06 15:46:18	-->	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has joined ##rust
2019-12-06 15:48:20	-->	strongsaxophone (~strongsax@31.57.71.18) has joined ##rust
2019-12-06 15:53:02	-->	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined ##rust
2019-12-06 15:55:24	<--	sz0 (uid110435@gateway/web/irccloud.com/x-yybryjuvxuosilmr) has quit (Quit: Connection closed for inactivity)
2019-12-06 16:01:14	georgemp	anybody familiar with the tokio.rs "Getting Started" docs? are they outdated wrt to the "Working with Futures/Implementing Futures section"? I've tried the examples with Futures 0.3, but, the signatures of the Future trait in the example vs docs don't seem to match..and the examples error out..
2019-12-06 16:02:06	-->	cdown (~cdown@148.252.129.238) has joined ##rust
2019-12-06 16:03:54	strongsaxophone	Hi I have the following code : https://pastebin.com/qcx00nCS
2019-12-06 16:05:15	strongsaxophone	I wanted to copy "data" to another string but I do not understand How, Help me please
2019-12-06 16:08:46	-->	smw (smw@unaffiliated/smw) has joined ##rust
2019-12-06 16:09:32	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-06 16:10:16	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-06 16:14:29	tinga	sfackler, should I make a bug report? First time I'd do that, can't even find how to report one (sigh, I just always struggle with discoverability on the Rust-lang site)
2019-12-06 16:14:59	sfackler	bugs are reported on github.com/rust-lang/rust/issues
2019-12-06 16:15:10	OmniMancer	strongsaxophone: you can probably make s a String not a reference to one and use https://doc.rust-lang.org/std/string/struct.String.html#method.push_str to append to it with the data
2019-12-06 16:15:11	sfackler	there may already be one covering that, not sure
2019-12-06 16:15:16	<--	m0rphism2 (~m0rphism@ufr-132-230-194-113.eduroam-nat.uni-freiburg.de) has quit (Ping timeout: 240 seconds)
2019-12-06 16:15:17	sfackler	but can't hurt to file a new one
2019-12-06 16:15:37	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-06 16:15:47	-->	mindv0rtex (~mindv0rte@static-72-81-250-162.bltmmd.fios.verizon.net) has joined ##rust
2019-12-06 16:16:36	ivan	strongsaxophone: the important compiler error is    | |______- argument requires that borrow lasts for `'static`
2019-12-06 16:16:45	ivan	strongsaxophone: https://github.com/alexcrichton/curl-rust/blob/65d360ff46dc2bdede7bb396b382f76a4c3fdfcd/src/easy/handle.rs#L198-L201
2019-12-06 16:17:56	<--	minsec (~shijiafen@115.171.222.95) has quit (Ping timeout: 240 seconds)
2019-12-06 16:18:15	ivan	there's a `Writing to a stack-local buffer` example that I haven't tested
2019-12-06 16:20:35	<--	Kaivo (~Kaivo@ec2-99-79-72-247.ca-central-1.compute.amazonaws.com) has quit (Read error: Connection reset by peer)
2019-12-06 16:21:57	strongsaxophone	ivan: I got it, thanks
2019-12-06 16:24:25	<--	cdown (~cdown@148.252.129.238) has quit (Ping timeout: 268 seconds)
2019-12-06 16:25:27	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has left ##rust
2019-12-06 16:34:35	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-06 16:35:03	-->	p8m (~ident1@2604:2d80:5f81:e700::80) has joined ##rust
2019-12-06 16:37:54	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-12-06 16:38:27	<--	asthasr (~asthasr@142.134.100.201) has left ##rust ("WeeChat 2.3")
2019-12-06 16:44:26	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-06 16:45:06	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-06 16:47:58	-->	o01eg (~o01eg@2a02:2698:82b:128c:ffff:c8f6:c50f:95f7) has joined ##rust
2019-12-06 16:49:31	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-12-06 16:50:19	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 268 seconds)
2019-12-06 16:51:10	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-12-06 16:55:33	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-12-06 17:00:07	<--	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has quit (Ping timeout: 265 seconds)
2019-12-06 17:02:59	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-12-06 17:03:53	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Ping timeout: 268 seconds)
2019-12-06 17:06:46	-->	ign0tus (~mani@2a01:4f8:c17:e6e::1) has joined ##rust
2019-12-06 17:07:43	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-06 17:08:00	<--	localhorse (uid18992@gateway/web/irccloud.com/x-vscoiqlxgtcmcqxk) has quit (Quit: Connection closed for inactivity)
2019-12-06 17:12:16	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-06 17:12:30	<--	kai_w (~kai@213.152.255.34) has quit (Quit: Konversation terminated!)
2019-12-06 17:22:40	-->	cdown (~cdown@38.98.37.135) has joined ##rust
2019-12-06 17:24:00	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Ping timeout: 260 seconds)
2019-12-06 17:24:25	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 250 seconds)
2019-12-06 17:25:38	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-12-06 17:32:23	-->	alex-helfet (~alex@cpc68330-cdif16-2-0-cust38.5-1.cable.virginm.net) has joined ##rust
2019-12-06 17:32:50	-->	krystcich (~krystcich@088156132216.dynamic-ww-04.vectranet.pl) has joined ##rust
2019-12-06 17:39:20	<--	cdown (~cdown@38.98.37.135) has quit (Read error: Connection reset by peer)
2019-12-06 17:41:20	-->	cdown (~cdown@38.98.37.136) has joined ##rust
2019-12-06 17:43:55	<--	endless90 (~endless90@p200300DA372BCF00D1E0BCA691DC412F.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-12-06 17:46:58	<--	ign0tus (~mani@2a01:4f8:c17:e6e::1) has quit (Ping timeout: 245 seconds)
2019-12-09 09:07:21	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-09 09:07:21	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-09 09:07:21	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-09 09:07:21	--	Channel ##rust: 628 nicks (1 op, 0 voices, 627 normals)
2019-12-09 09:07:25	<--	Creatornator (~Creatorna@142-79-197-211.starry-inc.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-09 09:07:37	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-09 09:07:56	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-12-09 09:10:06	<--	Fairy (~Fairy@unaffiliated/fairy) has quit (Ping timeout: 246 seconds)
2019-12-09 09:11:16	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-09 09:13:06	-->	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-12-09 09:14:59	-->	Fairy (~Fairy@unaffiliated/fairy) has joined ##rust
2019-12-09 09:19:32	<--	Boko_bebbcea (~smokevadi@179-194-36-78.baltnet.ru) has quit (Read error: Connection reset by peer)
2019-12-09 09:21:04	pierre365	hey, i'm new to rust. I was wondering if it's possible to test the type of some generic - e.g. I have "function<T>(a i32, b u32) -> T", is it possible to return a if T is i32, b if T is u32, have a compiler error if T is something else ? thanks
2019-12-09 09:22:39	-->	Boko_gghbhgd (~smokevadi@179-194-36-78.baltnet.ru) has joined ##rust
2019-12-09 09:25:25	-->	endless90 (~endless90@p200300DA372BCF005885A03AF44ECE96.dip0.t-ipconnect.de) has joined ##rust
2019-12-09 09:27:01	<--	Boko_gghbhgd (~smokevadi@179-194-36-78.baltnet.ru) has quit (Read error: Connection reset by peer)
2019-12-09 09:32:37	-->	teej (uid154177@gateway/web/irccloud.com/x-crkyhlvtxmvafrlh) has joined ##rust
2019-12-09 09:38:56	-->	leaves (~leaves@unaffiliated/leaves) has joined ##rust
2019-12-09 09:40:35	Moongoodgirl	pierre365: Yeah, you can use a trait to do that kind of type mapping.
2019-12-09 09:40:44	Moongoodgirl	...wait, I misread your question.
2019-12-09 09:41:04	Moongoodgirl	Uh...I think that's still possible, but it would be weird and slightly convoluted. What is this for? {~xy}
2019-12-09 09:41:04	bot-rs	The XY problem is asking about the solution you've attempted, when there may be a better approach to your problem if you explain it in full. More at https://meta.stackexchange.com/a/66378
2019-12-09 09:42:38	-->	Jibz (~Jibz@unaffiliated/jibz) has joined ##rust
2019-12-09 09:46:57	<--	pknull (~pooky@184.103.126.184) has quit (Read error: Connection reset by peer)
2019-12-09 09:47:56	-->	pknull (~pooky@184.103.126.184) has joined ##rust
2019-12-09 09:50:21	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-09 09:50:22	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-12-09 09:51:04	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-12-09 09:58:18	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-09 09:59:13	-->	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has joined ##rust
2019-12-09 09:59:56	<--	Red15 (~red15@unaffiliated/red15) has quit (Quit: WeeChat 1.9.1)
2019-12-09 10:01:01	<--	dugur (~dugur@2601:401:100:2520::9d5c) has quit (Ping timeout: 250 seconds)
2019-12-09 10:01:23	<--	tsaka__ (~torstein@94.66.73.249) has quit (Quit: Konversation terminated!)
2019-12-09 10:05:47	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 10:09:01	-->	matthias_bgg (~mbgg@95.169.229.194) has joined ##rust
2019-12-09 10:10:34	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-09 10:10:59	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2019-12-09 10:15:31	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-09 10:18:13	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-09 10:18:15	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 10:20:35	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-09 10:22:51	<--	mcr1 (~mcr@obiwan.sandelman.ca) has quit (Ping timeout: 265 seconds)
2019-12-09 10:27:41	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-09 10:30:02	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-09 10:30:49	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 10:35:50	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-09 10:41:36	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 10:42:04	-->	infinee (~infinee@061092169150.static.ctinets.com) has joined ##rust
2019-12-09 10:42:54	osa1	how does #[derive(Debug)] work on structs with variable sized array fields? e.g. `struct Foo { x: [u8] }` ?
2019-12-09 10:46:37	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-09 10:47:31	infinee	Hi, I'm using Rust-101 tutorial and have a question on generics. How would I instantiate a SomethingOrNothing for i64 in this code as line 28 only seems to support i32? https://gist.github.com/rust-play/206b8267fd4e55f29541e62e3fe494a3
2019-12-09 10:48:12	osa1	ah the slice knows its size, right? that's not how to implement the type I have in mind in Rust then
2019-12-09 10:48:15	<--	sgift (~sgift@2001:a61:35e0:ab01:b1e8:a7db:2065:60e4) has quit (Ping timeout: 250 seconds)
2019-12-09 10:48:23	j`ey	osa1: did you mean &[u8]?
2019-12-09 10:48:30	osa1	j`ey: nope
2019-12-09 10:48:56	osa1	j`ey: I'm trying to implement this C type in Rust: `struct { uint64_t foo[]; };`
2019-12-09 10:49:01	osa1	that's a variable sized struct
2019-12-09 10:49:03	j`ey	ah
2019-12-09 10:49:05	osa1	that doesn't know its size
2019-12-09 10:49:19	j`ey	infinee: SomethingOrNothing<i64>
2019-12-09 10:49:39	infinee	j`ey: u mean on line 13?
2019-12-09 10:50:15	infinee	or do you mean I need to coppy call_constructor for every supported type?
2019-12-09 10:50:35	j`ey	no, you can make call_constructor generic
2019-12-09 10:50:51	j`ey	fn call_constructor<T>(x: T) -> SomethingOrNothing<T>
2019-12-09 10:51:20	infinee	ahh thanks, that's exactly what I was looking for. Just didn't know the syntax
2019-12-09 10:52:09	infinee	I was trying fn call_constructor<T> -> ...
2019-12-09 10:59:48	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 11:00:27	<--	infinee (~infinee@061092169150.static.ctinets.com) has quit (Quit: WeeChat 2.3)
2019-12-09 11:03:28	<--	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-12-09 11:06:57	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-09 11:08:57	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 11:09:15	<--	stux|RC (stux@cosmo.lunarshells.com) has quit (Ping timeout: 265 seconds)
2019-12-09 11:09:40	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-09 11:11:27	<--	johnw (~johnw@haskell/developer/johnw) has quit (Quit: ZNC - http://znc.in)
2019-12-09 11:11:54	-->	johnw (~johnw@haskell/developer/johnw) has joined ##rust
2019-12-09 11:11:54	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Read error: Connection reset by peer)
2019-12-09 11:14:37	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-09 11:16:05	<--	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-valkrphmdjuuswqc) has quit (Quit: killed)
2019-12-09 11:16:05	<--	ilmari_ (ilmariilma@perl/developer/ilmari) has quit (Quit: killed)
2019-12-09 11:16:16	<--	gauteh (gautehmatr@gateway/shell/matrix.org/x-zbcbsfwavmkwzstu) has quit (Quit: killed)
2019-12-09 11:16:21	<--	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has quit (Quit: killed)
2019-12-09 11:16:27	<--	flacks (flacksmatr@gateway/shell/matrix.org/x-dpdiwmgfivnujmpd) has quit (Quit: killed)
2019-12-09 11:16:38	<--	Ericson2314 (ericson231@gateway/shell/matrix.org/x-mgnquknljvoipszk) has quit (Quit: killed)
2019-12-09 11:16:39	<--	alec[m] (alecowlsio@gateway/shell/matrix.org/x-uzblrnjchxdqbqrw) has quit (Quit: killed)
2019-12-09 11:16:46	<--	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-hhxiloysjovmaihe) has quit (Quit: killed)
2019-12-09 11:18:54	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2019-12-09 11:19:21	-->	leotaku (~leotaku@046075105181.atmpu0012.highway.a1.net) has joined ##rust
2019-12-09 11:19:43	-->	mcr (~mcr@obiwan.sandelman.ca) has joined ##rust
2019-12-09 11:19:53	<--	sjums (~nick@hurtig.ninja) has quit (Ping timeout: 276 seconds)
2019-12-09 11:21:03	-->	ign0tus (~mani@p200300C27F065D00CA5B76FFFE0AE72D.dip0.t-ipconnect.de) has joined ##rust
2019-12-09 11:21:32	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-09 11:21:33	-->	sjums (~nick@hurtig.ninja) has joined ##rust
2019-12-09 11:24:14	-->	sgift (~sgift@2001:a61:35e0:ab01:41b4:8c1d:7001:4965) has joined ##rust
2019-12-09 11:30:42	pierre365	Moongoodgirl: basically i have 2 functions which behaves really similarly - except for an if/else at the end of the function. see : https://pastebin.com/UiymgNzz where i would like to replace the parameter `direct` by some metaprogramming - is it possible by any chance ?
2019-12-09 11:31:57	pierre365	doing something like "if type_of(T) == usize { return usize_variable; } else if type_of(T) == i64 { return i64_variable; } else { raise_compiler_error(); }
2019-12-09 11:32:48	<--	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-09 11:33:38	<--	ign0tus (~mani@p200300C27F065D00CA5B76FFFE0AE72D.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-12-09 11:34:08	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 11:34:50	-->	ign0tus (~mani@2a01:4f8:c17:e6e::1) has joined ##rust
2019-12-09 11:39:16	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-09 11:40:36	-->	thequux (~thequux@ptr-fzs5rlfrt77gc0ldk6i.18120a2.ip6.access.telenet.be) has joined ##rust
2019-12-09 11:41:46	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-09 11:44:12	-->	stux|RC (stux@2a01:270:2050:1337::1) has joined ##rust
2019-12-09 11:46:37	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 11:49:45	<--	kilyos (~kilyos@ec2-3-120-115-128.eu-central-1.compute.amazonaws.com) has quit (Remote host closed the connection)
2019-12-09 11:51:33	-->	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has joined ##rust
2019-12-09 11:53:27	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-09 11:57:46	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-09 12:01:09	<--	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-12-09 12:06:24	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 12:07:52	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-09 12:11:33	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2019-12-09 12:17:08	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 12:22:10	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-09 12:23:45	-->	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has joined ##rust
2019-12-09 12:23:55	-->	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has joined ##rust
2019-12-09 12:25:40	-->	dugur (~dugur@2601:401:100:2520::9d5c) has joined ##rust
2019-12-09 12:26:42	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 12:28:13	<--	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has quit (Ping timeout: 245 seconds)
2019-12-09 12:30:05	<--	dugur (~dugur@2601:401:100:2520::9d5c) has quit (Ping timeout: 250 seconds)
2019-12-09 12:32:18	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-09 12:34:06	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-09 12:34:26	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-09 12:35:21	cart_man	Is there a way to give the compiler "Size" of the string im passing when I get this error? -> doesn't have a size known at compile-time
2019-12-09 12:35:28	cart_man	Becaue I know the size
2019-12-09 12:36:16	cart_man	This is where the error comes from
2019-12-09 12:36:18	cart_man	format!("{}{}", tmpStr, *elm.buildFrame(10));
2019-12-09 12:37:24	voker57	cart_man: generally, use &str or String
2019-12-09 12:37:35	voker57	might help to post a complete testcase
2019-12-09 12:39:38	cart_man	format!( "{}{}", tmpStr, &elm.buildFrame(10) );  -> ^^ `elm` is a `&` reference, so the data it refers to cannot be borrowed as mutable
2019-12-09 12:39:42	cart_man	voker57:
2019-12-09 12:39:58	cart_man	Yea but I am going to takea  while to make an entire test case
2019-12-09 12:42:25	nklap	How can I concat 3 slices `&[u8]` with Vec in 1 line of code? `vec![slice_1, slice_2, slice_3].concat()` <- Obviously the slices need to be copied.
2019-12-09 12:44:56	belst	slice_1.iter().chain(slice_2).chain(slice_3).collect::<Vec<_>>() or something like this
2019-12-09 12:45:27	-->	mjs2600 (mjs2600mat@gateway/shell/matrix.org/x-kozrmqcjdfoqwxpe) has joined ##rust
2019-12-09 12:45:28	-->	Ericson2314 (ericson231@gateway/shell/matrix.org/x-bgvujiglfqnyltvw) has joined ##rust
2019-12-09 12:45:28	-->	flacks (flacksmatr@gateway/shell/matrix.org/x-hgjkcygstdsxulbn) has joined ##rust
2019-12-09 12:45:28	-->	msrd0 (msrd0msrd0@gateway/shell/matrix.org/x-jpgxijjkrzcvjtef) has joined ##rust
2019-12-09 12:45:28	-->	alec[m] (alecowlsio@gateway/shell/matrix.org/x-kahnmcqjbkomewem) has joined ##rust
2019-12-09 12:45:28	-->	colemickens (colemicken@pdpc/supporter/professional/geomyidae) has joined ##rust
2019-12-09 12:45:29	-->	gauteh (gautehmatr@gateway/shell/matrix.org/x-bubzoqmpyczbzrxi) has joined ##rust
2019-12-09 12:45:29	-->	ilmari_ (ilmariilma@perl/developer/ilmari) has joined ##rust
2019-12-09 12:45:53	belst	nklap: ^
2019-12-09 12:46:21	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Quit: Leaving)
2019-12-09 12:51:19	nklap	belst: thank you!
2019-12-09 12:59:23	<--	leah2 (~leah@vuxu.org) has quit (Remote host closed the connection)
2019-12-09 13:01:35	-->	leah2 (~leah@vuxu.org) has joined ##rust
2019-12-09 13:02:54	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-12-09 13:03:16	voker57	cart_man: might take a while to assemble testcase but it's not possible to understand how to solve your problem without it. Also, making testcase helps you to understand issue yourself.
2019-12-09 13:03:16	hashworks	Hi! In my tests I have testdata in vectors of diverse length that I use in multiple tests. What would be the proper way to provide it to all of them besides writing them in every test function?
2019-12-09 13:03:58	-->	z_fudge (~fudge@62.217.45.26) has joined ##rust
2019-12-09 13:04:19	voker57	hashworks: if it's just tests, make it a top level Vec<Vec<...?
2019-12-09 13:04:20	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-09 13:05:26	hashworks	voker57: How? I can't create a global let var for the whole test mod
2019-12-09 13:05:42	hashworks	Only constants which deny vec!
2019-12-09 13:07:38	jellie	There's this way of binding a name while destructuing an argument in haskell using @
2019-12-09 13:07:46	jellie	I think the same exists in Rust
2019-12-09 13:08:06	jellie	I'm trying to do that here https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f22bc8fd5c8ed3e9b9756198627f899c on L14 and L15
2019-12-09 13:08:24	jellie	but I have the syntax wrong. Help
2019-12-09 13:11:57	<--	tsaka__ (~torstein@2a02:582:cf8:e000:b454:f62:19b4:b7f5) has quit (Ping timeout: 246 seconds)
2019-12-09 13:13:47	OmniMancer	jellie: what do you actually want to do?
2019-12-09 13:15:06	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 13:15:10	jellie	Something like https://doc.rust-lang.org/rust-by-example/flow_control/match/binding.html
2019-12-09 13:15:14	jellie	but in a fn
2019-12-09 13:15:22	jellie	OmniMancer: ^
2019-12-09 13:15:29	jellie	Well in a method
2019-12-09 13:15:53	OmniMancer	those don't really make sense in irrefutable patterns as far as I can tell
2019-12-09 13:16:12	OmniMancer	they are used to match on a specific pattern but name the whole thing
2019-12-09 13:16:46	OmniMancer	also I don't think the syntax even parses on self params
2019-12-09 13:18:55	voker57	hashworks: ah, right, I now remember I also hit that. In the end, I used explicitly-sized const slices. You can also consider using lazy_init
2019-12-09 13:20:57	voker57	jellie: you can't use this in fn parameters
2019-12-09 13:21:02	OmniMancer	jellie: what outcome do you want ultimately?
2019-12-09 13:22:15	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-09 13:22:45	-->	rardiol (~quassel@177.52.229.215) has joined ##rust
2019-12-09 13:23:59	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-09 13:24:21	jellie	OmniMancer: To have a more concise version of add_siblings()
2019-12-09 13:26:46	OmniMancer	I would suggest against chasing maximum conciseness
2019-12-09 13:27:04	OmniMancer	also producing the bindings you want has all sorts of borrow checker implications
2019-12-09 13:27:14	OmniMancer	so AFAIK it is not allowed
2019-12-09 13:28:50	OmniMancer	as in producing the binding you want to the name and the &mut to the whole thing at the same time would violate the borrowing rules
2019-12-09 13:29:02	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 268 seconds)
2019-12-09 13:36:11	-->	tsaka__ (~torstein@94.66.69.65) has joined ##rust
2019-12-09 13:36:46	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-09 13:40:09	-->	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has joined ##rust
2019-12-09 13:41:54	<--	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-12-09 13:43:19	cart_man	Clearly I dont understand whats going on here... How can I get this error if nothing seems to be taking the bufferEngine since I am not passing it anywhere? -> https://hastebin.com/oruwemagux.php
2019-12-09 13:46:05	-->	Althorion (~althorion@37.30.29.137.nat.umts.dynamic.t-mobile.pl) has joined ##rust
2019-12-09 13:48:22	-->	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has joined ##rust
2019-12-09 13:48:52	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 13:49:46	<--	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has quit (Remote host closed the connection)
2019-12-09 13:50:12	-->	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has joined ##rust
2019-12-09 13:51:39	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-12-09 13:53:20	-->	dugur (~dugur@2601:401:100:2520::4abf) has joined ##rust
2019-12-09 13:54:09	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2019-12-09 13:55:43	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-09 13:57:11	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-12-09 14:02:19	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Remote host closed the connection)
2019-12-09 14:04:04	OmniMancer	cart_man: I don't know why it mentions the let binding, but your Send method takes the bufferEngine by value so will move it into the method and you can't use it after that
2019-12-09 14:04:42	OmniMancer	cart_man: using something to call a method on it IS passing it somewhere
2019-12-09 14:07:36	<--	ign0tus (~mani@2a01:4f8:c17:e6e::1) has quit (Ping timeout: 246 seconds)
2019-12-09 14:09:51	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 14:09:53	-->	phanimahesh (uid7802@gateway/web/irccloud.com/x-wmbkvyaxxrqunakf) has joined ##rust
2019-12-09 14:10:19	<--	phanimahesh (uid7802@gateway/web/irccloud.com/x-wmbkvyaxxrqunakf) has left ##rust
2019-12-09 14:11:26	georgemp	Hi. Going through Tokio.rs docs, I see "Tasks must not perform computation-heavy logic or they will prevent other tasks from executing." But, naively to me it would seem that I would want async while doing something computationally heavy in the background (for example with Swift, I'd not want to run something computationally heavy on the main queue, and so, would push it to a worker queue) - are
2019-12-09 14:11:29	<--	dugur (~dugur@2601:401:100:2520::4abf) has quit (Remote host closed the connection)
2019-12-09 14:11:29	georgemp	futures not applicable/recommended for such use cases?
2019-12-09 14:11:52	dalcde	You probably want threads for that.
2019-12-09 14:11:54	-->	dugur (~dugur@2601:401:100:2520:e028:5f4e:6e52:174b) has joined ##rust
2019-12-09 14:12:38	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-09 14:14:20	<--	Althorion (~althorion@37.30.29.137.nat.umts.dynamic.t-mobile.pl) has quit (Quit: Leaving)
2019-12-09 14:16:02	georgemp	hmm...so, futures would be primarily used for networking (or other blocking) operations? but, if futures by default run on a threadpool, would i really need to go down the route of creating a separate thread?
2019-12-09 14:17:03	cart_man	OmniMancer: OK so if the function has a SELF in it is passed it to itself and therefore it can no be used aghaibn?
2019-12-09 14:17:45	Alexendoo	georgemp: You can think of the default threadpool they're run in as like the main queue, there just might be e.g. 4 of them if you have 4 cores. Tokio has a spawn_blocking function that runs it on a thread pool with a larger number of threads suitable for blocking
2019-12-09 14:17:49	cart_man	OmniMancer: How does one get around that? Like object type that coulbe called over and over again.. for instance a type that has a send function that needs to be called all the time
2019-12-09 14:17:49	OmniMancer	cart_man: if it uses self rather than &self or &ut self yes
2019-12-09 14:18:03	<--	baali (~baali@59.98.239.53) has quit (Quit: Leaving.)
2019-12-09 14:19:16	OmniMancer	cart_man: either write the send function to make do with borrowing the object, or if you can't do that have it return the object after it is done with it
2019-12-09 14:20:13	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-09 14:22:49	-->	ign0tus (~mani@p200300C27F065D00CA5B76FFFE0AE72D.dip0.t-ipconnect.de) has joined ##rust
2019-12-09 14:34:01	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 14:39:41	<--	mwa (~mwa@unaffiliated/mwa) has quit (Quit: WeeChat 2.5)
2019-12-09 14:40:05	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2019-12-09 14:41:59	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-09 14:42:48	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-09 14:45:20	<--	tsaka__ (~torstein@94.66.69.65) has quit (Quit: Konversation terminated!)
2019-12-09 14:45:37	-->	tsaka__ (~torstein@94.66.69.65) has joined ##rust
2019-12-09 14:46:35	<--	cschwan (~cschwan@cigno.mi.infn.it) has quit (Ping timeout: 250 seconds)
2019-12-09 14:52:20	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-09 14:52:48	<--	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-09 14:54:37	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 240 seconds)
2019-12-09 14:54:47	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-09 14:55:12	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-09 14:58:22	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-09 15:03:37	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 240 seconds)
2019-12-09 15:05:43	<--	ign0tus (~mani@p200300C27F065D00CA5B76FFFE0AE72D.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-12-09 15:06:10	-->	ign0tus (~mani@2a01:4f8:c17:e6e::1) has joined ##rust
2019-12-09 15:16:21	-->	con3 (~kvirc@165.255.74.108) has joined ##rust
2019-12-09 15:17:21	<--	con3 (~kvirc@165.255.74.108) has quit (Max SendQ exceeded)
2019-12-09 15:17:47	-->	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has joined ##rust
2019-12-09 15:17:53	-->	con3 (~kvirc@165.255.74.108) has joined ##rust
2019-12-09 15:19:53	-->	baali (~baali@59.98.239.53) has joined ##rust
2019-12-09 15:26:18	<--	jules000 (~jules000@wlan-145-94-215-213.wlan.tudelft.nl) has quit (Read error: Connection reset by peer)
2019-12-09 15:27:57	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-09 15:31:05	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-12-09 15:35:07	<--	con3 (~kvirc@165.255.74.108) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-12-09 15:35:20	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-09 15:40:50	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-09 15:48:24	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Ping timeout: 268 seconds)
2019-12-09 15:54:30	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-09 15:54:32	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-09 15:58:26	-->	Achylles (~Achylles@2804:431:d724:d52:91be:5444:b74b:feac) has joined ##rust
2019-12-09 16:00:14	Achylles	in rust it is said that I have to - e.g. - let mut y=12   to be able to change the y var elsewhere.
2019-12-09 16:00:29	j`ey	yes
2019-12-09 16:00:41	<--	ign0tus (~mani@2a01:4f8:c17:e6e::1) has quit (Ping timeout: 276 seconds)
2019-12-09 16:00:54	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-12-09 16:01:26	Achylles	but, I am using emacs and if I just let y=12  and then let y=15 it also works without declaring let mut before.
2019-12-09 16:01:29	Achylles	why?
2019-12-09 16:01:52	j`ey	thats creating a new variable called y
2019-12-09 16:01:56	j`ey	new variable/binding
2019-12-09 16:02:01	j`ey	try let y = 12; y = 5;
2019-12-09 16:03:38	<--	wolfshappen (~waff@irc.furworks.de) has quit (Ping timeout: 245 seconds)
2019-12-09 16:04:09	-->	ragecryx (~ragecryx@62.169.207.124) has joined ##rust
2019-12-09 16:05:43	<--	Zorroness_ (~Zorroness@ool-18ba9509.dyn.optonline.net) has quit (Remote host closed the connection)
2019-12-09 16:06:20	-->	wolfshappen (~waff@irc.furworks.de) has joined ##rust
2019-12-09 16:08:10	-->	jm_LinuxUser (~jm@212.81.223.42) has joined ##rust
2019-12-09 16:08:40	georgemp	Alexendoo: thanks..spawn_blocking() looks like what i was looking for
2019-12-09 16:08:50	-->	Zorroness (~Zorroness@ool-18ba9509.dyn.optonline.net) has joined ##rust
2019-12-09 16:09:24	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-12-09 16:09:51	Achylles	j`ey, now I need let mut y = 12; y = 5
2019-12-09 16:10:06	nklap	How to make that work:
2019-12-09 16:10:12	j`ey	Achylles: yup
2019-12-09 16:10:19	nklap	`note: expected type std::vec::Vec<&[u8]>
2019-12-09 16:10:19	nklap	         found type std::vec::Vec<&[u8; 5]>`
2019-12-09 16:10:48	<--	ragecryx (~ragecryx@62.169.207.124) has quit (Quit: Leaving)
2019-12-09 16:10:56	Achylles	j`ey, but, what if I need also to use the first value in a phrase?
2019-12-09 16:11:17	j`ey	Achylles: if you do let y = 10; let y = 5;, you cant use the first y
2019-12-09 16:11:24	jm_LinuxUser	Any idea on how rust should work with dynamic libraries? I've build an libfoo.so from a cargo project (with lib = {crate-type = ["dylib"]}) but i'm not able to build another project that uses any function of that lib.
2019-12-09 16:11:40	-->	Creatornator (~Creatorna@155.33.132.42) has joined ##rust
2019-12-09 16:11:41	j`ey	nklap: can you paste some code?
2019-12-09 16:11:48	j`ey	nklap: but &foo[..] might work
2019-12-09 16:12:31	jm_LinuxUser	I have seen many tutorials on how to make it passing through C libs, but I hope there is some native way to do this
2019-12-09 16:12:54	Achylles	j`ey, right. Then I will need to assign z = 5
2019-12-09 16:12:54	nklap	https://www.irccloud.com/pastebin/eesG7JYR/
2019-12-09 16:13:24	j`ey	nklap: try the &a[..]
2019-12-09 16:14:40	Achylles	I asked that because some YT videos says that I need to let mut just to change the, say y var again. But, it is not needed...
2019-12-09 16:14:49	j`ey	Achylles: it is needed
2019-12-09 16:14:58	nklap	j`ey: yea works, would it be nicer with const generics?
2019-12-09 16:15:01	j`ey	Achylles: if you do let y = 10; let y = 20; it's a different y
2019-12-09 16:15:07	j`ey	nklap: doubt it
2019-12-09 16:15:50	nklap	j`ey, how can I make it nicer?
2019-12-09 16:16:13	j`ey	does &a work alone?
2019-12-09 16:16:17	-->	con3 (~kvirc@165.255.74.108) has joined ##rust
2019-12-09 16:16:56	nklap	j`ey, nope, it's complaining about the fixed size byte array `&[u8; 5]`
2019-12-09 16:18:40	<--	con3 (~kvirc@165.255.74.108) has quit (Client Quit)
2019-12-09 16:24:05	-->	Tech49 (~vkr@82-197-204-252.dsl.cambrium.nl) has joined ##rust
2019-12-09 16:25:23	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-12-09 16:25:49	Tech49	Hi, I would like to get into systems programming (including making a custom kernel module for Linux and/or BSD) for a personal project of mine. I would like to learn Rust to do this, because of the benefits of the language. However, would you recommend becoming proficient in C first or would it be sufficient to be able to read C?
2019-12-09 16:26:27	Tech49	One argument that I read about is to learn Rust first to prevent learning bad habits
2019-12-09 16:29:37	voker57	if you want to write kernel module, even in Rust, you will definitely need to know C
2019-12-09 16:29:39	<--	BeerLover (~BeerLover@103.72.8.101) has quit (Remote host closed the connection)
2019-12-09 16:29:48	Achylles	j`ey, I've understood ->  let y = 15 and let y = 12 is different from let mut y = 15 and y = 12  :)
2019-12-09 16:29:57	j`ey	Achylles: yeah
2019-12-09 16:30:09	-->	r1ch (~r1ch@2604:2000:e384:6f00:684a:8a38:1b1e:86a7) has joined ##rust
2019-12-09 16:31:01	Achylles	the first creates a new y var and the second just reassign it :)
2019-12-09 16:31:03	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-12-09 16:32:17	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 240 seconds)
2019-12-09 16:33:10	Tech49	voker57, how proficient should you be in C? Would you need to be really fluent and experienced in C (being able to make kernel modules in C first)?
2019-12-09 16:35:11	j`ey	there's probably tons more material on kernel modules in C
2019-12-09 16:35:19	j`ey	so that's probably a plus for C
2019-12-09 16:36:40	vorner	You should probably start somewhere lower-bar than kernel modules. Both in Rust and C, these are beasts. In particular, it's hard to debug.
2019-12-09 16:37:44	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 252 seconds)
2019-12-09 16:39:09	Tech49	I appreciate the warning, but I have little other options for this project. Can't afford a developer, so I'll have to see if I can do it myself
2019-12-09 16:39:46	Tech49	j`ey, you're right there. Perhaps I could do it in C first
2019-12-09 16:40:20	j`ey	and depending on what it's for, you could try fork another driver maybe
2019-12-09 16:41:59	Tech49	I would like to be able to catch all TCP/IP packets on all ports and I could make an iptables rule to log everything and write a program that reads the logs, but that is fairly slow
2019-12-09 16:42:43	Tech49	I would like to build something that netfilter will communicate all connections with my program
2019-12-09 16:48:58	vorner	Tech49, Look at XDP. It's possible to inject code into the kernel without writing full kernel modules.
2019-12-09 16:52:36	vorner	Or start with NFLOG and have some iptables rules to send you only some packets. Iptables can be quite clever about this kind of „some“.
2019-12-09 16:59:16	<--	jm_LinuxUser (~jm@212.81.223.42) has quit (Quit: Konversation terminated!)
2019-12-09 17:01:12	<--	minsec (~shijiafen@115.171.222.95) has quit (Ping timeout: 252 seconds)
2019-12-09 17:01:26	Tech49	vorner, I'll look into that. Thank you
2019-12-09 17:01:35	-->	bluezone (uid104970@gateway/web/irccloud.com/x-cfizwkltvyltcjxu) has joined ##rust
2019-12-09 17:04:19	-->	mwa (~mwa@unaffiliated/mwa) has joined ##rust
2019-12-09 17:05:32	-->	chrysn (~chrysn@prometheus.amsuess.com) has joined ##rust
2019-12-09 17:05:41	<--	r1ch (~r1ch@2604:2000:e384:6f00:684a:8a38:1b1e:86a7) has quit (Ping timeout: 250 seconds)
2019-12-09 17:06:44	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-12-09 17:06:59	<--	endless90 (~endless90@p200300DA372BCF005885A03AF44ECE96.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-12-09 17:07:15	<--	Creatornator (~Creatorna@155.33.132.42) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-09 17:08:26	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-12-09 17:09:17	-->	Creatornator (~Creatorna@155.33.132.42) has joined ##rust
2019-12-09 17:09:48	chrysn	Is there any crate around for a bit more abstract handling of git repositories? I've been using git2, but as I see I'd have to dissect filemode into symlink-or-file myself, I'd wish for something that feels less like an (admittedly well-done) wrapper around a C libary.
2019-12-09 17:10:10	chrysn	(Unfortunately it's hard to search for anything git-related these days, as "git" shows up on all development pages)
2019-12-09 17:11:29	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-09 17:18:04	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-09 17:20:38	<--	Creatornator (~Creatorna@155.33.132.42) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-09 17:21:56	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 276 seconds)
2019-12-09 17:22:04	<--	josteink (~jostein@cm-84.211.32.15.getinternet.no) has quit (Read error: Connection reset by peer)
2019-12-09 17:22:26	-->	josteink (~jostein@cm-84.211.32.15.getinternet.no) has joined ##rust
2019-12-09 17:23:13	-->	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has joined ##rust
2019-12-09 17:25:12	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-12-09 17:30:06	-->	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has joined ##rust
2019-12-09 17:40:41	-->	JotaEme_Linuxuse (~JotaEme_L@204.85-87-216.dynamic.clientes.euskaltel.es) has joined ##rust
2019-12-09 17:42:30	-->	Acru (8082edf1@e237-241.eduroam.tuwien.ac.at) has joined ##rust
2019-12-09 17:43:04	Acru	Hey, is there a way to mutate an array in a function which has ownership of it?
2019-12-09 17:44:23	j`ey	yes
2019-12-09 17:44:30	j`ey	if it is marked as mut
2019-12-09 17:44:40	j`ey	you can just do foo[i] = bar;
2019-12-09 17:44:48	Acru	how do I mark it as mut?
2019-12-09 17:44:57	j`ey	fn foo(mut x: ..)
2019-12-09 17:45:13	j`ey	(if you meant it's passed in as a parameter)
2019-12-09 17:50:23	<--	Acru (8082edf1@e237-241.eduroam.tuwien.ac.at) has quit (Ping timeout: 260 seconds)
2019-12-10 09:24:20	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-10 09:24:20	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-10 09:24:20	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-10 09:24:20	--	Channel ##rust: 642 nicks (1 op, 0 voices, 641 normals)
2019-12-10 09:24:36	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-10 09:24:45	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-10 09:25:20	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (Remote host closed the connection)
2019-12-10 09:26:55	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 09:27:19	--	endless90_ is now known as endless90
2019-12-10 09:30:03	nklap	Can I do an assignment and simultaneously do a check? `while foo = ... {`?
2019-12-10 09:30:36	nklap	check whether foo meets a condition on the same line
2019-12-10 09:31:14	Mutabah	`while let`?
2019-12-10 09:31:30	Mutabah	Or maybe `while { foo = bar; foo.is_baz() }`
2019-12-10 09:31:39	Mutabah	* `while { foo = bar; foo.is_baz() } { ... }`
2019-12-10 09:31:57	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 09:33:51	est31	wow actually you can do C style for loops that way
2019-12-10 09:33:59	est31	why did it take so long for me to realize
2019-12-10 09:34:24	nklap	@Mutabah, thanks!
2019-12-10 09:34:26	Mutabah	... what have I unleashed
2019-12-10 09:34:28	Mutabah	:)
2019-12-10 09:38:35	-->	matthias_bgg (~mbgg@95.169.229.194) has joined ##rust
2019-12-10 09:38:51	est31	you can't do let that way tho
2019-12-10 09:38:55	est31	.... yet!
2019-12-10 09:38:56	-->	yazz (~Thunderbi@host-89.25.155.155.static.3s.pl) has joined ##rust
2019-12-10 09:39:02	est31	I think in old C you couldn't either
2019-12-10 09:39:16	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 252 seconds)
2019-12-10 09:39:21	est31	it was reserved for initialization only
2019-12-10 09:39:24	est31	no declaration
2019-12-10 09:39:28	est31	then later it got extended
2019-12-10 09:40:31	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Ping timeout: 260 seconds)
2019-12-10 09:43:42	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-10 09:43:42	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-10 09:43:42	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-10 09:43:42	--	Channel ##rust: 641 nicks (1 op, 0 voices, 640 normals)
2019-12-10 09:43:58	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-10 09:47:58	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Quit: Leaving)
2019-12-10 09:53:53	<--	cart_man (~rynot@196.61.22.84) has quit (Read error: Connection reset by peer)
2019-12-10 09:54:40	<--	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2019-12-10 09:59:17	<--	libertyprime (~libertypr@124.197.60.232) has quit (Quit: leaving)
2019-12-10 09:59:37	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-12-10 10:01:10	-->	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has joined ##rust
2019-12-10 10:02:17	BeerLover	maurer https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=6&cad=rja&uact=8&ved=2ahUKEwiekZuZ3KrmAhVcwTgGHWHoDmoQFjAFegQIAxAB&url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D20987431&usg=AOvVaw1os0NEi4hrjy2WLgoTb9-2
2019-12-10 10:02:22	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-10 10:02:42	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-12-10 10:02:42	BeerLover	maurer https://news.ycombinator.com/item?id=20987431
2019-12-10 10:02:53	BeerLover	maurer https://thenewstack.io/this-week-in-programming-rust-versus-go-why-not-both/
2019-12-10 10:03:19	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-10 10:04:53	<--	lauromoura_ (~lauromour@2804:7f5:f380:71ff:48be:6f8b:5d9a:c2c8) has quit (Ping timeout: 276 seconds)
2019-12-10 10:07:21	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:11:08	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 245 seconds)
2019-12-10 10:11:58	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2019-12-10 10:16:30	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:21:44	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-10 10:22:42	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 265 seconds)
2019-12-10 10:24:19	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:31:23	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-10 10:31:53	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-10 10:34:16	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-12-10 10:34:47	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-10 10:35:51	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:36:23	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-10 10:37:23	nklap	If I set Rust nightly as my default, do I also need to modify the Cargo.toml?
2019-12-10 10:38:17	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-10 10:38:38	yrp	no
2019-12-10 10:40:08	<--	ign0tus (~mani@2a01:4f8:c17:e6e::1) has quit (Ping timeout: 252 seconds)
2019-12-10 10:41:44	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2019-12-10 10:42:42	-->	grabarz (~janko@user-5-173-32-175.play-internet.pl) has joined ##rust
2019-12-10 10:42:42	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Ping timeout: 252 seconds)
2019-12-10 10:45:41	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-12-10 10:46:55	<--	emerent (~quassel@p200300CD571F4C01BA27EBFFFED28A59.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-12-10 10:47:16	-->	codepilot (~Thunderbi@b2b-5-147-248-147.unitymedia.biz) has joined ##rust
2019-12-10 10:47:44	-->	con3 (~kvirc@165.255.108.228) has joined ##rust
2019-12-10 10:51:15	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:52:47	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-10 10:55:58	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Remote host closed the connection)
2019-12-10 10:56:59	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 10:58:11	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 250 seconds)
2019-12-10 11:01:51	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-10 11:04:12	<--	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-10 11:07:31	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 11:13:57	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 11:20:57	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 11:27:33	-->	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has joined ##rust
2019-12-10 11:27:50	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-10 11:28:04	<--	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has quit (Client Quit)
2019-12-10 11:30:47	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-10 11:31:01	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-10 11:31:20	-->	jellie (~luv_panda@unaffiliated/zipper) has joined ##rust
2019-12-10 11:33:37	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 11:33:47	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2019-12-10 11:35:47	-->	cart_man (~rynot@196.61.22.84) has joined ##rust
2019-12-10 11:37:05	cart_man	How can I make a impl function return sometning from its object as if its NEW or unbnounded from the object itself? SO that I can avoid errors like -> ^^^ `elm` is a `&` reference, so the data it refers to cannot be borrowed as mutable
2019-12-10 11:38:22	j`ey	with clone maybe
2019-12-10 11:38:23	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-10 11:38:48	yrp	return a non-reference?
2019-12-10 11:38:48	yrp	and just returned an owned thing
2019-12-10 11:39:58	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 11:40:31	cart_man	yrp: is returning a non-reference possible?
2019-12-10 11:40:48	j`ey	yes
2019-12-10 11:40:50	yrp	what are you returning?
2019-12-10 11:41:03	j`ey	cart_man: some code or more context would help~
2019-12-10 11:41:03	<--	rotty (rotty@ghost.xx.vu) has quit (Quit: WeeChat 2.7-rc1)
2019-12-10 11:41:53	cart_man	I am retuning a string froma  function directly so it wil be like let x: String  = buffer.StringBuild()
2019-12-10 11:42:09	yrp	so just return a String
2019-12-10 11:42:12	j`ey	whats the actual return expression?
2019-12-10 11:43:00	cart_man	https://hastebin.com/omapesamef.js
2019-12-10 11:43:09	cart_man	thats the function being called
2019-12-10 11:43:19	cart_man	I just give it a differen name for clarity reasons above
2019-12-10 11:44:13	j`ey	and whats the error you get?
2019-12-10 11:44:49	j`ey	tghe error you pasted before doesnt seem like it matches this code
2019-12-10 11:45:21	ishw0r	BeerLover: thanks for sharing. interesting indeed.
2019-12-10 11:45:21	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-10 11:45:43	cart_man	https://hastebin.com/ipiniruret.js
2019-12-10 11:46:10	yrp	cart_man: build_frame takes &mut self
2019-12-10 11:46:10	neptunepink	evalr: let _ = |()| ();
2019-12-10 11:46:13	--	Notice(evalr): ()
2019-12-10 11:46:20	yrp	it doesnt have any thing to do with the return type from that function
2019-12-10 11:46:46	yrp	self.dataFrames.iter_mut()
2019-12-10 11:47:03	j`ey	or change buildFrame to not be mut, it doesnt look to mutate self?
2019-12-10 11:47:31	yrp	and that.
2019-12-10 11:49:10	cart_man	Ahhh yea it use to muatte itself
2019-12-10 11:49:13	cart_man	and then it had an overhaul
2019-12-10 11:49:20	cart_man	Fk missed that
2019-12-10 11:52:31	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 11:53:28	<--	baali (~baali@59.98.184.41) has quit (Ping timeout: 276 seconds)
2019-12-10 11:56:42	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 276 seconds)
2019-12-10 11:57:23	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 11:57:31	cart_man	j`ey: Ok so it says I have ti derive the Copy trait but if I try it says that I cant do it for that type cause some other types dont support it -> https://hastebin.com/uyiyakibux.rb
2019-12-10 11:58:23	cart_man	How does one implement it for those types and is it even worth it?
2019-12-10 11:58:32	j`ey	you cant impl Copy for that type
2019-12-10 11:58:35	cart_man	Should I perhaps try something else instead
2019-12-10 11:58:43	j`ey	you could Clone
2019-12-10 11:59:36	cart_man	j`ey: It insists on Copy though
2019-12-10 11:59:41	cart_man	even with cliose
2019-12-10 11:59:43	cart_man	and x.Clone() on it
2019-12-10 11:59:53	cart_man	clone`
2019-12-10 12:02:06	j`ey	cart_man: paste code etc
2019-12-10 12:04:31	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 12:10:01	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-10 12:17:23	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 12:21:24	-->	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-12-10 12:22:26	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-10 12:24:05	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 12:28:35	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-12-10 12:29:45	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Ping timeout: 260 seconds)
2019-12-10 12:30:33	BeerLover	What is meant by "provably correct" concurrency? I know about concurrency in Go (not in depth). Is concurrency in Go not correct?
2019-12-10 12:31:00	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 12:31:45	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-12-10 12:32:20	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-10 12:37:43	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 12:42:12	<--	grabarz (~janko@user-5-173-32-175.play-internet.pl) has quit (Read error: Connection reset by peer)
2019-12-10 12:43:31	<--	con3 (~kvirc@165.255.108.228) has quit (Ping timeout: 264 seconds)
2019-12-10 12:45:46	<--	cart_man (~rynot@196.61.22.84) has quit (Ping timeout: 265 seconds)
2019-12-10 12:46:25	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-10 12:46:31	voker57	in Go you must manually make sure you don't simultaneously write to the same var, unless you use special mutexed types, in Rust it is not possible because of type restrictions (see Send, Sync)
2019-12-10 12:46:40	ZirconiumX	BeerLover: It's possible to have multiple threads write to something at the same time in Go; it happens often enough that they built a race detector into the Go runtime
2019-12-10 12:47:31	ZirconiumX	Well, Send/Sync, plus the semantics of mutable versus shared references which happen to also be thread-safe
2019-12-10 12:49:16	ZirconiumX	(because you can't have multiple mutable references to something, there is no way for multiple threads to write to something at the same time, but multiple threads reading from something is fine
2019-12-10 12:50:11	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-12-10 12:52:36	<--	BeerLover (~BeerLover@103.203.254.102) has quit (Ping timeout: 268 seconds)
2019-12-10 12:53:28	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 12:58:57	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-10 12:59:07	-->	cart_man (~rynot@196.61.22.84) has joined ##rust
2019-12-10 13:05:10	-->	muhlinux (~muhlinux@45.12.220.216) has joined ##rust
2019-12-10 13:05:10	-->	BeerLover (~BeerLover@103.203.254.231) has joined ##rust
2019-12-10 13:12:59	-->	Mateon3 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-12-10 13:13:08	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 13:14:33	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 252 seconds)
2019-12-10 13:14:33	--	Mateon3 is now known as Mateon1
2019-12-10 13:17:37	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2019-12-10 13:18:50	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 13:22:24	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-10 13:23:25	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-10 13:26:52	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-10 13:28:32	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-10 13:34:15	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 13:40:26	--	kblin48 is now known as kblin
2019-12-10 13:41:07	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 250 seconds)
2019-12-10 13:41:17	<--	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has quit (Ping timeout: 240 seconds)
2019-12-10 13:43:23	-->	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has joined ##rust
2019-12-10 13:45:27	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-10 13:45:38	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 13:46:43	-->	rardiol (~quassel@177.52.229.215) has joined ##rust
2019-12-10 13:51:07	<--	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has quit (Ping timeout: 246 seconds)
2019-12-10 13:51:07	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2019-12-10 13:52:07	-->	Maxdamantus (~Maxdamant@unaffiliated/maxdamantus) has joined ##rust
2019-12-10 13:52:07	<--	guzzlefry (~guzzlefry@unaffiliated/guzzlefry) has quit (Quit: ZNC - http://znc.in)
2019-12-10 13:53:17	<--	rardiol (~quassel@177.52.229.215) has quit (Ping timeout: 240 seconds)
2019-12-10 13:53:47	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 13:55:21	-->	rardiol (~quassel@177.52.229.215) has joined ##rust
2019-12-10 13:56:06	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-10 13:56:47	<--	minsec (~shijiafen@104.192.108.9) has quit (Ping timeout: 250 seconds)
2019-12-10 14:01:04	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-10 14:02:00	-->	Deide (~Deide@90.249.106.92) has joined ##rust
2019-12-10 14:05:37	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 14:06:44	<--	efm (~efm@vpn.tummy.com) has quit (Ping timeout: 276 seconds)
2019-12-10 14:09:08	<--	BeerLover (~BeerLover@103.203.254.231) has quit (Remote host closed the connection)
2019-12-10 14:10:53	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2019-12-10 14:17:06	-->	BeerLover (~BeerBuddy@122.161.167.126) has joined ##rust
2019-12-10 14:18:21	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-12-10 14:18:50	-->	BeerLove_ (~BeerBuddy@103.203.254.231) has joined ##rust
2019-12-10 14:20:57	<--	BeerLove_ (~BeerBuddy@103.203.254.231) has quit (Client Quit)
2019-12-10 14:22:20	<--	BeerLover (~BeerBuddy@122.161.167.126) has quit (Ping timeout: 276 seconds)
2019-12-10 14:22:59	-->	BeerLover (~BeerBuddy@122.161.167.126) has joined ##rust
2019-12-10 14:24:45	--	_m0rr1gan_ is now known as m0rr1gan
2019-12-10 14:28:38	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-10 14:28:44	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-10 14:28:44	-->	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has joined ##rust
2019-12-10 14:28:58	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-10 14:31:02	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-12-10 14:31:25	<--	mixi (~mixi@exherbo/developer/mixi) has quit (Remote host closed the connection)
2019-12-10 14:31:55	-->	mixi (~mixi@exherbo/developer/mixi) has joined ##rust
2019-12-10 14:34:27	-->	termos (sid18647@gateway/web/irccloud.com/x-tpiupzbsjofqlobp) has joined ##rust
2019-12-10 14:35:27	nklap	If I have a struct `Foo` and I pass it to a function as `&'a Foo` and it returns `Vec<Bar<'a>>`. It just means that `Bar` in Vec depends on the lifetime of `Foo`, correct?
2019-12-10 14:35:27	nklap	`foo -> Bar<'a>(f: &'a Foo) -> Vec<Bar<'a>>`
2019-12-10 14:35:27	nklap	so if Foo dies, Vec<Bar> dies?
2019-12-10 14:36:47	OmniMancer	the returned Vec cannot be kept longer than the reference is valid for
2019-12-10 14:37:29	nklap	OmniMancer: Thanks, I think I understand it now
2019-12-10 14:39:58	Kiminuo	https://stackoverflow.com/questions/59259989/wasm-pack-build-report-error-could-not-compile-net2 - guys, it's very unlikely that wasm-pack can compile net2 crate, right?
2019-12-10 14:40:27	<--	BeerLover (~BeerBuddy@122.161.167.126) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-10 14:41:38	-->	BeerLover (~BeerBuddy@122.161.167.126) has joined ##rust
2019-12-10 14:44:13	-->	disconnect3d (~disconnec@unaffiliated/disconnected) has joined ##rust
2019-12-10 14:44:19	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-12-10 14:44:38	disconnect3d	hey, is there a 'print string' function in Rust? I know there is `print!` and `println!` macros but I can't use those
2019-12-10 14:45:00	disconnect3d	(as I need to use this during debugging session and apparently my IDE doesn't allow me to evaluate debugger's print command, ffs)
2019-12-10 14:45:35	Yaniel	get a better IDE :P
2019-12-10 14:46:03	Yaniel	you'll have to dive into implementation details of stdout I think
2019-12-10 14:49:40	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-10 14:52:48	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Read error: Connection reset by peer)
2019-12-10 14:53:05	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-10 14:54:21	-->	AbedB_ (~AbedBhuty@104.194.218.141) has joined ##rust
2019-12-10 14:54:40	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-10 14:54:49	-->	lauromoura (~lauromour@2804:7f5:f380:bd85:d552:a5f0:4df1:8c2a) has joined ##rust
2019-12-10 14:56:07	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-10 14:56:32	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 268 seconds)
2019-12-10 14:57:06	nklap	I'm getting `..X` range patterns are not supported when pattern matching on Vec. Shouldn't it work?
2019-12-10 14:57:29	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-10 14:57:51	<--	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2019-12-10 14:59:50	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-10 15:04:38	-->	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-10 15:09:41	<--	MrTorgo (~torgo@75-4-203-5.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2019-12-10 15:14:40	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-12-10 15:15:45	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Ping timeout: 260 seconds)
2019-12-10 15:16:26	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-12-10 15:17:01	<--	BeerLover (~BeerBuddy@122.161.167.126) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-10 15:19:37	-->	calmclam (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-12-10 15:22:15	voker57	disconnect3d: stdout is Write, you can use any of these https://doc.rust-lang.org/std/io/trait.Write.html
2019-12-10 15:22:22	<--	kyren (~kyren@otachi.kyju.org) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-12-10 15:22:28	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Read error: Connection reset by peer)
2019-12-10 15:22:50	-->	kyren (~kyren@otachi.kyju.org) has joined ##rust
2019-12-10 15:22:53	voker57	stdout is obtained like this https://doc.rust-lang.org/std/io/fn.stdout.html
2019-12-10 15:23:03	-->	la_mettrie (~rimrunner@2a01:4f9:c010:3051::1) has joined ##rust
2019-12-10 15:23:51	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-12-10 15:24:38	j`ey	nklap: re you trying to match the 'tail'?
2019-12-10 15:24:53	j`ey	nklap: slice patterns with .. are not stable
2019-12-10 15:25:13	nklap	j`ey: Yes, what else can I do?
2019-12-10 15:25:27	j`ey	nklap: are you doing a single head and tail?
2019-12-10 15:25:36	nklap	j`ey: Yes
2019-12-10 15:25:43	<--	jenny-m (~jdm-@167.100.78.229) has quit (Remote host closed the connection)
2019-12-10 15:25:50	j`ey	if so you can use split_first()
2019-12-10 15:26:11	nklap	j`ey: Thank you, I will try!
2019-12-10 15:27:10	-->	t7 (~tommo@2a00:23c5:1284:fc00:7947:ac2d:ee73:54f7) has joined ##rust
2019-12-10 15:27:32	jellie	How do I compare a value with a reference to a value? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7ff5d4e41ca352393d44e20f9570f3ed
2019-12-10 15:27:32	jellie	Do I have to implement copying?
2019-12-10 15:28:32	j`ey	in this case you cant re-use p1 because it is moved
2019-12-10 15:30:35	j`ey	have to implement clone, copy or recreate a value to use in the assert
2019-12-10 15:34:12	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-10 15:34:41	<--	Kiminuo (~mix@141.98.103.86) has quit (Ping timeout: 250 seconds)
2019-12-10 15:37:22	j`ey	nklap: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=98f565e3ac315c5d354635dabf56a75b
2019-12-10 15:39:43	-->	baali (~baali@59.98.184.149) has joined ##rust
2019-12-10 15:45:53	jellie	j`ey: What about https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a889be56e35f5b8d4d1c722a21889789 ? Is there auto deref or how are those two equal?
2019-12-10 15:46:25	-->	jenny-m (~jdm-@2605:8d80:6e0:7588:6d6d:aa56:fc8c:2fd1) has joined ##rust
2019-12-10 15:46:30	-->	MechanicalError (~Mechanica@wndson1335w-lp140-02-174-88-45-148.dsl.bell.ca) has joined ##rust
2019-12-10 15:47:59	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 265 seconds)
2019-12-10 15:49:23	<--	pknull (~pooky@184.103.126.184) has quit (Ping timeout: 276 seconds)
2019-12-10 15:50:49	-->	jenny-m_ (~jdm-@2605:8d80:6e0:7588:6d6d:aa56:fc8c:2fd1) has joined ##rust
2019-12-10 15:50:50	<--	jenny-m (~jdm-@2605:8d80:6e0:7588:6d6d:aa56:fc8c:2fd1) has quit (Remote host closed the connection)
2019-12-10 15:52:26	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-12-10 15:55:57	j`ey	jellie: pretty sure that is due to impl<'_, '_, A, B> PartialEq<&'_ B> for &'_ A
2019-12-10 15:57:37	<--	cart_man (~rynot@196.61.22.84) has quit (Ping timeout: 268 seconds)
2019-12-10 16:02:46	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-11 09:11:38	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-11 09:11:38	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 09:11:38	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 09:11:39	--	Channel ##rust: 639 nicks (1 op, 0 voices, 638 normals)
2019-12-11 09:11:54	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 09:14:55	-->	baali (~baali@59.98.184.149) has joined ##rust
2019-12-11 09:15:22	<--	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2019-12-11 09:15:50	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-11 09:17:44	-->	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has joined ##rust
2019-12-11 09:18:00	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-12-11 09:20:21	cart_man	Mutabah: Oh yea but besides the char it doesnt seem to take effect anyway
2019-12-11 09:20:26	cart_man	But let me check that
2019-12-11 09:20:48	Mutabah	If you use `{:?}` instead of `{}` (to get a debug output), you can see the characters appear
2019-12-11 09:22:49	cart_man	Mutabah: Hmm perhaps using format!() would be problematic ?
2019-12-11 09:22:59	cart_man	I think that is probably the case
2019-12-11 09:23:00	-->	doublex (~doublex@2601:542:c480:6ee0:70d3:84ff:2aaf:83f4) has joined ##rust
2019-12-11 09:23:26	<--	tsal (~tsal@i59F4AB7E.versanet.de) has quit (Ping timeout: 268 seconds)
2019-12-11 09:24:03	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-11 09:25:36	-->	tsal (~tsal@i59F5F6CA.versanet.de) has joined ##rust
2019-12-11 09:26:54	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Quit: Buh-Bye)
2019-12-11 09:29:11	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-12-11 09:29:52	<--	georgemp (~georgemp@aemon.roguemonkeys.com) has quit (Client Quit)
2019-12-11 09:30:54	-->	georgemp (~georgemp@aemon.roguemonkeys.com) has joined ##rust
2019-12-11 09:32:12	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Ping timeout: 252 seconds)
2019-12-11 09:32:12	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Ping timeout: 252 seconds)
2019-12-11 09:32:18	<--	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has quit (Ping timeout: 246 seconds)
2019-12-11 09:41:09	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-11 09:44:09	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-12-11 09:51:15	-->	andirc8089 (~andirc808@mycraft1.powered.by.lunarbnc.net) has joined ##rust
2019-12-11 09:51:54	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-12-11 09:52:07	<--	lovesegfault (~bemeurer@45-30-91-201.lightspeed.sntcca.sbcglobal.net) has quit (Quit: WeeChat 2.6)
2019-12-11 09:53:46	<--	tsaka__ (~torstein@94.66.69.65) has quit (Quit: Konversation terminated!)
2019-12-11 09:54:17	-->	lovesegfault (~bemeurer@2600:1700:5f20:83e0:9c60:1250:924:aa58) has joined ##rust
2019-12-11 09:54:41	-->	tsaka__ (~torstein@94.66.69.65) has joined ##rust
2019-12-11 10:03:27	-->	t7 (~tommo@2a00:23c5:1284:fc00:8c83:b3dc:9f3e:cac0) has joined ##rust
2019-12-11 10:03:57	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-11 10:05:28	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-11 10:06:36	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-12-11 10:08:45	<--	fxrs (~fxrs@192.227.212.130) has quit (Ping timeout: 250 seconds)
2019-12-11 10:09:10	-->	Ichorio (~Ichorio@2001:16b8:5735:6f00:387d:1641:3df1:9476) has joined ##rust
2019-12-11 10:11:20	-->	fxrs (~fxrs@192.227.212.130) has joined ##rust
2019-12-11 10:13:09	-->	calmclam_ (~calmclam@gateway/tor-sasl/calmclam) has joined ##rust
2019-12-11 10:13:50	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Quit: Leaving)
2019-12-11 10:14:28	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-11 10:17:09	voker57	the example seems to be working as needed
2019-12-11 10:21:18	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-11 10:22:38	<--	tsaka__ (~torstein@94.66.69.65) has quit (Read error: Connection reset by peer)
2019-12-11 10:46:50	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-11 10:46:50	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 10:46:50	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 10:46:50	--	Channel ##rust: 643 nicks (1 op, 0 voices, 642 normals)
2019-12-11 10:47:05	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 10:56:54	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-11 10:58:02	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-11 10:58:17	<--	BeerLover (~BeerLover@103.203.254.59) has quit (Ping timeout: 240 seconds)
2019-12-11 10:58:45	-->	BeerLover (~BeerLover@103.203.254.59) has joined ##rust
2019-12-11 11:04:01	-->	con3 (~kvirc@165.255.109.135) has joined ##rust
2019-12-11 11:07:54	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-11 11:08:37	<--	BeerLover (~BeerLover@103.203.254.59) has quit (Ping timeout: 240 seconds)
2019-12-11 11:08:59	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:9c60:1250:924:aa58) has quit (Ping timeout: 250 seconds)
2019-12-11 11:09:15	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-11 11:09:17	<--	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-11 11:09:34	-->	BeerLover (~BeerLover@103.203.254.59) has joined ##rust
2019-12-11 11:09:57	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-11 11:10:43	-->	lovesegfault (~bemeurer@45-30-91-201.lightspeed.sntcca.sbcglobal.net) has joined ##rust
2019-12-11 11:12:49	<--	m0rr1gan (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-11 11:14:04	<--	navidr (uid112413@gateway/web/irccloud.com/x-woklfszpjcrwonhe) has quit (Quit: Connection closed for inactivity)
2019-12-11 11:14:32	-->	tsaka__ (~torstein@ppp-94-65-98-84.home.otenet.gr) has joined ##rust
2019-12-11 11:16:08	-->	femi (~femi@c-24-23-163-48.hsd1.ca.comcast.net) has joined ##rust
2019-12-11 11:20:54	-->	Kirjava (~cake@183.ip-51-254-223.eu) has joined ##rust
2019-12-11 11:22:46	nklap	Are there best practices on how to structure code? For instance should I put private fn's inside the struct impl or outside? Something like that.
2019-12-11 11:23:23	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-11 11:28:21	j`ey	nklap: private methods have to be inside the impl
2019-12-11 11:29:14	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-11 11:36:49	-->	sb0 (~lekernel@42-200-147-171.static.imsbiz.com) has joined ##rust
2019-12-11 11:37:25	sb0	hi. I'm trying to make rust generators work like python generators, e.g. you can put them in a struct member and send/receive values freely with the generator
2019-12-11 11:38:00	sb0	this isn't possible with regular rust generators that are closure-like
2019-12-11 11:38:03	sb0	it seems, this is possible with async-await, so I am trying to implement my own executor that does that
2019-12-11 11:38:10	sb0	(since apparently nobody has done it before)
2019-12-11 11:38:31	sb0	and I am stuck with the fact than calling an async fn returns a future that does *not* implement Unpin for some reason
2019-12-11 11:39:01	sb0	https://hastebin.com/ewupanotih.php
2019-12-11 11:39:05	sb0	how do I make the error disappear?
2019-12-11 11:44:55	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-11 11:49:07	sb0	aah, https://hastebin.com/wixakuduru.php
2019-12-11 11:55:50	<--	baali (~baali@59.98.184.149) has quit (Ping timeout: 265 seconds)
2019-12-11 11:59:04	<--	lauromoura (~lauromour@2804:7f5:f380:bd85:d552:a5f0:4df1:8c2a) has quit (Remote host closed the connection)
2019-12-11 11:59:31	-->	lauromoura (~lauromour@2804:7f5:f380:bd85:d552:a5f0:4df1:8c2a) has joined ##rust
2019-12-11 12:10:34	-->	muhlinux (~muhlinux@45.12.220.208) has joined ##rust
2019-12-11 12:14:38	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-11 12:34:05	<--	LordAro (~LordAro@voyager.lordaro.co.uk) has left ##rust
2019-12-11 12:39:23	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-11 12:46:36	<--	sb0 (~lekernel@42-200-147-171.static.imsbiz.com) has quit (Quit: Leaving)
2019-12-11 12:52:23	<--	Ichorio (~Ichorio@2001:16b8:5735:6f00:387d:1641:3df1:9476) has quit (Ping timeout: 245 seconds)
2019-12-11 12:54:26	cart_man	How would one go about instantiating this vec -> let splitVec: Vec<Vec<u8>> = Vec::new()
2019-12-11 12:55:37	cart_man	nvm that was actually it
2019-12-11 12:57:10	j`ey	lol
2019-12-11 12:59:24	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-11 13:02:40	--	calmclam_ is now known as calmclam
2019-12-11 13:05:39	<--	lompik (~lompik@unaffiliated/lompik) has quit (Quit: WeeChat 2.6)
2019-12-11 13:06:43	<--	con3 (~kvirc@165.255.109.135) has quit (Ping timeout: 252 seconds)
2019-12-11 13:09:47	<--	muhlinux (~muhlinux@45.12.220.208) has quit (Remote host closed the connection)
2019-12-11 13:16:34	<--	abundantmussel (~quassel@server.shortland.org) has quit (Quit: abundantmussel)
2019-12-11 13:25:18	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-11 13:25:26	nklap	j`ey, yesterday I could just exec `cargo build`. Now I have to use `cargo +nightly build`. Is that because of dependencies?
2019-12-11 13:25:55	j`ey	nklap: well what error did you get?
2019-12-11 13:26:03	j`ey	and did you add some dependencies? :p
2019-12-11 13:26:18	nklap	j`ey: `#![feature]` may not be used on the stable release channel`
2019-12-11 13:26:23	nklap	j`ey: yes, I added a dep
2019-12-11 13:26:40	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Ping timeout: 260 seconds)
2019-12-11 13:27:24	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-11 13:27:36	j`ey	then yes, the dep you added needs nightly
2019-12-11 13:27:55	j`ey	it may have a feature flag to use nightly or not, what dep was it?
2019-12-11 13:28:15	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-11 13:29:23	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 276 seconds)
2019-12-11 13:29:45	nklap	j`ey: No, I am using a feature flag
2019-12-11 13:30:01	nklap	j`ey: #![feature(box_patterns)]
2019-12-11 13:30:01	nklap	#![feature(box_syntax)]
2019-12-11 13:31:57	j`ey	oh, so it wasnt about a dep
2019-12-11 13:32:38	nklap	j`ey: Yea, but I am on nightly and I could just use `cargo build` yesterday. Now I have to use `cargo +nightly build`
2019-12-11 13:32:47	j`ey	Oh
2019-12-11 13:32:50	j`ey	I see what you mean
2019-12-11 13:32:56	j`ey	did you do any rustup stuff?
2019-12-11 13:33:06	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-11 13:33:19	j`ey	what does 'rustup toolchain list' show?
2019-12-11 13:33:38	nklap	j`ey: Stable is default. hmmmmm
2019-12-11 13:34:08	nklap	Don't know how that happened
2019-12-11 13:34:14	j`ey	you can run rustup default nightly
2019-12-11 13:34:22	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Client Quit)
2019-12-11 13:34:25	j`ey	that shouldnt have been affected by a deps change
2019-12-11 13:34:41	nklap	j`ey: Thank you!
2019-12-11 13:34:52	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-12-11 13:34:54	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Quit: Leaving)
2019-12-11 13:36:07	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-11 13:37:06	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Client Quit)
2019-12-11 13:38:08	--	zipper is now known as jellie
2019-12-11 13:39:19	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-11 13:40:01	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-11 13:40:28	-->	wib_jonas (25bf3cd1@gateway/web/cgi-irc/kiwiirc.com/ip.37.191.60.209) has joined ##rust
2019-12-11 13:46:39	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-11 13:52:37	<--	vmeson (~rmacleod@24-52-239-53.cable.teksavvy.com) has quit (Ping timeout: 240 seconds)
2019-12-11 13:55:45	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-11 13:59:57	<--	tsaka__ (~torstein@ppp-94-65-98-84.home.otenet.gr) has quit (Ping timeout: 240 seconds)
2019-12-11 14:00:18	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-11 14:00:27	<--	BeerLover (~BeerLover@103.203.254.59) has quit (Remote host closed the connection)
2019-12-11 14:01:57	georgemp	hi..anybody know of an easy way to set a field on a struct, when serde deserializes a different field on the struct? For example, json has expires_in. In my struct, I would like to set expires_at (as a sideeffect of deserialzing expires_in, and, should be computed as DateTime<Utc>::now() + expires_in)?
2019-12-11 14:03:35	-->	Mateon3 (~Thunderbi@unaffiliated/mateon1) has joined ##rust
2019-12-11 14:03:55	<--	Mateon1 (~Thunderbi@unaffiliated/mateon1) has quit (Ping timeout: 265 seconds)
2019-12-11 14:03:58	--	Mateon3 is now known as Mateon1
2019-12-11 14:04:39	-->	dugur (~dugur@2601:401:100:2520::d331) has joined ##rust
2019-12-11 14:07:32	-->	muhlinux (~muhlinux@45.12.220.184) has joined ##rust
2019-12-11 14:09:03	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 245 seconds)
2019-12-11 14:09:12	mrz1	georgemp: I suggest to put #[serde(rename = "expires_in")] above your struct field and have a look at https://stackoverflow.com/questions/57614558/how-to-use-custom-serde-deserializer-for-chrono-timestamps
2019-12-11 14:10:35	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-11 14:11:26	georgemp	mrz1: wouldn't that set the value of expires_at on my struct (while leaving expires_in unset)? I figure I could try implementing a custom deserializer for my entire struct..
2019-12-11 14:18:57	<--	dugur (~dugur@2601:401:100:2520::d331) has quit (Quit: Leaving)
2019-12-11 14:19:08	mrz1	georgemp: if you combine the renaming with your custom logic like [serde(rename = "expires_in", deserialize_with = "my_custom_logic")] your goal should be achievable. with this you avoid to implement a deserializer for your whole struct
2019-12-11 14:19:33	<--	Kyros (~kyros@2001:bc8:47c0:1413::1) has left ##rust ("Leaving")
2019-12-11 14:19:55	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Quit: WeeChat 2.6)
2019-12-11 14:22:01	georgemp	mrz1: pretty new to rust, and, I might be missing something. The fn signature for deserialize_with is "fn<'de, D>(D) -> Result<T, D::Error> where D: Deserializer<'de>". I am taking that to mean this function needs to deserialize and return the field value. I don't seem to have access to the entire struct in any of the params (to set the other field)?
2019-12-11 14:26:02	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-11 14:27:24	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-11 14:32:43	-->	vmeson (~rmacleod@128.224.252.2) has joined ##rust
2019-12-11 14:35:20	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 265 seconds)
2019-12-11 14:35:27	-->	dugur (~dugur@2601:401:100:2520::d331) has joined ##rust
2019-12-11 14:37:42	--	_m0rr1gan_ is now known as m0rr1gan
2019-12-11 14:38:07	mrz1	georgemp: Ah sorry, I missed the "as a sideeffect" aspect. What about having a struct A which is just a rust representation of your json format and another struct B which can be created from an instance of A with all the sideeffects you want?
2019-12-11 14:38:17	dalcde	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d926f604a42e8ab803857630b09e6202
2019-12-11 14:38:30	dalcde	^ In this code, are there possible modifications to this to make Foo implement T?
2019-12-11 14:38:53	-->	rotty (rotty@ghost.xx.vu) has joined ##rust
2019-12-11 14:38:55	dalcde	(can a trait have an associated lifetime parameter?)
2019-12-11 14:40:23	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-11 14:41:08	georgemp	mrz1: that could work. I guess I would have a private struct which is the json representation, and a public struct (with the sideeffects). I am playing around with implementing Deserialize for the struct...if I can't get that to work, I'll give this a try..thanks
2019-12-11 14:41:10	dalcde	Oh pub tarit T<'a> works
2019-12-11 14:41:13	dalcde	s/tarit/trait/
2019-12-11 14:41:55	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-11 14:44:02	<--	swalladge (~swalladge@unaffiliated/swalladge) has quit (Ping timeout: 265 seconds)
2019-12-11 14:49:48	dalcde	TIL replacing Rc<Foo> with &'a Foo saves exactly zero characters.
2019-12-11 14:51:51	-->	swalladge (~swalladge@unaffiliated/swalladge) has joined ##rust
2019-12-11 14:53:34	<--	airstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airstorm)
2019-12-11 14:55:29	-->	tsaka__ (~torstein@2a02:582:cda:7c00:5d87:c9cc:53d8:5422) has joined ##rust
2019-12-11 14:55:33	-->	mrz1 (~localhost@wf0350.dip.tu-dresden.de) has joined ##rust
2019-12-11 14:56:12	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-11 14:57:10	-->	jenny-m (~jdm-@24.140.234.253) has joined ##rust
2019-12-11 14:57:21	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 250 seconds)
2019-12-11 14:57:33	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-11 15:02:25	-->	tsaka_ (~torstein@94.66.69.172) has joined ##rust
2019-12-11 15:02:42	<--	tsaka__ (~torstein@2a02:582:cda:7c00:5d87:c9cc:53d8:5422) has quit (Ping timeout: 246 seconds)
2019-12-11 15:06:58	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 245 seconds)
2019-12-11 15:07:05	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-11 15:07:25	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 15:07:46	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-11 15:15:37	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 240 seconds)
2019-12-11 15:17:14	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 15:18:02	<--	meandi_2 (~meandi@dyndsl-178-142-254-052.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-12-11 15:18:27	-->	con3 (~kvirc@165.255.109.63) has joined ##rust
2019-12-11 15:20:33	-->	meandi (~meandi@dyndsl-178-142-254-052.ewe-ip-backbone.de) has joined ##rust
2019-12-11 15:26:02	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 268 seconds)
2019-12-11 15:27:17	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 15:27:42	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-11 15:34:50	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 252 seconds)
2019-12-11 15:35:37	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-11 15:36:18	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 246 seconds)
2019-12-11 15:37:07	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 15:39:35	<--	drincruz (~adriancru@104.129.137.82) has quit (Read error: No route to host)
2019-12-11 15:41:55	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-11 15:41:55	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 15:41:55	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 15:41:55	--	Channel ##rust: 655 nicks (1 op, 0 voices, 654 normals)
2019-12-11 15:42:12	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 15:42:25	-->	codepilot (~Thunderbi@b2b-5-147-248-147.unitymedia.biz) has joined ##rust
2019-12-11 15:44:38	<--	cdown (~cdown@199.201.66.0) has quit (Remote host closed the connection)
2019-12-11 15:44:56	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-11 15:45:43	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 245 seconds)
2019-12-11 15:47:04	<--	epony (epony@unaffiliated/epony) has quit (Quit: upgrades)
2019-12-11 15:47:05	<--	pknull (~pooky@75-167-34-181.phnx.qwest.net) has quit (Read error: Connection reset by peer)
2019-12-11 15:47:14	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 15:47:58	-->	pknull (~pooky@75-167-34-181.phnx.qwest.net) has joined ##rust
2019-12-11 15:49:11	<--	cdown (~cdown@199.201.66.0) has quit (Remote host closed the connection)
2019-12-11 15:49:31	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-11 15:51:56	<--	Kiminuo (~mix@141.98.103.126) has quit (Ping timeout: 268 seconds)
2019-12-11 15:56:16	<--	mrz1 (~localhost@wf0350.dip.tu-dresden.de) has quit (Quit: Leaving.)
2019-12-11 15:56:17	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 276 seconds)
2019-12-11 15:57:17	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 16:01:52	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Remote host closed the connection)
2019-12-11 16:02:15	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-11 16:03:23	-->	old_relik (7c7b515d@124.123.81.93) has joined ##rust
2019-12-11 16:06:03	<--	ruid (~ruid@unaffiliated/ruid) has quit (Ping timeout: 246 seconds)
2019-12-11 16:06:49	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-11 16:07:06	-->	ruid (~ruid@unaffiliated/ruid) has joined ##rust
2019-12-11 16:09:35	<--	ruid (~ruid@unaffiliated/ruid) has quit (Client Quit)
2019-12-11 16:09:52	<--	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-xdjexgcxxttgliii) has quit
2019-12-11 16:10:08	-->	IanWizard-Cloud (sid1815@gateway/web/irccloud.com/x-ppoxxpkoaoqyakno) has joined ##rust
2019-12-11 16:10:37	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-11 16:11:01	old_relik	trying to make this function work
2019-12-11 16:11:01	old_relik	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7832d97b20f46cdbdcd04e5ae630fa24
2019-12-11 16:11:24	old_relik	should I use a loop here instead?
2019-12-11 16:12:06	old_relik	can't figure out how to solve the "as mutable more than once at a time" problem
2019-12-11 16:12:29	-->	baali (~baali@59.98.184.165) has joined ##rust
2019-12-11 16:12:31	<--	codepilot (~Thunderbi@b2b-5-147-248-147.unitymedia.biz) has quit (Quit: See you later...)
2019-12-11 16:19:21	--	irc: disconnected from server
2019-12-11 16:19:58	-->	Syrinxos (~syrinxos@93-34-1-82.ip47.fastwebnet.it) has joined ##rust
2019-12-11 16:19:58	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 16:19:58	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 16:19:58	--	Channel ##rust: 651 nicks (1 op, 0 voices, 650 normals)
2019-12-11 16:20:18	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 16:21:06	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-11 16:22:44	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 250 seconds)
2019-12-11 16:23:33	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Client Quit)
2019-12-11 16:24:58	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-11 16:25:07	-->	drincruz_ (~adriancru@104.129.137.82) has joined ##rust
2019-12-11 16:26:50	<--	drincruz (~adriancru@104.129.137.82) has quit (Ping timeout: 276 seconds)
2019-12-11 16:33:15	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:9834:407c:1516:a3b6) has joined ##rust
2019-12-11 16:33:31	<--	lopex (uid4272@gateway/web/irccloud.com/x-cwshowdmkwdoaloo) has quit
2019-12-11 16:33:47	-->	lopex (uid4272@gateway/web/irccloud.com/x-phkelsrvgrclblvi) has joined ##rust
2019-12-11 16:34:19	-->	epony (epony@unaffiliated/epony) has joined ##rust
2019-12-11 16:38:25	<--	m0rphism (~m0rphism@134.3.100.170) has quit (Quit: WeeChat 2.4)
2019-12-11 16:43:03	-->	brool (~grendel@2600:1700:7d20:ae60:2c68:fddb:7f86:c16b) has joined ##rust
2019-12-11 16:45:44	-->	multioculate2 (~groomble@c-76-118-43-53.hsd1.nh.comcast.net) has joined ##rust
2019-12-11 16:46:37	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 240 seconds)
2019-12-11 16:47:19	multioculate2	Got a (hopefully) quick question: I have a big-ish ASCII file. I want to read up to one of a couple characters, then do something with that string
2019-12-11 16:47:47	multioculate2	BufRead has read_until, but it only allows one character to stop at
2019-12-11 16:48:57	-->	Ichorio (~Ichorio@2001:16b8:5735:6f00:dd49:b6fc:33ce:78af) has joined ##rust
2019-12-11 16:48:57	multioculate2	I basically want something like the String pattern API but for a buffer
2019-12-11 16:49:07	multioculate2	Any thoughts?
2019-12-11 16:49:26	multioculate2	Is there a faster/more idiomatic way to do this than just pulling bytes off one by one?
2019-12-11 16:49:38	<--	old_relik (7c7b515d@124.123.81.93) has quit (Remote host closed the connection)
2019-12-11 16:49:46	-->	tsaka__ (~torstein@2a02:582:cf9:a300:88e9:a711:22bc:98b4) has joined ##rust
2019-12-11 16:50:09	<--	tsaka_ (~torstein@94.66.69.172) has quit (Read error: No route to host)
2019-12-11 16:50:19	-->	royal_screwup21 (89de72f9@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.249) has joined ##rust
2019-12-11 16:52:17	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-11 16:52:26	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-12-11 16:54:47	<--	Ichorio (~Ichorio@2001:16b8:5735:6f00:dd49:b6fc:33ce:78af) has quit (Ping timeout: 250 seconds)
2019-12-11 16:57:23	<--	Alchemical (~al@unaffiliated/alchemical) has quit (Ping timeout: 245 seconds)
2019-12-11 16:57:53	-->	Alchemical (~al@unaffiliated/alchemical) has joined ##rust
2019-12-11 17:05:20	--	irc: disconnected from server
2019-12-11 17:05:59	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-11 17:05:59	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 17:05:59	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 17:05:59	--	Channel ##rust: 654 nicks (1 op, 0 voices, 653 normals)
2019-12-11 17:06:19	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 17:06:48	multioculate2	Match is crazy in rust -- are these struct variables more 'flags' or 'data'?
2019-12-11 17:07:57	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-12-11 17:09:25	-->	lompik (~lompik@unaffiliated/lompik) has joined ##rust
2019-12-11 17:09:47	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Read error: Connection reset by peer)
2019-12-11 17:10:41	-->	grabarz (~janko@d16-206.static.icpnet.pl) has joined ##rust
2019-12-11 17:10:47	la_mettrie	data
2019-12-11 17:11:02	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 276 seconds)
2019-12-11 17:12:01	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-11 17:13:34	multioculate2	You might consider using match with some advanced patterns: https://doc.rust-lang.org/1.2.0/book/patterns.html
2019-12-11 17:14:52	multioculate2	Also, I'm not sure if it details this in there, but you can nest destructuring like
2019-12-11 17:14:53	-->	Ichorio (~Ichorio@2001:16b8:5735:6f00:4105:4959:e534:8e0f) has joined ##rust
2019-12-11 17:14:57	multioculate2	match x {
2019-12-11 17:15:20	multioculate2	Some(Ok(foo)) => { //....
2019-12-11 17:19:15	la_mettrie	ok, thanks. gotta go now ->
2019-12-11 17:19:28	multioculate2	Good luck!
2019-12-11 17:20:57	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 240 seconds)
2019-12-11 17:22:34	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-11 17:23:20	<--	tinga (~tinga@host86-135-19-180.range86-135.btcentralplus.com) has quit (Remote host closed the connection)
2019-12-11 17:23:30	-->	tinga (~tinga@host86-135-19-180.range86-135.btcentralplus.com) has joined ##rust
2019-12-11 17:24:34	-->	mcoffin (~mcoffin@unaffiliated/mcoffin) has joined ##rust
2019-12-11 17:25:26	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-12-11 17:25:28	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 265 seconds)
2019-12-11 17:28:27	tomboy64	how can i declare an empty Vec<Vec<i64>>?
2019-12-11 17:28:54	multioculate2	let my_vec: Vec<Vec<i64>> = vec![];
2019-12-11 17:34:47	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-11 17:34:47	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-11 17:34:47	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-11 17:34:47	--	Channel ##rust: 655 nicks (1 op, 0 voices, 654 normals)
2019-12-11 17:35:03	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-11 17:35:10	-->	chinoto (~chinoto@137.70.164.142) has joined ##rust
2019-12-11 17:36:50	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-11 17:38:20	<--	kabeero (~quassel@unaffiliated/kabeero) has quit (Ping timeout: 276 seconds)
2019-12-11 17:40:48	<--	stephe (sid14127@gateway/web/irccloud.com/x-fpxywtxrzgjisbxl) has quit
2019-12-11 17:41:01	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-12-11 17:41:03	-->	stephe (sid14127@gateway/web/irccloud.com/x-dtztcdskxpmexpll) has joined ##rust
2019-12-11 17:42:28	<--	porky11 (~porky11@p200300F843C655EFB6D5BDFFFE20A28D.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2019-12-11 17:45:16	<--	justache (justache@gateway/web/irccloud.com/x-vbaabwgizwylpklt) has quit
2019-12-11 17:46:18	-->	justache (justache@gateway/web/irccloud.com/x-yuruuxobpqiotadm) has joined ##rust
2019-12-11 17:46:33	smw	tomboy64, often you can just let Rust figure out the type and use vec![] or Vec::new() to assign it.
2019-12-11 17:48:47	<--	matthias_bgg (~mbgg@37.223.145.31) has quit (Read error: Connection reset by peer)
2019-12-11 17:49:26	-->	jack_rabbit (~jack_rabb@c-98-212-152-230.hsd1.il.comcast.net) has joined ##rust
2019-12-11 17:49:30	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-11 17:49:37	-->	neachdainn (~neachdain@unaffiliated/neachdainn) has joined ##rust
2019-12-11 17:50:07	<--	grabarz (~janko@d16-206.static.icpnet.pl) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-11 17:50:15	neachdainn	Hey all. Does rust-cpython have a good place to ask questions?
2019-12-11 17:51:27	neachdainn	If not, is there a way to get access to a `[f32]` that isn't just `Python::extract::<Vec<f32>>`? The slice is massive and I don't need to take ownership of it, so copying it all into a Vec is going to be a massive waste of time
2019-12-12 09:00:19	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-12 09:00:19	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-12 09:00:19	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-12 09:00:19	--	Channel ##rust: 639 nicks (1 op, 0 voices, 638 normals)
2019-12-12 09:00:35	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-12 09:07:48	<--	gigavinyl (~gigavinyl@2001:978:3400:d::1e) has quit (Ping timeout: 245 seconds)
2019-12-12 09:09:03	<--	bot-rs (~bot-rs@2601:600:9f80:14b6:e2c8:41d9:d004:7a2f) has quit (Ping timeout: 245 seconds)
2019-12-12 09:13:57	-->	bot-rs (~bot-rs@2601:600:9f80:14b6:e2c8:41d9:d004:7a2f) has joined ##rust
2019-12-12 09:15:20	<--	neptunepink (~neptune@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 268 seconds)
2019-12-12 09:18:22	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-12-12 09:22:59	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-12 09:27:32	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-12-12 09:31:31	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-12 09:33:06	cart_man	Is it possible to split a  data: Vec<u8> by using it like let x1 = data[0..3] ; let x2 = data[4..6]; without having the "^^^ value borrowed here after move"  Error?
2019-12-12 09:34:16	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-12 09:34:28	yrp	Vec::split_off
2019-12-12 09:35:31	j`ey	I suspct something ese is wrong, [..] shouldnt move from the vector
2019-12-12 09:35:47	<--	fandbot (~fandbot@2a02:c7f:ac65:1f00:40f0:a319:6e2f:fa3c) has quit (Ping timeout: 276 seconds)
2019-12-12 09:37:31	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 250 seconds)
2019-12-12 09:44:13	cart_man	j`ey: Sorry>
2019-12-12 09:44:15	cart_man	?
2019-12-12 09:44:21	cart_man	Ohh I see
2019-12-12 09:44:31	cart_man	Yea exactly my thoughts
2019-12-12 09:46:16	cart_man	Ok got it... wasn`t passing it right
2019-12-12 09:49:27	<--	Techman (Techman@unaffiliated/techman) has left ##rust ("Leaving")
2019-12-12 09:49:44	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-12 09:51:40	-->	designwish (~designwis@51.ip-51-68-136.eu) has joined ##rust
2019-12-12 09:54:19	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-12-12 09:54:44	-->	Kiminuo (~mix@141.98.103.126) has joined ##rust
2019-12-12 09:55:06	<--	tsundoku (~tsundoku@irc.tsundoku.ne.jp) has quit (Read error: Connection reset by peer)
2019-12-12 09:58:15	-->	tsundoku (~tsundoku@irc.tsundoku.ne.jp) has joined ##rust
2019-12-12 10:00:34	-->	m0rphism (~m0rphism@134.3.100.170) has joined ##rust
2019-12-12 10:09:09	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-12 10:15:19	<--	b_jonas (~x@catv-176-63-13-234.catv.broadband.hu) has quit (Quit: leaving)
2019-12-12 10:17:40	-->	muhlinux (~muhlinux@91.101.61.84.generic-hostname.arrownet.dk) has joined ##rust
2019-12-12 10:18:17	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-12 10:19:15	-->	jello_pudding (~jello_pud@2601:600:9f80:7780::8080) has joined ##rust
2019-12-12 10:28:11	<--	daxim (~daxim@095129203238.i3.akis.net) has quit (Ping timeout: 252 seconds)
2019-12-12 10:31:18	-->	ginkooo (~ginkooo@156.17.224.9) has joined ##rust
2019-12-12 10:33:50	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-12 10:34:15	ginkooo	Hey, vector in rust has this auto Sync and Send trait if Vec elements are sync to. Because of this it's able to modify eg. Vec<String> from many threads safely, how is that possible (is it, or I don't understand Sync and Send well?)
2019-12-12 10:34:36	Mutabah	Send is about moving across threads
2019-12-12 10:34:45	Mutabah	Sync is about multiple threads having a shared pointer to the data
2019-12-12 10:35:16	Mutabah	Neither directly say that multiple threads can mutate (the single-`&mut` rule always applies)
2019-12-12 10:35:43	Mutabah	But `Sync` usually comes into play when there's interior mutability (e.g. RefCell, Mutex, ...)
2019-12-12 10:35:48	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Quit: regakakobigman)
2019-12-12 10:36:46	<--	pro-src (uid240036@gateway/web/irccloud.com/x-yajnxveqtziwniuh) has quit
2019-12-12 10:37:05	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-12 10:37:12	-->	pro-src (uid240036@gateway/web/irccloud.com/x-jicqroldwxsjbzvl) has joined ##rust
2019-12-12 10:38:31	ginkooo	Mutabah, so when I wrap Vec in a Mutex and Arc, what traits make me able to modify single Vec accross threads? Or it is a matter of unsafe code?
2019-12-12 10:39:39	Mutabah	It's the Mutex that allows multiple threads to be able to modify the Vec (although, only one at a time)
2019-12-12 10:40:15	Mutabah	(Deep within Mutex there's a type called `UnsafeCell` that allows unsafe code to turn a `&` into `&mut`)
2019-12-12 11:23:51	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-12 11:23:51	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-12 11:23:51	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-12 11:23:51	--	Channel ##rust: 643 nicks (1 op, 0 voices, 642 normals)
2019-12-12 11:24:01	madprops	how can I do this, but directly to a binary instead of base64? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0995098d6ab1fd262ee289c5cfb6eccd
2019-12-12 11:24:07	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-12 11:24:40	-->	leotaku (~leotaku@046075015067.atmpu0009.highway.a1.net) has joined ##rust
2019-12-12 11:26:55	-->	fandbot (~fandbot@2001:420:c0c0:1002::1db) has joined ##rust
2019-12-12 11:28:11	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-12 11:28:46	madprops	just join the vecs?
2019-12-12 11:30:20	-->	t7 (~tommo@2a00:23c5:1284:fc00:b971:44b2:4c73:f869) has joined ##rust
2019-12-12 11:37:55	Moongoodgirl	Make a new Vec, and then extend() with the iter().cloned() of each other thing?
2019-12-12 11:40:26	<--	lauromoura (~lauromour@2804:7f5:f380:bd85:d552:a5f0:4df1:8c2a) has quit (Ping timeout: 252 seconds)
2019-12-12 11:42:32	<--	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has quit (Ping timeout: 276 seconds)
2019-12-12 11:43:37	<--	Kiminuo (~mix@141.98.103.126) has quit (Ping timeout: 250 seconds)
2019-12-12 11:47:31	<--	SpaceManiac (~SpaceMani@2601:200:4400:fb::101b) has quit (Ping timeout: 250 seconds)
2019-12-12 11:48:57	<--	infinee (~infinee@061092169150.static.ctinets.com) has quit (Ping timeout: 240 seconds)
2019-12-12 11:53:00	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-12-12 11:53:14	<--	AbedB_ (~AbedBhuty@104.194.218.156) has quit (Read error: Connection reset by peer)
2019-12-12 11:57:33	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-12-12 11:57:58	-->	meandi (~meandi@dyndsl-178-142-252-046.ewe-ip-backbone.de) has joined ##rust
2019-12-12 12:02:23	<--	meandi (~meandi@dyndsl-178-142-252-046.ewe-ip-backbone.de) has quit (Ping timeout: 245 seconds)
2019-12-12 12:06:48	madprops	Moongoodgirl: thanks, cleaner than what i was doing
2019-12-12 12:06:58	Moongoodgirl	:)
2019-12-12 12:07:17	<--	htd (~htd@095129203062.t4.akis.net) has quit (Ping timeout: 240 seconds)
2019-12-12 12:10:48	-->	htd (~htd@095129203062.t4.akis.net) has joined ##rust
2019-12-12 12:12:09	talin	hello. if you want to have cargo from a machine that has no internet, but that can use an internet-connected machine as a proxy, what is the best way to go about this?
2019-12-12 12:13:01	<--	tsaka__ (~torstein@2a02:582:d12:be00:4268:f394:66c5:3329) has quit (Quit: Konversation terminated!)
2019-12-12 12:13:57	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-12-12 12:14:36	j`ey	cargo vendor on the machine with internet, and copy the dependencies across?
2019-12-12 12:14:44	j`ey	assuming the internet one can use cargo
2019-12-12 12:15:37	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 240 seconds)
2019-12-12 12:15:42	-->	tsaka__ (~torstein@2a02:582:d12:be00:4268:f394:66c5:3329) has joined ##rust
2019-12-12 12:16:48	j`ey	that's good for one-off kinda usage, not sure if there is a way that you can have carrgo proxy everything
2019-12-12 12:24:05	talin	j`ey: the internet one can use cargo, yes
2019-12-12 12:27:18	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-12 12:29:36	-->	jellie (~zipper@unaffiliated/zipper) has joined ##rust
2019-12-12 12:33:51	<--	jellie (~zipper@unaffiliated/zipper) has quit (Ping timeout: 246 seconds)
2019-12-12 12:40:12	<--	tsaka__ (~torstein@2a02:582:d12:be00:4268:f394:66c5:3329) has quit (Ping timeout: 252 seconds)
2019-12-12 12:42:50	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-12 12:51:46	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-12 12:57:43	<--	minsec (~shijiafen@2405:a900:ffee:257:49f5:77a7:c18e:911c) has quit (Ping timeout: 250 seconds)
2019-12-12 13:00:00	nklap	Thought this was funny https://usercontent.irccloud-cdn.com/file/C3KO49lo/rust%20collections.png
2019-12-12 13:03:32	j`ey	hah
2019-12-12 13:03:56	<--	simlay1 (~simlay@gateway/tor-sasl/simlay) has quit (Ping timeout: 260 seconds)
2019-12-12 13:05:46	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 265 seconds)
2019-12-12 13:06:32	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-12 13:06:55	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-12 13:07:40	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-12-12 13:10:55	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-12 13:17:04	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Ping timeout: 268 seconds)
2019-12-12 13:17:41	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-12 13:26:19	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-12-12 13:27:58	madprops	what am i doing wrong here? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=58afaf63c9b7d9d36b19c0c681644fe4
2019-12-12 13:28:08	madprops	doesn't seem to fill 'bytes'
2019-12-12 13:28:12	madprops	and file doesn't seem empty
2019-12-12 13:29:12	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-12 13:32:19	jbg	so you just get an empty vec back? are you sure the Err() branch isn't matching?
2019-12-12 13:32:52	jbg	you basically swallow the error and return an empty vec (not sure what your p! macro does) so if you're getting an empty vec back, that'd be my first place to look
2019-12-12 13:33:29	-->	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has joined ##rust
2019-12-12 13:34:38	jbg	i'm not sure what exactly you're aiming to do, but if you wanted to read the whole file, you probably want read_to_end() rather than read()
2019-12-12 13:35:00	-->	lauromoura (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has joined ##rust
2019-12-12 13:35:07	jbg	read() is a classic read(), it just reads "some bytes"
2019-12-12 13:35:40	jbg	and returns how many; if you want to use read() you should loop until it returns Ok(0) or an error. but read_to_end() is much easier
2019-12-12 13:38:08	dalcde	read attempts to fill the length of the buffer
2019-12-12 13:38:11	dalcde	In this case the length is 0.
2019-12-12 13:38:31	jbg	ah yes, it will be returning Ok(0) because the buffer has a length of 0 :D
2019-12-12 13:38:35	dalcde	Note that you are passing in a &mut [u8], not a &mut Vec<u8>
2019-12-12 13:38:43	dalcde	The former doesn't let you change the length of the buffer.
2019-12-12 13:39:11	madprops	thanks
2019-12-12 13:42:07	<--	ssbr` (scorchsabe@python/site-packages/ssbr) has quit (Remote host closed the connection)
2019-12-12 13:46:15	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-12 13:49:25	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-12 13:49:43	<--	drincruz_ (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 250 seconds)
2019-12-12 13:50:35	-->	drincruz_ (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-12 13:54:16	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 252 seconds)
2019-12-12 13:58:04	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:e96f:4ae4:628d:ee0b) has joined ##rust
2019-12-12 14:00:29	-->	muhlinux (~muhlinux@45.12.220.237) has joined ##rust
2019-12-12 14:04:04	-->	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has joined ##rust
2019-12-12 14:04:16	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-12 14:05:27	-->	lauromoura_ (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has joined ##rust
2019-12-12 14:05:33	<--	lauromoura (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has quit (Read error: Connection reset by peer)
2019-12-12 14:05:47	<--	minsec (~shijiafen@115.171.222.95) has quit (Ping timeout: 268 seconds)
2019-12-12 14:08:30	<--	fandbot (~fandbot@2001:420:c0c0:1002::1db) has quit (Quit: ZZZzzz…)
2019-12-12 14:08:54	-->	fandbot (~fandbot@2001:420:c0c0:1002::1db) has joined ##rust
2019-12-12 14:12:17	<--	multiproc (~mark@unaffiliated/multiproc) has quit (Ping timeout: 240 seconds)
2019-12-12 14:13:53	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-12 14:15:12	--	m0rr1gan_ is now known as m0rr1gan
2019-12-12 14:17:03	-->	fibs (~fibs@92-111-18-11.static.v4.ziggozakelijk.nl) has joined ##rust
2019-12-12 14:17:58	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-12-12 14:19:18	-->	tsaka__ (~torstein@2a02:582:cf9:a300:88e9:a711:22bc:98b4) has joined ##rust
2019-12-12 14:19:34	<--	lauromoura_ (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has quit (Remote host closed the connection)
2019-12-12 14:19:58	-->	lauromoura_ (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has joined ##rust
2019-12-12 14:21:28	<--	fibs (~fibs@92-111-18-11.static.v4.ziggozakelijk.nl) has left ##rust
2019-12-12 14:22:13	-->	dugur (~dugur@2601:401:100:2520::852) has joined ##rust
2019-12-12 14:22:20	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-12-12 14:23:38	-->	minsec (~shijiafen@115.171.222.95) has joined ##rust
2019-12-12 14:23:59	-->	fibs (~fibs@92-111-18-11.static.v4.ziggozakelijk.nl) has joined ##rust
2019-12-12 14:24:03	<--	fibs (~fibs@92-111-18-11.static.v4.ziggozakelijk.nl) has left ##rust
2019-12-12 14:25:49	-->	AbedB_ (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has joined ##rust
2019-12-12 14:28:02	-->	pingwin (~brian@cpe-74-139-195-122.kya.res.rr.com) has joined ##rust
2019-12-12 14:29:50	<--	AbedB (~AbedBhuty@bzq-79-176-12-208.red.bezeqint.net) has quit (Ping timeout: 268 seconds)
2019-12-12 14:30:08	<--	lauromoura_ (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has quit (Remote host closed the connection)
2019-12-12 14:31:28	-->	lauromoura (~lauromour@2804:7f5:f380:4755:8dcb:35fc:cd9c:487d) has joined ##rust
2019-12-12 14:33:17	<--	drincruz_ (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2019-12-12 14:33:18	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-12 14:41:55	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-12 14:41:55	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-12 14:41:55	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-12 14:41:55	--	Channel ##rust: 650 nicks (1 op, 0 voices, 649 normals)
2019-12-12 14:42:10	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-12 14:44:15	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-12 14:44:58	-->	jenny-m (~jdm-@216.154.39.76) has joined ##rust
2019-12-12 14:55:22	<--	hairstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: hairstorm)
2019-12-12 14:55:28	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-12-12 14:56:32	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-12 14:57:06	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-12 14:58:50	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 276 seconds)
2019-12-12 14:58:50	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-12 14:59:05	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 246 seconds)
2019-12-12 14:59:30	-->	nykma (~nykma@103.140.136.22) has joined ##rust
2019-12-12 15:00:53	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-12 15:00:54	<--	nykma (~nykma@103.140.136.22) has quit (Client Quit)
2019-12-12 15:03:51	-->	port1024 (~port1024@178.79.92.85) has joined ##rust
2019-12-12 15:05:33	-->	Kiminuo (~mix@141.98.103.126) has joined ##rust
2019-12-12 15:10:19	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 250 seconds)
2019-12-12 15:23:09	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-12-12 15:23:50	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-12 15:25:57	<--	cart_man (~rynot@196.61.22.83) has quit (Ping timeout: 268 seconds)
2019-12-12 15:30:05	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-12 15:33:35	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-12-12 15:35:26	<--	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has quit (Remote host closed the connection)
2019-12-12 15:37:55	<--	mizu_no_oto (~textual@2604:6000:1012:40ee:e96f:4ae4:628d:ee0b) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-12 15:38:17	<--	Kiminuo (~mix@141.98.103.126) has quit (Ping timeout: 268 seconds)
2019-12-12 15:41:37	-->	mizu_no_oto (~textual@2604:6000:1012:40ee:e96f:4ae4:628d:ee0b) has joined ##rust
2019-12-12 15:43:28	-->	drincruz_ (~adriancru@104.129.137.82) has joined ##rust
2019-12-12 15:47:25	<--	pknull (~pooky@75-167-34-181.phnx.qwest.net) has quit (Read error: Connection reset by peer)
2019-12-12 15:48:27	-->	pknull (~pooky@75-167-34-181.phnx.qwest.net) has joined ##rust
2019-12-12 15:50:14	<--	baali (~baali@59.98.185.110) has quit (Quit: Leaving.)
2019-12-12 15:53:09	-->	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has joined ##rust
2019-12-12 15:59:20	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-12 16:02:38	<--	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has quit (Remote host closed the connection)
2019-12-12 16:16:44	<--	nemo (nemo@hedgewars/dev/nemo) has quit (Quit: leaving)
2019-12-12 16:18:41	-->	MechanicalError (~Mechanica@d72-38-18-130.commercial1.cgocable.net) has joined ##rust
2019-12-12 16:22:04	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 268 seconds)
2019-12-12 16:32:03	-->	neachdainn (~neachdain@unaffiliated/neachdainn) has joined ##rust
2019-12-12 16:37:06	<--	Frogging101 (~Frogging@kitsune.fastquake.com) has quit (Quit: Close the World, Open the nExt)
2019-12-12 16:39:00	-->	Frogging101 (~Frogging@kitsune.fastquake.com) has joined ##rust
2019-12-12 16:40:52	-->	baali (~baali@59.98.185.110) has joined ##rust
2019-12-12 16:41:19	<--	neachdainn (~neachdain@unaffiliated/neachdainn) has quit (Ping timeout: 250 seconds)
2019-12-12 16:41:20	<--	MechanicalError (~Mechanica@d72-38-18-130.commercial1.cgocable.net) has quit (Ping timeout: 265 seconds)
2019-12-12 16:46:32	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-12-12 16:47:28	-->	Shikadi (~Shikadi@135.30.27.136.in-addr.arpa) has joined ##rust
2019-12-12 16:50:25	<--	flaviodesousa (~flaviodes@213.187.85.4) has quit (Quit: KVIrc 4.9.3 Aria http://www.kvirc.net/)
2019-12-12 16:56:19	-->	Zaszi (~Zaszi@unaffiliated/zaszi) has joined ##rust
2019-12-12 17:09:40	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-12 17:09:40	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-12 17:09:40	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-12 17:09:40	--	Channel ##rust: 651 nicks (1 op, 0 voices, 650 normals)
2019-12-12 17:09:56	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-12 17:14:16	<--	jello_pudding (~jello_pud@2601:600:9f80:7780::8080) has quit (Ping timeout: 250 seconds)
2019-12-12 17:14:28	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-12-12 17:26:23	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 276 seconds)
2019-12-12 17:27:11	-->	mrz1 (~localhost@p57BBDFD4.dip0.t-ipconnect.de) has joined ##rust
2019-12-12 17:32:53	<--	endless90 (~endless90@p200300DA374D3C00B0855B00C031EE9D.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-12-12 17:35:09	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-12 17:39:12	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-12 17:40:02	<--	Iolo (~iolo@dsl-tkubng22-50de93-232.dhcp.inet.fi) has quit (Ping timeout: 276 seconds)
2019-12-12 17:44:32	<--	mrz1 (~localhost@p57BBDFD4.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2019-12-12 17:45:52	<--	jenny-m (~jdm-@216.154.39.76) has quit (Quit: Leaving...)
2019-12-12 17:47:11	<--	cdown (~cdown@199.201.66.0) has quit (Ping timeout: 250 seconds)
2019-12-12 17:47:52	<--	baali (~baali@59.98.185.110) has quit (Quit: Leaving.)
2019-12-12 17:47:55	-->	cdown (~cdown@199.201.66.0) has joined ##rust
2019-12-12 17:49:26	nklap	how can I match on enum structs to have it in one name instead of `A { foo: _, bar: _, baz: _, quux }`?
2019-12-12 17:49:53	j`ey	what do you mean have it in one name?
2019-12-12 17:50:39	nklap	j`ey Maybe something like `myStruct @ Foo::Bar => myStruct.quux`
2019-12-12 17:51:39	j`ey	Im not quite sure what yooure trying to do
2019-12-12 17:51:58	j`ey	can you write an example on play.rust?
2019-12-13 08:58:27	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-13 08:58:27	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-13 08:58:27	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-13 08:58:27	--	Channel ##rust: 639 nicks (1 op, 0 voices, 638 normals)
2019-12-13 08:58:43	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-13 08:59:51	-->	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has joined ##rust
2019-12-13 09:00:11	<--	Atosh (a5e14d2d@gateway/web/cgi-irc/kiwiirc.com/ip.165.225.77.45) has quit (Remote host closed the connection)
2019-12-13 09:02:28	--	Stanley|00 is now known as Stanley00
2019-12-13 09:06:14	-->	baali (~baali@59.98.185.131) has joined ##rust
2019-12-13 09:07:20	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-13 09:07:58	-->	fandbot (~fandbot@2a02:c7f:ac65:1f00:40f0:a319:6e2f:fa3c) has joined ##rust
2019-12-13 09:14:56	-->	muhlinux (~muhlinux@45.12.220.243) has joined ##rust
2019-12-13 09:20:33	-->	fandbot_ (~fandbot@2001:420:c0c0:1003::1d6) has joined ##rust
2019-12-13 09:21:47	<--	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-13 09:21:58	Aorimn	dfrey, I understand the error the compiler is giving you as BufReader needing a type parameter, something like BufReader<R>
2019-12-13 09:22:02	<--	nebula1000 (~quassel@c-73-252-192-75.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-12-13 09:23:10	-->	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has joined ##rust
2019-12-13 09:23:50	<--	fandbot (~fandbot@2a02:c7f:ac65:1f00:40f0:a319:6e2f:fa3c) has quit (Ping timeout: 276 seconds)
2019-12-13 09:30:57	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 240 seconds)
2019-12-13 09:35:11	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-12-13 09:36:59	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-13 09:41:10	-->	con3 (~kvirc@165.255.184.85) has joined ##rust
2019-12-13 09:42:58	<--	con3 (~kvirc@165.255.184.85) has quit (Max SendQ exceeded)
2019-12-13 09:43:36	-->	con3 (~kvirc@165.255.184.85) has joined ##rust
2019-12-13 09:45:10	-->	matthias_bgg (~mbgg@95.169.229.194) has joined ##rust
2019-12-13 09:57:27	<--	con3 (~kvirc@165.255.184.85) has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2019-12-13 10:02:48	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-13 10:02:51	jellie	Hello, can anyone help with the graph macro so that I don't run into ownership issues. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=19178b140a181403f4bc059215e931fe
2019-12-13 10:03:58	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 268 seconds)
2019-12-13 10:05:16	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-12-13 10:06:47	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 265 seconds)
2019-12-13 10:13:02	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-13 10:15:40	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-12-13 10:16:19	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-12-13 10:27:41	<--	fandbot_ (~fandbot@2001:420:c0c0:1003::1d6) has quit (Read error: Connection reset by peer)
2019-12-13 10:28:40	-->	fandbot (~fandbot@171.68.244.70) has joined ##rust
2019-12-13 10:42:37	-->	libertyprime (~libertypr@124.197.60.232) has joined ##rust
2019-12-13 10:42:58	<--	stux|RC (stux@2a01:270:2050:1337::1) has quit (Read error: Connection reset by peer)
2019-12-13 10:46:07	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 10:47:17	<--	tsaka__ (~torstein@2a02:582:cf9:a300:88e9:a711:22bc:98b4) has quit (Read error: Connection reset by peer)
2019-12-13 10:50:09	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:69e2:ea63:7d97:32d5) has quit (Ping timeout: 246 seconds)
2019-12-13 10:52:51	jellie	Is there something like assert false in Rust?
2019-12-13 10:53:40	demfloro	panic!() ?
2019-12-13 10:54:28	j`ey	assert!(false); :P
2019-12-13 10:56:21	j`ey	jellie: have you gotten the code working without the macro?
2019-12-13 10:59:31	-->	stux|RC (stux@2a01:270:2050:1337::1) has joined ##rust
2019-12-13 10:59:33	jellie	I mean assert that something will be false
2019-12-13 10:59:50	j`ey	assert!(!..);
2019-12-13 11:00:38	jellie	j`ey: Nah I can't get it working without the macro
2019-12-13 11:01:08	jellie	Well I can but using references or changing the methods of Graph
2019-12-13 11:01:42	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 246 seconds)
2019-12-13 11:04:14	jellie	Intrestingly vec![a,b,a] doesn't work either
2019-12-13 11:04:37	jellie	Which means a vector can't have "duplicate values"
2019-12-13 11:04:44	jellie	because of ownership
2019-12-13 11:05:12	jellie	j`ey: I was hoping for something like assert_ne!
2019-12-13 11:05:59	jellie	but for false
2019-12-13 11:08:37	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-13 11:11:27	-->	yshui (~yshui@79.173.173.4) has joined ##rust
2019-12-13 11:15:20	j`ey	jellie: correct, because that moves a, vec![a.clone(), b, a] works if a has Clone
2019-12-13 11:15:46	j`ey	jellie: assert_not would be easy to write if you wanted it!
2019-12-13 11:27:24	-->	taurgal (~taurgal@176-170-20-144.abo.bbox.fr) has joined ##rust
2019-12-13 11:32:37	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-12-13 11:41:38	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 276 seconds)
2019-12-13 11:43:16	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-12-13 11:46:56	<--	taurgal (~taurgal@176-170-20-144.abo.bbox.fr) has quit (Ping timeout: 252 seconds)
2019-12-13 11:50:53	-->	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has joined ##rust
2019-12-13 11:51:10	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-12-13 12:03:30	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-13 12:04:09	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-13 12:06:42	oherrala	Anyone want to code golf? I need to turn "abc.def.gh" into vec!["gh", "def", "abc"] and currently I'm doing .split('.').collect::<Vec<_>>().into_iter().rev(), but the collect() in the middle seems silly.
2019-12-13 12:07:22	j`ey	can you not rev the split?
2019-12-13 12:07:53	j`ey	split impls DoubleEndediterator
2019-12-13 12:07:59	oherrala	j`ey: Couldn't figure how because rev() needs DoubleEndedIterator
2019-12-13 12:08:12	Mutabah	`.rsplit()`
2019-12-13 12:08:50	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-13 12:10:14	oherrala	j`ey: ok, now I'm confused. split().rev() works in play.rust-lang.org. I couldn't get that to work yesterday :D
2019-12-13 12:10:14	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-12-13 12:11:08	oherrala	Mutabah: oh, there's method for this. cool!
2019-12-13 12:11:43	oherrala	Mutabah: I think you won this gold round. Thanks a lot!
2019-12-13 12:11:47	oherrala	s/gold/golf/
2019-12-13 12:13:10	j`ey	can i have silver?
2019-12-13 12:14:02	oherrala	:D
2019-12-13 12:17:17	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 240 seconds)
2019-12-13 12:31:52	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-12-13 12:41:32	<--	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-13 12:44:54	jellie	How do I destructure only part of a struct and ignore the rest e.g say I have a Point{x,y,z} struct and want to destructure to only get x
2019-12-13 12:45:07	Mutabah	jellie: `Point { x, ... }`
2019-12-13 12:45:21	Mutabah	(might be just `..`)
2019-12-13 12:50:34	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-13 12:50:34	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-13 12:50:34	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-13 12:50:34	--	Channel ##rust: 643 nicks (1 op, 0 voices, 642 normals)
2019-12-13 12:50:49	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-13 12:59:09	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 13:02:21	<--	goncalor (~goncalor@unaffiliated/goncalor) has quit (Quit: ZNC - https://znc.in)
2019-12-13 13:03:13	-->	goncalor (~goncalor@unaffiliated/goncalor) has joined ##rust
2019-12-13 13:04:55	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-13 13:14:43	-->	ziyourenxiang__ (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-12-13 13:17:33	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-13 13:18:40	<--	ziyourenxiang_ (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-12-13 13:24:53	<--	dmgk (~dg@lucille.syrec.org) has quit (Quit: ZNC - https://znc.in)
2019-12-13 13:29:30	-->	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 13:29:50	-->	dmgk (~dg@lucille.syrec.org) has joined ##rust
2019-12-13 13:37:43	-->	sunwukong (~vukung@t1.iit.bme.hu) has joined ##rust
2019-12-13 13:48:57	-->	davterra (~dulyNoded@50.3.173.187) has joined ##rust
2019-12-13 13:51:15	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-13 14:00:14	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 265 seconds)
2019-12-13 14:05:25	-->	murarth_ (~murarth@45.12.220.239) has joined ##rust
2019-12-13 14:06:02	<--	murarth (~murarth@45.12.220.239) has quit (Ping timeout: 265 seconds)
2019-12-13 14:06:02	--	murarth_ is now known as murarth
2019-12-13 14:07:10	jellie	Mutabah: Thanks
2019-12-13 14:09:39	-->	xj (~xj@pa49-182-1-169.pa.qld.optusnet.com.au) has joined ##rust
2019-12-13 14:16:10	<--	baali (~baali@59.98.185.131) has quit (Quit: Leaving.)
2019-12-13 14:16:44	-->	baali (~baali@59.98.185.131) has joined ##rust
2019-12-13 14:16:59	<--	baali (~baali@59.98.185.131) has quit (Client Quit)
2019-12-13 14:20:17	stevenroose	Is it possible work-around a colliding impl of impl<T> std::convert::From<T> for T
2019-12-13 14:21:06	stevenroose	I'm having a bunch of inter-changeable types that are all `AsRef<T>` over the same T and I want to be able to into() between them all so I have `impl<U: AsRef<T>> From<U> for X` for each of those
2019-12-13 14:21:18	stevenroose	But of course that conflicts
2019-12-13 14:23:31	<--	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has left ##rust ("-")
2019-12-13 14:23:35	<--	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has quit (Ping timeout: 268 seconds)
2019-12-13 14:26:30	<--	cschwan (~cschwan@cigno.mi.infn.it) has quit (Quit: WeeChat 2.6)
2019-12-13 14:26:30	<--	xj (~xj@pa49-182-1-169.pa.qld.optusnet.com.au) has quit (Read error: Connection reset by peer)
2019-12-13 14:28:16	-->	xj (~xj@pa49-182-1-169.pa.qld.optusnet.com.au) has joined ##rust
2019-12-13 14:28:25	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-13 14:31:51	-->	cschwan (~cschwan@cigno.mi.infn.it) has joined ##rust
2019-12-13 14:34:12	<--	libertyprime (~libertypr@124.197.60.232) has quit (Remote host closed the connection)
2019-12-13 14:36:28	-->	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has joined ##rust
2019-12-13 14:36:40	-->	minsec (~shijiafen@115.171.156.128) has joined ##rust
2019-12-13 14:37:35	-->	AbedB_ (~AbedBhuty@104.194.218.141) has joined ##rust
2019-12-13 14:37:48	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 245 seconds)
2019-12-13 14:38:04	-->	rardiol (~quassel@177.52.229.215) has joined ##rust
2019-12-13 14:41:28	<--	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has quit (Ping timeout: 252 seconds)
2019-12-13 14:42:51	hashworks	Hi! When I store a very large amount of data in a HashSet (10GB and more) the RAM usage actually drops from time to time. Say I'm at 60GB and then suddenly it's just 50GB. What is Rust doing there internally?
2019-12-13 14:44:03	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-13 14:47:42	sfackler	could be the allocator releasing freed resources back to the kernel
2019-12-13 14:48:00	sfackler	probably not rust specific
2019-12-13 14:51:27	<--	dugur (~dugur@2601:401:100:2520::852) has quit (Quit: Leaving)
2019-12-13 14:51:31	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-13 14:53:07	<--	lineus (~lineus@gateway/tor-sasl/lineus) has quit (Remote host closed the connection)
2019-12-13 14:54:47	-->	lineus (~lineus@gateway/tor-sasl/lineus) has joined ##rust
2019-12-13 14:57:42	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-13 14:58:43	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 265 seconds)
2019-12-13 14:59:03	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-13 15:01:38	<--	Kiminuo (~mix@141.98.103.126) has quit (Ping timeout: 252 seconds)
2019-12-13 15:04:43	<--	hairstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: hairstorm)
2019-12-13 15:07:37	<--	davterra (~dulyNoded@50.3.173.187) has quit (Ping timeout: 240 seconds)
2019-12-13 15:08:10	-->	horatiohb (~horatiohb@165.22.39.21) has joined ##rust
2019-12-13 15:08:40	-->	davterra (~dulyNoded@176.113.74.9) has joined ##rust
2019-12-13 15:12:59	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-12-13 15:12:59	-->	bwinton (~bwinton@CPE1c872c7063d0-CM00fc8d8fbe70.cpe.net.cable.rogers.com) has joined ##rust
2019-12-13 15:13:21	-->	djhworld (~djhworld@90.253.22.232) has joined ##rust
2019-12-13 15:15:21	-->	xj_ (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-12-13 15:15:56	<--	xj_ (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Client Quit)
2019-12-13 15:15:59	<--	xj (~xj@pa49-182-1-169.pa.qld.optusnet.com.au) has quit (Read error: Connection reset by peer)
2019-12-13 15:20:29	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-13 15:21:16	<--	AbedB_ (~AbedBhuty@104.194.218.141) has quit (Read error: Connection reset by peer)
2019-12-13 15:23:59	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-13 15:24:53	<--	tuxxy (~tuxxy@159.89.82.42) has quit (Quit: Mom, get the fuck off the phone!)
2019-12-13 15:26:30	-->	tuxxy (~tuxxy@159.89.82.42) has joined ##rust
2019-12-13 15:32:56	<--	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has quit (Remote host closed the connection)
2019-12-13 15:33:20	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-13 15:35:34	<--	fxrs (~fxrs@192.227.212.130) has quit (Read error: Connection reset by peer)
2019-12-13 15:35:45	-->	fxrs_ (~fxrs@192.227.212.130) has joined ##rust
2019-12-13 15:37:14	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Remote host closed the connection)
2019-12-13 15:37:18	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-13 15:38:48	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-13 15:39:11	-->	jenny-m (~jdm-@75.98.19.133) has joined ##rust
2019-12-13 15:40:59	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-12-13 15:41:43	<--	fandbot (~fandbot@171.68.244.70) has quit (Quit: gone)
2019-12-13 15:42:30	-->	Kiminuo (~mix@141.98.103.126) has joined ##rust
2019-12-13 15:46:39	-->	dharmateja (~ubuntu@ec2-13-235-134-128.ap-south-1.compute.amazonaws.com) has joined ##rust
2019-12-13 15:47:39	<--	dharmateja (~ubuntu@ec2-13-235-134-128.ap-south-1.compute.amazonaws.com) has left ##rust ("WeeChat 1.9.1")
2019-12-13 15:50:53	-->	dharmateja (~ubuntu@ec2-13-235-134-128.ap-south-1.compute.amazonaws.com) has joined ##rust
2019-12-13 15:51:30	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 252 seconds)
2019-12-13 15:53:40	<--	meandi3 (~meandi@dyndsl-178-142-250-043.ewe-ip-backbone.de) has quit (Read error: Connection reset by peer)
2019-12-13 15:53:55	-->	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has joined ##rust
2019-12-13 16:08:37	-->	aoei (~jo@cpc91216-cmbg18-2-0-cust230.5-4.cable.virginm.net) has joined ##rust
2019-12-13 16:10:16	<--	jellie (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 268 seconds)
2019-12-13 16:12:58	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-13 16:13:37	<--	upb (~cmpxchg@unaffiliated/upb) has quit (Quit: Lost terminal)
2019-12-13 16:17:22	-->	porky11 (~porky11@p200300F843C655EFB6D5BDFFFE20A28D.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 16:31:16	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Quit: r4pr0n)
2019-12-13 16:32:23	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-13 16:34:01	<--	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has quit (Quit: ZZZzzz…)
2019-12-13 16:41:43	<--	mrz1 (~localhost@pD95D34CC.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-12-13 16:43:53	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Ping timeout: 250 seconds)
2019-12-13 16:44:28	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 245 seconds)
2019-12-13 16:52:25	-->	taurgal (~taurgal@176-170-20-144.abo.bbox.fr) has joined ##rust
2019-12-13 16:53:06	<--	_xor (~xor@74.215.46.133) has quit (Quit: Leaving)
2019-12-13 16:53:08	-->	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has joined ##rust
2019-12-13 16:54:35	-->	fandbot_ (~fandbot@171.68.244.69) has joined ##rust
2019-12-13 16:56:24	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-12-13 16:58:11	<--	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has quit (Ping timeout: 276 seconds)
2019-12-13 17:00:12	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has quit (Ping timeout: 260 seconds)
2019-12-13 17:02:14	<--	drincruz (~adriancru@104.129.137.82) has quit (Read error: No route to host)
2019-12-13 17:02:54	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-13 17:06:30	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-12-13 17:06:38	<--	ClaymorePT (~Claymore@188.251.245.88) has quit (Ping timeout: 276 seconds)
2019-12-13 17:14:05	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-12-13 17:14:17	<--	jenny-m (~jdm-@75.98.19.133) has quit (Quit: Leaving...)
2019-12-13 17:16:24	<--	fandbot_ (~fandbot@171.68.244.69) has quit (Read error: Connection reset by peer)
2019-12-13 17:17:33	-->	fanta1 (~fanta1@p200300F76BC5DE00B44C3F8BA1912925.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 17:17:55	-->	wareya (~wareya@104.207.141.41) has joined ##rust
2019-12-13 17:20:26	<--	sunwukong (~vukung@t1.iit.bme.hu) has quit (Remote host closed the connection)
2019-12-13 17:22:24	-->	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has joined ##rust
2019-12-13 17:24:44	<--	fandbot (~fandbot@2a02:c7f:ac65:1f00:5095:8571:667a:b9e9) has quit (Client Quit)
2019-12-13 17:26:07	<--	ziyourenxiang__ (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 268 seconds)
2019-12-13 17:26:46	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-12-13 17:32:17	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-13 17:41:05	-->	mcoffin (~mcoffin@unaffiliated/mcoffin) has joined ##rust
2019-12-13 17:45:14	<--	Arnavion (arnavion@unaffiliated/arnavion) has quit (Ping timeout: 268 seconds)
2019-12-13 17:45:26	-->	Arnavion (arnavion@unaffiliated/arnavion) has joined ##rust
2019-12-13 17:46:40	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-12-13 17:46:57	-->	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has joined ##rust
2019-12-13 17:47:28	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-13 17:47:35	-->	jenny-m (~jdm-@2620:101:80f2:224:709b:b497:1ed2:2980) has joined ##rust
2019-12-13 17:47:54	-->	Piraty (~irc@unaffiliated/piraty) has joined ##rust
2019-12-13 17:49:24	-->	Narrat (~Narrat@p200300DF5F059CEA06EA56FFFE2E7CDC.dip0.t-ipconnect.de) has joined ##rust
2019-12-13 17:50:32	<--	aLeSD (~aLeSD@91.126.37.106) has quit (Remote host closed the connection)
2019-12-13 17:50:40	Piraty	https://doc.rust-lang.org/book/ch01-02-hello-world.html the very first code snippet results in "error: expected one of `!` or `::`, found `main`"
2019-12-13 17:51:29	<--	minsec (~shijiafen@115.171.156.128) has quit (Ping timeout: 250 seconds)
2019-12-13 17:51:44	Piraty	(main.rs that is)
2019-12-13 17:51:48	demfloro	works for me
2019-12-13 17:52:08	sfackler	that snippet definitely compiles
2019-12-13 17:52:19	Piraty	rustc 1.39.0
2019-12-13 17:52:43	demfloro	yep, same version
2019-12-13 17:52:50	demfloro	what do you do to make it fail?
2019-12-13 17:52:57	<--	matthias_bgg (~mbgg@95.169.229.194) has quit (Ping timeout: 240 seconds)
2019-12-13 17:53:14	Piraty	is rustup (as described in the previous chapter) really required? i assume it piles rust compilers in $HOME, i'd prefer to use my distro's at first
2019-12-13 17:53:25	sfackler	what is the exact content of your main.rs file
2019-12-13 17:53:34	sfackler	it is not required
2019-12-13 17:53:49	Piraty	typo
2019-12-13 17:53:59	Piraty	nevermind me asking noob questions :D
2019-12-13 17:54:16	Piraty	i failed typing "fn"
2019-12-16 09:11:55	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-16 09:11:55	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 09:11:55	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 09:11:55	--	Channel ##rust: 559 nicks (1 op, 0 voices, 558 normals)
2019-12-16 09:12:11	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 09:13:46	-->	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-16 09:15:45	<--	smw (smw@unaffiliated/smw) has quit (Remote host closed the connection)
2019-12-16 09:23:33	<--	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has quit (Quit: ZNC - https://znc.in)
2019-12-16 09:26:49	-->	darnir (~darnir@static.246.192.201.138.clients.your-server.de) has joined ##rust
2019-12-16 09:29:14	<--	lopsided98 (~quassel@2601:18a:0:ff60::9643) has quit (Quit: No Ping reply in 180 seconds.)
2019-12-16 09:29:50	-->	keep_learning (96cbd2d5@gateway/web/cgi-irc/kiwiirc.com/ip.150.203.210.213) has joined ##rust
2019-12-16 09:30:41	-->	lopsided98 (~quassel@2601:18a:0:ff60::9643) has joined ##rust
2019-12-16 09:30:53	-->	baali (~baali@59.98.238.221) has joined ##rust
2019-12-16 09:34:06	-->	pinkieval (~progval@pdpc/supporter/student/progval) has joined ##rust
2019-12-16 09:34:24	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-16 09:40:00	-->	matthias_bgg (~mbgg@37.223.145.31) has joined ##rust
2019-12-16 09:45:35	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-12-16 09:50:45	jbg	davr0s_: i hardly ever use autocomplete but i just turned it back on in vscode+rls and it seems to work really well
2019-12-16 09:50:51	jbg	might be worth trying out
2019-12-16 09:58:16	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
2019-12-16 10:01:15	<--	tsaka__ (~torstein@94.66.69.172) has quit (Ping timeout: 268 seconds)
2019-12-16 10:08:42	-->	hussam (uid193284@gateway/web/irccloud.com/x-urjbuhubpolpymhj) has joined ##rust
2019-12-16 10:15:50	--	irc: disconnected from server
2019-12-16 10:16:28	-->	Syrinxos (~syrinxos@93-34-1-82.ip47.fastwebnet.it) has joined ##rust
2019-12-16 10:16:28	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 10:16:28	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 10:16:28	--	Channel ##rust: 566 nicks (1 op, 0 voices, 565 normals)
2019-12-16 10:16:48	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 10:26:00	-->	Syrinxos (~syrinxos@93-34-1-82.ip47.fastwebnet.it) has joined ##rust
2019-12-16 10:26:00	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 10:26:00	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 10:26:00	--	Channel ##rust: 566 nicks (1 op, 0 voices, 565 normals)
2019-12-16 10:26:16	<--	calmclam (~calmclam@gateway/tor-sasl/calmclam) has quit (Ping timeout: 260 seconds)
2019-12-16 10:26:17	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 10:35:48	-->	tsaka__ (~torstein@static091138194040.access.hol.gr) has joined ##rust
2019-12-16 10:38:33	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-16 10:46:49	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-12-16 10:51:50	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-16 10:52:08	<--	gnu3ra (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 276 seconds)
2019-12-16 10:54:21	<--	Nascher (~quassel@holarse/core/nascher) has quit (Quit: Too late, buddy!)
2019-12-16 10:57:11	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-16 10:57:21	-->	Nascher (~quassel@holarse/core/nascher) has joined ##rust
2019-12-16 11:05:21	-->	Mutabah (~tpg@pdpc/supporter/student/thepowersgang) has joined ##rust
2019-12-16 11:05:21	-->	gwillen (~gwillen@unaffiliated/gwillen) has joined ##rust
2019-12-16 11:05:24	-->	phill (phill@openlp.io) has joined ##rust
2019-12-16 11:05:25	-->	Frando (~bouncer@46.23.72.43) has joined ##rust
2019-12-16 11:05:26	-->	sammich (~quassel@unaffiliated/mouldysammich) has joined ##rust
2019-12-16 11:05:26	-->	danderson (~danderson@104.236.149.22) has joined ##rust
2019-12-16 11:05:30	-->	rickymiller (~rickymill@unaffiliated/rmill) has joined ##rust
2019-12-16 11:05:32	-->	Piraty (~irc@unaffiliated/piraty) has joined ##rust
2019-12-16 11:05:33	-->	HedgeMage (HedgeMage@unaffiliated/hedgemage) has joined ##rust
2019-12-16 11:05:37	-->	Almindor (~irc@d104-205-230-103.abhsia.telus.net) has joined ##rust
2019-12-16 11:06:00	-->	GreenJello (~GreenJell@unaffiliated/greenjello) has joined ##rust
2019-12-16 11:06:02	-->	ollien (~ollien@ollien.com) has joined ##rust
2019-12-16 11:06:04	-->	tuxxy (~tuxxy@159.89.82.42) has joined ##rust
2019-12-16 11:06:08	-->	Guest25021 (~bahamat@72.2.113.233) has joined ##rust
2019-12-16 11:06:09	-->	vertrex (~vertrex@unaffiliated/vertrex) has joined ##rust
2019-12-16 11:06:16	-->	betawaffle (~betawaffl@h2.kdf.io) has joined ##rust
2019-12-16 11:06:17	-->	Amaan (~Amaan@45.55.224.115) has joined ##rust
2019-12-16 11:06:39	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-12-16 11:06:40	-->	jinie (~jimmy@188.114.159.27) has joined ##rust
2019-12-16 11:06:50	-->	ENOBUFS (~ENOBUFS@072-177-019-125.res.spectrum.com) has joined ##rust
2019-12-16 11:06:55	-->	UndeadLeech (~UndeadLee@165.227.76.134) has joined ##rust
2019-12-16 11:07:00	-->	Iolo (~iolo@dsl-tkubng22-50de93-232.dhcp.inet.fi) has joined ##rust
2019-12-16 11:07:02	-->	SergioBZ (~Sergio965@2001:19f0:ac01:371:5400:ff:fe5b:d2b1) has joined ##rust
2019-12-16 11:07:05	-->	adema (~adema@2607:5300:60:632::1) has joined ##rust
2019-12-16 11:07:05	-->	zxk (~zxv@222.ip-144-217-89.net) has joined ##rust
2019-12-16 11:07:06	-->	sangy (~sangy@archlinux/trusteduser/sangy) has joined ##rust
2019-12-16 11:07:07	-->	mwbrown (~mwbrown@unaffiliated/mwbrown) has joined ##rust
2019-12-16 11:07:11	-->	chachasmooth (~chachasmo@unaffiliated/chachasmooth) has joined ##rust
2019-12-16 11:07:13	-->	la_croix (~la_croix@cpc97624-walt24-2-0-cust98.13-2.cable.virginm.net) has joined ##rust
2019-12-16 11:07:13	-->	lifthrasiir (~lifthrasi@ec2-52-79-98-81.ap-northeast-2.compute.amazonaws.com) has joined ##rust
2019-12-16 11:07:20	-->	Arguggi (~Arguggi__@arguggi-do.arguggi.co.uk) has joined ##rust
2019-12-16 11:07:21	-->	fengshaun (~fengshaun@unaffiliated/fengshaun) has joined ##rust
2019-12-16 11:07:22	-->	brsc2909 (~quassel@109.255.244.60) has joined ##rust
2019-12-16 11:07:22	-->	Pyrus (~pyrus@unaffiliated/pyrus) has joined ##rust
2019-12-16 11:07:28	-->	chin-tastic (~chin-tast@c-73-137-102-244.hsd1.ga.comcast.net) has joined ##rust
2019-12-16 11:07:31	-->	dom96 (~dom96@unaffiliated/dom96) has joined ##rust
2019-12-16 11:07:33	-->	remexre (~nathan@x-160-94-179-186.acm.umn.edu) has joined ##rust
2019-12-16 11:07:35	-->	loc (~loc@unaffiliated/loc) has joined ##rust
2019-12-16 11:07:37	-->	dan2wik (dan2wik@unaffiliated/dan2wik) has joined ##rust
2019-12-16 11:07:42	-->	SlurpyBeckerman (~sbeckerma@139.180.160.247) has joined ##rust
2019-12-16 11:07:43	-->	Jokler (~Jokler@46.101.123.78) has joined ##rust
2019-12-16 11:07:47	-->	nemasu (~nemasu@bldr.nooplinux.org) has joined ##rust
2019-12-16 11:07:58	-->	jiggawattz (jiggawattz@runs.on.ubuntu.crapping.cricket) has joined ##rust
2019-12-16 11:08:01	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-16 11:08:46	nemasu	Is it possible to have 2 containers (say, a HashMap, and a HashSet), contain references to the same instance of an object (struct).
2019-12-16 11:09:10	j`ey	yup
2019-12-16 11:09:21	-->	Kirjava (~cake@183.ip-51-254-223.eu) has joined ##rust
2019-12-16 11:09:30	-->	gilbertw1 (~gilbertw1@ec2-52-91-154-1.compute-1.amazonaws.com) has joined ##rust
2019-12-16 11:10:00	nemasu	I tried having one own the object, and the other containing a reference to it, but it didn't like that, & needed a lifetime.
2019-12-16 11:10:31	-->	woodz (~woodz@cpc96574-uddi27-2-0-cust731.20-3.cable.virginm.net) has joined ##rust
2019-12-16 11:10:32	-->	luser3 (~ubuntu@ec2-174-129-57-94.compute-1.amazonaws.com) has joined ##rust
2019-12-16 11:10:37	-->	wrmsr (~ubuntu@ec2-54-193-61-240.us-west-1.compute.amazonaws.com) has joined ##rust
2019-12-16 11:11:11	-->	wareya (~wareya@104.207.141.41) has joined ##rust
2019-12-16 11:11:13	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-12-16 11:15:33	j`ey	nemasu: maybe you can post some code: play.rust-lang.org
2019-12-16 11:15:41	nemasu	yup, working on it :) thanks
2019-12-16 11:15:46	<--	stux|RC (stux@2a01:270:2050:1337::1) has quit (Read error: Connection reset by peer)
2019-12-16 11:29:08	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-16 11:29:08	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 11:29:08	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 11:29:08	--	Channel ##rust: 620 nicks (1 op, 0 voices, 619 normals)
2019-12-16 11:29:24	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 11:29:28	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Remote host closed the connection)
2019-12-16 11:29:30	-->	Nascher (~quassel@holarse/core/nascher) has joined ##rust
2019-12-16 11:30:27	nemasu	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5aaf63e68d55321c6e5dc4fe389f785e
2019-12-16 11:30:40	nemasu	it's more-or-less this
2019-12-16 11:31:07	j`ey	those arent references though?
2019-12-16 11:31:18	nemasu	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5aaf63e68d55321c6e5dc4fe389f785e
2019-12-16 11:31:27	nemasu	oh, that didn't change the link
2019-12-16 11:31:36	Lumpio-	click share
2019-12-16 11:31:53	nemasu	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=79e1b9d01560dbd755b3b45817b1caef
2019-12-16 11:32:12	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8dbc799e797d997c3687477d83303f7f
2019-12-16 11:32:31	Lumpio-	I am going to predict this is going to go towards Rc
2019-12-16 11:32:35	nemasu	those are both references though?
2019-12-16 11:32:56	nemasu	in my actual project, it will go out of scope
2019-12-16 11:33:05	nemasu	and will live in A
2019-12-16 11:33:46	-->	Zaszi (~Zaszi@unaffiliated/zaszi) has joined ##rust
2019-12-16 11:34:01	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6940558d25645f54d0063b8246646f45
2019-12-16 11:34:52	-->	gyfarkas (~user@2a02:ab88:59bc:5200:6804:5662:49d8:651f) has joined ##rust
2019-12-16 11:35:27	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-16 11:35:41	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 250 seconds)
2019-12-16 11:36:21	nemasu	hmmm
2019-12-16 11:36:48	--	Lord_of_Life_ is now known as Lord_of_Life
2019-12-16 11:37:35	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-16 11:39:08	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-16 11:40:00	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-12-16 11:40:28	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-16 11:40:45	nemasu	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=90231598ddf312f3c0c453acdae1e85c
2019-12-16 11:40:48	nemasu	maybe this
2019-12-16 11:42:43	j`ey	isnt that kinda what I posted?
2019-12-16 11:42:48	nemasu	it doesn't compile
2019-12-16 11:43:07	j`ey	 mine compiles and runs
2019-12-16 11:43:19	j`ey	ah yours doesnt
2019-12-16 11:44:38	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-16 11:44:46	j`ey	Oh derp, since the hashamp might reallocate, you cant really take references to the elements
2019-12-16 11:44:58	j`ey	Lumpio-: Rc?
2019-12-16 11:46:28	Lumpio-	As in, using Rc instead of &references
2019-12-16 11:47:30	<--	javashin (~javashin@unaffiliated/javashin) has quit (Quit: Leaving)
2019-12-16 11:48:08	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-16 11:52:52	<--	tsaka__ (~torstein@static091138194040.access.hol.gr) has quit (Ping timeout: 268 seconds)
2019-12-16 11:53:29	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 268 seconds)
2019-12-16 11:56:03	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 265 seconds)
2019-12-16 11:57:34	-->	tsaka__ (~torstein@static091138194040.access.hol.gr) has joined ##rust
2019-12-16 12:00:51	-->	ddima (dima@gateway/shell/c-base/x-nqwqiumlrjhyqnyy) has joined ##rust
2019-12-16 12:04:32	-->	yiwan (~yiwan@101.65.82.193) has joined ##rust
2019-12-16 12:07:26	-->	lpil (~mrpopinja@104.248.88.30) has joined ##rust
2019-12-16 12:14:30	<--	hashworks (~hashworks@unaffiliated/hashworks) has quit (Ping timeout: 252 seconds)
2019-12-16 12:14:38	-->	hashworks_ (~hashworks@unaffiliated/hashworks) has joined ##rust
2019-12-16 12:15:02	--	hashworks_ is now known as hashworks
2019-12-16 12:15:20	<--	wadadli (fatpointer@fedora/wadadli) has quit (Quit: wadadli)
2019-12-16 12:19:22	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-12-16 12:20:17	<--	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-12-16 12:20:46	-->	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has joined ##rust
2019-12-16 12:21:23	-->	zeden (~user@unaffiliated/zeden) has joined ##rust
2019-12-16 12:23:56	-->	cdown_ (~cdown@199.201.66.0) has joined ##rust
2019-12-16 12:26:30	<--	cdown (~cdown@89.32.122.5) has quit (Ping timeout: 265 seconds)
2019-12-16 12:26:40	--	cdown_ is now known as cdown
2019-12-16 12:29:03	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 245 seconds)
2019-12-16 12:29:37	-->	codepilot (~Thunderbi@b2b-5-147-248-147.unitymedia.biz) has joined ##rust
2019-12-16 12:33:58	<--	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-12-16 12:34:26	netopso	there are a lot of mock libraries out there, including mockall, which makes a credible claim to be "best". is that the consensus, or do people here have other ideas as to which library should be used for mocking structs as part of tests?
2019-12-16 12:34:26	-->	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has joined ##rust
2019-12-16 12:35:56	-->	hodapp (~hodapp@react-ams-119225.antiddos.solutions) has joined ##rust
2019-12-16 12:36:46	<--	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has quit (Remote host closed the connection)
2019-12-16 12:37:16	-->	xSke (~Ske@176-23-75-217-cable.dk.customer.tdc.net) has joined ##rust
2019-12-16 12:39:01	-->	guardian (~guardian@planet-d.net) has joined ##rust
2019-12-16 12:39:33	<--	tsaka__ (~torstein@static091138194040.access.hol.gr) has quit (Ping timeout: 265 seconds)
2019-12-16 12:41:04	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-12-16 12:48:05	-->	tsaka__ (~torstein@static091138194040.access.hol.gr) has joined ##rust
2019-12-16 12:52:54	zipper	Do I save space by storing a String as a Vec<u8> ?
2019-12-16 12:53:24	j`ey	no
2019-12-16 12:53:28	j`ey	https://doc.rust-lang.org/src/alloc/string.rs.html#283-285
2019-12-16 12:53:29	vorner	No. You get just weaker guarantees around the data inside and different interface.
2019-12-16 12:56:23	zipper	Thanks
2019-12-16 12:57:07	zipper	I'm taking a sha256 hash and converting the result which is in a GenericArray to a String now I'm wondering whether it's better to store it as a Vec<u8>
2019-12-16 12:57:08	jbg	unless you encode the text with something more space-efficient in the Vec<u8>, of course ;D
2019-12-16 12:57:22	jbg	oh, well in this case you're probably encoding it with hex or something
2019-12-16 12:57:27	jbg	and the encoding itself is less space-efficient
2019-12-16 12:57:51	zipper	jbg: Hex is less space efficient?
2019-12-16 12:58:06	jbg	well you have 32 bytes in a Vec<u8> (your 256-bit hash)
2019-12-16 12:58:29	jbg	then you encode it with hex to get two hex chars per byte
2019-12-16 12:58:50	jbg	each char takes up one byte in the String since it's UTF-8 and they all fit within one byte since they're just a-f 0-9
2019-12-16 12:59:03	jbg	so you've expanded 32 bytes into 64 bytes
2019-12-16 12:59:39	zipper	Yeah so storing it as hex is more space efficient
2019-12-16 12:59:45	jbg	no, it's half as space efficient
2019-12-16 12:59:55	jbg	the hash was 32 bytes, and by hex encoding it you made it 64 bytes
2019-12-16 13:01:00	zipper	because each byte in my hash became two bytes in hex?
2019-12-16 13:01:03	jbg	correct
2019-12-16 13:01:15	zipper	I thought it takes 4 bits store a hex value
2019-12-16 13:01:23	jbg	uh...
2019-12-16 13:01:36	jbg	i think you are missing some fundamentals here
2019-12-16 13:01:43	zipper	Ya
2019-12-16 13:02:00	jbg	Vec<u8> is a bunch of unsigned 8-bit integers. 32 of them, if it is a SHA-256 hash
2019-12-16 13:02:22	jbg	each of those integers can have values 0-254
2019-12-16 13:02:46	jbg	if you want to encode that in hex, each hex digit can only have values 0-15 (0-9 + a-f)
2019-12-16 13:03:04	jbg	so you need two hex digits in order to represent each single digit from your Vec
2019-12-16 13:03:49	jbg	any time you encode arbitrary binary data into an encoding with *fewer* possible values for each digit, you're going to make your data take up more space
2019-12-16 13:04:28	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2019-12-16 13:04:29	jbg	there's generally no reason to encode binary data into a string unless you need to transmit it over some medium that can't handle it
2019-12-16 13:05:07	jbg	e.g. putting your hash in a URL would require some encoding. Base64 is an example that is more space-efficient than hex, because instead of 16 possible values for each character, it has 64
2019-12-16 13:05:47	<--	user9 (984d0e74@dcm-info-22.u-ga.fr) has quit (Remote host closed the connection)
2019-12-16 13:06:40	jbg	since 64 < 255 your data still gets larger than the unencoded binary, but not by as much as hex
2019-12-16 13:06:55	zipper	pause for a bit
2019-12-16 13:08:36	zipper	Do I really need two hex digits to represent one digit from my vec? Say I have 15 which is f. Isn't f one hex digit? or is the issue its ascii encoding?
2019-12-16 13:08:59	jbg	say that your vec is [15, 100, 15]
2019-12-16 13:09:13	jbg	the hex encoding of that is 0f640f
2019-12-16 13:09:35	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-16 13:09:59	jbg	which in a String would be stored as [0, 102, 54, 52, 0, 102]
2019-12-16 13:10:08	jbg	6 bytes instead of the 3 in your vec
2019-12-16 13:10:16	zipper	ha!
2019-12-16 13:10:44	jbg	you can't leave the 0s out because it would be impossible to know where one had been left out
2019-12-16 13:11:42	zipper	I see what you mean
2019-12-16 13:11:54	zipper	Can't believe I've lived all these years thinking the opposite.
2019-12-16 13:11:57	jbg	but yeah the basic principle is that encodings generally restrict the possible values of bytes in order to make them suitable for whatever you're encoding for
2019-12-16 13:11:58	<--	tsaka__ (~torstein@static091138194040.access.hol.gr) has quit (Ping timeout: 245 seconds)
2019-12-16 13:12:08	jbg	and if you restrict the possible values of each byte then you're obviously going to need more bytes
2019-12-16 13:12:22	j`ey	jbg++
2019-12-16 13:12:33	zipper	jbg: Okay then why do people prefer encodings? I assumed we encode to save space when transmitting data
2019-12-16 13:12:43	jbg	not to save space, but to make it possible to transmit the data
2019-12-16 13:12:51	zipper	Isn't it much cheaper to transfer a u8?
2019-12-16 13:12:56	zipper	hmmm
2019-12-16 13:12:56	jbg	if you're putting bytes in a URL, you can only use bytes that are safe in a URL
2019-12-16 13:13:04	jbg	sometimes you want humans to be able to read the bytes
2019-12-16 13:13:15	zipper	I see
2019-12-16 13:13:20	jbg	ASCII plus a bit of punctuation is much easier to read than raw binary data
2019-12-16 13:13:32	jbg	if you're transmitting over SMS you have even more restrictions
2019-12-16 13:13:46	jbg	but if you're storing on disk or in most databases, you can just store binary and save yourself some space
2019-12-16 13:13:50	<--	narispo (~narispo@2a01:e35:2fbc:8b90:d9e9:4c06:bd06:bcbc) has quit (Ping timeout: 276 seconds)
2019-12-16 13:14:27	jbg	rather than "ASCII plus a bit of punctuation" i should have said the "alphabet, numbers, and a bit of punctuation"; ASCII obviously includes all of that
2019-12-16 13:14:31	-->	narispo (~narispo@37.173.87.21) has joined ##rust
2019-12-16 13:14:38	zipper	I get it jbg
2019-12-16 13:15:07	jbg	there's compression of course. if you want to make things smaller that's where you should be looking
2019-12-16 13:15:21	zipper	Okay so I'd say with colors in the browser, do we do hex because it's easier for humans to read in general?
2019-12-16 13:15:23	jbg	but a SHA-256 hash shouldn't compress much :)
2019-12-16 13:15:49	jbg	yes, and hex is more compact than decimal
2019-12-16 13:16:04	jbg	decimal - 10 possible values per character. hex - 16
2019-12-16 13:16:10	DeltaHeavy	Aren't those all just representations of binary data? Hex vs decimal vs binary?
2019-12-16 13:16:16	jbg	yes, absolutely
2019-12-16 13:16:36	jbg	although "binary" isn't a clear term in this case
2019-12-16 13:16:38	DeltaHeavy	So as far as the computer is concerned it's all the same, no gains in compression-esque qualities?
2019-12-16 13:16:42	jbg	they're all _representations of data_
2019-12-16 13:16:44	DeltaHeavy	Number systems
2019-12-16 13:16:52	DeltaHeavy	Binary being the number system computers use.
2019-12-16 13:16:53	zipper	jbg: So there's no such value as f it has to be 0f
2019-12-16 13:16:55	zipper	?
2019-12-16 13:17:15	jbg	DeltaHeavy: yeah, but we're talking about representations of things and how much space they take up
2019-12-16 13:17:21	zipper	Where can I read about this? Clearly there's a lot I don't know.
2019-12-16 13:17:27	zipper	Wikipedia has a lot of gaps
2019-12-16 13:17:41	jbg	if you store a string "ff00" it takes up four bytes. if you store the number that string represents, it needs only two
2019-12-16 13:17:42	DeltaHeavy	jbg How much space on a screen, or over a network transmission or on a hardrive?
2019-12-16 13:17:51	DeltaHeavy	Bah I'm coming in late, probably lacking context.
2019-12-16 13:17:52	DeltaHeavy	Sorry
2019-12-16 13:18:20	jbg	any of those. zipper was talking about storing a SHA-256 hash, hex encoded, in a String, as he was under the mistaken impression that the hex encoding would *shrink* it
2019-12-16 13:18:39	jbg	rather than the reality which is that it would take up double the space of the original hash (which was just a Vec<u8> or equivalent)
2019-12-16 13:18:40	DeltaHeavy	Gotchu ;D
2019-12-16 13:18:52	<--	dmc (~dmc@archlinux/trusteduser/polyzen) has quit (Remote host closed the connection)
2019-12-16 13:19:10	jbg	zipper: i'm not actually sure of some good resources off-hand, a bit of googling should find stuff
2019-12-16 13:19:12	zipper	I was under the impression that as long as the values/numbers I'm storing don't individually go past 15 if I store them in hex I use half the space
2019-12-16 13:19:46	jbg	zipper: if you are only encoding 4-bit values, that can be the case
2019-12-16 13:20:31	jbg	zipper: you can pack two 4-bit values into one byte, using the most-significant and least-significant halves
2019-12-16 13:21:12	apo	(But if you're then encoding that as hex-strings, you're doubling the size again, putting you back at square one)
2019-12-16 13:23:30	jbg	yeah - instead of doubling the size, you'd use the same amount of space you originally did, but you'd be restricted to values 0-15 and have a bunch of extra work doing the packing and unpacking
2019-12-16 13:23:36	-->	nezZario9 (~nezZario@unaffiliated/nezzario) has joined ##rust
2019-12-16 13:23:36	jbg	all a bit silly :)
2019-12-16 13:23:42	<--	AbedB_ (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2019-12-16 13:24:31	jbg	zipper: to answer your earlier question, there is such a hex value as `f`, it's a single digit representing 15, but if you're encoding a series of bytes (u8 values) as hex you can't just leave out the zeros, as mentioned earlier
2019-12-16 13:24:47	jbg	for the same reason that if you encoded it as binary you couldn't - you would have no idea where the bytes started and ended
2019-12-16 13:25:33	jbg	vec![15, 15, 15] -> 0f0f0f -> 000011110000111100001111
2019-12-16 13:25:43	jbg	if you encoded that as fff or 111111111111 it would be undecodable
2019-12-16 13:26:04	jbg	it could be vec![255, 15] or vec![15, 255]
2019-12-16 13:27:02	zipper	So if we store ff00 as a string we store [102, 102, 0, 0] but if we stored the number we don't store it as [15, 15, 0], right? What do we store it as?
2019-12-16 13:27:25	jbg	ff00 is [255, 0]
2019-12-16 13:27:44	zipper	heh
2019-12-16 13:27:48	<--	narispo (~narispo@37.173.87.21) has quit (Ping timeout: 248 seconds)
2019-12-16 13:28:09	-->	narispo (~narispo@2a01:e35:2fbc:8b90:20cd:7672:cf5d:a291) has joined ##rust
2019-12-16 13:28:17	jbg	the possible values for a byte (u8) are 0..255 which is 0x00..0xff
2019-12-16 13:28:35	jbg	(0x being just a prefix for indicating that i'm writing hex)
2019-12-16 13:30:45	-->	dalcde (~dalcde@unaffiliated/dalcde) has joined ##rust
2019-12-16 13:30:58	zipper	Okay this is interesting
2019-12-16 13:31:19	zipper	When I convert FF00 to decimal I get a "large" int
2019-12-16 13:31:37	zipper	So what I should be doing is converting these hex values in pairs?
2019-12-16 13:31:40	jbg	yeah, because you didn't convert as two bytes
2019-12-16 13:31:44	jbg	it's two values. 0xff, 0x00
2019-12-16 13:31:53	jbg	you instead converted it as one large value, 0xff00
2019-12-16 13:32:00	zipper	Yes I did
2019-12-16 13:32:12	jbg	which is 65280 (255 * 256)
2019-12-16 13:35:14	zipper	Okay, thanks a ton. I've really got to read up on this a lot more. Do you normally get taught this in undergrad or high school? Think I had these conversions in high school but in undergrad I think the knowledge was assumed.
2019-12-16 13:38:11	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-12-16 13:39:21	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-16 13:40:21	jbg	my high school didn't teach this, but university covered most of the basics and i do a lot of hardware hacking and network protocol stuff which definitely helps.
2019-12-16 13:40:30	jbg	but there should be good resources online
2019-12-16 13:41:11	zipper	Do you also know quite a bit about bit shifting and umm byte packing?
2019-12-16 13:41:21	zipper	Any resources on that?
2019-12-16 13:41:34	zipper	Wish I had a direct question right now
2019-12-16 13:41:58	<--	dn2k (~er@unaffiliated/dn2k) has quit (Ping timeout: 245 seconds)
2019-12-16 13:42:11	-->	drincruz (~adriancru@ool-44c7491c.dyn.optonline.net) has joined ##rust
2019-12-16 13:42:27	zipper	jbg: Well when I search for (character) encoding most of what I get is utf8 stuff :)
2019-12-16 13:42:41	zipper	Anyway small bits of knowledge at a time
2019-12-16 13:42:43	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-16 13:44:48	<--	daxim (~daxim@095129203238.i3.akis.net) has quit (Ping timeout: 265 seconds)
2019-12-16 13:44:48	-->	rardiol (~quassel@177.52.229.215) has joined ##rust
2019-12-16 13:50:24	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-16 13:54:06	-->	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has joined ##rust
2019-12-16 13:58:51	<--	narispo (~narispo@2a01:e35:2fbc:8b90:20cd:7672:cf5d:a291) has quit (Ping timeout: 246 seconds)
2019-12-16 14:06:52	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-16 14:06:52	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 14:06:52	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 14:06:52	--	Channel ##rust: 626 nicks (1 op, 0 voices, 625 normals)
2019-12-16 14:07:07	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 14:33:06	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-16 14:33:06	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-16 14:33:06	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-16 14:33:06	--	Channel ##rust: 626 nicks (1 op, 0 voices, 625 normals)
2019-12-16 14:33:22	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-16 14:36:33	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-12-16 14:36:39	<--	SlurpyBeckerman (~sbeckerma@139.180.160.247) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-12-16 14:37:40	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 248 seconds)
2019-12-16 14:40:08	-->	SlurpyBeckerman (~sbeckerma@139.180.160.247) has joined ##rust
2019-12-16 14:42:13	-->	dmc (~dmc@archlinux/trusteduser/polyzen) has joined ##rust
2019-12-16 14:44:33	<--	hairstorm (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: hairstorm)
2019-12-16 14:49:02	<--	xj (~xj@c110-23-174-45.rochd21.qld.optusnet.com.au) has quit (Read error: Connection reset by peer)
2019-12-16 14:49:30	<--	jbg (~jbg@88.98.228.44) has quit (Quit: leaving)
2019-12-16 14:49:46	-->	Deide (~Deide@90.249.182.238) has joined ##rust
2019-12-16 14:50:13	-->	jbg (~jbg@88.98.228.44) has joined ##rust
2019-12-16 14:50:38	<--	baali (~baali@59.98.238.221) has quit (Quit: Leaving.)
2019-12-16 14:52:03	<--	johnw (~johnw@haskell/developer/johnw) has quit (Quit: ZNC - http://znc.in)
2019-12-16 14:53:04	--	nezZario9 is now known as mr_ab
2019-12-16 14:54:54	<--	SlurpyBeckerman (~sbeckerma@139.180.160.247) has quit (Quit: ZNC 1.7.5 - https://znc.in)
2019-12-16 14:56:34	<--	nemasu (~nemasu@bldr.nooplinux.org) has left ##rust
2019-12-16 15:00:15	--	m0rr1gan_ is now known as m0rr1gan
2019-12-16 15:09:22	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-12-16 15:10:50	<--	regakakobigman (~regakakob@c-73-174-187-176.hsd1.pa.comcast.net) has quit (Ping timeout: 265 seconds)
2019-12-16 15:18:24	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Ping timeout: 260 seconds)
2019-12-16 15:19:03	<--	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2019-12-16 15:21:18	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-12-16 15:22:32	-->	jenny-m (~jdm-@167.100.78.229) has joined ##rust
2019-12-16 15:22:34	<--	BeerLover (~BeerBuddy@125.22.102.134) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-12-16 15:24:38	-->	gnu3ra_ (~gnu3ra@c-98-226-242-1.hsd1.il.comcast.net) has joined ##rust
2019-12-16 15:31:02	<--	javashin (~javashin@unaffiliated/javashin) has quit (Quit: Leaving)
2019-12-16 15:33:45	rtyler	I've been having trouble formatting the right search query for this: but can I get anything to generate local documentation for all the crates in my Cargo.toml?
2019-12-16 15:33:49	-->	tsaka__ (~torstein@94.66.69.172) has joined ##rust
2019-12-16 15:34:03	rtyler	I've arleady got the rustup docs installed, and those are helpful but not exactly what I'm looking for
2019-12-16 15:34:16	-->	baali (~baali@59.98.238.221) has joined ##rust
2019-12-16 15:34:36	-->	Gustavo6046 (~Gustavo60@unaffiliated/gustavo6046) has joined ##rust
2019-12-16 15:34:42	capitol	cargo can do that
2019-12-16 15:35:15	capitol	cargo rustdoc
2019-12-16 15:39:04	rtyler	hm
2019-12-16 15:41:24	<--	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 246 seconds)
2019-12-16 15:42:17	-->	jaix (~jaix@2a02:c7f:c027:3600:6d9d:90ca:8d16:9c89) has joined ##rust
2019-12-16 15:44:08	rtyler	looks like it's `cargo doc`, but I'm surprised to find this already built in, huzzah
2019-12-16 15:46:57	-->	drincruz (~adriancru@104.129.137.82) has joined ##rust
2019-12-16 15:47:12	-->	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has joined ##rust
2019-12-16 15:47:42	-->	dn2k (~er@unaffiliated/dn2k) has joined ##rust
2019-12-16 15:55:13	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-12-16 15:57:16	-->	bluezone (uid104970@gateway/web/irccloud.com/x-uiehkknqmdctdsux) has joined ##rust
2019-12-16 15:58:14	-->	AbedB_ (~AbedBhuty@bzq-79-176-25-145.red.bezeqint.net) has joined ##rust
2019-12-16 15:59:14	<--	jaix (~jaix@2a02:c7f:c027:3600:6d9d:90ca:8d16:9c89) has quit (Ping timeout: 246 seconds)
2019-12-16 16:00:51	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-16 16:00:53	<--	AbedB (~AbedBhuty@bzq-109-64-19-212.red.bezeqint.net) has quit (Ping timeout: 250 seconds)
2019-12-16 16:06:31	-->	halfbit (~tburdick@unaffiliated/submersive) has joined ##rust
2019-12-16 16:06:36	<--	daxim (~daxim@095129203238.i3.akis.net) has quit (Ping timeout: 246 seconds)
2019-12-16 16:09:24	<--	slomo (~slomo@unaffiliated/slomo) has quit (Ping timeout: 246 seconds)
2019-12-16 16:09:37	<--	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has left ##rust
2019-12-16 16:09:50	-->	r4pr0n (~r4pr0n@gateway/tor-sasl/r4pr0n) has joined ##rust
2019-12-16 16:11:53	-->	daxim (~daxim@095129203238.i3.akis.net) has joined ##rust
2019-12-16 16:11:54	-->	slomo (~slomo@unaffiliated/slomo) has joined ##rust
2019-12-16 16:15:06	-->	cole-h (~cole-h@c-67-187-170-40.hsd1.ca.comcast.net) has joined ##rust
2019-12-16 16:18:57	-->	fandbot (~fandbot@2001:8a0:7d62:701:2532:b6ac:170c:aa65) has joined ##rust
2019-12-16 16:35:20	<--	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has quit (Ping timeout: 276 seconds)
2019-12-16 16:35:20	<--	fsasm (~fsasm@62.178.93.7) has quit (Read error: Connection reset by peer)
2019-12-16 16:35:25	<--	Arcaelyx (~Arcaelyx@99-61-90-107.lightspeed.chrlnc.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2019-12-16 16:36:13	-->	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has joined ##rust
2019-12-16 16:40:22	<--	fandbot (~fandbot@2001:8a0:7d62:701:2532:b6ac:170c:aa65) has quit (Quit: ZZZzzz…)
2019-12-16 16:49:07	-->	Derriick (~Derriick@254.218.203.77.rev.sfr.net) has joined ##rust
2019-12-16 16:55:08	-->	t7 (~tommo@2a00:23c5:1284:fc00:dd46:7a1c:8c86:2748) has joined ##rust
2019-12-16 17:05:45	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-12-16 17:08:04	wucke13	I want a const [u8;8], which is intialized by list.map(), like this: `const A: [u8;8] =[1,2,3,4,5,6,7,8].iter().map(|e| e+2).collect();`. What is the closest way of doing that?
2019-12-16 17:09:09	j`ey	 = [3, 5, .. ] :P
2019-12-16 17:11:26	wucke13	j`ey: I know, though that wont work for my usecase. The actual map is abit more coplicated. I also may need to mix in a .rev().
2019-12-16 17:13:27	jebrosen	Is the "values are dropped only once" guarantee actually spelled out anywhere? It seems so fundamental but I don't see that mentioned in any of the documentation I would expect to see it in
2019-12-16 17:13:41	jbg	wucke13: i think you'll have to make it static and use Lazy from once_cell, or lazy_static
2019-12-16 17:14:23	jbg	can't think of a way to do it with only const fns unless you build something :)
2019-12-16 17:15:19	wucke13	What does that mean?
2019-12-16 17:16:36	wucke13	I need these values at the root of a module. Is that possible using lazy_static?
2019-12-16 17:16:40	jbg	rather than using a const, do e.g. `static A: Lazy<[u8; 8]> = Lazy::new(|| [1, 2, 3, 4, 5, 6, 7, 8].iter().map(|e| e+2).collect());`
2019-12-16 17:16:42	jbg	that can be at the root
2019-12-16 17:17:05	j`ey	can you collect like that?
2019-12-16 17:17:10	j`ey	into an array?
2019-12-16 17:17:24	jbg	hmm, possibly not. might need to be a vec
2019-12-16 17:18:00	j`ey	Im pretty sure you cant
2019-12-16 17:18:57	jbg	wucke13: Lazy is from the once_cell crate
2019-12-16 17:19:11	jbg	there are sync and non-sync versions depending on whether you need access to be threadsafe
2019-12-16 17:20:26	wucke13	Whats the reasoning behind once_cell vs lazy_static?
2019-12-16 17:21:26	j`ey	once_cell wanted to be macro-less
2019-12-16 17:25:29	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: WeeChat 1.9.1)
2019-12-16 17:27:37	-->	dansho (~dansho@71-84-161-204.dhcp.astr.or.charter.com) has joined ##rust
2019-12-18 09:08:21	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-12-18 09:08:21	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-12-18 09:08:21	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-12-18 09:08:21	--	Channel ##rust: 602 nicks (1 op, 0 voices, 601 normals)
2019-12-18 09:08:37	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-12-18 09:08:45	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:09:01	-->	jello_pudding (~jello_pud@2601:600:9f80:7780::6a2a) has joined ##rust
2019-12-18 09:09:38	jbg	apullin: if you literally just want allocation and don't care about other things in std (that may not even be relevant depending on what platform you're targeting) then you can use system_allocator along with no_std
2019-12-18 09:14:17	<--	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-12-18 09:15:18	apullin	jbg: Use of some parts of std would be *great*, like collections. Although I know that large parts of std don't apply in any sense to a bare metal embedded platform. So, I am not totally sure what I should be even attempting to get to work.
2019-12-18 09:16:15	jbg	for collections you can use the `alloc` crate
2019-12-18 09:16:26	jbg	which gives you vec etc but only requires an allocator, not a full standard library
2019-12-18 09:16:45	jbg	have you had a read of the rust embedded book?
2019-12-18 09:16:46	jbg	https://docs.rust-embedded.org/book/collections/
2019-12-18 09:17:15	-->	azoool_ (~azul@lorikeet.riseup.net) has joined ##rust
2019-12-18 09:17:18	jbg	fyi `alloc` is part of the standard rust distribution, not a third-party crate
2019-12-18 09:18:19	azoool_	Hi, I'm lost with a strange error message: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c20ee452aea24327f1be51c87ff84b9e
2019-12-18 09:18:39	azoool_	rust suggests:
2019-12-18 09:18:43	azoool_	impl<F: core::future::future::Future + Future, O: TryStream> Stream for Tee<F, O> {
2019-12-18 09:19:15	azoool_	so in addition to the Future traid bound it wants another one because it cannot find the poll method in Future.
2019-12-18 09:19:35	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has quit
2019-12-18 09:19:44	jbg	azoool_: the error message is giving a bad suggestion, there is a bug open for this
2019-12-18 09:19:57	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:19:58	jbg	azoool_: the problem is that the poll() method has a different receiver. Pin<&mut Self>
2019-12-18 09:20:18	jbg	azoool_: so you can't call poll() on F, you have to call it on Pin<&mut F>
2019-12-18 09:20:41	azoool_	ahh.. that does make some sense.
2019-12-18 09:20:51	azoool_	How do i get a Pin<&mut F> ?
2019-12-18 09:20:55	jbg	azoool_: you can store it as Pin<Box<F>> and then call it as self.forward.as_mut().poll(...)
2019-12-18 09:21:20	jbg	you can get Pin<Box<F>> from future.boxed() with the FutureExt trait in scope, or you can do Box::pin(future)
2019-12-18 09:21:20	azoool_	cool. Thannks! Will give that a try.
2019-12-18 09:23:30	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has quit (Client Quit)
2019-12-18 09:23:45	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:25:58	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has quit (Client Quit)
2019-12-18 09:26:20	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:29:57	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has left ##rust
2019-12-18 09:31:39	apullin	jbg: I have read through the embedded rust book, but it does not seem to give too clear an answer here (especially being a rust novice). They provide an example global allocator, but that doesn't seem like something for general usage.
2019-12-18 09:32:16	jbg	apullin: it does give a note saying that you should use a different allocator in reality, and that it's just an example
2019-12-18 09:32:23	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:32:29	jbg	the allocator API is generic, you just have to provide any crate that implements it
2019-12-18 09:33:49	apullin	I haven't quite found a silver bullet for what to use for allocator for the general case. (or something that replicates the expectations from my experience with C+libc, malloc + free)
2019-12-18 09:34:17	jbg	it does appear that there isn't yet a crate that just binds the system allocator to the allocator API - you'd have to use std::alloc::System which is obviously not compatible with no_std
2019-12-18 09:34:17	<--	Speed (~Speed@unaffiliated/speeda) has quit (Read error: Connection reset by peer)
2019-12-18 09:34:42	jbg	https://users.rust-lang.org/t/using-the-system-allocator-in-a-no-std-context/27983 is relevant
2019-12-18 09:35:28	jbg	the allocator API is pretty simple, it should be trivial to write something that implements it using malloc/free; in fact you could probably copy the implementation from std
2019-12-18 09:36:18	apullin	trivial for an expert ;)
2019-12-18 09:36:28	jbg	i really think it's only a few lines of code
2019-12-18 09:36:45	apullin	Does that imply that the rust program will actually compile against libc and use FFI to call malloc and free linked from libc?
2019-12-18 09:36:53	jbg	you have to implement an alloc() method (call malloc) and a dealloc() method (call free)
2019-12-18 09:36:56	jbg	yeah
2019-12-18 09:37:20	jbg	i haven't tried this because i don't work on any targets that have a heap
2019-12-18 09:37:51	apullin	wow, ok, that would be ideal because it would literally replicate my existing experience with how the embedded heap should operate ... now I just have to figure out how to bring it together
2019-12-18 09:37:52	jbg	and when i've worked with others using bigger iron, they've used something basic like the linkedlistallocator
2019-12-18 09:38:39	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has quit
2019-12-18 09:38:56	-->	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has joined ##rust
2019-12-18 09:39:27	<--	JCantrell (~JCantrell@rrcs-72-128-139-162.sw.biz.rr.com) has quit (Client Quit)
2019-12-18 09:39:59	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 09:40:06	<--	baali (~baali@59.98.235.67) has quit (Quit: Leaving.)
2019-12-18 09:42:50	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 09:45:02	jbg	btw you can use the existing bindings from the `libc` crate
2019-12-18 09:45:06	jbg	e.g. `libc::calloc`
2019-12-18 09:45:48	jbg	or rather malloc
2019-12-18 09:50:19	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 09:52:52	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 09:53:12	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 09:53:27	-->	Strom (strom@127-16-191-90.dyn.estpak.ee) has joined ##rust
2019-12-18 09:55:17	apullin	jbg: now I'll have to reveal truly how novice I am: it seems like `use libc::free;` in my code causes a build error, unresolved import
2019-12-18 09:55:24	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 09:55:33	-->	Tech49 (~vkr@82-197-204-252.dsl.cambrium.nl) has joined ##rust
2019-12-18 09:55:37	<--	endless90 (~endless90@p200300DA374338002533FE4812882D6E.dip0.t-ipconnect.de) has quit (Quit: endless90)
2019-12-18 09:56:22	-->	Speed (~Speed@unaffiliated/speeda) has joined ##rust
2019-12-18 09:56:53	Tech49	How do you check if a variable was defined or not in Rust? I'm looking for an equivalent of `if ( typeof variable === 'undefined' ) {}` in JavaScript
2019-12-18 09:57:17	j`ey	you ant
2019-12-18 09:57:21	j`ey	cant
2019-12-18 09:57:26	Tech49	Oh
2019-12-18 09:57:28	jbg	apullin: you'll need to depend on the libc crate
2019-12-18 09:57:50	jbg	(i.e. add it to Cargo.toml)
2019-12-18 09:58:04	apullin	... I do have `libc = "0.2.66"` in the Cargo.toml
2019-12-18 09:58:09	j`ey	Tech49: what are you actually trying to do?
2019-12-18 09:58:11	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Read error: Connection reset by peer)
2019-12-18 09:58:14	jbg	Tech49: if you defined the variable, it's defined. if you didn't, it isn't. why do you need to check? :)
2019-12-18 09:58:15	-->	AbedB__ (~AbedBhuty@bzq-79-182-81-145.red.bezeqint.net) has joined ##rust
2019-12-18 09:58:51	Tech49	Just trying to get my head around Rust
2019-12-18 09:59:20	yrp	what you probably want is omething like Option
2019-12-18 09:59:22	jbg	referring to a variable that doesn't exist is a compile error in Rust, like many other similar languages
2019-12-18 09:59:27	Tech49	If you have a struct, you must fill all data or it will fail?
2019-12-18 09:59:49	j`ey	yes
2019-12-18 09:59:57	Tech49	yrp, I think so
2019-12-18 10:00:30	yrp	there are quite a few ways of working with Option
2019-12-18 10:00:30	Tech49	It's not possible to have optional parameters for functions?
2019-12-18 10:00:35	yrp	no, it is not
2019-12-18 10:00:39	<--	AbedB_ (~AbedBhuty@bzq-109-64-101-250.red.bezeqint.net) has quit (Ping timeout: 246 seconds)
2019-12-18 10:00:45	yrp	at least not in the way youre thinking of
2019-12-18 10:02:20	yrp	what you mean by optional parameters rust/C call variadics, and rust only kind of supports them in specific scenarios
2019-12-18 10:02:26	Tech49	Thanks. Then I can stop looking how to do it : )
2019-12-18 10:02:46	yrp	look up the builder pattern for the more idiomatic way on how to do it
2019-12-18 10:03:01	Tech49	Ok, I'll do that. Thanks
2019-12-18 10:03:10	yrp	alternatively, you can have actually Optional parameters, but then all the call sites are like foo(thing, None, None, None, None)
2019-12-18 10:03:17	yrp	instead of just foo(thing)
2019-12-18 10:03:34	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:04:55	-->	t7 (~tommo@2a00:23c5:1284:fc00:3521:229b:4134:6d38) has joined ##rust
2019-12-18 10:05:29	apullin	jbg: uh oh, it looks like the `libc` crate does not have support for my embedded target :\
2019-12-18 10:06:06	-->	chowmeined (~chowmeine@unaffiliated/chowmeined) has joined ##rust
2019-12-18 10:06:31	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 10:06:40	yrp	can you just ffi call into libc
2019-12-18 10:06:54	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:07:18	yrp	extern "C" { fn malloc(usize) -> *mut c_void }
2019-12-18 10:07:37	Tech49	I see an answer on Stack Overflow about using Option<i32>
2019-12-18 10:08:20	Tech49	So, there is also no default value for parameters?
2019-12-18 10:08:28	j`ey	no
2019-12-18 10:08:36	yrp	uhhhh kinda?
2019-12-18 10:08:41	yrp	types can have default values
2019-12-18 10:08:46	yrp	but theyre not applied to parameters
2019-12-18 10:08:48	vorner	Well, you can pass `Default::default()` explicitly to the parameter.
2019-12-18 10:09:17	Tech49	This will take some time to get used to
2019-12-18 10:09:21	-->	m0rr1gan1 (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:09:37	-->	eythian (~quassel@fsf/member/eythian) has joined ##rust
2019-12-18 10:10:20	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 10:11:50	apullin	yrp: ah, great ... the bare externs like that and then using them in this construct: https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html, I am now just down to link errors. Now to read up on rust-lld ...
2019-12-18 10:12:04	yrp	uh
2019-12-18 10:12:12	yrp	i dont think you need rust-lld
2019-12-18 10:12:16	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 10:12:57	yrp	#[link(name = "libc")]
2019-12-18 10:13:01	yrp	above the extern block
2019-12-18 10:13:03	yrp	or something similiar
2019-12-18 10:13:07	jbg	yeah that should do it
2019-12-18 10:13:13	jbg	it won't be linking libc by default since you're no_std
2019-12-18 10:13:17	yrp	or use build.rs to add an explicit link thing
2019-12-18 10:13:44	-->	m0rr1gan (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:16:09	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:16:20	<--	m0rr1gan1 (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 10:17:26	-->	cart_man (~rynot@196.61.22.83) has joined ##rust
2019-12-18 10:17:28	-->	multiproc (~mark@unaffiliated/multiproc) has joined ##rust
2019-12-18 10:17:39	apullin	so close ... `error: unable to find library -llibc`
2019-12-18 10:18:23	vorner	I think the library is actually called only "c", not "libc"
2019-12-18 10:18:40	yrp	yeah, this behavior changes on windows/linux so i never remember it
2019-12-18 10:18:43	vorner	like, if you want libgzip, you do only '-lgzip'
2019-12-18 10:18:47	<--	m0rr1gan (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 10:19:30	yrp	also how erty got its name as a library
2019-12-18 10:21:03	apullin	Hrm, it seems that `c` nor `cc1` work; in my arm compiler dir, I see libcc1.so is provided. Maybe it is a link path issue, since it is not using gnu ld to link, so it can't find it?
2019-12-18 10:21:29	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:22:05	cart_man	Hey everyone. If I have mutable variables on the top of my function but I want to return unmutable variables out of the function can I do that by simply going -> https://hastebin.com/jofowowaje.cs
2019-12-18 10:22:41	j`ey	cart_man: mutability doesnt really work like that in this case
2019-12-18 10:22:44	jbg	apullin: what are you using to link?
2019-12-18 10:22:53	jbg	if you haven't overridden it, it quite likely *is* gnu ld
2019-12-18 10:23:02	j`ey	cart_man: if you returned the 'mut index', it would be the same as what you had now
2019-12-18 10:23:25	apullin	jbg: I followed the tutorial in the embedded rust book ... and I am seeing `error: linking with `rust-lld` failed: exit code: 1` reported
2019-12-18 10:23:47	j`ey	cart_man: what I mean is that someone could write: let (mut a, mut b) = parseData();
2019-12-18 10:24:20	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 10:24:49	apullin	AH the example project specifically uses rust-lld, but has the option there to use gnu ld
2019-12-18 10:26:11	-->	baali (~baali@59.98.235.67) has joined ##rust
2019-12-18 10:26:49	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:29:31	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 10:29:43	apullin	OK, odd, now I am getting link errors for multiple definitions of `memcpy` and `memset`, and the collisions appear to be in mem.rs
2019-12-18 10:30:36	jbg	you can use cargo --verbose to see the commands it's running; seeing the linker command line could be useful
2019-12-18 10:32:09	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:33:23	-->	mike32 (~mike@46.191.65.35) has joined ##rust
2019-12-18 10:35:00	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 10:35:15	apullin	jbg: it appears to be invoking arm-none-eabi-gcc, with a litany of arguments: https://pastebin.com/JkP4jMJm
2019-12-18 10:35:23	<--	tyler569 (~tyler@209.182.232.125) has quit (Ping timeout: 250 seconds)
2019-12-18 10:36:43	jbg	can you pastebin the errors you get?
2019-12-18 10:37:08	<--	xeno (~xeno@unaffiliated/xeno) has quit (Ping timeout: 248 seconds)
2019-12-18 10:37:13	<--	andreas303 (~andreas@gateway/tor-sasl/andreas303) has quit (Remote host closed the connection)
2019-12-18 10:37:24	cart_man	j`ey: Ohh ok so if I return mut x  IT will just be a x at the receiving end? If I wanted to return MUT X then I would have to state that I am returning a -> Mut x ?
2019-12-18 10:37:45	jbg	`Mut x` isn't a thing. mut is just a modifier on a variable to allow you to mutate the value _of that variable_
2019-12-18 10:37:49	jbg	not to mutate the thing it contains
2019-12-18 10:37:54	jbg	you might be thinking of &mut x
2019-12-18 10:38:00	jbg	which is a mutable reference to x
2019-12-18 10:38:00	j`ey	the only mut thing you can return is ^
2019-12-18 10:38:06	apullin	jbg: https://pastebin.com/93L9vrDR
2019-12-18 10:38:14	cart_man	j`ey: Whats ^
2019-12-18 10:38:19	cart_man	jbg: Ok that makes sense
2019-12-18 10:38:42	j`ey	cart_man: ^ means.. look at what jbg was saying :P
2019-12-18 10:39:11	-->	yiwan (~yiwan@101.65.82.193) has joined ##rust
2019-12-18 10:39:35	jbg	apullin: ah yeah. rust has symbols for compiler builtins like memset memcpy etc. it's a link order problem i think
2019-12-18 10:39:47	-->	xeno (~xeno@unaffiliated/xeno) has joined ##rust
2019-12-18 10:39:52	-->	andreas303 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-12-18 10:40:29	jbg	i actually wouldn't have thought that the `-lc` is necessary on that link command line
2019-12-18 10:40:36	jbg	what happens if you remove the #[link] attribute?
2019-12-18 10:41:18	-->	tyler569 (~tyler@209.182.232.125) has joined ##rust
2019-12-18 10:43:31	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:44:15	<--	o01eg (~o01eg@2a02:2698:82b:1435:b4e4:45be:7c5e:88e2) has quit (Read error: Connection reset by peer)
2019-12-18 10:44:27	apullin	Back to the undefined malloc and free ... which is weird becasue I thought gcc compulsively linked to libc always ... https://pastebin.com/ncQhHzZm
2019-12-18 10:46:23	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 10:47:29	-->	aLeSD (~aLeSD@91.126.37.106) has joined ##rust
2019-12-18 10:49:42	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined ##rust
2019-12-18 10:50:38	cart_man	j`ey: haha ok thanks.
2019-12-18 10:50:59	<--	AbedB__ (~AbedBhuty@bzq-79-182-81-145.red.bezeqint.net) has quit (Ping timeout: 265 seconds)
2019-12-18 10:51:58	<--	OmniMancer (~Paul@222-154-99-133-fibre.sparkbb.co.nz) has quit (Quit: Leaving.)
2019-12-18 10:52:23	cart_man	ANother thing though. Is it possible to return multiple elements but the variables returned to some are already instantiated and others instantiated in the process?  ill make an example -> https://hastebin.com/jiyuzuvuve.cs
2019-12-18 10:52:54	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 10:53:17	j`ey	no
2019-12-18 10:54:20	jbg	apullin: there's `-nodefaultlibs` on that gcc command line
2019-12-18 10:55:49	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 10:57:21	apullin	jbg: oh ... huh ... that does not appear anywhere in the build.rs or .cargo/config
2019-12-18 10:58:14	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:01:31	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 11:01:50	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:02:28	-->	nova99 (~thelounge@167.71.49.78) has joined ##rust
2019-12-18 11:03:59	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 11:04:36	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 268 seconds)
2019-12-18 11:04:46	jbg	i imagine it's a default for embedded targets
2019-12-18 11:04:59	jbg	or possibly a default when doing no_std
2019-12-18 11:06:33	nova99	Hello, I wish to learn systems programming in rust but I don't know where to start
2019-12-18 11:06:51	nova99	Should I start with C/C++ first?
2019-12-18 11:07:44	jbg	nova99: start with the rust book
2019-12-18 11:07:56	cart_man	nova99: ^^
2019-12-18 11:09:08	<--	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has quit (Ping timeout: 248 seconds)
2019-12-18 11:09:56	<--	apullin (4c673b09@c-76-103-59-9.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2019-12-18 11:10:08	nova99	I don't really mean learning the syntax or learning programming itself, but rather creating something.
2019-12-18 11:10:14	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:10:20	nova99	I suppose I could try following the projects at the end of the book.
2019-12-18 11:10:56	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-12-18 11:11:10	jbg	if you already know what you want to create, just set about creating it. if you need inspiration for something to create, the projects seem like a good place to start
2019-12-18 11:11:58	-->	fandbot (~fandbot@78.29.161.115) has joined ##rust
2019-12-18 11:13:14	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 11:13:20	nova99	"inspiration for something to create" this mostly
2019-12-18 11:13:45	nova99	I was going to write a simple stack for now
2019-12-18 11:13:58	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:15:31	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 11:16:19	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:16:24	jbg	if you want to do some *really* low-level stuff, the "building an OS in Rust" series is amazing, let me find the link
2019-12-18 11:16:35	jbg	https://os.phil-opp.com/
2019-12-18 11:16:59	--	M-ou-se_ is now known as M-ou-se
2019-12-18 11:19:16	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 11:20:38	-->	redeemed (~rd@92.87.113.18) has joined ##rust
2019-12-18 11:20:51	-->	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has joined ##rust
2019-12-18 11:23:44	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:25:22	-->	metnel (~binyamin@212.29.206.113) has joined ##rust
2019-12-18 11:26:45	<--	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has quit (Quit: quit)
2019-12-18 11:26:48	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
2019-12-18 11:27:25	-->	teratorn (~teratorn@2001:19f0:6401:11da:5400:2ff:fe6a:5a5) has joined ##rust
2019-12-18 11:28:04	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:28:20	<--	hello_kitty (18235186@24.35.81.134) has quit (Remote host closed the connection)
2019-12-18 11:31:00	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 11:31:10	-->	fsasm (~fsasm@62.178.93.7) has joined ##rust
2019-12-18 11:31:40	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:33:09	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 11:35:04	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:36:52	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 248 seconds)
2019-12-18 11:37:52	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 11:38:13	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-12-18 11:39:06	-->	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has joined ##rust
2019-12-18 11:40:26	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:40:48	-->	dn2k (~er@unaffiliated/dn2k) has joined ##rust
2019-12-18 11:43:16	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 11:44:03	IaMnEwHeRe	Hi there, once again a question, -.-' sort of feel bad about this. This is what I want to do https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ba82c9743b22ced4afcd928be926c6e0 but I cannot share std::process:Command even though I am using std::sync::{Arc,Mutex} which is what they are eventually ment for, what am I doing wrong?
2019-12-18 11:45:49	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:47:42	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-12-18 11:48:37	azul	I'm still stuck trying to call poll() on a future: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cecda281d3eb24e1527e61c3675e7244
2019-12-18 11:48:57	azul	I wrapped it in a Box::pin when creating the struct it's in.
2019-12-18 11:48:58	Tech49	jbg, thanks for the link. I'll have a look at that too since I want to make something too
2019-12-18 11:48:59	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 11:49:21	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:49:45	Aorimn	IaMnEwHeRe, https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=aa18ec8c5ce032122a81a77f05aca756
2019-12-18 11:49:45	azul	then i call .as_mut().poll() on it... resulting in no method named `poll` found for type `&mut (dyn core::future::future::Future<Output = std::result::Result<(), ()>> + std::marker::Unpin + 'static)` in the current scope
2019-12-18 11:50:44	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 11:51:53	IaMnEwHeRe	Aorimn, ok, but now I am confused, a clone is a harder copy(or am I wrong), and copy was not implemented, why is clone supported then. Guess I will have to read up on the distinction, thans Aorimn
2019-12-18 11:53:00	<--	minsec (~shijiafen@104.192.108.9) has quit (Ping timeout: 246 seconds)
2019-12-18 11:53:44	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 11:54:54	Twey	In `syn` — how do I parse multiple things in a row from a `TokenStream`?  I don't see any kind of combinators for the parsers, and `parse` eats the whole input and doesn't give me any information back about where it got to
2019-12-18 11:56:18	IaMnEwHeRe	azul, do you really need the freedom of dyn? otherwise I would imlement it for a particular set of types only instead of traits
2019-12-18 11:56:33	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 245 seconds)
2019-12-18 11:57:26	<--	narispo (~narispo@2a01:e35:2fbc:8b90:e940:4e:52ae:1346) has quit (Ping timeout: 252 seconds)
2019-12-18 11:57:44	azul	IaMnEwHeRe: I tried to use Forward instead of Future but my impression was that did not make it any easier.
2019-12-18 11:57:55	azul	Might be mistaken though. I'll give it another go.
2019-12-18 11:58:02	jbg	azul: AsMut::as_mut() just returns &mut self
2019-12-18 11:58:12	jbg	but the receiver for poll() is Pin<&mut Self>
2019-12-18 11:58:12	<--	jello_pudding (~jello_pud@2601:600:9f80:7780::6a2a) has quit (Ping timeout: 248 seconds)
2019-12-18 11:58:26	-->	Wojciech_K (~user@81-18-220-16.static.chello.pl) has joined ##rust
2019-12-18 11:58:36	<--	sudoforge (~sudoforge@cpepool9bcmts2-177.sanbrunocable.com) has quit (Ping timeout: 246 seconds)
2019-12-18 11:58:53	jbg	i suggested the best way to do what you need earlier
2019-12-18 11:58:54	azul	jbg, so i still need to wrap it in pin_mut! ?
2019-12-18 11:59:00	nova99	jbg: I plan to do that one as well. Meanwhile, I just made a simple integer stack and I'm glad I did.
2019-12-18 11:59:11	-->	jello_pudding (~jello_pud@c-73-239-221-93.hsd1.wa.comcast.net) has joined ##rust
2019-12-18 11:59:41	jbg	you should store it as a Pin<Box<F>> and then call .as_mut() on that
2019-12-18 11:59:50	azul	jbg: I tried to follow your suggestion...
2019-12-18 12:00:19	azul	Box::pin in lines 29 and 30 should be equivalent to Pin<Box<F>>, no?
2019-12-18 12:01:20	azul	I think I just don't get the types in the impl Stream right.
2019-12-18 12:01:40	jbg	where F: Future<....>, forget about AsMut
2019-12-18 12:01:56	jbg	and in the struct, forward: Pin<Box<F>>
2019-12-18 12:02:09	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:02:22	azul	ah...
2019-12-18 12:03:35	IaMnEwHeRe	Aorimn, so reading up on Clone() and Copy(), one of the main differences is that Copy() is implicit and Clone() is explicit, and the borrow-checker is only concerned with the memory-behind it, not the resource identified by it? meaning, I can clone as often as I want as long as the clones clean up after themselfs?
2019-12-18 12:03:58	-->	narispo (~narispo@37.165.11.236) has joined ##rust
2019-12-18 12:04:15	<--	narispo (~narispo@37.165.11.236) has quit (Read error: Connection reset by peer)
2019-12-18 12:04:28	-->	narispo (~narispo@2a01:e35:2fbc:8b90:e940:4e:52ae:1346) has joined ##rust
2019-12-18 12:04:31	IaMnEwHeRe	and since they represent their own state, they worn on the same resource, but are usually sideeffect-free meaning I execute a command adn the clone executes a the same command and all is fine, unless of course the FS is altered or s.th. like that
2019-12-18 12:04:32	-->	m0rr1gan1 (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:04:58	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:06:53	<--	nova99 (~thelounge@167.71.49.78) has left ##rust ("The Lounge - https://thelounge.chat")
2019-12-18 12:07:16	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 12:08:57	-->	m0rr1gan (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:10:13	-->	ClaymorePT (~Claymore@188.251.245.88) has joined ##rust
2019-12-18 12:10:23	Twey	IaMnEwHeRe: Copy is a subtrait of Clone: Clone says you can make a complete copy of the thing, and Copy says that you can make a complete copy of the thing a) just by copying its bits and b) cheaply enough that it's okay to do it automatically
2019-12-18 12:11:16	Twey	IaMnEwHeRe: The borrow checker doesn't have much to do with this, except that things that are Copy will be automatically copied where the value would otherwise be moved (i.e. the value doesn't go out of scope in the place it was ‘moved’ from)
2019-12-18 12:11:19	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:11:44	<--	m0rr1gan1 (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 252 seconds)
2019-12-18 12:13:56	<--	m0rr1gan (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 252 seconds)
2019-12-18 12:14:20	<--	fandbot (~fandbot@78.29.161.115) has quit (Quit: ZZZzzz…)
2019-12-18 12:14:34	Aorimn	IaMnEwHeRe, in case of Arc, clone just add a "reference" to your Command and you can use it from the spawned thread and the main thread
2019-12-18 12:16:44	IaMnEwHeRe	ok, then I have to say that the naming is a bit warped(?), I would expect that Clone() conducts a deep copy while copy does s.th. less deep, never thought that Clone() is actually handling references, but that beeing said: lots of things are different in Rust but that is a good thing,
2019-12-18 12:16:48	IaMnEwHeRe	lots more reading to do.
2019-12-18 12:17:06	IaMnEwHeRe	thanks again for the information and clarification and help, gtg they need the space I am on
2019-12-18 12:17:09	IaMnEwHeRe	cheers
2019-12-18 12:17:23	<--	IaMnEwHeRe (IaMnEwHeRe@gateway/vpn/nordvpn/iamnewhere) has quit (Quit: WeeChat 2.7)
2019-12-18 12:17:39	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:18:19	<--	jinakola (jinakola@evo.paivola.fi) has quit (Ping timeout: 252 seconds)
2019-12-18 12:18:33	<--	Yaniel (yaniel@unaffiliated/yaniel) has quit (Ping timeout: 246 seconds)
2019-12-18 12:20:41	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:20:55	-->	fandbot (~fandbot@78.29.161.115) has joined ##rust
2019-12-18 12:24:59	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:27:58	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:30:41	<--	fandbot (~fandbot@78.29.161.115) has quit (Quit: ZZZzzz…)
2019-12-18 12:33:24	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:35:48	-->	m0rr1gan1 (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:36:01	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:38:09	-->	m0rr1gan (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:38:33	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-12-18 12:38:44	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 248 seconds)
2019-12-18 12:41:11	<--	m0rr1gan1 (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 265 seconds)
2019-12-18 12:41:43	-->	mrz1 (~localhost@p57BBDFD4.dip0.t-ipconnect.de) has joined ##rust
2019-12-18 12:44:29	-->	m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:46:53	-->	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:47:31	<--	m0rr1gan (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:49:16	-->	m0rr1gan1 (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:49:24	<--	mike32 (~mike@46.191.65.35) has quit (Quit: Leaving)
2019-12-18 12:49:49	<--	m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 258 seconds)
2019-12-18 12:49:54	zipper	Trying to get around issues with ownership here https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1c300e2cdab67431d61a4cf1ab0df332
2019-12-18 12:50:19	zipper	Anyone know how I can write my types so that I don't run into the issue on L85?
2019-12-18 12:51:21	j`ey	since the id is just u64, you could make a copy like let a_id = a.id;
2019-12-18 12:51:39	-->	m0rr1gan (~m0rr1gan@141.193.239.165) has joined ##rust
2019-12-18 12:51:48	<--	_m0rr1gan_ (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 246 seconds)
2019-12-18 12:51:54	j`ey	or you could clone() a and b
2019-12-18 12:53:55	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0:b96d:84ce:9f0e:2e) has quit (Quit: WeeChat 2.7)
2019-12-18 12:54:40	<--	jello_pudding (~jello_pud@c-73-239-221-93.hsd1.wa.comcast.net) has quit (Quit: Quit)
2019-12-18 12:54:59	<--	m0rr1gan1 (~m0rr1gan@141.193.239.165) has quit (Ping timeout: 268 seconds)
