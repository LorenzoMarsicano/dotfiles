2019-09-13 09:06:12	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-09-13 09:06:12	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-09-13 09:06:12	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-09-13 09:06:12	--	Channel ##rust: 512 nicks (2 ops, 0 voices, 510 normals)
2019-09-13 09:06:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-09-13 09:09:11	-->	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has joined ##rust
2019-09-13 09:12:56	<--	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has quit (Remote host closed the connection)
2019-09-13 09:16:32	-->	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has joined ##rust
2019-09-13 09:22:09	<--	wmealing (~wmealing@124.149.193.135) has quit (Quit: wmealing)
2019-09-13 09:24:01	-->	tostr (~tostr@unaffiliated/tostr) has joined ##rust
2019-09-13 09:25:52	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-09-13 09:29:32	-->	xvilka (~xvilka@unaffiliated/xvilka) has joined ##rust
2019-09-13 09:30:21	xvilka	if someone wants to join translating all of Tectonic (modern fork of TeX/LaTeX engine) from C to Rust - see https://github.com/tectonic-typesetting/tectonic/issues/459
2019-09-13 09:52:50	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 09:54:54	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 09:55:31	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 09:57:04	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 09:59:31	-->	baali (~baali@117.214.177.6) has joined ##rust
2019-09-13 10:00:40	<--	nerosnm (~alrakis@cpc1-bath8-2-0-cust148.18-1.cable.virginm.net) has quit (Ping timeout: 265 seconds)
2019-09-13 10:33:30	-->	triptec (~triptec@h88-129-43-171.cust.a3fiber.se) has joined ##rust
2019-09-13 10:40:54	-->	royal_screwup21 (5661e695@gateway/web/cgi-irc/kiwiirc.com/ip.86.97.230.149) has joined ##rust
2019-09-13 10:44:33	<--	panicbit (~panicbit@p57ADE381.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-09-13 10:44:56	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-09-13 10:45:40	-->	panicbit (~panicbit@p57ADE9A9.dip0.t-ipconnect.de) has joined ##rust
2019-09-13 10:48:29	-->	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has joined ##rust
2019-09-13 10:50:05	-->	vn971 (~quassel@2a02:7aa0:1619::bac5:9483) has joined ##rust
2019-09-13 10:52:41	vn971	Hi. Suppose I want to call a function that returns Result. If it will return Err, I want to add some additional information to the stack trace, but still error out (either panic or return an enriched Err up to the caller).
2019-09-13 10:52:44	vn971	How should I do that?
2019-09-13 10:53:21	vn971	I know I can, for example, use .unwrap_or_else(|err| panic!("... reason: {}", err));
2019-09-13 10:53:35	vn971	but that kinda transforms the err to a string. Is that OK?
2019-09-13 10:53:45	vn971	(I feel that it's not.)
2019-09-13 10:54:50	j`ey	well that panics, so you dont really pass a string anywhere
2019-09-13 10:54:52	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 245 seconds)
2019-09-13 10:55:08	yrp	are you thinkign somethings going to catch the panic?
2019-09-13 10:55:19	vn971	j`ey: ok, fair. What if I'd want to return a new Result though?
2019-09-13 10:55:31	vn971	yrp: well the panic hook maybe?
2019-09-13 10:56:07	j`ey	vn971: you can make your own struct MyError that wraps the error and includes extra info?
2019-09-13 10:56:52	vn971	j`ey: how do I propermy lake it "include extra info", how does it work? Is it implementing Display?
2019-09-13 10:57:06	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-09-13 10:57:37	vn971	on the JVM, you have Exception-s, which can have additional info, but also optionally point to another Exception as their "reason".
2019-09-13 10:58:28	vn971	* sorry, "properly make it"
2019-09-13 10:58:58	j`ey	vn971: yes Display, there's also source() which can return another error
2019-09-13 10:59:09	j`ey	https://doc.rust-lang.org/std/error/trait.Error.html#method.source
2019-09-13 10:59:09	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-09-13 11:00:39	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-09-13 11:02:36	<--	bitwinery (~bruno@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-09-13 11:04:29	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:09:06	-->	sysKin (~syskin@61-245-149-216.3df595.adl.nbn.aussiebb.net) has joined ##rust
2019-09-13 11:12:55	-->	abhinits2046 (uid373731@gateway/web/irccloud.com/x-iaxmgsbinpjodykk) has joined ##rust
2019-09-13 11:13:23	<--	abhinits2046 (uid373731@gateway/web/irccloud.com/x-iaxmgsbinpjodykk) has left ##rust
2019-09-13 11:16:34	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 11:17:58	<--	frostschutz (~frostschu@55d4bb3e.access.ecotel.net) has quit (Remote host closed the connection)
2019-09-13 11:18:53	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:20:29	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 11:24:55	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2019-09-13 11:24:56	-->	ellcs (~mantel@193.174.12.196) has joined ##rust
2019-09-13 11:27:19	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-09-13 11:27:42	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 11:30:21	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 246 seconds)
2019-09-13 11:36:25	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 11:45:00	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-09-13 11:51:21	<--	PeterRabbit (~peter@2600:6c64:6180:86:7547:7d6e:8024:e963) has quit (Read error: Connection reset by peer)
2019-09-13 11:51:42	-->	PeterRabbit (~peter@2600:6c64:6180:86:7547:7d6e:8024:e963) has joined ##rust
2019-09-13 11:56:52	-->	Ichorio (~Ichorio@2001:16b8:57ca:9600:8541:4cfa:2933:d307) has joined ##rust
2019-09-13 11:57:26	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-09-13 11:59:49	voker57	vn971: consider using this suggested scheme https://docs.rs/failure/0.1.5/failure/
2019-09-13 12:00:51	<--	BlackDex (~blackdex@ori.vyus.nl) has quit (Quit: ByeBye)
2019-09-13 12:09:36	Faux	"error: proc-macro derive panicked" ruh roh!
2019-09-13 12:11:48	Kinnison	ruhroh indeed
2019-09-13 12:13:01	<--	bpsecret (~bpsecret@unaffiliated/bpsecret) has quit (Ping timeout: 276 seconds)
2019-09-13 12:18:29	mstruebing	Is it recommended to `use` everything you need or is it more recommended to use the full qualifier i.e. `std::env::func()` instead of `use std::env` and `env::func()`?
2019-09-13 12:19:00	-->	bpsecret (~bpsecret@unaffiliated/bpsecret) has joined ##rust
2019-09-13 12:19:05	Kinnison	If I'm using it once in the entire file, I will use the full path
2019-09-13 12:19:15	Kinnison	If I'm using a bunch of a module, I'll use the module and do the latter
2019-09-13 12:19:20	Faux	The convention appears to be to `use` only if you are .. using the thing multiple times. This sucked in rust2015, so older code uses things everywhere in horrible ways.
2019-09-13 12:19:36	Kinnison	if I only want one thing out of the module and am using it a lot, I use just the bit I want
2019-09-13 12:20:35	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Ping timeout: 246 seconds)
2019-09-13 12:26:05	ilmari	if it's a really long path, I'll `use` it even if I'm only using it once, especially in a function signature that would otherwise fit on one line
2019-09-13 12:26:22	ilmari	current case in point: `aws_lambda_events::event::sns::SnsEvent`
2019-09-13 12:26:34	-->	jammm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 12:27:07	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 245 seconds)
2019-09-13 12:29:03	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 12:30:02	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-09-13 12:30:51	M-ou-se	depending on how generic the name is, i sometimes also 'use' things inside a function, instead of at file scope
2019-09-13 12:32:53	-->	Tichodroma (~lutz@fsf/member/Tichodroma) has joined ##rust
2019-09-13 12:35:45	-->	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has joined ##rust
2019-09-13 12:36:16	-->	BlackDex (~blackdex@ori.vyus.nl) has joined ##rust
2019-09-13 12:38:05	nepugia	Hello, I am having problems with the prebuild nightly-x86_64-unknown-linux-musl on alpine linux (which is musl too), which is that i cannot compile some programms dou to this toolchain not supporting dynamic linking, what other options do i have?
2019-09-13 12:38:38	nepugia	I did not find any concrete workarounds on the web (only partial fixes which i don't really know how i would use)
2019-09-13 12:39:05	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 12:39:10	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 12:41:37	<--	jammm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-09-13 12:44:58	oherrala	nepugia: the workaround I found is not to use musl binaries to compile rust
2019-09-13 12:45:42	nepugia	I have not compiled it myself, and i don't have glibc on my system either, setting up a chroot seams like a pretty expensive solution
2019-09-13 12:47:35	oherrala	nepugia: I mean you can't really build anything with musl version of Rust. procedural macros don't work so many crates are out.
2019-09-13 12:48:15	nepugia	hmm, i hope that will be fixed soon(tm) then, is there a prebuild statically linked glibc rust toolchain maybe?
2019-09-13 12:49:32	oherrala	nepugia: AFAIK you can't have statically linked glibc
2019-09-13 12:49:37	oherrala	that's why musl is used :)
2019-09-13 12:50:17	nepugia	well, coinstalling glibc next to musl is something i would rather avoid :)
2019-09-13 12:50:22	nepugia	i suppose a chroot it is then
2019-09-13 12:51:32	<--	tostr (~tostr@unaffiliated/tostr) has quit (Ping timeout: 245 seconds)
2019-09-13 12:52:50	oherrala	I would love to have someone tell me I'm wrong because I'd like to convert our build infrastructure to Alpine Linux
2019-09-13 12:53:37	Faux	Proc macros work, don't they? I'm pretty sure I'm using that somewhere.
2019-09-13 12:54:13	oherrala	Faux: not when using musl linked rust(c)
2019-09-13 12:56:17	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 245 seconds)
2019-09-13 12:57:39	nepugia	Well, not everything doesn't work, just wanted to get started with piston and hit my head severall times on crates using the features thingy, thus i used nightly, but with the stable i was able to get for instance alacritty on my system fine
2019-09-13 12:57:55	nepugia	though i dont know whether the stable version has any alpine linux specific patches i am unaware off
2019-09-13 12:58:22	-->	user9 (984d0e22@leoseb.u-ga.fr) has joined ##rust
2019-09-13 13:01:40	oherrala	This is the problem I'm facing: cannot produce proc-macro for `failure_derive v0.1.5` as the target `x86_64-unknown-linux-musl` does not support these crate types
2019-09-13 13:01:59	-->	OmniMancer (~Paul@101.100.137.239) has joined ##rust
2019-09-13 13:04:00	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 13:04:45	-->	ytain (~ghfg@2607:f2c0:92f1:f300:ed6b:80ab:697e:76e0) has joined ##rust
2019-09-13 13:05:27	j`ey	and that's because of dylibs, right?
2019-09-13 13:06:36	Faux	Direct use of failure works, for the target (building from normal amd64): https://paste.debian.net/1100534/
2019-09-13 13:06:52	Faux	..which is what I'm doing elsewhere and seemingly not having any problems.
2019-09-13 13:07:02	oherrala	j`ey: I think so
2019-09-13 13:07:19	oherrala	Faux: that's different thing
2019-09-13 13:07:33	vn971	j`ey: voker57: thanks! Will look into it a bit later (now distracted with other work).
2019-09-13 13:07:34	j`ey	Faux: your host is probably glibc?
2019-09-13 13:07:46	Faux	Yeah.
2019-09-13 13:07:58	oherrala	Faux; /opt/cargo/bin/rustc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=2208478b28b34d9fe2750b7939157da417d8918b, with debug_info, not stripped
2019-09-13 13:08:09	j`ey	Faux: so the proc_macro is compiled for glibc
2019-09-13 13:08:18	j`ey	when the host is musl, it doesnt work
2019-09-13 13:08:31	Faux	Ew. :)
2019-09-13 13:09:50	nepugia	guess i will get void linux in a chroot
2019-09-13 13:14:02	oherrala	nepugia: why not docker?
2019-09-13 13:15:05	nepugia	docker is not a linux?
2019-09-13 13:17:59	oherrala	nepugia: https://en.wikipedia.org/wiki/Docker_%28software%29
2019-09-13 13:18:10	nepugia	I know what docker is, docker is not a linux
2019-09-13 13:18:51	oherrala	what?
2019-09-13 13:19:09	nepugia	It is a tool to spin up linuxes using linux namespaces, but it isnt a linux in and of itself
2019-09-13 13:19:10	avu	nepugia: oherrala meant 'docker instead of chroot', not 'docker instead of void linux'
2019-09-13 13:19:14	nepugia	the same way Xen isnt linux
2019-09-13 13:19:22	nepugia	avu, oh
2019-09-13 13:19:27	oherrala	:D
2019-09-13 13:19:30	nepugia	well, in that case, docker is overkill
2019-09-13 13:19:32	nepugia	dont need it
2019-09-13 13:20:01	oherrala	nepugia: dunno about overkill, but the easy way: docker run rust.. :)
2019-09-13 13:20:41	nepugia	i just need a different namespace to run rust in, having to deal with docker is more complexity than i need :)
2019-09-13 13:20:54	vn971	oherrala: docker also makes your system super-insecure if you allow your user to access the docker daemon.
2019-09-13 13:23:03	oherrala	vn971: can you explain?
2019-09-13 13:25:59	vn971	oherrala: if your normal user has access, then it means that any programs running on your behalf of your user have access to the daemon. Having access to the daemon is the same as having root on the host system. You can just run docker with mounted /etc/passwd and read passwords, or mount hard disks inside, etc etc.
2019-09-13 13:26:17	vn971	* if your normal user has access to docker,..
2019-09-13 13:27:02	avu	if you can read passwords from /etc/passwd, you managed to get docker running on a UNIX from the 70s or 80s :p
2019-09-13 13:27:38	-->	tostr (~tostr@unaffiliated/tostr) has joined ##rust
2019-09-13 13:28:19	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Quit: Leaving)
2019-09-13 13:28:44	nepugia	funnily enough alpine linux does have passwords in /etc/passwd
2019-09-13 13:28:48	nepugia	for some reason... :)
2019-09-13 13:29:06	nepugia	or well, for one of my users it seams
2019-09-13 13:29:25	nepugia	(well the hash i mean..)
2019-09-13 13:29:26	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 13:29:36	oherrala	vn971: ok, so how is chroot more secure?
2019-09-13 13:29:51	nepugia	vn971, mount hard disks heh... i wonder why linux doesnt have something like freebsd securelevels
2019-09-13 13:31:35	vn971	avu: oh right, it's not that simple. I forgot the exact details then, but there's a ton of ways to get root on host if you have access to docker daemon. Docker itself kinda says it, unwillingly, in the part that describes giving access to the daemon.
2019-09-13 13:32:43	vn971	it was a bit more honest on that and there was a whole section describing the impact and why it can't be made secure, but then they decided to shrink/remove this part and there's only some small notice. Last time I checked at least. But the notice is still there.
2019-09-13 13:33:49	vn971	oherrala: chroot still requires you to use `root`. It's just being made explicit. You know that anybody who runs chroots can also damage your system, so it should only be you.
2019-09-13 13:34:14	vn971	(with docker, some people don't understand that having access to docker daemon == having root.)
2019-09-13 13:35:51	vn971	nepugia: linux has namespaces still, which can be unshared. E.g. bubblewrap, or just `unshare` if you don't want to touch mount points.
2019-09-13 13:35:53	oherrala	vn971: So Docker is super insecure because some people don't understand it?
2019-09-13 13:36:25	oherrala	vn971: probably the same people who use sudo?
2019-09-13 13:36:29	vn971	oherrala: whether docker is secure or not I don't know in detail, but _having access to docker daemon_ is the same as having root on your system.
2019-09-13 13:36:56	nepugia	vn971, i honestly dont know how namespaces would protect you against someone mounting disk devices
2019-09-13 13:37:06	lupine	best not to install docker, really
2019-09-13 13:37:17	vn971	oherrala: comparing to sudo, docker is then a password-less sudo (in a sense that it can easily be abused to raise priveleges, in an automated way).
2019-09-13 13:37:20	nepugia	best to install docker when it fits your usecase
2019-09-13 13:37:27	lupine	its only purpose is to make capitalists happy
2019-09-13 13:37:34	Faux	You can run container-like things, with safe mounting, inside user namespaces, if you're up for that kind of thing.
2019-09-13 13:38:34	Faux	https://paste.debian.net/1100536/ this doesn't need root, and is enabled by default in e.g. ubuntu's kernels.
2019-09-13 13:39:09	nepugia	namespaces are nice indeed
2019-09-13 13:39:58	vorner	Unprivileged dockers don't have the physical devices visible in them, so you can't mount them. Also, you can run the docker daemon with user privileges.
2019-09-13 13:40:07	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 276 seconds)
2019-09-13 13:40:33	vorner	But it has some (severe) limitations, so the defaults are to run it as a very privileged process.
2019-09-13 13:42:11	-->	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has joined ##rust
2019-09-13 13:42:15	nepugia	ugh, getting a no such file or directory when running cargo in my chroot, would be super nice if it actually said /what/ it tries to run
2019-09-13 13:42:26	nepugia	vorner, mknode?
2019-09-13 13:42:29	j`ey	does -v help?
2019-09-13 13:42:37	nepugia	s/e//
2019-09-13 13:42:41	<--	goncalor (~goncalor@unaffiliated/goncalor) has quit (Read error: Connection reset by peer)
2019-09-13 13:42:50	nepugia	j`ey, it does not :/
2019-09-13 13:44:37	<--	ki9a (~ki9a@about/csharp/regular/ki9a) has quit (Ping timeout: 245 seconds)
2019-09-13 13:44:40	-->	goncalor (~goncalor@unaffiliated/goncalor) has joined ##rust
2019-09-13 13:47:21	nepugia	huh, the thing it cant execute is... cargo :)
2019-09-13 13:47:34	nepugia	in the .rustup space somewhere... why that doesnt work i dont know
2019-09-13 13:47:53	<--	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has quit (Remote host closed the connection)
2019-09-13 13:47:56	<--	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has quit (Ping timeout: 245 seconds)
2019-09-13 13:48:08	nepugia	ldd on that looks fine :/
2019-09-13 13:49:24	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 13:49:42	-->	happycoder_ (~happycode@14.139.185.114) has joined ##rust
2019-09-13 13:49:53	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 13:50:44	nepugia	hmm, i have /dev/shm and /proc and /sys mounted... did i miss something else linux wants normally?
2019-09-13 13:51:20	vn971	vorner: but if you have access to the docker daemon, what stops you from starting a priveleged container?
2019-09-13 13:52:47	vn971	nepugia: my advise: if you just want to isolate running of e.g. `rust`, take a look at bubblewrap. It's a tool that gives you full control over what's happening, and it's super-easy to get started with.
2019-09-13 13:53:07	nepugia	full control? how would that work?
2019-09-13 13:53:37	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 13:53:49	nepugia	hmm, i dont need a sandbox really
2019-09-13 13:53:52	vn971	nepugia: e.g. the simplest example:  `bwrap --unshare-all --ro-bind / / --tmpfs ~ bash`.  This will unshare all namespaces, bound `/` as read-only, hide your `~` completely and put you in a bash shell inside.
2019-09-13 13:53:59	vorner	vn971, If the docker daemon already starts with user privileges, it is unable to start privileged containers.
2019-09-13 13:54:16	-->	jamm (~jamm@unaffiliated/jamm) has joined ##rust
2019-09-13 13:54:20	<--	happycoder (~happycode@14.139.185.114) has quit (Ping timeout: 268 seconds)
2019-09-13 13:54:23	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 13:54:35	nepugia	vn971, what? how from that command is it implied that you want to hide ~?
2019-09-13 13:54:44	vorner	https://docs.docker.com/engine/security/userns-remap/
2019-09-13 13:54:50	vn971	vorner: so you are saying you have experience in running docker daemon from a normal user, do I hear you correctly?
2019-09-13 13:55:07	nepugia	oh, you mount a tmpfs over it
2019-09-13 13:55:09	vn971	again, *docker* *daemon* -- as user.
2019-09-13 13:55:12	nepugia	but what if i just unmount it?
2019-09-13 13:55:39	vn971	nepugia: inside the jail, there are no suid programs, no way to invoke root, no `sudo` that would work.
2019-09-13 13:56:06	nepugia	how so? namespaces have root processes too...
2019-09-13 13:56:18	nepugia	just that root means somethign slightly different
2019-09-13 13:56:43	vn971	nepugia: I mean, if you run bubblewrap from non-root, then you will remain non-root.
2019-09-13 13:56:59	vn971	vorner: in the last link you're clearly confusing docker daemon with programs that are running inside docker.
2019-09-13 13:57:01	vorner	vn971, I think it starts with root itself. But it is not willing to start privileged containers and remaps all users (even 0/root) in the container onto UIDs that are non-root.
2019-09-13 13:57:13	vn971	vorner: blease educate yourself on the difference, TBH...
2019-09-13 13:58:02	nepugia	the programm seams to be setuid(0) so non-root isnt right i suppose
2019-09-13 13:58:56	nepugia	welp, the entire toolchain doesnt seam to want to work in my void linux chroot
2019-09-13 13:59:12	vn971	nepugia: it provides a limited subset of the so called user namespaces. It's setuid, it configures mount points, does unshares, and then strips off root rights and runs your actual thing without root again.
2019-09-13 14:00:07	nepugia	i dont see why i would need that for my usecase
2019-09-13 14:00:14	vn971	vorner: > But it is not willing to start privileged containers  -- I think this is an incorrect statement. The whole link is about which restricted containers can you run inside docker, not how you start `dockerd`.
2019-09-13 14:00:23	nepugia	the only thing i want to do is confuse processes as to where they shall look for glibc, which works fine with chroot
2019-09-13 14:00:58	vorner	vn971, Sorry, it's been a while since I looked into that thing. I need that crap (docker) in work, so I did do the research years ago and found the least evil way to run it on my system.
2019-09-13 14:01:05	vn971	nepugia: well you could do `bwrap --bind /path/to/chroot / bash`
2019-09-13 14:01:18	nepugia	i could then also just use chroot
2019-09-13 14:02:08	vn971	vorner: yeah, it's actually a pain for many developers.. You kinda need to use docker and that's it. That's final. :/
2019-09-13 14:02:08	vn971	What I personally did is then run `qemu` with a dockerd inside, and expose the dockerd port to the host system.
2019-09-13 14:02:31	<--	raeken (~quassel@gate.reality-bytes.com) has quit (Remote host closed the connection)
2019-09-13 14:02:52	nepugia	isnt the entire point of docker to use linux namespaces? running it in a vm kinda defeats the point of lightweight containers
2019-09-13 14:03:29	<--	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has quit (Remote host closed the connection)
2019-09-13 14:03:30	vn971	vorner: that requires a lot of work though. Installing another OS inside qemu, configuring docker inside the OS, expose the port through qemu, and finally set local environment variable DOCKER_HOST='tcp://127.0.0.1:2375'
2019-09-13 14:03:40	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-09-13 14:04:10	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-09-13 14:04:18	vn971	and if you need to access the containers created inside qemu, you need to pass all ports from inside qemu to host as well..
2019-09-13 14:04:20	delYsid	Faux: what does "application/xml".parse() do in your sonos.rs PR?  I sort of fail to understand why this string would need "parsing", and what the call actually does.
2019-09-13 14:04:23	vorner	And then it runs much slower and such… which is a PITA if develop for „bigger embedded“ (routers and such) and sometime needs to compile the whole damn system, or bigger C++ project.
2019-09-13 14:04:47	<--	airwind (~belovent@cr-01.anx09.lju.si.anexia-it.com) has quit (Quit: airwind)
2019-09-13 14:05:47	vn971	vorner: yes, of course. Then you lose all the speed that you could get from running docker natively, as if it'd be the case if dockerd could be made really secure. Basically you start to be like a MacOS or Windows user in that regard.
2019-09-13 14:06:27	nepugia	execve("./rustc", ["./rustc"], 0x7ffbffffbd10 /* 12 vars */) = -1 ENOENT (No such file or directory)
2019-09-13 14:06:40	nepugia	ugh, this is too annoying
2019-09-13 14:06:58	nepugia	maybe ill just wait till the toolchain is fixed to properly support musl...
2019-09-13 14:07:02	vn971	it's really a pity that dockerd has no option like `dockerd --restrict-priveleged`, which would forbid unrestricted mode, fordib mounting stuff from HOST, etc. Only run some public bullshit, allow copying if the invoked user itself has access to the files, etc.
2019-09-13 14:07:06	-->	raeken (~quassel@gate.reality-bytes.com) has joined ##rust
2019-09-13 14:07:57	vn971	nepugia: musl works just fine for a lot of people (including me). How do you run it?
2019-09-13 14:08:08	vorner	Anyway, I'm pretty sure the unprivileged docker container is unable to do mknod or so and root inside (UID=0) is not really privileged with that setup. It's probably not 100% secure, but stuff like mounting things in use the privileges of the outside user, so if you want to mount something in, you actually have to make it something like word-readable.
2019-09-13 14:08:30	nepugia	vn971, i just run alpine linux
2019-09-13 14:09:15	nepugia	there the musl rust toolchain does not support dynamic linking which basically breaks all compiles i am interested in
2019-09-13 14:09:26	nepugia	(no way to tell it to link those things statically either)
2019-09-13 14:10:18	avu	vn971: you're absolutely right, I was just nitpicking, not disagreeing with you in general, sorry
2019-09-13 14:10:42	vn971	vorner: luckily docker is still honest about the security properties, so read this: https://docs.docker.com/engine/reference/commandline/dockerd/
2019-09-13 14:10:42	vn971	> Warning: Changing the default docker daemon binding to a TCP port or Unix docker user group will increase your security risks by allowing non-root users to gain root access on the host. Make sure you control access to docker. If you are binding to a TCP port, anyone with access to that port has full Docker access; so it is not advisable on an open network.
2019-09-13 14:11:48	vn971	* relatively honest, as this crucial thing is only written somewhere in the middle, so many people do not know it.
2019-09-13 14:13:21	nepugia	well, i give up on this... gues i wont be using rust then for now :/
2019-09-13 14:13:52	vorner	Yes, but that note assumes that you also run without the user namespace mapping option. Then you can start a docker with `--privileged` and have a root. If you start docker with the user-ns and try that, you get „Error response from daemon: privileged mode is incompatible with user namespaces.“ and it won't run.
2019-09-13 14:14:10	vorner	>  Potentially the most important security improvement is that, by default, container processes running as the root user will have expected administrative privilege (with some restrictions) inside the container but will effectively be mapped to an unprivileged uid on the host.
2019-09-13 14:15:42	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 245 seconds)
2019-09-13 14:16:35	Faux	delYsid: A header isn't necessarily a valid string, and they have chosen to call the conversion from a string into a HeaderThing a "parse".
2019-09-13 14:16:46	<--	baali (~baali@117.214.177.6) has quit (Ping timeout: 246 seconds)
2019-09-13 14:21:42	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-09-13 14:24:13	-->	Nahual (~Nahual@unaffiliated/nahual) has joined ##rust
2019-09-13 14:32:34	<--	happycoder_ (~happycode@14.139.185.114) has quit (Ping timeout: 268 seconds)
2019-09-13 14:33:14	vn971	vorner: you're again saying things about "--priveleged" _container_. Dockerd cannot be priveleged or not priveleged. It's the daemon.
2019-09-13 14:33:51	vn971	You cannot run dockerd with user namespace mapping option, or anything of the like.
2019-09-13 14:34:06	<--	fjellfras (~fjellfras@223.229.235.29) has quit (Quit: Leaving)
2019-09-13 14:35:13	vn971	the quoted text and link below are for dockerd and its daemon. As the documentation correctly says, having access to the dockerd TCP port or docker group allows "non-root users to gain root access on the host".
2019-09-13 14:37:29	vorner	No, I'm not saying that. I'm saying that if I run dockerd with the `--user-ns` *parameter*, it itself runs as root, yes, but refuses to start a container not mapped to your user. And the way to gain the root access to the host is by executing a privileged container and mapping the whole system into it or something such. It won't work with dockerd with the userns parameter, it'll refuse to do so.
2019-09-13 14:37:44	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 14:37:46	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-09-13 14:37:46	vorner	Or are you aware of *other* ways to gain root on the host?
2019-09-13 14:37:48	-->	tmager (~Thunderbi@146.115.18.74) has joined ##rust
2019-09-13 14:40:43	vorner	(or, it won't refuse to map it, but the „root“ inside will have the same restrictions to access the system as your user has outside, so it'll be effectively useless to do the mapping)
2019-09-13 14:40:55	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 246 seconds)
2019-09-13 14:41:26	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined ##rust
2019-09-13 14:44:25	vorner	Ah, crap, there's a way through the command line maze to disable this enforcement as a user. That's stupid :-|.
2019-09-13 14:44:44	vn971	vorner: ah, got it, there is a dockerd parameter as well indeed.
2019-09-13 14:45:05	vn971	vorner: I thought so as well, but if you read further, they say it's still enforced.
2019-09-13 14:46:57	<--	Ichorio (~Ichorio@2001:16b8:57ca:9600:8541:4cfa:2933:d307) has quit (Ping timeout: 245 seconds)
2019-09-13 14:47:03	vorner	Just tried, it isn't. I'm running dockerd with the mapping enabled, but `docker run --userns=host --privileged` works :-|. And it even allows me things I wasn't allowed before.
2019-09-13 14:48:17	vn971	ah right, --userns=host means to disable this thing... "Nice".
2019-09-13 14:48:44	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 265 seconds)
2019-09-13 14:49:05	vorner	But adding a parameter „Don't accept userns overrides“ to dockerd should technically be possible…
2019-09-13 14:49:17	vn971	Well, there's a reason why people joke that the letter "s" in docker stands for "security".
2019-09-13 14:49:52	<--	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has quit (Ping timeout: 245 seconds)
2019-09-13 14:52:27	-->	happycoder (~happycode@137.97.182.51) has joined ##rust
2019-09-13 14:54:43	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-09-13 14:59:45	-->	ki9a (~ki9a@about/csharp/regular/ki9a) has joined ##rust
2019-09-13 15:06:01	<--	jamm (~jamm@unaffiliated/jamm) has quit (Read error: Connection reset by peer)
2019-09-13 15:06:20	tjis	how would i run a bit of code only in debug mode?
2019-09-13 15:06:58	<--	happycoder (~happycode@137.97.182.51) has quit (Read error: No route to host)
2019-09-13 15:10:40	<--	lovesegfault (~bemeurer@4.16.192.242) has quit (Ping timeout: 246 seconds)
2019-09-13 15:11:52	-->	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has joined ##rust
2019-09-13 15:20:45	vn971	tjis: would this solve your problem?: https://doc.rust-lang.org/std/macro.cfg.html
2019-09-13 15:21:35	tjis	perhaps. is debug/release mode something I can look up with cfg?
2019-09-13 15:22:33	j`ey	debug_assertions is on for debug
2019-09-13 15:22:55	tjis	neat. that'll work great then. thank you
2019-09-13 15:23:12	<--	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has quit (Ping timeout: 245 seconds)
2019-09-13 15:29:30	-->	mbestavr-rh (mbestavrre@nat/redhat/x-slukdxasyyfiefhe) has joined ##rust
2019-09-13 15:30:12	raeken	https://podman.io/
2019-09-13 15:30:16	-->	scain (~scain@2607:5300:60:233b::1) has joined ##rust
2019-09-13 15:30:21	raeken	"What is Podman? Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode. Simply put: `alias docker=podman`. More details here. "
2019-09-13 15:30:26	-->	scunc (~scunc@183-140.its-is.uni.edu) has joined ##rust
2019-09-13 15:30:44	-->	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has joined ##rust
2019-09-13 15:32:53	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:33:31	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 15:34:52	vn971	raeken: it's only for those who want to enable "user namespaces" on their system though.
2019-09-13 15:36:24	vn971	many people feel it's not secure enough. Though Linux started adding the corresponding flag by default since recently, so maybe it'll eventually be considered more stable by security-oriented folks.
2019-09-13 15:36:32	<--	happycoder (~happycode@2405:204:d209:7db6:b477:ef9c:9bc4:9df8) has quit (Ping timeout: 245 seconds)
2019-09-13 15:37:19	-->	stephaneyfx (~stephaney@192.157.123.229) has joined ##rust
2019-09-13 15:38:40	<--	Proximyst (~Proximyst@116.203.198.234) has quit (Quit: Robbing a bank)
2019-09-13 15:38:55	-->	Proximyst (~Proximyst@116.203.198.234) has joined ##rust
2019-09-13 15:47:01	-->	jenny-m (~jdm-@75.98.19.133) has joined ##rust
2019-09-13 15:47:10	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 15:48:02	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 15:48:20	vn971	raeken: but it looks awesome if you already have userns anyway!
2019-09-13 15:52:43	-->	wmealing (~wmealing@124.149.193.135) has joined ##rust
2019-09-13 16:04:12	-->	npmccallum (npmccallum@nat/redhat/x-dmeigpcjoibniuox) has joined ##rust
2019-09-13 16:04:39	-->	npmccallum_ (npmccallum@nat/redhat/x-eaympaxdkzssviqq) has joined ##rust
2019-09-13 16:04:49	<--	npmccallum (npmccallum@nat/redhat/x-dmeigpcjoibniuox) has quit (Read error: Connection reset by peer)
2019-09-13 16:05:16	<--	npmccallum_ (npmccallum@nat/redhat/x-eaympaxdkzssviqq) has quit (Client Quit)
2019-09-13 16:05:31	-->	npmccallum (npmccallum@nat/redhat/x-jwpayofinzbkhtbb) has joined ##rust
2019-09-13 16:07:51	-->	AbedB (~AbedBhuty@bzq-79-178-21-93.red.bezeqint.net) has joined ##rust
2019-09-13 16:09:09	<--	npmccallum (npmccallum@nat/redhat/x-jwpayofinzbkhtbb) has quit (Client Quit)
2019-09-13 16:09:28	-->	npmccallum (npmccallum@nat/redhat/x-enlzokfuxnwxdyfg) has joined ##rust
2019-09-13 16:12:17	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:12:34	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:16:12	<--	npmccallum (npmccallum@nat/redhat/x-enlzokfuxnwxdyfg) has quit (Remote host closed the connection)
2019-09-13 16:16:12	la_mettrie	function_name(argument_name.struct_name.field_name)
2019-09-13 16:16:18	-->	mindCrime__ (~mindCrime@216.85.170.148) has joined ##rust
2019-09-13 16:16:29	<--	federico1 (~federico1@opensuse/member/Federico-Mena) has quit (Read error: Connection reset by peer)
2019-09-13 16:16:33	la_mettrie	now if this field_name is Option<T> instead of ordinary field, how the syntax goes?
2019-09-13 16:16:52	<--	SpaceManiac (~SpaceMani@2601:200:4400:ec::1006) has quit (Remote host closed the connection)
2019-09-13 16:17:31	-->	SpaceManiac (~SpaceMani@c-67-172-121-111.hsd1.ca.comcast.net) has joined ##rust
2019-09-13 16:17:47	-->	mindCrime_ (~mindCrime@216.85.170.148) has joined ##rust
2019-09-13 16:18:23	Lumpio-	If you want to get the value out of the option and crash if it's not there it's either unwrap() or as_ref().unwrap() if you want a reference to it instead
2019-09-13 16:18:36	-->	cloudhead (~cloudhead@160.230.205.35.bc.googleusercontent.com) has joined ##rust
2019-09-13 16:18:37	Lumpio-	If you want to do something else if the value isn't there, I'd use a match statement to check
2019-09-13 16:18:49	Lumpio-	(expression*)
2019-09-13 16:19:23	j`ey	https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c4ac5268e9bf2746a772b1d7aaf78cfe what's going wrong here?
2019-09-13 16:19:46	Yaniel	if let can sometimes look better than match
2019-09-13 16:19:52	Yaniel	and then there'
2019-09-13 16:20:00	Yaniel	and then there is unwrap_or_else()
2019-09-13 16:20:20	Lumpio-	Yeah if let is actually often nicer for options
2019-09-13 16:21:03	-->	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has joined ##rust
2019-09-13 16:21:32	<--	mindCrime__ (~mindCrime@216.85.170.148) has quit (Ping timeout: 265 seconds)
2019-09-13 16:23:16	j`ey	Ah, it's because Input could be chosen by the caller, but I call it with a Vec
2019-09-13 16:23:19	Lumpio-	j`ey: A caller could plausibly pass in something... yeah
2019-09-13 16:23:23	Lumpio-	Something that is AsRef but not a Vec
2019-09-13 16:23:34	j`ey	and you cant impl AsRef in Fn()
2019-09-13 16:24:35	j`ey	and https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=010a0a94e574e7a09e91396ea5a30698 doesnt work
2019-09-13 16:26:30	Lumpio-	I'm not sure what that last version is even trying to do
2019-09-13 16:26:36	Lumpio-	Require Input to be Vec<u8>?
2019-09-13 16:26:45	Lumpio-	At that point you might as well say Parser: Fn(Vec<u8>) -> Vec<u8>
2019-09-13 16:26:58	j`ey	hm
2019-09-13 16:27:08	j`ey	maybe I meant something like Vec<u8>: Into<Input>?
2019-09-13 16:27:10	j`ey	or something
2019-09-13 16:27:13	Lumpio-	However what comes to parsing bytes when I tried out tokio I really liked the Bytes type for parsing
2019-09-13 16:27:18	Lumpio-	(The bytes crate isn't dependent on Tokio)
2019-09-13 16:27:28	Lumpio-	Has a couple of convenience methods Vec doesn't
2019-09-13 16:27:55	Yaniel	byteorder has some too
2019-09-13 16:28:46	j`ey	I dont have the full context, not my code
2019-09-13 16:31:17	Lumpio-	hm
2019-09-13 16:32:49	j`ey	I think they wanted Parser to be able take either &[u8] or &Vec<u8> hence the use of AsRef
2019-09-13 16:36:01	calops	but if you take &[u8], &Vec<u8> will work automatically
2019-09-13 16:36:05	calops	no?
2019-09-13 16:38:32	-->	SisterFister (~SisterFis@catv-178-48-164-108.catv.broadband.hu) has joined ##rust
2019-09-13 16:38:48	j`ey	I asked why they went with AsRef, not heard back yet
2019-09-13 16:39:41	tjis	j`ey: this is actually the pattern i'm following. is there a better way to accomplish something like that?
2019-09-13 16:43:27	-->	kabeero (~quassel@unaffiliated/kabeero) has joined ##rust
2019-09-13 16:44:26	<--	baali (~baali@59.98.237.150) has quit (Quit: Leaving.)
2019-09-13 16:44:36	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 16:46:07	<--	kunningd (~kunningdr@unaffiliated/kunningdruger) has quit (Ping timeout: 245 seconds)
2019-09-13 16:46:16	-->	kunningd (~kunningdr@unaffiliated/kunningdruger) has joined ##rust
2019-09-13 16:47:01	-->	elichai2 (uid212594@gateway/web/irccloud.com/x-uoedvggqaregeizh) has joined ##rust
2019-09-13 16:49:06	<--	baali (~baali@59.98.237.150) has quit (Client Quit)
2019-09-13 16:54:37	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 16:55:08	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:57:13	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Remote host closed the connection)
2019-09-13 16:57:38	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined ##rust
2019-09-13 16:58:08	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 16:58:38	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 16:58:49	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-09-13 17:02:08	<--	stephaneyfx (~stephaney@192.157.123.229) has quit (Quit: Leaving)
2019-09-13 17:04:43	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-09-13 17:05:45	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Remote host closed the connection)
2019-09-13 17:06:06	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-09-13 17:06:10	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-09-13 17:06:49	<--	sysKin (~syskin@61-245-149-216.3df595.adl.nbn.aussiebb.net) has quit (Ping timeout: 240 seconds)
2019-09-13 17:08:16	<--	murla (~murla@146.120.13.152) has quit (Ping timeout: 246 seconds)
2019-09-13 17:08:25	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 265 seconds)
2019-09-13 17:10:36	<--	jenny-m (~jdm-@75.98.19.133) has quit (Quit: Leaving...)
2019-09-13 17:12:01	<--	tostr (~tostr@unaffiliated/tostr) has quit (Ping timeout: 276 seconds)
2019-09-13 17:18:46	-->	murla (~murla@146.120.13.152) has joined ##rust
2019-09-13 17:19:35	-->	analogue (~analogue@129.63.253.88) has joined ##rust
2019-09-13 17:19:49	<--	ravenousmoose (~ravenousm@ptr-cud5aqfz6yldre36cip.18120a2.ip6.access.telenet.be) has quit (Ping timeout: 276 seconds)
2019-09-13 17:21:12	<--	Tichodroma (~lutz@fsf/member/Tichodroma) has quit (Quit: leaving)
2019-09-13 17:23:38	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-09-13 17:24:08	-->	t7 (~tommo@2a00:23c5:1284:fc00:a171:8f14:2f0e:83cc) has joined ##rust
2019-09-13 17:24:11	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:24:16	<--	zirpu (~allan@24.35.77.206) has quit (Client Quit)
2019-09-13 17:26:52	-->	nico103 (~nico@24.28.108.183) has joined ##rust
2019-09-13 17:28:15	-->	happycoder (~happycode@14.139.185.114) has joined ##rust
2019-09-13 17:28:52	-->	Ichorio (~Ichorio@2001:16b8:57ca:9600:59de:cc68:6c74:976c) has joined ##rust
2019-09-13 17:28:56	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:31:13	-->	mcoffin (~mcoffin@gateway/tor-sasl/mcoffin) has joined ##rust
2019-09-13 17:35:01	<--	dozn_ (~dozn@S01069050ca3c43c3.vs.shawcable.net) has quit (Read error: Connection reset by peer)
2019-09-13 17:35:13	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-09-13 17:35:53	<--	zirpu (~allan@24.35.77.206) has quit (Quit: WeeChat 2.6)
2019-09-13 17:36:08	-->	zirpu (~allan@24.35.77.206) has joined ##rust
2019-09-13 17:39:02	<--	matthias_bgg_ (~mbgg@37.223.145.235) has quit (Ping timeout: 245 seconds)
2019-09-13 17:40:25	-->	Oct (foobar@poulet.zoy.org) has joined ##rust
2019-09-13 17:42:17	-->	jenny-m (~jdm-@corp-nat.fw1.untrust.tor1.mozilla.com) has joined ##rust
2019-09-13 17:43:45	Oct	hello, I have a crate of mine, when I put foo="2.0.1" in my Cargo file, it fetches version "2.1.0", is this expected?
2019-09-13 17:43:47	<--	pknull (~pooky@184.103.28.136) has quit (Quit: Departing.)
2019-09-13 17:44:12	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 17:44:58	-->	baali (~baali@59.98.237.150) has joined ##rust
2019-09-13 17:45:11	Faux	Yes, 2.0.1 means >=2.0.1 <3. https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
2019-09-13 17:45:16	Oct	mm, this seems to be an expected semver behavior
2019-09-13 17:45:23	Oct	thanks Faux :)
2019-09-13 17:47:09	<--	pknull (~pooky@184.103.28.136) has quit (Client Quit)
2019-09-13 17:47:43	-->	pknull (~pooky@184.103.28.136) has joined ##rust
2019-09-13 17:47:47	<--	Ichorio (~Ichorio@2001:16b8:57ca:9600:59de:cc68:6c74:976c) has quit (Ping timeout: 245 seconds)
2019-09-13 17:48:58	-->	mryandao_ (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-09-13 17:50:43	-->	nepugia (~nephele@200116b864a863004b33f1ed1381bf81.dip.versatel-1u1.de) has joined ##rust
2019-09-13 17:51:19	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-09-13 17:51:26	<--	ellcs (~mantel@193.174.12.196) has quit (Ping timeout: 265 seconds)
2019-10-17 11:12:42	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 11:12:42	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 11:12:42	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 11:12:42	--	Channel ##rust: 560 nicks (2 ops, 0 voices, 558 normals)
2019-10-17 11:12:58	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 11:15:56	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-17 11:17:03	-->	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 11:17:32	-->	ev4rist3 (~phoenix@x4db76dde.dyn.telefonica.de) has joined ##rust
2019-10-17 11:18:52	Xatenev	hmm, I'd like to know more about how vlang.org does their memory safety
2019-10-17 11:18:54	Xatenev	but i dont find a lot of info
2019-10-17 11:19:13	Xatenev	err
2019-10-17 11:19:14	Xatenev	vlang.io
2019-10-17 11:19:40	<--	DTEIT (DTEIT@nat/redhat/x-aqsmvoilvodamjix) has quit (Quit: ZNC 1.7.4 - https://znc.in)
2019-10-17 11:19:46	<--	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2019-10-17 11:20:07	-->	cats3d_ (~quassel@c-73-202-78-90.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 11:21:11	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 11:21:11	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 11:21:11	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 11:21:11	--	Channel ##rust: 560 nicks (2 ops, 0 voices, 558 normals)
2019-10-17 11:21:11	-->	DTEIT (DTEIT@nat/redhat/x-qaruolhwehlnrqss) has joined ##rust
2019-10-17 11:21:22	Faux	It looks like a DSL for C, so presumably just inserts bounds checks, null checks, etc., and doesn't have pointer areithemereatic?
2019-10-17 11:21:28	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 11:22:14	Xatenev	Faux, have you looked at the vlang.io?
2019-10-17 11:22:21	Xatenev	DSL sounds as if you looked at vlang.org, i misstyped that
2019-10-17 11:23:21	Xatenev	yeah no pointer arithmetic
2019-10-17 11:23:26	Xatenev	atleast i dont find it in the dos
2019-10-17 11:23:27	Xatenev	docs*
2019-10-17 11:24:13	-->	t7 (~tommo@2a00:23c5:1284:fc00:3d29:e556:f917:896b) has joined ##rust
2019-10-17 11:24:16	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 11:24:55	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-17 11:25:04	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-17 11:25:18	Xatenev	I do like that you only have to declare a parameter as a reference and the compiler figures out for you whether it should pass a reference or the actual object
2019-10-17 11:25:19	Faux	https://paste.debian.net/1107619/ there's the output for the "json" example on their homepage, after running it through clang-format.
2019-10-17 11:25:19	Xatenev	thats cool
2019-10-17 11:26:36	<--	baali (~baali@59.97.69.245) has quit (Ping timeout: 268 seconds)
2019-10-17 11:31:19	Xatenev	Faux, It can do both it seems
2019-10-17 11:31:39	Xatenev	Does V use LLVM?
2019-10-17 11:31:39	Xatenev	No. V compiles directly to machine code. and V can also emit human readable C, which can then be compiled to run on any platform.
2019-10-17 11:31:50	Yaniel	*eventually
2019-10-17 11:32:16	Faux	Without looking, I am almost certain that they are generating C, then immediately running it through gcc (or clang, but they have decided llvm is evil).
2019-10-17 11:32:47	Xatenev	Faux, only for production builds because they don't have their own optimizer I think...
2019-10-17 11:32:50	-->	JWatkins (~quassel@unaffiliated/jwatkins) has joined ##rust
2019-10-17 11:32:52	Xatenev	atleast thats what I can read out of their docs
2019-10-17 11:33:04	Yaniel	oh, they actually have something that works now?
2019-10-17 11:33:17	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:33:18	Yaniel	last time it was brought up all they had was plans and broken code
2019-10-17 11:33:32	j`ey	it can generate C, ish
2019-10-17 11:33:37	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:33:42	Yaniel	and IIRC it was indeed going through C
2019-10-17 11:33:55	Faux	faux@astoria:~/clone/v% strace -yy -ff -eexecve ./v examples/json.v  2>&1 | fgrep 'cc"'
2019-10-17 11:33:57	Faux	[pid 15715] execve("/var/tmp/tcc/bin/tcc", ["/var/tmp/tcc/bin/tcc", "-std=gnu11", "-w", "-Werror=impl
2019-10-17 11:34:08	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:34:10	Faux	Insecure use of temp paths, good job.
2019-10-17 11:34:33	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:35:03	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:35:24	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:35:43	Xatenev	Faux, why insecure?
2019-10-17 11:35:53	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:36:18	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:36:42	Faux	Writing to a predictable path in a directory others control (such as /tmp or /var/tmp) is a classic security vulnerability (except on kernels with the hardening turned on).
2019-10-17 11:36:47	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:37:13	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Max SendQ exceeded)
2019-10-17 11:37:41	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has joined ##rust
2019-10-17 11:38:04	Xatenev	I don't understand how a security vulnerability can result from that
2019-10-17 11:38:19	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 11:38:39	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-17 11:40:14	-->	pedro4 (~pedro4@134.19.179.179) has joined ##rust
2019-10-17 11:40:31	Faux	CWE-377. Simplest case is the attacker creates a symlink from /tmp/temp.txt to /etc/shadow, and root opens and writes to it, and now the system is dead.
2019-10-17 11:41:13	Xatenev	who is the attacker in that case :O
2019-10-17 11:41:20	Faux	Me, a non-root user on the box.
2019-10-17 11:41:59	Xatenev	so what you are saying is i replace /var/tmp/tcc/bin/tcc with a file called temp.txt
2019-10-17 11:42:04	Xatenev	or well a symlink
2019-10-17 11:42:24	Xatenev	well thats not possible
2019-10-17 11:42:29	Xatenev	because of the access rights of the directory `tcc`
2019-10-17 11:42:40	Xatenev	writing is not permitted
2019-10-17 11:42:43	Xatenev	so i dont understand ur example :(
2019-10-17 11:43:04	Faux	The simplest attack does not apply to directories, no. Go read the docs on the classic CWE.
2019-10-17 11:43:36	-->	user9 (984d0e74@dcm-info-22.u-ga.fr) has joined ##rust
2019-10-17 11:44:27	Xatenev	I have read CWE-377 and i dont understand how it applies in this case :/
2019-10-17 11:44:40	Faux	It might not, but it almost certainly does.
2019-10-17 11:45:09	Xatenev	from what I understand it would only if the generated tcc directory would be writeable by `Other`
2019-10-17 11:45:19	Xatenev	otherwise its to be expected that it contains the expected files.
2019-10-17 11:45:54	Faux	I am not doing a security review of a random project beyond pointing out that it would automatically, immediately fail any automatic security scanner.
2019-10-17 11:46:09	Xatenev	:)
2019-10-17 11:46:11	mixi	what does it do if the directory already exists with different permissions/owner than it expects?
2019-10-17 11:46:20	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 11:46:25	j`ey	oh it's using tcc now, cool
2019-10-17 11:46:44	mixi	and if it goes the extra mile to check permissions/owner: does it do it in a racy way?
2019-10-17 11:46:57	-->	baali (~baali@59.98.234.75) has joined ##rust
2019-10-17 11:48:20	Faux	You can probably do that safely now on linux, with mkdirat(2) and friends.
2019-10-17 11:48:33	Faux	Not that anyone would ever bother.
2019-10-17 11:52:36	Faux	Haha, if it can't run /var/tmp/tcc it .. just uses gcc.
2019-10-17 11:53:27	Xatenev	Faux, lol
2019-10-17 11:53:28	Xatenev	^^
2019-10-17 11:56:00	Faux	So, the Makefile has the vuln, it runs "rm -rf /var/tmp/tcc". If you "ln -s /home /var/tmp/tcc" and then someone else runs 'make', they lose their homedir.
2019-10-17 11:56:51	Xatenev	oh yeah
2019-10-17 11:56:54	Xatenev	thats no good
2019-10-17 11:57:30	Faux	Hardened distros, including Ubuntu, ship with YAMA enabled, which should block that, but I didn't test it.
2019-10-17 11:58:01	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-17 11:58:32	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-10-17 11:58:33	Yaniel	ahh the classic "well then just delete... everything?"
2019-10-17 11:58:58	mixi	i'm pretty sure rm -rf doesn't follow symlinks
2019-10-17 11:59:12	Yaniel	a lot of fun was had when steam had a similar bug
2019-10-17 11:59:36	mixi	it would be different if the command was "rm -rf /var/tmp/tcc/" (note the trailing slash)
2019-10-17 11:59:54	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 11:59:59	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-17 12:00:04	Yaniel	I think the initial report was like "steam tried to update itself and now my / is empty"
2019-10-17 12:00:05	Faux	mixi: *flips table*
2019-10-17 12:00:34	Xatenev	mixi, It has a trailing slash.
2019-10-17 12:00:39	-->	Mrbuck (~Mrbuck@ec2-34-202-1-168.compute-1.amazonaws.com) has joined ##rust
2019-10-17 12:00:40	Faux	mixi: It is. But I wasn't aware of that, I only tested it.
2019-10-17 12:02:43	Faux	That zsh tab completion thing, where it draws the /, then removes it if you press return, is now creeping me out.
2019-10-17 12:03:53	<--	lord| (~solenodic@unaffiliated/solenodic) has quit (Ping timeout: 276 seconds)
2019-10-17 12:07:20	Moongoodgirl	isn't like half the point of V that it compiles to C?
2019-10-17 12:08:28	j`ey	Moongoodgirl: dont think so
2019-10-17 12:08:46	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:09:58	Moongoodgirl	huh.
2019-10-17 12:12:14	Yaniel	no, afaik that is more of a technical limitation for now
2019-10-17 12:13:15	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-17 12:13:20	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Ping timeout: 265 seconds)
2019-10-17 12:18:44	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:6cb6:711e:ac2c:ed33) has quit (Quit: Leaving)
2019-10-17 12:20:15	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 12:22:50	elichai2	any way to make this work? https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3e95d748642db2358022268dffe8654a
2019-10-17 12:23:26	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-17 12:26:29	-->	lord| (~solenodic@unaffiliated/solenodic) has joined ##rust
2019-10-17 12:28:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:29:13	voker57	elichai2: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d3a673c9ecf84ddb003265fdee785b50
2019-10-17 12:29:21	Mrbuck	play.rust is copy cat og plat.go ?
2019-10-17 12:29:31	Mrbuck	coped from goland play ?
2019-10-17 12:30:09	elichai2	voker57: hmm why?
2019-10-17 12:30:16	voker57	why what?
2019-10-17 12:30:38	Moongoodgirl	elichai2: Files track their position. After writing data, the position is after the data you just wrote.
2019-10-17 12:30:56	Moongoodgirl	elichai2: If there wasn't any other data in the file, then you're at the end of the file, and read() returns empty.
2019-10-17 12:31:44	Moongoodgirl	Mrbuck: well, it looks different :P
2019-10-17 12:32:24	elichai2	Moongoodgirl: so why is it required even if I use the file descriptor itself?
2019-10-17 12:32:47	Faux	The file descriptor tracks it, not Rust.
2019-10-17 12:33:00	Moongoodgirl	elichai2: You're not using a raw file descriptor; you're using a Rust `File`.
2019-10-17 12:33:01	Faux	POSIX baby.
2019-10-17 12:33:12	elichai2	I know. just a sec :)
2019-10-17 12:33:14	Moongoodgirl	But, yeah, this is an OS thing, not specific to Rust.
2019-10-17 12:33:14	elichai2	Faux: ohh
2019-10-17 12:33:41	Faux	One day we'll invent a file API people can actually use!
2019-10-17 12:33:43	elichai2	i'll look into the seek implementation. thanks :)
2019-10-17 12:33:44	Mrbuck	Moongoodgirl: ok and are you good girl  ?
2019-10-17 12:34:07	 *	Moongoodgirl is a very good girl. Woof. :3
2019-10-17 12:34:10	Mrbuck	I noticed even in rust conf many women
2019-10-17 12:34:13	Mrbuck	I love it
2019-10-17 12:34:31	Mrbuck	Rust is women language I think
2019-10-17 12:34:38	Mrbuck	rustbook coauthor a woman
2019-10-17 12:34:45	Moongoodgirl	/r/unnecessarilygendered
2019-10-17 12:34:46	elichai2	yep :) it calls lseek64(3)
2019-10-17 12:35:23	Moongoodgirl	If we were inventing a file API from scratch, would we still track position?
2019-10-17 12:35:24	Mrbuck	Moongoodgirl:  is that redidt ?
2019-10-17 12:35:35	voker57	probably because Mozilla is SJWs and using gender quotas
2019-10-17 12:38:29	capitol	O_o
2019-10-17 12:38:41	Moongoodgirl	Making a new file API without being tied to current POSIX would actually be quite nice.
2019-10-17 12:39:04	Moongoodgirl	We could have handles to paths, which you could use to unlink a file without accidentally unlinking a different file if it got replaced.
2019-10-17 12:39:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 12:39:33	Faux	https://github.com/FauxFaux/tempfile-fast-rs/blob/cbfe975e52bc07a2e5bafcefd74d194e8a54613f/src/sponge.rs#L9 >.>
2019-10-17 12:39:50	Moongoodgirl	And also the Linux thing where you can make an anonymous file on a given filesystem, and later make a link to it (or not)
2019-10-17 12:40:32	Faux	¬_¬_¬
2019-10-17 12:44:06	Yaniel	>handles to paths, which you could use to unlink a file without accidentally unlinking a different file if it got replaced
2019-10-17 12:44:15	Yaniel	isn't this how linux file descriptors work, at least for file contents?
2019-10-17 12:44:41	Yaniel	s/linux/unix/
2019-10-17 12:45:28	Yaniel	also, a new file api that is not tied to posix is quite a relevant thing for redox, no?
2019-10-17 12:46:08	Moongoodgirl	There's no funlink() though.
2019-10-17 12:46:40	Yaniel	mm right, that would not make sense since hardlinks exist
2019-10-17 12:46:47	Moongoodgirl	And you can't atomically replace a file only if it's a specific file that you expect.
2019-10-17 12:46:48	Yaniel	so it'd have to track which one was used
2019-10-17 12:47:03	Yaniel	right
2019-10-17 12:47:44	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 12:48:42	Moongoodgirl	…or, heck, not even path handles, but just have variants of unlink() and rename() that take device and inode numbers.
2019-10-17 12:49:01	Moongoodgirl	I think that covers all the use cases.
2019-10-17 12:49:10	Yaniel	unlink that takes a file descriptor maybe?
2019-10-17 12:49:18	Yaniel	since that points to the inode
2019-10-17 12:50:55	Moongoodgirl	You need a path too though.
2019-10-17 12:51:00	Moongoodgirl	…like you just pointed out. xD
2019-10-17 12:51:05	Yaniel	...right
2019-10-17 12:51:19	Yaniel	need more coffee
2019-10-17 12:51:23	Yaniel	or more sleep
2019-10-17 12:51:25	Yaniel	or both
2019-10-17 12:52:26	Moongoodgirl	so like `extern "C" fn unlinki(path: *const c::char, device: c::int, inode: c::long)`
2019-10-17 12:53:10	Moongoodgirl	`-> c::int`
2019-10-17 12:53:44	Yaniel	or funlink_from(path, fd) -> int
2019-10-17 12:53:57	Yaniel	if you want to check the contents of the file before removing you need the fd anyway
2019-10-17 12:54:02	Moongoodgirl	true
2019-10-17 12:54:15	Moongoodgirl	but if you only want to check metadata, you don't need to open the file
2019-10-17 12:54:58	-->	rrooij (~rrooij@unaffiliated/rroij) has joined ##rust
2019-10-17 12:55:22	Yaniel	unless you use fstat()
2019-10-17 12:56:58	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 12:57:23	Moongoodgirl	the point is, if you use stat() and unlinki(), you don't need to open()
2019-10-17 12:57:35	Moongoodgirl	but if you use stat() and unlink_from(), you /do/ need to open()
2019-10-17 13:02:09	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 13:05:15	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2019-10-17 13:05:15	<--	zofrex (~zofrex@unaffiliated/zofrex) has quit (Read error: Connection reset by peer)
2019-10-17 13:05:56	-->	zofrex (~zofrex@unaffiliated/zofrex) has joined ##rust
2019-10-17 13:09:40	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:11:52	-->	pjs902 (~quassel@140.184.2.20) has joined ##rust
2019-10-17 13:14:13	-->	crockwork (~crockwork@66.205.193.158) has joined ##rust
2019-10-17 13:18:12	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-10-17 13:18:24	-->	dbohdan (~dbohdan@unaffiliated/dbohdan) has joined ##rust
2019-10-17 13:18:40	<--	andreas31 (~andreas@gateway/tor-sasl/andreas303) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	braydonf (~braydon@gateway/tor-sasl/braydonf) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	mryandao (~mryandao@gateway/tor-sasl/mryandao) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:09	<--	simlay1 (~simlay@gateway/tor-sasl/simlay) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:35	-->	repo (~jokke@jokke.space) has joined ##rust
2019-10-17 13:19:36	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Ping timeout: 260 seconds)
2019-10-17 13:19:37	repo	hi!
2019-10-17 13:20:13	-->	AbedB_ (~AbedBhuty@bzq-79-183-67-120.red.bezeqint.net) has joined ##rust
2019-10-17 13:20:14	repo	i'm playing around with wasm-bindgen and was wondering if there's any way to pass an array of strings to an exported rust function?
2019-10-17 13:21:03	repo	i don't see it listed in the supported types but i thought asking won't hurt
2019-10-17 13:21:13	Yaniel	there is a way to pass strings at least
2019-10-17 13:21:13	j`ey	a Vec<String> might work?
2019-10-17 13:21:34	repo	j`ey: thanks, i'll give it a go
2019-10-17 13:22:24	repo	hmm
2019-10-17 13:22:27	repo	the trait bound `std::boxed::Box<[std::string::String]>: wasm_bindgen::convert::traits::FromWasmAbi` is not satisfied: the trait `wasm_bindgen::convert::traits::FromWasmAbi` is not implemented for `std::boxed::Box<[std::string::String]>
2019-10-17 13:23:00	<--	AbedB (~AbedBhuty@bzq-79-176-90-216.red.bezeqint.net) has quit (Ping timeout: 246 seconds)
2019-10-17 13:23:46	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 13:24:04	repo	or maybe it's an x-y problem... i'm trying to do fuzzy search on a list of elements. if i could have a growing vector stored in a struct i guess i could add the strings one by one (while storing them in this vector)
2019-10-17 13:24:24	repo	but i'm a total rust noobie so..
2019-10-17 13:24:33	j`ey	Vec<String> is a growing vector
2019-10-17 13:25:06	Yaniel	[String; N] would be an array
2019-10-17 13:25:11	Yaniel	fixed-size
2019-10-17 13:25:21	Yaniel	compile-time fixed-size even
2019-10-17 13:25:38	repo	yeah
2019-10-17 13:25:43	repo	that wouldn't do
2019-10-17 13:26:33	repo	thanks for the quick help! i'll be trying things out!
2019-10-17 13:26:41	Yaniel	an api that provides an iterator over results in order of descending accuracy could be quite nice too
2019-10-17 13:26:48	repo	yeah
2019-10-17 13:26:55	repo	exactly what i was thinking about
2019-10-17 13:27:31	repo	i'm pretty stoked about this whole wasm-bindgen thing. i had no clue how far along it already is
2019-10-17 13:27:34	Yaniel	although that matters more if you are communicating over a network, in which case the wasm bridge is irrelevant anyway :D
2019-10-17 13:30:39	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:32:32	-->	braydonf (~braydon@gateway/tor-sasl/braydonf) has joined ##rust
2019-10-17 13:32:39	-->	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-10-17 13:33:23	-->	mryandao (~mryandao@gateway/tor-sasl/mryandao) has joined ##rust
2019-10-17 13:33:33	-->	simlay (~simlay@gateway/tor-sasl/simlay) has joined ##rust
2019-10-17 13:35:16	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-10-17 13:35:57	-->	horatiohb (~horatiohb@167.99.225.252) has joined ##rust
2019-10-17 13:41:11	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Read error: Connection reset by peer)
2019-10-17 13:43:16	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 13:47:42	-->	AbedB__ (~AbedBhuty@bzq-79-182-102-149.red.bezeqint.net) has joined ##rust
2019-10-17 13:48:47	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-17 13:50:18	<--	AbedB_ (~AbedBhuty@bzq-79-183-67-120.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2019-10-17 13:51:49	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 13:55:33	-->	frostschutz (~frostschu@55d4e7d2.access.ecotel.net) has joined ##rust
2019-10-17 14:00:08	-->	rustico (~nbases@2800:40:28:19d:d4e1:bbd7:7b28:4ce0) has joined ##rust
2019-10-17 14:02:34	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 14:04:59	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 14:05:13	-->	narispo (~narispo@37.167.10.175) has joined ##rust
2019-10-17 14:06:51	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Quit: osa1)
2019-10-17 14:06:58	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 245 seconds)
2019-10-17 14:07:07	-->	osa1 (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 14:08:46	<--	Mrbuck (~Mrbuck@ec2-34-202-1-168.compute-1.amazonaws.com) has quit (Quit: .)
2019-10-17 14:11:06	-->	Havohey (~Havohey@185.52.147.240) has joined ##rust
2019-10-17 14:11:10	-->	EvilKhaosKat (~evilkhaos@134.17.27.127) has joined ##rust
2019-10-17 14:13:45	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 14:16:44	-->	xj (~xj@pa49-197-89-21.pa.qld.optusnet.com.au) has joined ##rust
2019-10-17 14:16:47	-->	federico1 (~federico1@opensuse/member/Federico-Mena) has joined ##rust
2019-10-17 14:18:03	<--	EvilKhaosKat (~evilkhaos@134.17.27.127) has quit
2019-10-17 14:21:52	-->	EvilKhaosKat (~evilkhaos@134.17.27.127) has joined ##rust
2019-10-17 14:21:55	<--	xj (~xj@pa49-197-89-21.pa.qld.optusnet.com.au) has quit (Remote host closed the connection)
2019-10-17 14:23:49	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-17 14:23:59	-->	andreas31 (~andreas@gateway/tor-sasl/andreas303) has joined ##rust
2019-10-17 14:27:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 14:28:28	-->	ggVGc (~ggVGc@unaffiliated/walt) has joined ##rust
2019-10-17 14:29:05	-->	jenny-m (~jdm-@69-196-166-55.dsl.teksavvy.com) has joined ##rust
2019-10-17 14:29:37	<--	kurashu89 (~kurashu89@2601:c6:c100:b840:44af:99c:fc6:9ee4) has quit (Remote host closed the connection)
2019-10-17 14:30:24	-->	kurashu89 (~kurashu89@2601:c6:c100:b840:31f1:76f2:8e22:614e) has joined ##rust
2019-10-17 14:32:41	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-17 14:35:09	-->	tmager (~Thunderbi@96.78.200.121) has joined ##rust
2019-10-17 14:35:37	<--	cheakoirccloud (uid293319@gateway/web/irccloud.com/x-fmelhqwwrknkflgp) has quit (Quit: Connection closed for inactivity)
2019-10-17 14:35:55	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 14:44:03	ZirconiumX	Rust semantics question. If I make a memory access in a function that is ultimately never used, is the compiler allowed to optimise out that memory access?
2019-10-17 14:44:11	sfackler	yes
2019-10-17 14:44:18	sfackler	unless you use volatile loads
2019-10-17 14:44:27	Lumpio-	...in a function that's never used?
2019-10-17 14:44:35	Lumpio-	Oooh or is it that the memory access is never used or
2019-10-17 14:46:27	ZirconiumX	The memory access :P
2019-10-17 14:46:27	<--	hexfive (~hexfive@50.35.80.237) has quit (Quit: WeeChat 2.6)
2019-10-17 14:46:42	ZirconiumX	Say I'm populating a struct with data from a table, but don't use some of the fields of it
2019-10-17 14:49:29	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 14:50:20	-->	ytain (~ghfg@2607:f2c0:921d:7a00:bcb3:a156:de4f:3301) has joined ##rust
2019-10-17 14:50:25	-->	xsoultartar (~xsoultart@2001:268:c0a4:817:784f:8cc0:dd:6f62) has joined ##rust
2019-10-17 14:52:57	j`ey	that's a tricky case, since you may use them in other functions?
2019-10-17 14:53:19	j`ey	(or if the struct is local only, then yes, they should be able to be removed)
2019-10-17 14:55:29	vorner	Especially if you get a warning that the field is assigned but never used (I don't remember the exact wording), then I think rustc is allowed to both remove the write and the actual field from the structure.
2019-10-17 14:57:08	Lumpio-	I smell an X-Y problem
2019-10-17 14:57:18	Lumpio-	ZirconiumX: Why does it matter if it's optimized out or not
2019-10-17 14:57:25	Lumpio-	Are you doing something funny or just wondering about performance
2019-10-17 14:57:40	ZirconiumX	MMIO side effects, for example
2019-10-17 14:57:47	ZirconiumX	Also in general performance
2019-10-17 14:58:07	Lumpio-	For any sort of memory-mapped IO you should always use volatile accesses
2019-10-17 14:58:21	Lumpio-	https://crates.io/crates/vcell there
2019-10-17 14:59:12	ZirconiumX	I realise this
2019-10-17 15:02:38	ZirconiumX	Having written a device support crate I feel relatively experienced on MMIO
2019-10-17 15:04:50	Lumpio-	Well at any rate, I'm pretty sure the compile is allowed to optimize out anything that doesn't have side effects in the execution model it assumes
2019-10-17 15:05:26	-->	samhh (~sam@90.240.233.29) has joined ##rust
2019-10-17 15:05:41	Lumpio-	And the model does not assume that a memory location might be an IO register
2019-10-17 15:05:44	ZirconiumX	Which is why it doesn't hurt to know what that execution model is
2019-10-17 15:06:14	<--	jenny-m (~jdm-@69-196-166-55.dsl.teksavvy.com) has quit (Remote host closed the connection)
2019-10-17 15:06:23	Lumpio-	I wonder if it's documented anywhere
2019-10-17 15:06:26	-->	lauromoura__ (~lauromour@2804:7f5:f380:8d0e:cdec:5eac:d0db:6467) has joined ##rust
2019-10-17 15:06:33	Lumpio-	Seeing how sparse the documentation on internals is I bet you'll have to dig into LLVM's documentation
2019-10-17 15:07:15	<--	narispo (~narispo@37.167.10.175) has quit (Ping timeout: 240 seconds)
2019-10-17 15:07:53	Lumpio-	But I'm fairly sure, just like any other compiler, it has the "memory access doesn't have side effects, and unless told otherwise, memory doesn't change unless my thread changes it" assumption because otherwise it couldn't do many nice optimizations
2019-10-17 15:08:00	Lumpio-	Wonder if there's aformal name for that
2019-10-17 15:08:55	<--	lauromoura (~lauromour@2804:7f5:f380:de2c:a599:e1d3:3e9d:92b4) has quit (Ping timeout: 250 seconds)
2019-10-17 15:09:36	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-17 15:13:13	<--	jokoon (~jokoon@unaffiliated/jokoon) has quit (Read error: Connection reset by peer)
2019-10-17 15:24:54	nerdypepper	i am trying to iterate over a byte array, generated with `as_bytes`, and find the sum over it with `.iter().sum()` but this results in a panic
2019-10-17 15:24:59	<--	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-10-17 15:25:25	nerdypepper	is this because the size of a u8 is not enough for the sum?
2019-10-17 15:25:35	-->	samrg472_ (~samrg472@gateway/tor-sasl/samrg472) has joined ##rust
2019-10-17 15:25:56	Kinnison	Probably yes
2019-10-17 15:26:04	<--	samrg472 (~samrg472@gateway/tor-sasl/samrg472) has quit (Ping timeout: 260 seconds)
2019-10-17 15:26:06	nerdypepper	why does the sum of a [u8] have to be of type u8, is there any way i can specify the sum to be a, say u32?
2019-10-17 15:26:07	Kinnison	.iter().map(|b| b as usize).sum()
2019-10-17 15:26:09	Kinnison	might do better
2019-10-17 15:26:11	nerdypepper	ahhh
2019-10-17 15:26:16	Kinnison	(guessing)
2019-10-17 15:26:16	nerdypepper	gotcha
2019-10-17 15:26:33	nerdypepper	i was thinking along the lines of `.sum::<i32>()` or something
2019-10-17 15:27:41	nerdypepper	thanks again Kinnison :D
2019-10-17 15:27:50	Kinnison	No problem :D
2019-10-17 15:31:47	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 15:32:48	<--	_Vi (~vi@2001:470:7bd6:1000::2) has quit (Ping timeout: 245 seconds)
2019-10-17 15:33:11	-->	unreal (~unreal@unaffiliated/unreal) has joined ##rust
2019-10-17 15:38:31	oherrala	even better to use .iter().map(usize::from).sum() if possible
2019-10-17 15:39:04	oherrala	since "b as usize" can lead to funny bugs if someone someday changes what type b is
2019-10-17 15:39:46	Kinnison	true
2019-10-17 15:40:37	-->	narispo (~narispo@37.167.97.1) has joined ##rust
2019-10-17 15:41:28	<--	efm (~efm@vpn.tummy.com) has quit (Read error: Connection reset by peer)
2019-10-17 15:45:31	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-17 15:46:11	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-17 15:55:49	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-17 15:55:49	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-17 15:55:49	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-17 15:55:49	--	Channel ##rust: 578 nicks (2 ops, 0 voices, 576 normals)
2019-10-17 15:56:04	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-17 15:58:53	<--	EvilKhaosKat (~evilkhaos@134.17.27.127) has quit (Remote host closed the connection)
2019-10-17 16:05:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 16:05:57	<--	danieldg (~me@about/networking/240.0.0.0/danieldg) has quit (Ping timeout: 240 seconds)
2019-10-17 16:09:55	-->	danieldg (~me@about/networking/240.0.0.0/danieldg) has joined ##rust
2019-10-17 16:11:50	<--	nokdoot (~nokdoot@211.205.207.39) has quit (Remote host closed the connection)
2019-10-17 16:12:26	<--	narispo (~narispo@37.167.97.1) has quit (Read error: Connection reset by peer)
2019-10-17 16:12:48	-->	narispo (~narispo@89.227.232.106) has joined ##rust
2019-10-17 16:14:04	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:17:35	-->	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has joined ##rust
2019-10-17 16:20:01	<--	OmniMancer (~Paul@101.100.137.239) has quit (Quit: Leaving.)
2019-10-17 16:21:02	-->	osa1_ (~osa1@haskell/developer/osa1) has joined ##rust
2019-10-17 16:23:14	<--	efm (~efm@c-71-56-234-252.hsd1.co.comcast.net) has quit (Ping timeout: 276 seconds)
2019-10-17 16:25:16	-->	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has joined ##rust
2019-10-17 16:25:33	-->	_Vi (~vi@2001:470:7bd6:1000::2) has joined ##rust
2019-10-17 16:29:05	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 276 seconds)
2019-10-17 16:30:18	<--	ytain (~ghfg@2607:f2c0:921d:7a00:bcb3:a156:de4f:3301) has quit (Ping timeout: 245 seconds)
2019-10-17 16:30:57	<--	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has quit (Ping timeout: 240 seconds)
2019-10-17 16:31:22	<--	royal_screwup21 (89de72f4@gateway/web/cgi-irc/kiwiirc.com/ip.137.222.114.244) has quit (Remote host closed the connection)
2019-10-17 16:33:03	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-17 16:33:21	-->	ytain (~ghfg@2607:f2c0:9220:2f00:ed18:befc:1f8a:d5cb) has joined ##rust
2019-10-17 16:34:48	tjis	is it possible to use a dedicated documentation file, rather than a documentation comment? such as for module-wide documentation
2019-10-17 16:35:25	Faux	Not afaik. You can put nearly nothing except comments in your mod.rs, though, which is common.
2019-10-17 16:35:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:36:20	Kinnison	https://github.com/rust-lang/rust/issues/44732
2019-10-17 16:36:25	Kinnison	tracking issue for external docs ^^^
2019-10-17 16:39:26	tjis	I'm just mildly annoyed by having to prepend each line with ///
2019-10-17 16:41:09	-->	brandly (~brandly@c-24-61-240-6.hsd1.ma.comcast.net) has joined ##rust
2019-10-17 16:47:23	<--	osa1_ (~osa1@haskell/developer/osa1) has quit (Ping timeout: 245 seconds)
2019-10-17 16:47:53	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-17 16:48:39	<--	pinkieval (~progval@pdpc/supporter/student/progval) has quit (Quit: We're here, we're queer, connection reset by peer.)
2019-10-17 16:49:02	-->	pinkieval (~progval@pdpc/supporter/student/progval) has joined ##rust
2019-10-17 16:49:28	-->	flaviodesousa (~flaviodes@213.187.85.4) has joined ##rust
2019-10-17 16:52:52	faern	/! if it's a module comment.
2019-10-17 16:52:59	faern	//! *
2019-10-17 16:53:29	faern	tjis: Or would you also want to lift out the comments for functions/methods/types out of the code? That would be very hard to follow IMO.
2019-10-17 16:53:58	faern	If you have a decent IDE it will just auto-fill the comment start when you hit enter if you are already on a comment line.
2019-10-17 16:55:08	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-17 16:55:56	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 16:59:42	-->	gkmngrgn (~gkmngrgn@2a02:8109:a180:1590:b85c:ed2f:d3af:899a) has joined ##rust
2019-10-17 17:01:35	<--	gkmngrgn (~gkmngrgn@2a02:8109:a180:1590:b85c:ed2f:d3af:899a) has quit (Client Quit)
2019-10-17 17:07:37	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 17:08:38	-->	AbedB_ (~AbedBhuty@bzq-79-182-93-240.red.bezeqint.net) has joined ##rust
2019-10-17 17:08:43	-->	jenny-m (~jdm-@CPE688f2e0836e3-CM688f2e0836e0.cpe.net.cable.rogers.com) has joined ##rust
2019-10-17 17:10:19	-->	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has joined ##rust
2019-10-17 17:11:59	<--	AbedB__ (~AbedBhuty@bzq-79-182-102-149.red.bezeqint.net) has quit (Ping timeout: 276 seconds)
2019-10-17 17:12:30	<--	est31 (~quassel@gateway/tor-sasl/est31) has quit (Remote host closed the connection)
2019-10-17 17:13:11	-->	est31 (~quassel@gateway/tor-sasl/est31) has joined ##rust
2019-10-17 17:13:44	-->	daum (~daum@50-201-134-18-static.hfc.comcastbusiness.net) has joined ##rust
2019-10-17 17:14:30	--	c-c is now known as Cuckooo
2019-10-17 17:15:09	--	Cuckooo is now known as Cuckoo
2019-10-17 17:15:16	<--	Cuckoo (csmr@hilla.kapsi.fi) has quit (Disconnected by services)
2019-10-17 17:15:42	tjis	faern: no you're right, I meant ##!
2019-10-17 17:15:44	tjis	err
2019-10-17 17:15:46	tjis	/!
2019-10-17 17:15:48	tjis	///!
2019-10-17 17:15:50	tjis	goddammit
2019-10-17 17:15:51	Faux	////!!!!
2019-10-17 17:15:59	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 17:16:20	-->	gareppa (~gareppa@unaffiliated/gareppa) has joined ##rust
2019-10-17 17:16:21	tjis	anyway, yes, module level comments which can easily be multiple paragraphs
2019-10-17 17:16:39	-->	gwillen (~gwillen@unaffiliated/gwillen) has joined ##rust
2019-10-17 17:16:47	daum	hi guys - i have a questoin on using hype in getting query string parameters, i tried let params: HashMap<_, _> = Url::parse(&req.uri().to_string()).unwrap().query_pairs().into_owned().collect(), but req.uri() isn't guaranteed to be a full url (often has /) any suggestions on how to get the params?  Not sure if this is appropriate channel to ask
2019-10-17 17:16:48	Faux	My IDE inserts the appropriate comment when you press return.
2019-10-17 17:20:20	-->	climbingturtle (~climbingt@c213-89-14-151.bredband.comhem.se) has joined ##rust
2019-10-17 17:24:08	tjis	daum: req.uri().query() gets you the query string itself, but as a string. there's other crates to do that though
2019-10-17 17:24:58	daum	tjis, any specific one you'd recommend?  just trying to get a couple of parameters for a specific use case where speed/performance is very important
2019-10-17 17:25:54	<--	ellcs (~mantel@212.12.60.67) has quit (Ping timeout: 246 seconds)
2019-10-17 17:25:55	<--	SiegeLord (~sl@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Quit: It's a joke, it's all a joke.)
2019-10-17 17:26:08	<--	rrooij (~rrooij@unaffiliated/rroij) has quit (Quit: WeeChat 2.6)
2019-10-17 17:27:30	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 265 seconds)
2019-10-17 17:27:30	<--	xsoultartar (~xsoultart@2001:268:c0a4:817:784f:8cc0:dd:6f62) has quit (Quit: Leaving)
2019-10-17 17:27:35	<--	Kaivo (~Kaivo@ec2-35-182-108-102.ca-central-1.compute.amazonaws.com) has quit (Ping timeout: 276 seconds)
2019-10-17 17:27:59	<--	osa1 (~osa1@haskell/developer/osa1) has quit (Ping timeout: 268 seconds)
2019-10-17 17:29:02	-->	efm (~efm@vpn.tummy.com) has joined ##rust
2019-10-17 17:29:06	<--	gareppa (~gareppa@unaffiliated/gareppa) has quit (Quit: Leaving)
2019-10-17 17:33:07	tjis	I think any crate for query string parsing will do just fine and not where your speed concerns are likely going to be
2019-10-17 17:33:33	daum	thanks!
2019-10-17 17:36:48	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-17 17:38:13	-->	stephaneyfx (~stephaney@184.68.160.234) has joined ##rust
2019-10-17 17:45:39	-->	pepper_chico (~pepper_ch@gateway/tor-sasl/pepperchico/x-70212520) has joined ##rust
2019-10-17 17:46:02	<--	Remavas (Remavas@gateway/shell/xshellz/x-tnjqtzxbnyefjxtd) has quit (Ping timeout: 240 seconds)
2019-10-17 17:47:27	-->	Remavas (Remavas@gateway/shell/xshellz/x-hpbxjxofnqivytga) has joined ##rust
2019-10-17 17:49:38	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-17 17:51:00	-->	Lord_of_Life_ (~Lord@unaffiliated/lord-of-life/x-0885362) has joined ##rust
2019-10-18 08:05:45	-->	Syrinxos (~syrinxos@93-34-1-84.ip47.fastwebnet.it) has joined ##rust
2019-10-18 08:05:45	--	Topic for ##rust is "Unofficial channel for the Rust programming language |  Playground https://play.rust-lang.org/ | Discord http://discord.gg/rust-lang | Forum https://users.rust-lang.org | Code of conduct: rust-lang.org/conduct.html | TL;DR: be nice and we'll get along just fine"
2019-10-18 08:05:45	--	Topic set by Manishearth (~Manishear@wikipedia/Manishearth) on Mon, 13 May 2019 05:47:40
2019-10-18 08:05:45	--	Channel ##rust: 558 nicks (2 ops, 0 voices, 556 normals)
2019-10-18 08:06:01	--	Channel created on Tue, 30 Jul 2013 17:50:50
2019-10-18 08:06:36	-->	fsasm (~fsasm@62-178-93-7.cable.dynamic.surfer.at) has joined ##rust
2019-10-18 08:07:12	-->	tsal (~tsal@i59F4AF25.versanet.de) has joined ##rust
2019-10-18 08:10:17	<--	tartarsauce (~xsoultart@133.91.253.129) has quit (Ping timeout: 240 seconds)
2019-10-18 08:11:42	<--	bitwinery (~bitwinery@c-73-37-18-139.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2019-10-18 08:14:28	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 08:17:42	<--	nickmass (~nickmass@nickmass.com) has quit (Quit: Quitting)
2019-10-18 08:19:11	-->	nickmass (~nickmass@nickmass.com) has joined ##rust
2019-10-18 08:19:24	-->	marusich (~marusich@unaffiliated/marusich) has joined ##rust
2019-10-18 08:22:31	-->	david2 (~david2@212-186-25-215.cable.dynamic.surfer.at) has joined ##rust
2019-10-18 08:26:53	-->	nokdoot (~nokdoot@211.205.207.39) has joined ##rust
2019-10-18 08:31:13	-->	m0rphism (~m0rphism@149.172.82.115) has joined ##rust
2019-10-18 08:32:50	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 240 seconds)
2019-10-18 08:35:42	<--	rustacean (~whateverg@128.106.166.91) has quit (Ping timeout: 268 seconds)
2019-10-18 08:39:40	-->	pupskuchen (~pupskuche@unaffiliated/pupskuchen) has joined ##rust
2019-10-18 08:39:51	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Remote host closed the connection)
2019-10-18 08:42:07	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 08:42:33	-->	djapo (~archie@unaffiliated/djapo) has joined ##rust
2019-10-18 08:42:40	<--	SiegeLord (~SiegeLord@c-73-158-78-36.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2019-10-18 08:46:38	-->	CodesInChaos (~cic@unaffiliated/codesinchaos) has joined ##rust
2019-10-18 08:52:43	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-18 08:52:50	<--	baali (~baali@59.98.234.75) has quit (Ping timeout: 240 seconds)
2019-10-18 08:57:17	<--	SiGe (~SiGe@unaffiliated/sige) has quit (Ping timeout: 268 seconds)
2019-10-18 08:58:17	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 246 seconds)
2019-10-18 08:59:44	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-18 09:01:04	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Read error: Connection reset by peer)
2019-10-18 09:02:50	<--	tsal (~tsal@i59F4AF25.versanet.de) has quit (Ping timeout: 240 seconds)
2019-10-18 09:02:58	-->	SiGe (~SiGe@unaffiliated/sige) has joined ##rust
2019-10-18 09:03:21	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 09:04:21	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-18 09:06:19	-->	tsal (~tsal@i59F5F2AE.versanet.de) has joined ##rust
2019-10-18 09:08:05	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 09:11:54	-->	zxq9 (~zxq9@FL1-119-244-161-173.okn.mesh.ad.jp) has joined ##rust
2019-10-18 09:13:33	<--	djapo (~archie@unaffiliated/djapo) has quit (Ping timeout: 250 seconds)
2019-10-18 09:20:18	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-18 09:26:21	-->	pedro4 (~pedro4@134.19.179.179) has joined ##rust
2019-10-18 09:27:30	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 09:35:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 09:36:10	-->	CodesInChaos_ (~cic@unaffiliated/codesinchaos) has joined ##rust
2019-10-18 09:38:02	<--	__gotcha (~Thunderbi@plone/gotcha) has quit (Ping timeout: 265 seconds)
2019-10-18 09:39:59	<--	CodesInChaos (~cic@unaffiliated/codesinchaos) has quit (Ping timeout: 276 seconds)
2019-10-18 09:44:49	<--	t8 (~tommo@2a00:23c5:1284:fc00:e553:9ca:505b:9c6b) has quit (Quit: Konversation terminated!)
2019-10-18 09:48:28	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 09:54:43	-->	ionelmc (uid20175@python/site-packages/ionelmc) has joined ##rust
2019-10-18 09:56:50	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:02:43	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-10-18 10:03:02	-->	javashin (~javashin@unaffiliated/javashin) has joined ##rust
2019-10-18 10:03:27	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:03:57	<--	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has quit (Quit: Leaving)
2019-10-18 10:04:58	-->	Edu4rdSHL (~edu4rdshl@fsf/member/edu4rdshl) has joined ##rust
2019-10-18 10:09:26	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 10:12:29	-->	aLeSD (~aLeSD@139.47.115.104) has joined ##rust
2019-10-18 10:16:54	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:21:12	-->	finwevi (~quassel@2a01:e0a:157:80a0:216:3eff:fe5e:6c7b) has joined ##rust
2019-10-18 10:22:51	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-10-18 10:26:32	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2019-10-18 10:28:29	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:29:50	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-10-18 10:30:18	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined ##rust
2019-10-18 10:32:20	-->	jokoon (~jokoon@unaffiliated/jokoon) has joined ##rust
2019-10-18 10:33:01	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined ##rust
2019-10-18 10:34:06	<--	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has quit (Ping timeout: 268 seconds)
2019-10-18 10:36:25	-->	__gotcha (~Thunderbi@plone/gotcha) has joined ##rust
2019-10-18 10:41:49	<--	lovesegfault (~bemeurer@2600:1700:5f20:83e0::35) has quit (Quit: WeeChat 2.6)
2019-10-18 10:42:30	-->	samhh (~sam@90.240.224.84) has joined ##rust
2019-10-18 10:44:10	-->	toppler (~user@mtop.default.momentoftop.uk0.bigv.io) has joined ##rust
2019-10-18 10:46:41	-->	MrFahrenheit (~zumbi@unaffiliated/rageofthou) has joined ##rust
2019-10-18 10:46:56	<--	javashin (~javashin@unaffiliated/javashin) has quit (Remote host closed the connection)
2019-10-18 10:47:24	-->	ellcs (~mantel@212.12.60.67) has joined ##rust
